var __create2 = Object.create;
var __defProp2 = Object.defineProperty;
var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
var __getOwnPropNames2 = Object.getOwnPropertyNames;
var __getProtoOf2 = Object.getPrototypeOf;
var __hasOwnProp2 = Object.prototype.hasOwnProperty;
var __commonJS2 = (cb, mod2) => function __require() {
  return mod2 || (0, cb[__getOwnPropNames2(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export2 = (target, all) => {
  for (var name in all)
    __defProp2(target, name, { get: all[name], enumerable: true });
};
var __copyProps2 = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames2(from))
      if (!__hasOwnProp2.call(to, key) && key !== except)
        __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM2 = (mod2, isNodeMode, target) => (target = mod2 != null ? __create2(__getProtoOf2(mod2)) : {}, __copyProps2(isNodeMode || !mod2 || !mod2.__esModule ? __defProp2(target, "default", { value: mod2, enumerable: true }) : target, mod2));
var __toCommonJS2 = (mod2) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod2);

// node_modules/.pnpm/@prisma+client@4.1.0_prisma@4.1.0/node_modules/@prisma/client/runtime/index.js
var require_runtime = __commonJS2({
  "node_modules/.pnpm/@prisma+client@4.1.0_prisma@4.1.0/node_modules/@prisma/client/runtime/index.js"(exports, module) {
    "use strict";
    var __create = Object.create;
    var __defProp = Object.defineProperty;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getProtoOf = Object.getPrototypeOf;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
    var __commonJS = (cb, mod2) => function __require() {
      return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
    };
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames(from))
          if (!__hasOwnProp.call(to, key) && key !== except)
            __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target, mod2));
    var __toCommonJS = (mod2) => __copyProps(__defProp({}, "__esModule", { value: true }), mod2);
    var __publicField = (obj, key, value) => {
      __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
      return value;
    };
    var require_lz_string = __commonJS({
      "../../node_modules/.pnpm/lz-string@1.4.4/node_modules/lz-string/libs/lz-string.js"(exports2, module2) {
        var LZString = function() {
          var f = String.fromCharCode;
          var keyStrBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
          var keyStrUriSafe = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$";
          var baseReverseDic = {};
          function getBaseValue(alphabet, character) {
            if (!baseReverseDic[alphabet]) {
              baseReverseDic[alphabet] = {};
              for (var i = 0; i < alphabet.length; i++) {
                baseReverseDic[alphabet][alphabet.charAt(i)] = i;
              }
            }
            return baseReverseDic[alphabet][character];
          }
          __name(getBaseValue, "getBaseValue");
          var LZString2 = {
            compressToBase64: function(input) {
              if (input == null)
                return "";
              var res = LZString2._compress(input, 6, function(a) {
                return keyStrBase64.charAt(a);
              });
              switch (res.length % 4) {
                default:
                case 0:
                  return res;
                case 1:
                  return res + "===";
                case 2:
                  return res + "==";
                case 3:
                  return res + "=";
              }
            },
            decompressFromBase64: function(input) {
              if (input == null)
                return "";
              if (input == "")
                return null;
              return LZString2._decompress(input.length, 32, function(index) {
                return getBaseValue(keyStrBase64, input.charAt(index));
              });
            },
            compressToUTF16: function(input) {
              if (input == null)
                return "";
              return LZString2._compress(input, 15, function(a) {
                return f(a + 32);
              }) + " ";
            },
            decompressFromUTF16: function(compressed) {
              if (compressed == null)
                return "";
              if (compressed == "")
                return null;
              return LZString2._decompress(compressed.length, 16384, function(index) {
                return compressed.charCodeAt(index) - 32;
              });
            },
            compressToUint8Array: function(uncompressed) {
              var compressed = LZString2.compress(uncompressed);
              var buf = new Uint8Array(compressed.length * 2);
              for (var i = 0, TotalLen = compressed.length; i < TotalLen; i++) {
                var current_value = compressed.charCodeAt(i);
                buf[i * 2] = current_value >>> 8;
                buf[i * 2 + 1] = current_value % 256;
              }
              return buf;
            },
            decompressFromUint8Array: function(compressed) {
              if (compressed === null || compressed === void 0) {
                return LZString2.decompress(compressed);
              } else {
                var buf = new Array(compressed.length / 2);
                for (var i = 0, TotalLen = buf.length; i < TotalLen; i++) {
                  buf[i] = compressed[i * 2] * 256 + compressed[i * 2 + 1];
                }
                var result = [];
                buf.forEach(function(c) {
                  result.push(f(c));
                });
                return LZString2.decompress(result.join(""));
              }
            },
            compressToEncodedURIComponent: function(input) {
              if (input == null)
                return "";
              return LZString2._compress(input, 6, function(a) {
                return keyStrUriSafe.charAt(a);
              });
            },
            decompressFromEncodedURIComponent: function(input) {
              if (input == null)
                return "";
              if (input == "")
                return null;
              input = input.replace(/ /g, "+");
              return LZString2._decompress(input.length, 32, function(index) {
                return getBaseValue(keyStrUriSafe, input.charAt(index));
              });
            },
            compress: function(uncompressed) {
              return LZString2._compress(uncompressed, 16, function(a) {
                return f(a);
              });
            },
            _compress: function(uncompressed, bitsPerChar, getCharFromInt) {
              if (uncompressed == null)
                return "";
              var i, value, context_dictionary = {}, context_dictionaryToCreate = {}, context_c = "", context_wc = "", context_w = "", context_enlargeIn = 2, context_dictSize = 3, context_numBits = 2, context_data = [], context_data_val = 0, context_data_position = 0, ii;
              for (ii = 0; ii < uncompressed.length; ii += 1) {
                context_c = uncompressed.charAt(ii);
                if (!Object.prototype.hasOwnProperty.call(context_dictionary, context_c)) {
                  context_dictionary[context_c] = context_dictSize++;
                  context_dictionaryToCreate[context_c] = true;
                }
                context_wc = context_w + context_c;
                if (Object.prototype.hasOwnProperty.call(context_dictionary, context_wc)) {
                  context_w = context_wc;
                } else {
                  if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
                    if (context_w.charCodeAt(0) < 256) {
                      for (i = 0; i < context_numBits; i++) {
                        context_data_val = context_data_val << 1;
                        if (context_data_position == bitsPerChar - 1) {
                          context_data_position = 0;
                          context_data.push(getCharFromInt(context_data_val));
                          context_data_val = 0;
                        } else {
                          context_data_position++;
                        }
                      }
                      value = context_w.charCodeAt(0);
                      for (i = 0; i < 8; i++) {
                        context_data_val = context_data_val << 1 | value & 1;
                        if (context_data_position == bitsPerChar - 1) {
                          context_data_position = 0;
                          context_data.push(getCharFromInt(context_data_val));
                          context_data_val = 0;
                        } else {
                          context_data_position++;
                        }
                        value = value >> 1;
                      }
                    } else {
                      value = 1;
                      for (i = 0; i < context_numBits; i++) {
                        context_data_val = context_data_val << 1 | value;
                        if (context_data_position == bitsPerChar - 1) {
                          context_data_position = 0;
                          context_data.push(getCharFromInt(context_data_val));
                          context_data_val = 0;
                        } else {
                          context_data_position++;
                        }
                        value = 0;
                      }
                      value = context_w.charCodeAt(0);
                      for (i = 0; i < 16; i++) {
                        context_data_val = context_data_val << 1 | value & 1;
                        if (context_data_position == bitsPerChar - 1) {
                          context_data_position = 0;
                          context_data.push(getCharFromInt(context_data_val));
                          context_data_val = 0;
                        } else {
                          context_data_position++;
                        }
                        value = value >> 1;
                      }
                    }
                    context_enlargeIn--;
                    if (context_enlargeIn == 0) {
                      context_enlargeIn = Math.pow(2, context_numBits);
                      context_numBits++;
                    }
                    delete context_dictionaryToCreate[context_w];
                  } else {
                    value = context_dictionary[context_w];
                    for (i = 0; i < context_numBits; i++) {
                      context_data_val = context_data_val << 1 | value & 1;
                      if (context_data_position == bitsPerChar - 1) {
                        context_data_position = 0;
                        context_data.push(getCharFromInt(context_data_val));
                        context_data_val = 0;
                      } else {
                        context_data_position++;
                      }
                      value = value >> 1;
                    }
                  }
                  context_enlargeIn--;
                  if (context_enlargeIn == 0) {
                    context_enlargeIn = Math.pow(2, context_numBits);
                    context_numBits++;
                  }
                  context_dictionary[context_wc] = context_dictSize++;
                  context_w = String(context_c);
                }
              }
              if (context_w !== "") {
                if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate, context_w)) {
                  if (context_w.charCodeAt(0) < 256) {
                    for (i = 0; i < context_numBits; i++) {
                      context_data_val = context_data_val << 1;
                      if (context_data_position == bitsPerChar - 1) {
                        context_data_position = 0;
                        context_data.push(getCharFromInt(context_data_val));
                        context_data_val = 0;
                      } else {
                        context_data_position++;
                      }
                    }
                    value = context_w.charCodeAt(0);
                    for (i = 0; i < 8; i++) {
                      context_data_val = context_data_val << 1 | value & 1;
                      if (context_data_position == bitsPerChar - 1) {
                        context_data_position = 0;
                        context_data.push(getCharFromInt(context_data_val));
                        context_data_val = 0;
                      } else {
                        context_data_position++;
                      }
                      value = value >> 1;
                    }
                  } else {
                    value = 1;
                    for (i = 0; i < context_numBits; i++) {
                      context_data_val = context_data_val << 1 | value;
                      if (context_data_position == bitsPerChar - 1) {
                        context_data_position = 0;
                        context_data.push(getCharFromInt(context_data_val));
                        context_data_val = 0;
                      } else {
                        context_data_position++;
                      }
                      value = 0;
                    }
                    value = context_w.charCodeAt(0);
                    for (i = 0; i < 16; i++) {
                      context_data_val = context_data_val << 1 | value & 1;
                      if (context_data_position == bitsPerChar - 1) {
                        context_data_position = 0;
                        context_data.push(getCharFromInt(context_data_val));
                        context_data_val = 0;
                      } else {
                        context_data_position++;
                      }
                      value = value >> 1;
                    }
                  }
                  context_enlargeIn--;
                  if (context_enlargeIn == 0) {
                    context_enlargeIn = Math.pow(2, context_numBits);
                    context_numBits++;
                  }
                  delete context_dictionaryToCreate[context_w];
                } else {
                  value = context_dictionary[context_w];
                  for (i = 0; i < context_numBits; i++) {
                    context_data_val = context_data_val << 1 | value & 1;
                    if (context_data_position == bitsPerChar - 1) {
                      context_data_position = 0;
                      context_data.push(getCharFromInt(context_data_val));
                      context_data_val = 0;
                    } else {
                      context_data_position++;
                    }
                    value = value >> 1;
                  }
                }
                context_enlargeIn--;
                if (context_enlargeIn == 0) {
                  context_enlargeIn = Math.pow(2, context_numBits);
                  context_numBits++;
                }
              }
              value = 2;
              for (i = 0; i < context_numBits; i++) {
                context_data_val = context_data_val << 1 | value & 1;
                if (context_data_position == bitsPerChar - 1) {
                  context_data_position = 0;
                  context_data.push(getCharFromInt(context_data_val));
                  context_data_val = 0;
                } else {
                  context_data_position++;
                }
                value = value >> 1;
              }
              while (true) {
                context_data_val = context_data_val << 1;
                if (context_data_position == bitsPerChar - 1) {
                  context_data.push(getCharFromInt(context_data_val));
                  break;
                } else
                  context_data_position++;
              }
              return context_data.join("");
            },
            decompress: function(compressed) {
              if (compressed == null)
                return "";
              if (compressed == "")
                return null;
              return LZString2._decompress(compressed.length, 32768, function(index) {
                return compressed.charCodeAt(index);
              });
            },
            _decompress: function(length, resetValue, getNextValue) {
              var dictionary = [], next, enlargeIn = 4, dictSize = 4, numBits = 3, entry = "", result = [], i, w, bits, resb, maxpower, power, c, data = { val: getNextValue(0), position: resetValue, index: 1 };
              for (i = 0; i < 3; i += 1) {
                dictionary[i] = i;
              }
              bits = 0;
              maxpower = Math.pow(2, 2);
              power = 1;
              while (power != maxpower) {
                resb = data.val & data.position;
                data.position >>= 1;
                if (data.position == 0) {
                  data.position = resetValue;
                  data.val = getNextValue(data.index++);
                }
                bits |= (resb > 0 ? 1 : 0) * power;
                power <<= 1;
              }
              switch (next = bits) {
                case 0:
                  bits = 0;
                  maxpower = Math.pow(2, 8);
                  power = 1;
                  while (power != maxpower) {
                    resb = data.val & data.position;
                    data.position >>= 1;
                    if (data.position == 0) {
                      data.position = resetValue;
                      data.val = getNextValue(data.index++);
                    }
                    bits |= (resb > 0 ? 1 : 0) * power;
                    power <<= 1;
                  }
                  c = f(bits);
                  break;
                case 1:
                  bits = 0;
                  maxpower = Math.pow(2, 16);
                  power = 1;
                  while (power != maxpower) {
                    resb = data.val & data.position;
                    data.position >>= 1;
                    if (data.position == 0) {
                      data.position = resetValue;
                      data.val = getNextValue(data.index++);
                    }
                    bits |= (resb > 0 ? 1 : 0) * power;
                    power <<= 1;
                  }
                  c = f(bits);
                  break;
                case 2:
                  return "";
              }
              dictionary[3] = c;
              w = c;
              result.push(c);
              while (true) {
                if (data.index > length) {
                  return "";
                }
                bits = 0;
                maxpower = Math.pow(2, numBits);
                power = 1;
                while (power != maxpower) {
                  resb = data.val & data.position;
                  data.position >>= 1;
                  if (data.position == 0) {
                    data.position = resetValue;
                    data.val = getNextValue(data.index++);
                  }
                  bits |= (resb > 0 ? 1 : 0) * power;
                  power <<= 1;
                }
                switch (c = bits) {
                  case 0:
                    bits = 0;
                    maxpower = Math.pow(2, 8);
                    power = 1;
                    while (power != maxpower) {
                      resb = data.val & data.position;
                      data.position >>= 1;
                      if (data.position == 0) {
                        data.position = resetValue;
                        data.val = getNextValue(data.index++);
                      }
                      bits |= (resb > 0 ? 1 : 0) * power;
                      power <<= 1;
                    }
                    dictionary[dictSize++] = f(bits);
                    c = dictSize - 1;
                    enlargeIn--;
                    break;
                  case 1:
                    bits = 0;
                    maxpower = Math.pow(2, 16);
                    power = 1;
                    while (power != maxpower) {
                      resb = data.val & data.position;
                      data.position >>= 1;
                      if (data.position == 0) {
                        data.position = resetValue;
                        data.val = getNextValue(data.index++);
                      }
                      bits |= (resb > 0 ? 1 : 0) * power;
                      power <<= 1;
                    }
                    dictionary[dictSize++] = f(bits);
                    c = dictSize - 1;
                    enlargeIn--;
                    break;
                  case 2:
                    return result.join("");
                }
                if (enlargeIn == 0) {
                  enlargeIn = Math.pow(2, numBits);
                  numBits++;
                }
                if (dictionary[c]) {
                  entry = dictionary[c];
                } else {
                  if (c === dictSize) {
                    entry = w + w.charAt(0);
                  } else {
                    return null;
                  }
                }
                result.push(entry);
                dictionary[dictSize++] = w + entry.charAt(0);
                enlargeIn--;
                w = entry;
                if (enlargeIn == 0) {
                  enlargeIn = Math.pow(2, numBits);
                  numBits++;
                }
              }
            }
          };
          return LZString2;
        }();
        if (typeof define === "function" && false) {
          define(function() {
            return LZString;
          });
        } else if (typeof module2 !== "undefined" && module2 != null) {
          module2.exports = LZString;
        }
      }
    });
    var require_color_name = __commonJS({
      "../../node_modules/.pnpm/color-name@1.1.4/node_modules/color-name/index.js"(exports2, module2) {
        "use strict";
        module2.exports = {
          "aliceblue": [240, 248, 255],
          "antiquewhite": [250, 235, 215],
          "aqua": [0, 255, 255],
          "aquamarine": [127, 255, 212],
          "azure": [240, 255, 255],
          "beige": [245, 245, 220],
          "bisque": [255, 228, 196],
          "black": [0, 0, 0],
          "blanchedalmond": [255, 235, 205],
          "blue": [0, 0, 255],
          "blueviolet": [138, 43, 226],
          "brown": [165, 42, 42],
          "burlywood": [222, 184, 135],
          "cadetblue": [95, 158, 160],
          "chartreuse": [127, 255, 0],
          "chocolate": [210, 105, 30],
          "coral": [255, 127, 80],
          "cornflowerblue": [100, 149, 237],
          "cornsilk": [255, 248, 220],
          "crimson": [220, 20, 60],
          "cyan": [0, 255, 255],
          "darkblue": [0, 0, 139],
          "darkcyan": [0, 139, 139],
          "darkgoldenrod": [184, 134, 11],
          "darkgray": [169, 169, 169],
          "darkgreen": [0, 100, 0],
          "darkgrey": [169, 169, 169],
          "darkkhaki": [189, 183, 107],
          "darkmagenta": [139, 0, 139],
          "darkolivegreen": [85, 107, 47],
          "darkorange": [255, 140, 0],
          "darkorchid": [153, 50, 204],
          "darkred": [139, 0, 0],
          "darksalmon": [233, 150, 122],
          "darkseagreen": [143, 188, 143],
          "darkslateblue": [72, 61, 139],
          "darkslategray": [47, 79, 79],
          "darkslategrey": [47, 79, 79],
          "darkturquoise": [0, 206, 209],
          "darkviolet": [148, 0, 211],
          "deeppink": [255, 20, 147],
          "deepskyblue": [0, 191, 255],
          "dimgray": [105, 105, 105],
          "dimgrey": [105, 105, 105],
          "dodgerblue": [30, 144, 255],
          "firebrick": [178, 34, 34],
          "floralwhite": [255, 250, 240],
          "forestgreen": [34, 139, 34],
          "fuchsia": [255, 0, 255],
          "gainsboro": [220, 220, 220],
          "ghostwhite": [248, 248, 255],
          "gold": [255, 215, 0],
          "goldenrod": [218, 165, 32],
          "gray": [128, 128, 128],
          "green": [0, 128, 0],
          "greenyellow": [173, 255, 47],
          "grey": [128, 128, 128],
          "honeydew": [240, 255, 240],
          "hotpink": [255, 105, 180],
          "indianred": [205, 92, 92],
          "indigo": [75, 0, 130],
          "ivory": [255, 255, 240],
          "khaki": [240, 230, 140],
          "lavender": [230, 230, 250],
          "lavenderblush": [255, 240, 245],
          "lawngreen": [124, 252, 0],
          "lemonchiffon": [255, 250, 205],
          "lightblue": [173, 216, 230],
          "lightcoral": [240, 128, 128],
          "lightcyan": [224, 255, 255],
          "lightgoldenrodyellow": [250, 250, 210],
          "lightgray": [211, 211, 211],
          "lightgreen": [144, 238, 144],
          "lightgrey": [211, 211, 211],
          "lightpink": [255, 182, 193],
          "lightsalmon": [255, 160, 122],
          "lightseagreen": [32, 178, 170],
          "lightskyblue": [135, 206, 250],
          "lightslategray": [119, 136, 153],
          "lightslategrey": [119, 136, 153],
          "lightsteelblue": [176, 196, 222],
          "lightyellow": [255, 255, 224],
          "lime": [0, 255, 0],
          "limegreen": [50, 205, 50],
          "linen": [250, 240, 230],
          "magenta": [255, 0, 255],
          "maroon": [128, 0, 0],
          "mediumaquamarine": [102, 205, 170],
          "mediumblue": [0, 0, 205],
          "mediumorchid": [186, 85, 211],
          "mediumpurple": [147, 112, 219],
          "mediumseagreen": [60, 179, 113],
          "mediumslateblue": [123, 104, 238],
          "mediumspringgreen": [0, 250, 154],
          "mediumturquoise": [72, 209, 204],
          "mediumvioletred": [199, 21, 133],
          "midnightblue": [25, 25, 112],
          "mintcream": [245, 255, 250],
          "mistyrose": [255, 228, 225],
          "moccasin": [255, 228, 181],
          "navajowhite": [255, 222, 173],
          "navy": [0, 0, 128],
          "oldlace": [253, 245, 230],
          "olive": [128, 128, 0],
          "olivedrab": [107, 142, 35],
          "orange": [255, 165, 0],
          "orangered": [255, 69, 0],
          "orchid": [218, 112, 214],
          "palegoldenrod": [238, 232, 170],
          "palegreen": [152, 251, 152],
          "paleturquoise": [175, 238, 238],
          "palevioletred": [219, 112, 147],
          "papayawhip": [255, 239, 213],
          "peachpuff": [255, 218, 185],
          "peru": [205, 133, 63],
          "pink": [255, 192, 203],
          "plum": [221, 160, 221],
          "powderblue": [176, 224, 230],
          "purple": [128, 0, 128],
          "rebeccapurple": [102, 51, 153],
          "red": [255, 0, 0],
          "rosybrown": [188, 143, 143],
          "royalblue": [65, 105, 225],
          "saddlebrown": [139, 69, 19],
          "salmon": [250, 128, 114],
          "sandybrown": [244, 164, 96],
          "seagreen": [46, 139, 87],
          "seashell": [255, 245, 238],
          "sienna": [160, 82, 45],
          "silver": [192, 192, 192],
          "skyblue": [135, 206, 235],
          "slateblue": [106, 90, 205],
          "slategray": [112, 128, 144],
          "slategrey": [112, 128, 144],
          "snow": [255, 250, 250],
          "springgreen": [0, 255, 127],
          "steelblue": [70, 130, 180],
          "tan": [210, 180, 140],
          "teal": [0, 128, 128],
          "thistle": [216, 191, 216],
          "tomato": [255, 99, 71],
          "turquoise": [64, 224, 208],
          "violet": [238, 130, 238],
          "wheat": [245, 222, 179],
          "white": [255, 255, 255],
          "whitesmoke": [245, 245, 245],
          "yellow": [255, 255, 0],
          "yellowgreen": [154, 205, 50]
        };
      }
    });
    var require_conversions = __commonJS({
      "../../node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/conversions.js"(exports2, module2) {
        var cssKeywords = require_color_name();
        var reverseKeywords = {};
        for (const key of Object.keys(cssKeywords)) {
          reverseKeywords[cssKeywords[key]] = key;
        }
        var convert = {
          rgb: { channels: 3, labels: "rgb" },
          hsl: { channels: 3, labels: "hsl" },
          hsv: { channels: 3, labels: "hsv" },
          hwb: { channels: 3, labels: "hwb" },
          cmyk: { channels: 4, labels: "cmyk" },
          xyz: { channels: 3, labels: "xyz" },
          lab: { channels: 3, labels: "lab" },
          lch: { channels: 3, labels: "lch" },
          hex: { channels: 1, labels: ["hex"] },
          keyword: { channels: 1, labels: ["keyword"] },
          ansi16: { channels: 1, labels: ["ansi16"] },
          ansi256: { channels: 1, labels: ["ansi256"] },
          hcg: { channels: 3, labels: ["h", "c", "g"] },
          apple: { channels: 3, labels: ["r16", "g16", "b16"] },
          gray: { channels: 1, labels: ["gray"] }
        };
        module2.exports = convert;
        for (const model of Object.keys(convert)) {
          if (!("channels" in convert[model])) {
            throw new Error("missing channels property: " + model);
          }
          if (!("labels" in convert[model])) {
            throw new Error("missing channel labels property: " + model);
          }
          if (convert[model].labels.length !== convert[model].channels) {
            throw new Error("channel and label counts mismatch: " + model);
          }
          const { channels, labels } = convert[model];
          delete convert[model].channels;
          delete convert[model].labels;
          Object.defineProperty(convert[model], "channels", { value: channels });
          Object.defineProperty(convert[model], "labels", { value: labels });
        }
        convert.rgb.hsl = function(rgb) {
          const r = rgb[0] / 255;
          const g = rgb[1] / 255;
          const b = rgb[2] / 255;
          const min2 = Math.min(r, g, b);
          const max2 = Math.max(r, g, b);
          const delta = max2 - min2;
          let h;
          let s;
          if (max2 === min2) {
            h = 0;
          } else if (r === max2) {
            h = (g - b) / delta;
          } else if (g === max2) {
            h = 2 + (b - r) / delta;
          } else if (b === max2) {
            h = 4 + (r - g) / delta;
          }
          h = Math.min(h * 60, 360);
          if (h < 0) {
            h += 360;
          }
          const l = (min2 + max2) / 2;
          if (max2 === min2) {
            s = 0;
          } else if (l <= 0.5) {
            s = delta / (max2 + min2);
          } else {
            s = delta / (2 - max2 - min2);
          }
          return [h, s * 100, l * 100];
        };
        convert.rgb.hsv = function(rgb) {
          let rdif;
          let gdif;
          let bdif;
          let h;
          let s;
          const r = rgb[0] / 255;
          const g = rgb[1] / 255;
          const b = rgb[2] / 255;
          const v = Math.max(r, g, b);
          const diff = v - Math.min(r, g, b);
          const diffc = /* @__PURE__ */ __name(function(c) {
            return (v - c) / 6 / diff + 1 / 2;
          }, "diffc");
          if (diff === 0) {
            h = 0;
            s = 0;
          } else {
            s = diff / v;
            rdif = diffc(r);
            gdif = diffc(g);
            bdif = diffc(b);
            if (r === v) {
              h = bdif - gdif;
            } else if (g === v) {
              h = 1 / 3 + rdif - bdif;
            } else if (b === v) {
              h = 2 / 3 + gdif - rdif;
            }
            if (h < 0) {
              h += 1;
            } else if (h > 1) {
              h -= 1;
            }
          }
          return [
            h * 360,
            s * 100,
            v * 100
          ];
        };
        convert.rgb.hwb = function(rgb) {
          const r = rgb[0];
          const g = rgb[1];
          let b = rgb[2];
          const h = convert.rgb.hsl(rgb)[0];
          const w = 1 / 255 * Math.min(r, Math.min(g, b));
          b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
          return [h, w * 100, b * 100];
        };
        convert.rgb.cmyk = function(rgb) {
          const r = rgb[0] / 255;
          const g = rgb[1] / 255;
          const b = rgb[2] / 255;
          const k = Math.min(1 - r, 1 - g, 1 - b);
          const c = (1 - r - k) / (1 - k) || 0;
          const m = (1 - g - k) / (1 - k) || 0;
          const y = (1 - b - k) / (1 - k) || 0;
          return [c * 100, m * 100, y * 100, k * 100];
        };
        function comparativeDistance(x, y) {
          return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2 + (x[2] - y[2]) ** 2;
        }
        __name(comparativeDistance, "comparativeDistance");
        convert.rgb.keyword = function(rgb) {
          const reversed = reverseKeywords[rgb];
          if (reversed) {
            return reversed;
          }
          let currentClosestDistance = Infinity;
          let currentClosestKeyword;
          for (const keyword of Object.keys(cssKeywords)) {
            const value = cssKeywords[keyword];
            const distance = comparativeDistance(rgb, value);
            if (distance < currentClosestDistance) {
              currentClosestDistance = distance;
              currentClosestKeyword = keyword;
            }
          }
          return currentClosestKeyword;
        };
        convert.keyword.rgb = function(keyword) {
          return cssKeywords[keyword];
        };
        convert.rgb.xyz = function(rgb) {
          let r = rgb[0] / 255;
          let g = rgb[1] / 255;
          let b = rgb[2] / 255;
          r = r > 0.04045 ? ((r + 0.055) / 1.055) ** 2.4 : r / 12.92;
          g = g > 0.04045 ? ((g + 0.055) / 1.055) ** 2.4 : g / 12.92;
          b = b > 0.04045 ? ((b + 0.055) / 1.055) ** 2.4 : b / 12.92;
          const x = r * 0.4124 + g * 0.3576 + b * 0.1805;
          const y = r * 0.2126 + g * 0.7152 + b * 0.0722;
          const z = r * 0.0193 + g * 0.1192 + b * 0.9505;
          return [x * 100, y * 100, z * 100];
        };
        convert.rgb.lab = function(rgb) {
          const xyz = convert.rgb.xyz(rgb);
          let x = xyz[0];
          let y = xyz[1];
          let z = xyz[2];
          x /= 95.047;
          y /= 100;
          z /= 108.883;
          x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
          y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
          z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
          const l = 116 * y - 16;
          const a = 500 * (x - y);
          const b = 200 * (y - z);
          return [l, a, b];
        };
        convert.hsl.rgb = function(hsl) {
          const h = hsl[0] / 360;
          const s = hsl[1] / 100;
          const l = hsl[2] / 100;
          let t2;
          let t3;
          let val;
          if (s === 0) {
            val = l * 255;
            return [val, val, val];
          }
          if (l < 0.5) {
            t2 = l * (1 + s);
          } else {
            t2 = l + s - l * s;
          }
          const t1 = 2 * l - t2;
          const rgb = [0, 0, 0];
          for (let i = 0; i < 3; i++) {
            t3 = h + 1 / 3 * -(i - 1);
            if (t3 < 0) {
              t3++;
            }
            if (t3 > 1) {
              t3--;
            }
            if (6 * t3 < 1) {
              val = t1 + (t2 - t1) * 6 * t3;
            } else if (2 * t3 < 1) {
              val = t2;
            } else if (3 * t3 < 2) {
              val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
            } else {
              val = t1;
            }
            rgb[i] = val * 255;
          }
          return rgb;
        };
        convert.hsl.hsv = function(hsl) {
          const h = hsl[0];
          let s = hsl[1] / 100;
          let l = hsl[2] / 100;
          let smin = s;
          const lmin = Math.max(l, 0.01);
          l *= 2;
          s *= l <= 1 ? l : 2 - l;
          smin *= lmin <= 1 ? lmin : 2 - lmin;
          const v = (l + s) / 2;
          const sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
          return [h, sv * 100, v * 100];
        };
        convert.hsv.rgb = function(hsv) {
          const h = hsv[0] / 60;
          const s = hsv[1] / 100;
          let v = hsv[2] / 100;
          const hi = Math.floor(h) % 6;
          const f = h - Math.floor(h);
          const p = 255 * v * (1 - s);
          const q = 255 * v * (1 - s * f);
          const t = 255 * v * (1 - s * (1 - f));
          v *= 255;
          switch (hi) {
            case 0:
              return [v, t, p];
            case 1:
              return [q, v, p];
            case 2:
              return [p, v, t];
            case 3:
              return [p, q, v];
            case 4:
              return [t, p, v];
            case 5:
              return [v, p, q];
          }
        };
        convert.hsv.hsl = function(hsv) {
          const h = hsv[0];
          const s = hsv[1] / 100;
          const v = hsv[2] / 100;
          const vmin = Math.max(v, 0.01);
          let sl;
          let l;
          l = (2 - s) * v;
          const lmin = (2 - s) * vmin;
          sl = s * vmin;
          sl /= lmin <= 1 ? lmin : 2 - lmin;
          sl = sl || 0;
          l /= 2;
          return [h, sl * 100, l * 100];
        };
        convert.hwb.rgb = function(hwb) {
          const h = hwb[0] / 360;
          let wh = hwb[1] / 100;
          let bl = hwb[2] / 100;
          const ratio = wh + bl;
          let f;
          if (ratio > 1) {
            wh /= ratio;
            bl /= ratio;
          }
          const i = Math.floor(6 * h);
          const v = 1 - bl;
          f = 6 * h - i;
          if ((i & 1) !== 0) {
            f = 1 - f;
          }
          const n = wh + f * (v - wh);
          let r;
          let g;
          let b;
          switch (i) {
            default:
            case 6:
            case 0:
              r = v;
              g = n;
              b = wh;
              break;
            case 1:
              r = n;
              g = v;
              b = wh;
              break;
            case 2:
              r = wh;
              g = v;
              b = n;
              break;
            case 3:
              r = wh;
              g = n;
              b = v;
              break;
            case 4:
              r = n;
              g = wh;
              b = v;
              break;
            case 5:
              r = v;
              g = wh;
              b = n;
              break;
          }
          return [r * 255, g * 255, b * 255];
        };
        convert.cmyk.rgb = function(cmyk) {
          const c = cmyk[0] / 100;
          const m = cmyk[1] / 100;
          const y = cmyk[2] / 100;
          const k = cmyk[3] / 100;
          const r = 1 - Math.min(1, c * (1 - k) + k);
          const g = 1 - Math.min(1, m * (1 - k) + k);
          const b = 1 - Math.min(1, y * (1 - k) + k);
          return [r * 255, g * 255, b * 255];
        };
        convert.xyz.rgb = function(xyz) {
          const x = xyz[0] / 100;
          const y = xyz[1] / 100;
          const z = xyz[2] / 100;
          let r;
          let g;
          let b;
          r = x * 3.2406 + y * -1.5372 + z * -0.4986;
          g = x * -0.9689 + y * 1.8758 + z * 0.0415;
          b = x * 0.0557 + y * -0.204 + z * 1.057;
          r = r > 31308e-7 ? 1.055 * r ** (1 / 2.4) - 0.055 : r * 12.92;
          g = g > 31308e-7 ? 1.055 * g ** (1 / 2.4) - 0.055 : g * 12.92;
          b = b > 31308e-7 ? 1.055 * b ** (1 / 2.4) - 0.055 : b * 12.92;
          r = Math.min(Math.max(0, r), 1);
          g = Math.min(Math.max(0, g), 1);
          b = Math.min(Math.max(0, b), 1);
          return [r * 255, g * 255, b * 255];
        };
        convert.xyz.lab = function(xyz) {
          let x = xyz[0];
          let y = xyz[1];
          let z = xyz[2];
          x /= 95.047;
          y /= 100;
          z /= 108.883;
          x = x > 8856e-6 ? x ** (1 / 3) : 7.787 * x + 16 / 116;
          y = y > 8856e-6 ? y ** (1 / 3) : 7.787 * y + 16 / 116;
          z = z > 8856e-6 ? z ** (1 / 3) : 7.787 * z + 16 / 116;
          const l = 116 * y - 16;
          const a = 500 * (x - y);
          const b = 200 * (y - z);
          return [l, a, b];
        };
        convert.lab.xyz = function(lab) {
          const l = lab[0];
          const a = lab[1];
          const b = lab[2];
          let x;
          let y;
          let z;
          y = (l + 16) / 116;
          x = a / 500 + y;
          z = y - b / 200;
          const y2 = y ** 3;
          const x2 = x ** 3;
          const z2 = z ** 3;
          y = y2 > 8856e-6 ? y2 : (y - 16 / 116) / 7.787;
          x = x2 > 8856e-6 ? x2 : (x - 16 / 116) / 7.787;
          z = z2 > 8856e-6 ? z2 : (z - 16 / 116) / 7.787;
          x *= 95.047;
          y *= 100;
          z *= 108.883;
          return [x, y, z];
        };
        convert.lab.lch = function(lab) {
          const l = lab[0];
          const a = lab[1];
          const b = lab[2];
          let h;
          const hr = Math.atan2(b, a);
          h = hr * 360 / 2 / Math.PI;
          if (h < 0) {
            h += 360;
          }
          const c = Math.sqrt(a * a + b * b);
          return [l, c, h];
        };
        convert.lch.lab = function(lch) {
          const l = lch[0];
          const c = lch[1];
          const h = lch[2];
          const hr = h / 360 * 2 * Math.PI;
          const a = c * Math.cos(hr);
          const b = c * Math.sin(hr);
          return [l, a, b];
        };
        convert.rgb.ansi16 = function(args, saturation = null) {
          const [r, g, b] = args;
          let value = saturation === null ? convert.rgb.hsv(args)[2] : saturation;
          value = Math.round(value / 50);
          if (value === 0) {
            return 30;
          }
          let ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
          if (value === 2) {
            ansi += 60;
          }
          return ansi;
        };
        convert.hsv.ansi16 = function(args) {
          return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
        };
        convert.rgb.ansi256 = function(args) {
          const r = args[0];
          const g = args[1];
          const b = args[2];
          if (r === g && g === b) {
            if (r < 8) {
              return 16;
            }
            if (r > 248) {
              return 231;
            }
            return Math.round((r - 8) / 247 * 24) + 232;
          }
          const ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
          return ansi;
        };
        convert.ansi16.rgb = function(args) {
          let color = args % 10;
          if (color === 0 || color === 7) {
            if (args > 50) {
              color += 3.5;
            }
            color = color / 10.5 * 255;
            return [color, color, color];
          }
          const mult = (~~(args > 50) + 1) * 0.5;
          const r = (color & 1) * mult * 255;
          const g = (color >> 1 & 1) * mult * 255;
          const b = (color >> 2 & 1) * mult * 255;
          return [r, g, b];
        };
        convert.ansi256.rgb = function(args) {
          if (args >= 232) {
            const c = (args - 232) * 10 + 8;
            return [c, c, c];
          }
          args -= 16;
          let rem;
          const r = Math.floor(args / 36) / 5 * 255;
          const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
          const b = rem % 6 / 5 * 255;
          return [r, g, b];
        };
        convert.rgb.hex = function(args) {
          const integer = ((Math.round(args[0]) & 255) << 16) + ((Math.round(args[1]) & 255) << 8) + (Math.round(args[2]) & 255);
          const string = integer.toString(16).toUpperCase();
          return "000000".substring(string.length) + string;
        };
        convert.hex.rgb = function(args) {
          const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
          if (!match) {
            return [0, 0, 0];
          }
          let colorString = match[0];
          if (match[0].length === 3) {
            colorString = colorString.split("").map((char) => {
              return char + char;
            }).join("");
          }
          const integer = parseInt(colorString, 16);
          const r = integer >> 16 & 255;
          const g = integer >> 8 & 255;
          const b = integer & 255;
          return [r, g, b];
        };
        convert.rgb.hcg = function(rgb) {
          const r = rgb[0] / 255;
          const g = rgb[1] / 255;
          const b = rgb[2] / 255;
          const max2 = Math.max(Math.max(r, g), b);
          const min2 = Math.min(Math.min(r, g), b);
          const chroma = max2 - min2;
          let grayscale;
          let hue;
          if (chroma < 1) {
            grayscale = min2 / (1 - chroma);
          } else {
            grayscale = 0;
          }
          if (chroma <= 0) {
            hue = 0;
          } else if (max2 === r) {
            hue = (g - b) / chroma % 6;
          } else if (max2 === g) {
            hue = 2 + (b - r) / chroma;
          } else {
            hue = 4 + (r - g) / chroma;
          }
          hue /= 6;
          hue %= 1;
          return [hue * 360, chroma * 100, grayscale * 100];
        };
        convert.hsl.hcg = function(hsl) {
          const s = hsl[1] / 100;
          const l = hsl[2] / 100;
          const c = l < 0.5 ? 2 * s * l : 2 * s * (1 - l);
          let f = 0;
          if (c < 1) {
            f = (l - 0.5 * c) / (1 - c);
          }
          return [hsl[0], c * 100, f * 100];
        };
        convert.hsv.hcg = function(hsv) {
          const s = hsv[1] / 100;
          const v = hsv[2] / 100;
          const c = s * v;
          let f = 0;
          if (c < 1) {
            f = (v - c) / (1 - c);
          }
          return [hsv[0], c * 100, f * 100];
        };
        convert.hcg.rgb = function(hcg) {
          const h = hcg[0] / 360;
          const c = hcg[1] / 100;
          const g = hcg[2] / 100;
          if (c === 0) {
            return [g * 255, g * 255, g * 255];
          }
          const pure = [0, 0, 0];
          const hi = h % 1 * 6;
          const v = hi % 1;
          const w = 1 - v;
          let mg = 0;
          switch (Math.floor(hi)) {
            case 0:
              pure[0] = 1;
              pure[1] = v;
              pure[2] = 0;
              break;
            case 1:
              pure[0] = w;
              pure[1] = 1;
              pure[2] = 0;
              break;
            case 2:
              pure[0] = 0;
              pure[1] = 1;
              pure[2] = v;
              break;
            case 3:
              pure[0] = 0;
              pure[1] = w;
              pure[2] = 1;
              break;
            case 4:
              pure[0] = v;
              pure[1] = 0;
              pure[2] = 1;
              break;
            default:
              pure[0] = 1;
              pure[1] = 0;
              pure[2] = w;
          }
          mg = (1 - c) * g;
          return [
            (c * pure[0] + mg) * 255,
            (c * pure[1] + mg) * 255,
            (c * pure[2] + mg) * 255
          ];
        };
        convert.hcg.hsv = function(hcg) {
          const c = hcg[1] / 100;
          const g = hcg[2] / 100;
          const v = c + g * (1 - c);
          let f = 0;
          if (v > 0) {
            f = c / v;
          }
          return [hcg[0], f * 100, v * 100];
        };
        convert.hcg.hsl = function(hcg) {
          const c = hcg[1] / 100;
          const g = hcg[2] / 100;
          const l = g * (1 - c) + 0.5 * c;
          let s = 0;
          if (l > 0 && l < 0.5) {
            s = c / (2 * l);
          } else if (l >= 0.5 && l < 1) {
            s = c / (2 * (1 - l));
          }
          return [hcg[0], s * 100, l * 100];
        };
        convert.hcg.hwb = function(hcg) {
          const c = hcg[1] / 100;
          const g = hcg[2] / 100;
          const v = c + g * (1 - c);
          return [hcg[0], (v - c) * 100, (1 - v) * 100];
        };
        convert.hwb.hcg = function(hwb) {
          const w = hwb[1] / 100;
          const b = hwb[2] / 100;
          const v = 1 - b;
          const c = v - w;
          let g = 0;
          if (c < 1) {
            g = (v - c) / (1 - c);
          }
          return [hwb[0], c * 100, g * 100];
        };
        convert.apple.rgb = function(apple) {
          return [apple[0] / 65535 * 255, apple[1] / 65535 * 255, apple[2] / 65535 * 255];
        };
        convert.rgb.apple = function(rgb) {
          return [rgb[0] / 255 * 65535, rgb[1] / 255 * 65535, rgb[2] / 255 * 65535];
        };
        convert.gray.rgb = function(args) {
          return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
        };
        convert.gray.hsl = function(args) {
          return [0, 0, args[0]];
        };
        convert.gray.hsv = convert.gray.hsl;
        convert.gray.hwb = function(gray) {
          return [0, 100, gray[0]];
        };
        convert.gray.cmyk = function(gray) {
          return [0, 0, 0, gray[0]];
        };
        convert.gray.lab = function(gray) {
          return [gray[0], 0, 0];
        };
        convert.gray.hex = function(gray) {
          const val = Math.round(gray[0] / 100 * 255) & 255;
          const integer = (val << 16) + (val << 8) + val;
          const string = integer.toString(16).toUpperCase();
          return "000000".substring(string.length) + string;
        };
        convert.rgb.gray = function(rgb) {
          const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
          return [val / 255 * 100];
        };
      }
    });
    var require_route = __commonJS({
      "../../node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/route.js"(exports2, module2) {
        var conversions = require_conversions();
        function buildGraph() {
          const graph = {};
          const models = Object.keys(conversions);
          for (let len = models.length, i = 0; i < len; i++) {
            graph[models[i]] = {
              distance: -1,
              parent: null
            };
          }
          return graph;
        }
        __name(buildGraph, "buildGraph");
        function deriveBFS(fromModel) {
          const graph = buildGraph();
          const queue = [fromModel];
          graph[fromModel].distance = 0;
          while (queue.length) {
            const current = queue.pop();
            const adjacents = Object.keys(conversions[current]);
            for (let len = adjacents.length, i = 0; i < len; i++) {
              const adjacent = adjacents[i];
              const node = graph[adjacent];
              if (node.distance === -1) {
                node.distance = graph[current].distance + 1;
                node.parent = current;
                queue.unshift(adjacent);
              }
            }
          }
          return graph;
        }
        __name(deriveBFS, "deriveBFS");
        function link(from, to) {
          return function(args) {
            return to(from(args));
          };
        }
        __name(link, "link");
        function wrapConversion(toModel, graph) {
          const path7 = [graph[toModel].parent, toModel];
          let fn = conversions[graph[toModel].parent][toModel];
          let cur = graph[toModel].parent;
          while (graph[cur].parent) {
            path7.unshift(graph[cur].parent);
            fn = link(conversions[graph[cur].parent][cur], fn);
            cur = graph[cur].parent;
          }
          fn.conversion = path7;
          return fn;
        }
        __name(wrapConversion, "wrapConversion");
        module2.exports = function(fromModel) {
          const graph = deriveBFS(fromModel);
          const conversion = {};
          const models = Object.keys(graph);
          for (let len = models.length, i = 0; i < len; i++) {
            const toModel = models[i];
            const node = graph[toModel];
            if (node.parent === null) {
              continue;
            }
            conversion[toModel] = wrapConversion(toModel, graph);
          }
          return conversion;
        };
      }
    });
    var require_color_convert = __commonJS({
      "../../node_modules/.pnpm/color-convert@2.0.1/node_modules/color-convert/index.js"(exports2, module2) {
        var conversions = require_conversions();
        var route = require_route();
        var convert = {};
        var models = Object.keys(conversions);
        function wrapRaw(fn) {
          const wrappedFn = /* @__PURE__ */ __name(function(...args) {
            const arg0 = args[0];
            if (arg0 === void 0 || arg0 === null) {
              return arg0;
            }
            if (arg0.length > 1) {
              args = arg0;
            }
            return fn(args);
          }, "wrappedFn");
          if ("conversion" in fn) {
            wrappedFn.conversion = fn.conversion;
          }
          return wrappedFn;
        }
        __name(wrapRaw, "wrapRaw");
        function wrapRounded(fn) {
          const wrappedFn = /* @__PURE__ */ __name(function(...args) {
            const arg0 = args[0];
            if (arg0 === void 0 || arg0 === null) {
              return arg0;
            }
            if (arg0.length > 1) {
              args = arg0;
            }
            const result = fn(args);
            if (typeof result === "object") {
              for (let len = result.length, i = 0; i < len; i++) {
                result[i] = Math.round(result[i]);
              }
            }
            return result;
          }, "wrappedFn");
          if ("conversion" in fn) {
            wrappedFn.conversion = fn.conversion;
          }
          return wrappedFn;
        }
        __name(wrapRounded, "wrapRounded");
        models.forEach((fromModel) => {
          convert[fromModel] = {};
          Object.defineProperty(convert[fromModel], "channels", { value: conversions[fromModel].channels });
          Object.defineProperty(convert[fromModel], "labels", { value: conversions[fromModel].labels });
          const routes = route(fromModel);
          const routeModels = Object.keys(routes);
          routeModels.forEach((toModel) => {
            const fn = routes[toModel];
            convert[fromModel][toModel] = wrapRounded(fn);
            convert[fromModel][toModel].raw = wrapRaw(fn);
          });
        });
        module2.exports = convert;
      }
    });
    var require_ansi_styles = __commonJS({
      "../../node_modules/.pnpm/ansi-styles@4.3.0/node_modules/ansi-styles/index.js"(exports2, module2) {
        "use strict";
        var wrapAnsi16 = /* @__PURE__ */ __name((fn, offset) => (...args) => {
          const code = fn(...args);
          return `\x1B[${code + offset}m`;
        }, "wrapAnsi16");
        var wrapAnsi256 = /* @__PURE__ */ __name((fn, offset) => (...args) => {
          const code = fn(...args);
          return `\x1B[${38 + offset};5;${code}m`;
        }, "wrapAnsi256");
        var wrapAnsi16m = /* @__PURE__ */ __name((fn, offset) => (...args) => {
          const rgb = fn(...args);
          return `\x1B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
        }, "wrapAnsi16m");
        var ansi2ansi = /* @__PURE__ */ __name((n) => n, "ansi2ansi");
        var rgb2rgb = /* @__PURE__ */ __name((r, g, b) => [r, g, b], "rgb2rgb");
        var setLazyProperty = /* @__PURE__ */ __name((object, property, get) => {
          Object.defineProperty(object, property, {
            get: () => {
              const value = get();
              Object.defineProperty(object, property, {
                value,
                enumerable: true,
                configurable: true
              });
              return value;
            },
            enumerable: true,
            configurable: true
          });
        }, "setLazyProperty");
        var colorConvert;
        var makeDynamicStyles = /* @__PURE__ */ __name((wrap, targetSpace, identity2, isBackground) => {
          if (colorConvert === void 0) {
            colorConvert = require_color_convert();
          }
          const offset = isBackground ? 10 : 0;
          const styles = {};
          for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
            const name = sourceSpace === "ansi16" ? "ansi" : sourceSpace;
            if (sourceSpace === targetSpace) {
              styles[name] = wrap(identity2, offset);
            } else if (typeof suite === "object") {
              styles[name] = wrap(suite[targetSpace], offset);
            }
          }
          return styles;
        }, "makeDynamicStyles");
        function assembleStyles() {
          const codes = /* @__PURE__ */ new Map();
          const styles = {
            modifier: {
              reset: [0, 0],
              bold: [1, 22],
              dim: [2, 22],
              italic: [3, 23],
              underline: [4, 24],
              inverse: [7, 27],
              hidden: [8, 28],
              strikethrough: [9, 29]
            },
            color: {
              black: [30, 39],
              red: [31, 39],
              green: [32, 39],
              yellow: [33, 39],
              blue: [34, 39],
              magenta: [35, 39],
              cyan: [36, 39],
              white: [37, 39],
              blackBright: [90, 39],
              redBright: [91, 39],
              greenBright: [92, 39],
              yellowBright: [93, 39],
              blueBright: [94, 39],
              magentaBright: [95, 39],
              cyanBright: [96, 39],
              whiteBright: [97, 39]
            },
            bgColor: {
              bgBlack: [40, 49],
              bgRed: [41, 49],
              bgGreen: [42, 49],
              bgYellow: [43, 49],
              bgBlue: [44, 49],
              bgMagenta: [45, 49],
              bgCyan: [46, 49],
              bgWhite: [47, 49],
              bgBlackBright: [100, 49],
              bgRedBright: [101, 49],
              bgGreenBright: [102, 49],
              bgYellowBright: [103, 49],
              bgBlueBright: [104, 49],
              bgMagentaBright: [105, 49],
              bgCyanBright: [106, 49],
              bgWhiteBright: [107, 49]
            }
          };
          styles.color.gray = styles.color.blackBright;
          styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
          styles.color.grey = styles.color.blackBright;
          styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;
          for (const [groupName, group] of Object.entries(styles)) {
            for (const [styleName, style] of Object.entries(group)) {
              styles[styleName] = {
                open: `\x1B[${style[0]}m`,
                close: `\x1B[${style[1]}m`
              };
              group[styleName] = styles[styleName];
              codes.set(style[0], style[1]);
            }
            Object.defineProperty(styles, groupName, {
              value: group,
              enumerable: false
            });
          }
          Object.defineProperty(styles, "codes", {
            value: codes,
            enumerable: false
          });
          styles.color.close = "\x1B[39m";
          styles.bgColor.close = "\x1B[49m";
          setLazyProperty(styles.color, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, false));
          setLazyProperty(styles.color, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, false));
          setLazyProperty(styles.color, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, false));
          setLazyProperty(styles.bgColor, "ansi", () => makeDynamicStyles(wrapAnsi16, "ansi16", ansi2ansi, true));
          setLazyProperty(styles.bgColor, "ansi256", () => makeDynamicStyles(wrapAnsi256, "ansi256", ansi2ansi, true));
          setLazyProperty(styles.bgColor, "ansi16m", () => makeDynamicStyles(wrapAnsi16m, "rgb", rgb2rgb, true));
          return styles;
        }
        __name(assembleStyles, "assembleStyles");
        Object.defineProperty(module2, "exports", {
          enumerable: true,
          get: assembleStyles
        });
      }
    });
    var require_has_flag = __commonJS({
      "../../node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js"(exports2, module2) {
        "use strict";
        module2.exports = (flag, argv = process.argv) => {
          const prefix = flag.startsWith("-") ? "" : flag.length === 1 ? "-" : "--";
          const position = argv.indexOf(prefix + flag);
          const terminatorPosition = argv.indexOf("--");
          return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
        };
      }
    });
    var require_supports_color = __commonJS({
      "../../node_modules/.pnpm/supports-color@7.2.0/node_modules/supports-color/index.js"(exports2, module2) {
        "use strict";
        var os3 = require("os");
        var tty = require("tty");
        var hasFlag = require_has_flag();
        var { env: env2 } = process;
        var forceColor;
        if (hasFlag("no-color") || hasFlag("no-colors") || hasFlag("color=false") || hasFlag("color=never")) {
          forceColor = 0;
        } else if (hasFlag("color") || hasFlag("colors") || hasFlag("color=true") || hasFlag("color=always")) {
          forceColor = 1;
        }
        if ("FORCE_COLOR" in env2) {
          if (env2.FORCE_COLOR === "true") {
            forceColor = 1;
          } else if (env2.FORCE_COLOR === "false") {
            forceColor = 0;
          } else {
            forceColor = env2.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env2.FORCE_COLOR, 10), 3);
          }
        }
        function translateLevel(level) {
          if (level === 0) {
            return false;
          }
          return {
            level,
            hasBasic: true,
            has256: level >= 2,
            has16m: level >= 3
          };
        }
        __name(translateLevel, "translateLevel");
        function supportsColor(haveStream, streamIsTTY) {
          if (forceColor === 0) {
            return 0;
          }
          if (hasFlag("color=16m") || hasFlag("color=full") || hasFlag("color=truecolor")) {
            return 3;
          }
          if (hasFlag("color=256")) {
            return 2;
          }
          if (haveStream && !streamIsTTY && forceColor === void 0) {
            return 0;
          }
          const min2 = forceColor || 0;
          if (env2.TERM === "dumb") {
            return min2;
          }
          if (process.platform === "win32") {
            const osRelease = os3.release().split(".");
            if (Number(osRelease[0]) >= 10 && Number(osRelease[2]) >= 10586) {
              return Number(osRelease[2]) >= 14931 ? 3 : 2;
            }
            return 1;
          }
          if ("CI" in env2) {
            if (["TRAVIS", "CIRCLECI", "APPVEYOR", "GITLAB_CI", "GITHUB_ACTIONS", "BUILDKITE"].some((sign2) => sign2 in env2) || env2.CI_NAME === "codeship") {
              return 1;
            }
            return min2;
          }
          if ("TEAMCITY_VERSION" in env2) {
            return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env2.TEAMCITY_VERSION) ? 1 : 0;
          }
          if (env2.COLORTERM === "truecolor") {
            return 3;
          }
          if ("TERM_PROGRAM" in env2) {
            const version = parseInt((env2.TERM_PROGRAM_VERSION || "").split(".")[0], 10);
            switch (env2.TERM_PROGRAM) {
              case "iTerm.app":
                return version >= 3 ? 3 : 2;
              case "Apple_Terminal":
                return 2;
            }
          }
          if (/-256(color)?$/i.test(env2.TERM)) {
            return 2;
          }
          if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env2.TERM)) {
            return 1;
          }
          if ("COLORTERM" in env2) {
            return 1;
          }
          return min2;
        }
        __name(supportsColor, "supportsColor");
        function getSupportLevel(stream2) {
          const level = supportsColor(stream2, stream2 && stream2.isTTY);
          return translateLevel(level);
        }
        __name(getSupportLevel, "getSupportLevel");
        module2.exports = {
          supportsColor: getSupportLevel,
          stdout: translateLevel(supportsColor(true, tty.isatty(1))),
          stderr: translateLevel(supportsColor(true, tty.isatty(2)))
        };
      }
    });
    var require_util = __commonJS({
      "../../node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/util.js"(exports2, module2) {
        "use strict";
        var stringReplaceAll = /* @__PURE__ */ __name((string, substring, replacer) => {
          let index = string.indexOf(substring);
          if (index === -1) {
            return string;
          }
          const substringLength = substring.length;
          let endIndex = 0;
          let returnValue = "";
          do {
            returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
            endIndex = index + substringLength;
            index = string.indexOf(substring, endIndex);
          } while (index !== -1);
          returnValue += string.substr(endIndex);
          return returnValue;
        }, "stringReplaceAll");
        var stringEncaseCRLFWithFirstIndex = /* @__PURE__ */ __name((string, prefix, postfix, index) => {
          let endIndex = 0;
          let returnValue = "";
          do {
            const gotCR = string[index - 1] === "\r";
            returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? "\r\n" : "\n") + postfix;
            endIndex = index + 1;
            index = string.indexOf("\n", endIndex);
          } while (index !== -1);
          returnValue += string.substr(endIndex);
          return returnValue;
        }, "stringEncaseCRLFWithFirstIndex");
        module2.exports = {
          stringReplaceAll,
          stringEncaseCRLFWithFirstIndex
        };
      }
    });
    var require_templates = __commonJS({
      "../../node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/templates.js"(exports2, module2) {
        "use strict";
        var TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
        var STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
        var STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
        var ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;
        var ESCAPES = /* @__PURE__ */ new Map([
          ["n", "\n"],
          ["r", "\r"],
          ["t", "	"],
          ["b", "\b"],
          ["f", "\f"],
          ["v", "\v"],
          ["0", "\0"],
          ["\\", "\\"],
          ["e", "\x1B"],
          ["a", "\x07"]
        ]);
        function unescape(c) {
          const u = c[0] === "u";
          const bracket = c[1] === "{";
          if (u && !bracket && c.length === 5 || c[0] === "x" && c.length === 3) {
            return String.fromCharCode(parseInt(c.slice(1), 16));
          }
          if (u && bracket) {
            return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
          }
          return ESCAPES.get(c) || c;
        }
        __name(unescape, "unescape");
        function parseArguments(name, arguments_) {
          const results = [];
          const chunks = arguments_.trim().split(/\s*,\s*/g);
          let matches;
          for (const chunk of chunks) {
            const number = Number(chunk);
            if (!Number.isNaN(number)) {
              results.push(number);
            } else if (matches = chunk.match(STRING_REGEX)) {
              results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));
            } else {
              throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
            }
          }
          return results;
        }
        __name(parseArguments, "parseArguments");
        function parseStyle(style) {
          STYLE_REGEX.lastIndex = 0;
          const results = [];
          let matches;
          while ((matches = STYLE_REGEX.exec(style)) !== null) {
            const name = matches[1];
            if (matches[2]) {
              const args = parseArguments(name, matches[2]);
              results.push([name].concat(args));
            } else {
              results.push([name]);
            }
          }
          return results;
        }
        __name(parseStyle, "parseStyle");
        function buildStyle(chalk12, styles) {
          const enabled = {};
          for (const layer of styles) {
            for (const style of layer.styles) {
              enabled[style[0]] = layer.inverse ? null : style.slice(1);
            }
          }
          let current = chalk12;
          for (const [styleName, styles2] of Object.entries(enabled)) {
            if (!Array.isArray(styles2)) {
              continue;
            }
            if (!(styleName in current)) {
              throw new Error(`Unknown Chalk style: ${styleName}`);
            }
            current = styles2.length > 0 ? current[styleName](...styles2) : current[styleName];
          }
          return current;
        }
        __name(buildStyle, "buildStyle");
        module2.exports = (chalk12, temporary) => {
          const styles = [];
          const chunks = [];
          let chunk = [];
          temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
            if (escapeCharacter) {
              chunk.push(unescape(escapeCharacter));
            } else if (style) {
              const string = chunk.join("");
              chunk = [];
              chunks.push(styles.length === 0 ? string : buildStyle(chalk12, styles)(string));
              styles.push({ inverse, styles: parseStyle(style) });
            } else if (close) {
              if (styles.length === 0) {
                throw new Error("Found extraneous } in Chalk template literal");
              }
              chunks.push(buildStyle(chalk12, styles)(chunk.join("")));
              chunk = [];
              styles.pop();
            } else {
              chunk.push(character);
            }
          });
          chunks.push(chunk.join(""));
          if (styles.length > 0) {
            const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? "" : "s"} (\`}\`)`;
            throw new Error(errMessage);
          }
          return chunks.join("");
        };
      }
    });
    var require_source = __commonJS({
      "../../node_modules/.pnpm/chalk@4.1.2/node_modules/chalk/source/index.js"(exports2, module2) {
        "use strict";
        var ansiStyles = require_ansi_styles();
        var { stdout: stdoutColor, stderr: stderrColor } = require_supports_color();
        var {
          stringReplaceAll,
          stringEncaseCRLFWithFirstIndex
        } = require_util();
        var { isArray: isArray2 } = Array;
        var levelMapping = [
          "ansi",
          "ansi",
          "ansi256",
          "ansi16m"
        ];
        var styles = /* @__PURE__ */ Object.create(null);
        var applyOptions = /* @__PURE__ */ __name((object, options = {}) => {
          if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
            throw new Error("The `level` option should be an integer from 0 to 3");
          }
          const colorLevel = stdoutColor ? stdoutColor.level : 0;
          object.level = options.level === void 0 ? colorLevel : options.level;
        }, "applyOptions");
        var ChalkClass = class {
          constructor(options) {
            return chalkFactory(options);
          }
        };
        __name(ChalkClass, "ChalkClass");
        var chalkFactory = /* @__PURE__ */ __name((options) => {
          const chalk13 = {};
          applyOptions(chalk13, options);
          chalk13.template = (...arguments_) => chalkTag(chalk13.template, ...arguments_);
          Object.setPrototypeOf(chalk13, Chalk.prototype);
          Object.setPrototypeOf(chalk13.template, chalk13);
          chalk13.template.constructor = () => {
            throw new Error("`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.");
          };
          chalk13.template.Instance = ChalkClass;
          return chalk13.template;
        }, "chalkFactory");
        function Chalk(options) {
          return chalkFactory(options);
        }
        __name(Chalk, "Chalk");
        for (const [styleName, style] of Object.entries(ansiStyles)) {
          styles[styleName] = {
            get() {
              const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
              Object.defineProperty(this, styleName, { value: builder });
              return builder;
            }
          };
        }
        styles.visible = {
          get() {
            const builder = createBuilder(this, this._styler, true);
            Object.defineProperty(this, "visible", { value: builder });
            return builder;
          }
        };
        var usedModels = ["rgb", "hex", "keyword", "hsl", "hsv", "hwb", "ansi", "ansi256"];
        for (const model of usedModels) {
          styles[model] = {
            get() {
              const { level } = this;
              return function(...arguments_) {
                const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
                return createBuilder(this, styler, this._isEmpty);
              };
            }
          };
        }
        for (const model of usedModels) {
          const bgModel = "bg" + model[0].toUpperCase() + model.slice(1);
          styles[bgModel] = {
            get() {
              const { level } = this;
              return function(...arguments_) {
                const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
                return createBuilder(this, styler, this._isEmpty);
              };
            }
          };
        }
        var proto = Object.defineProperties(() => {
        }, {
          ...styles,
          level: {
            enumerable: true,
            get() {
              return this._generator.level;
            },
            set(level) {
              this._generator.level = level;
            }
          }
        });
        var createStyler = /* @__PURE__ */ __name((open, close, parent) => {
          let openAll;
          let closeAll;
          if (parent === void 0) {
            openAll = open;
            closeAll = close;
          } else {
            openAll = parent.openAll + open;
            closeAll = close + parent.closeAll;
          }
          return {
            open,
            close,
            openAll,
            closeAll,
            parent
          };
        }, "createStyler");
        var createBuilder = /* @__PURE__ */ __name((self2, _styler, _isEmpty) => {
          const builder = /* @__PURE__ */ __name((...arguments_) => {
            if (isArray2(arguments_[0]) && isArray2(arguments_[0].raw)) {
              return applyStyle(builder, chalkTag(builder, ...arguments_));
            }
            return applyStyle(builder, arguments_.length === 1 ? "" + arguments_[0] : arguments_.join(" "));
          }, "builder");
          Object.setPrototypeOf(builder, proto);
          builder._generator = self2;
          builder._styler = _styler;
          builder._isEmpty = _isEmpty;
          return builder;
        }, "createBuilder");
        var applyStyle = /* @__PURE__ */ __name((self2, string) => {
          if (self2.level <= 0 || !string) {
            return self2._isEmpty ? "" : string;
          }
          let styler = self2._styler;
          if (styler === void 0) {
            return string;
          }
          const { openAll, closeAll } = styler;
          if (string.indexOf("\x1B") !== -1) {
            while (styler !== void 0) {
              string = stringReplaceAll(string, styler.close, styler.open);
              styler = styler.parent;
            }
          }
          const lfIndex = string.indexOf("\n");
          if (lfIndex !== -1) {
            string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
          }
          return openAll + string + closeAll;
        }, "applyStyle");
        var template;
        var chalkTag = /* @__PURE__ */ __name((chalk13, ...strings) => {
          const [firstString] = strings;
          if (!isArray2(firstString) || !isArray2(firstString.raw)) {
            return strings.join(" ");
          }
          const arguments_ = strings.slice(1);
          const parts = [firstString.raw[0]];
          for (let i = 1; i < firstString.length; i++) {
            parts.push(String(arguments_[i - 1]).replace(/[{}\\]/g, "\\$&"), String(firstString.raw[i]));
          }
          if (template === void 0) {
            template = require_templates();
          }
          return template(chalk13, parts.join(""));
        }, "chalkTag");
        Object.defineProperties(Chalk.prototype, styles);
        var chalk12 = Chalk();
        chalk12.supportsColor = stdoutColor;
        chalk12.stderr = Chalk({ level: stderrColor ? stderrColor.level : 0 });
        chalk12.stderr.supportsColor = stderrColor;
        module2.exports = chalk12;
      }
    });
    var require_indent_string = __commonJS({
      "../../node_modules/.pnpm/indent-string@4.0.0/node_modules/indent-string/index.js"(exports2, module2) {
        "use strict";
        module2.exports = (string, count2 = 1, options) => {
          options = {
            indent: " ",
            includeEmptyLines: false,
            ...options
          };
          if (typeof string !== "string") {
            throw new TypeError(`Expected \`input\` to be a \`string\`, got \`${typeof string}\``);
          }
          if (typeof count2 !== "number") {
            throw new TypeError(`Expected \`count\` to be a \`number\`, got \`${typeof count2}\``);
          }
          if (typeof options.indent !== "string") {
            throw new TypeError(`Expected \`options.indent\` to be a \`string\`, got \`${typeof options.indent}\``);
          }
          if (count2 === 0) {
            return string;
          }
          const regex = options.includeEmptyLines ? /^/gm : /^(?!\s*$)/gm;
          return string.replace(regex, options.indent.repeat(count2));
        };
      }
    });
    var require_js_levenshtein = __commonJS({
      "../../node_modules/.pnpm/js-levenshtein@1.1.6/node_modules/js-levenshtein/index.js"(exports2, module2) {
        "use strict";
        module2.exports = function() {
          function _min(d0, d1, d2, bx, ay) {
            return d0 < d1 || d2 < d1 ? d0 > d2 ? d2 + 1 : d0 + 1 : bx === ay ? d1 : d1 + 1;
          }
          __name(_min, "_min");
          return function(a, b) {
            if (a === b) {
              return 0;
            }
            if (a.length > b.length) {
              var tmp = a;
              a = b;
              b = tmp;
            }
            var la = a.length;
            var lb = b.length;
            while (la > 0 && a.charCodeAt(la - 1) === b.charCodeAt(lb - 1)) {
              la--;
              lb--;
            }
            var offset = 0;
            while (offset < la && a.charCodeAt(offset) === b.charCodeAt(offset)) {
              offset++;
            }
            la -= offset;
            lb -= offset;
            if (la === 0 || lb < 3) {
              return lb;
            }
            var x = 0;
            var y;
            var d0;
            var d1;
            var d2;
            var d3;
            var dd;
            var dy;
            var ay;
            var bx0;
            var bx1;
            var bx2;
            var bx3;
            var vector = [];
            for (y = 0; y < la; y++) {
              vector.push(y + 1);
              vector.push(a.charCodeAt(offset + y));
            }
            var len = vector.length - 1;
            for (; x < lb - 3; ) {
              bx0 = b.charCodeAt(offset + (d0 = x));
              bx1 = b.charCodeAt(offset + (d1 = x + 1));
              bx2 = b.charCodeAt(offset + (d2 = x + 2));
              bx3 = b.charCodeAt(offset + (d3 = x + 3));
              dd = x += 4;
              for (y = 0; y < len; y += 2) {
                dy = vector[y];
                ay = vector[y + 1];
                d0 = _min(dy, d0, d1, bx0, ay);
                d1 = _min(d0, d1, d2, bx1, ay);
                d2 = _min(d1, d2, d3, bx2, ay);
                dd = _min(d2, d3, dd, bx3, ay);
                vector[y] = dd;
                d3 = d2;
                d2 = d1;
                d1 = d0;
                d0 = dy;
              }
            }
            for (; x < lb; ) {
              bx0 = b.charCodeAt(offset + (d0 = x));
              dd = ++x;
              for (y = 0; y < len; y += 2) {
                dy = vector[y];
                vector[y] = dd = _min(dy, d0, dd, bx0, vector[y + 1]);
                d0 = dy;
              }
            }
            return dd;
          };
        }();
      }
    });
    var require_ms = __commonJS({
      "../../node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js"(exports2, module2) {
        var s = 1e3;
        var m = s * 60;
        var h = m * 60;
        var d = h * 24;
        var w = d * 7;
        var y = d * 365.25;
        module2.exports = function(val, options) {
          options = options || {};
          var type = typeof val;
          if (type === "string" && val.length > 0) {
            return parse2(val);
          } else if (type === "number" && isFinite(val)) {
            return options.long ? fmtLong(val) : fmtShort(val);
          }
          throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
        };
        function parse2(str) {
          str = String(str);
          if (str.length > 100) {
            return;
          }
          var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
          if (!match) {
            return;
          }
          var n = parseFloat(match[1]);
          var type = (match[2] || "ms").toLowerCase();
          switch (type) {
            case "years":
            case "year":
            case "yrs":
            case "yr":
            case "y":
              return n * y;
            case "weeks":
            case "week":
            case "w":
              return n * w;
            case "days":
            case "day":
            case "d":
              return n * d;
            case "hours":
            case "hour":
            case "hrs":
            case "hr":
            case "h":
              return n * h;
            case "minutes":
            case "minute":
            case "mins":
            case "min":
            case "m":
              return n * m;
            case "seconds":
            case "second":
            case "secs":
            case "sec":
            case "s":
              return n * s;
            case "milliseconds":
            case "millisecond":
            case "msecs":
            case "msec":
            case "ms":
              return n;
            default:
              return void 0;
          }
        }
        __name(parse2, "parse");
        function fmtShort(ms) {
          var msAbs = Math.abs(ms);
          if (msAbs >= d) {
            return Math.round(ms / d) + "d";
          }
          if (msAbs >= h) {
            return Math.round(ms / h) + "h";
          }
          if (msAbs >= m) {
            return Math.round(ms / m) + "m";
          }
          if (msAbs >= s) {
            return Math.round(ms / s) + "s";
          }
          return ms + "ms";
        }
        __name(fmtShort, "fmtShort");
        function fmtLong(ms) {
          var msAbs = Math.abs(ms);
          if (msAbs >= d) {
            return plural(ms, msAbs, d, "day");
          }
          if (msAbs >= h) {
            return plural(ms, msAbs, h, "hour");
          }
          if (msAbs >= m) {
            return plural(ms, msAbs, m, "minute");
          }
          if (msAbs >= s) {
            return plural(ms, msAbs, s, "second");
          }
          return ms + " ms";
        }
        __name(fmtLong, "fmtLong");
        function plural(ms, msAbs, n, name) {
          var isPlural = msAbs >= n * 1.5;
          return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
        }
        __name(plural, "plural");
      }
    });
    var require_common = __commonJS({
      "../../node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js"(exports2, module2) {
        function setup(env2) {
          createDebug.debug = createDebug;
          createDebug.default = createDebug;
          createDebug.coerce = coerce;
          createDebug.disable = disable;
          createDebug.enable = enable;
          createDebug.enabled = enabled;
          createDebug.humanize = require_ms();
          createDebug.destroy = destroy;
          Object.keys(env2).forEach((key) => {
            createDebug[key] = env2[key];
          });
          createDebug.names = [];
          createDebug.skips = [];
          createDebug.formatters = {};
          function selectColor(namespace) {
            let hash = 0;
            for (let i = 0; i < namespace.length; i++) {
              hash = (hash << 5) - hash + namespace.charCodeAt(i);
              hash |= 0;
            }
            return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
          }
          __name(selectColor, "selectColor");
          createDebug.selectColor = selectColor;
          function createDebug(namespace) {
            let prevTime;
            let enableOverride = null;
            let namespacesCache;
            let enabledCache;
            function debug12(...args) {
              if (!debug12.enabled) {
                return;
              }
              const self2 = debug12;
              const curr = Number(new Date());
              const ms = curr - (prevTime || curr);
              self2.diff = ms;
              self2.prev = prevTime;
              self2.curr = curr;
              prevTime = curr;
              args[0] = createDebug.coerce(args[0]);
              if (typeof args[0] !== "string") {
                args.unshift("%O");
              }
              let index = 0;
              args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format2) => {
                if (match === "%%") {
                  return "%";
                }
                index++;
                const formatter = createDebug.formatters[format2];
                if (typeof formatter === "function") {
                  const val = args[index];
                  match = formatter.call(self2, val);
                  args.splice(index, 1);
                  index--;
                }
                return match;
              });
              createDebug.formatArgs.call(self2, args);
              const logFn = self2.log || createDebug.log;
              logFn.apply(self2, args);
            }
            __name(debug12, "debug");
            debug12.namespace = namespace;
            debug12.useColors = createDebug.useColors();
            debug12.color = createDebug.selectColor(namespace);
            debug12.extend = extend;
            debug12.destroy = createDebug.destroy;
            Object.defineProperty(debug12, "enabled", {
              enumerable: true,
              configurable: false,
              get: () => {
                if (enableOverride !== null) {
                  return enableOverride;
                }
                if (namespacesCache !== createDebug.namespaces) {
                  namespacesCache = createDebug.namespaces;
                  enabledCache = createDebug.enabled(namespace);
                }
                return enabledCache;
              },
              set: (v) => {
                enableOverride = v;
              }
            });
            if (typeof createDebug.init === "function") {
              createDebug.init(debug12);
            }
            return debug12;
          }
          __name(createDebug, "createDebug");
          function extend(namespace, delimiter) {
            const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
            newDebug.log = this.log;
            return newDebug;
          }
          __name(extend, "extend");
          function enable(namespaces) {
            createDebug.save(namespaces);
            createDebug.namespaces = namespaces;
            createDebug.names = [];
            createDebug.skips = [];
            let i;
            const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
            const len = split.length;
            for (i = 0; i < len; i++) {
              if (!split[i]) {
                continue;
              }
              namespaces = split[i].replace(/\*/g, ".*?");
              if (namespaces[0] === "-") {
                createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
              } else {
                createDebug.names.push(new RegExp("^" + namespaces + "$"));
              }
            }
          }
          __name(enable, "enable");
          function disable() {
            const namespaces = [
              ...createDebug.names.map(toNamespace),
              ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
            ].join(",");
            createDebug.enable("");
            return namespaces;
          }
          __name(disable, "disable");
          function enabled(name) {
            if (name[name.length - 1] === "*") {
              return true;
            }
            let i;
            let len;
            for (i = 0, len = createDebug.skips.length; i < len; i++) {
              if (createDebug.skips[i].test(name)) {
                return false;
              }
            }
            for (i = 0, len = createDebug.names.length; i < len; i++) {
              if (createDebug.names[i].test(name)) {
                return true;
              }
            }
            return false;
          }
          __name(enabled, "enabled");
          function toNamespace(regexp) {
            return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
          }
          __name(toNamespace, "toNamespace");
          function coerce(val) {
            if (val instanceof Error) {
              return val.stack || val.message;
            }
            return val;
          }
          __name(coerce, "coerce");
          function destroy() {
            console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
          }
          __name(destroy, "destroy");
          createDebug.enable(createDebug.load());
          return createDebug;
        }
        __name(setup, "setup");
        module2.exports = setup;
      }
    });
    var require_browser = __commonJS({
      "../../node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/browser.js"(exports2, module2) {
        exports2.formatArgs = formatArgs;
        exports2.save = save;
        exports2.load = load;
        exports2.useColors = useColors;
        exports2.storage = localstorage();
        exports2.destroy = (() => {
          let warned = false;
          return () => {
            if (!warned) {
              warned = true;
              console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
            }
          };
        })();
        exports2.colors = [
          "#0000CC",
          "#0000FF",
          "#0033CC",
          "#0033FF",
          "#0066CC",
          "#0066FF",
          "#0099CC",
          "#0099FF",
          "#00CC00",
          "#00CC33",
          "#00CC66",
          "#00CC99",
          "#00CCCC",
          "#00CCFF",
          "#3300CC",
          "#3300FF",
          "#3333CC",
          "#3333FF",
          "#3366CC",
          "#3366FF",
          "#3399CC",
          "#3399FF",
          "#33CC00",
          "#33CC33",
          "#33CC66",
          "#33CC99",
          "#33CCCC",
          "#33CCFF",
          "#6600CC",
          "#6600FF",
          "#6633CC",
          "#6633FF",
          "#66CC00",
          "#66CC33",
          "#9900CC",
          "#9900FF",
          "#9933CC",
          "#9933FF",
          "#99CC00",
          "#99CC33",
          "#CC0000",
          "#CC0033",
          "#CC0066",
          "#CC0099",
          "#CC00CC",
          "#CC00FF",
          "#CC3300",
          "#CC3333",
          "#CC3366",
          "#CC3399",
          "#CC33CC",
          "#CC33FF",
          "#CC6600",
          "#CC6633",
          "#CC9900",
          "#CC9933",
          "#CCCC00",
          "#CCCC33",
          "#FF0000",
          "#FF0033",
          "#FF0066",
          "#FF0099",
          "#FF00CC",
          "#FF00FF",
          "#FF3300",
          "#FF3333",
          "#FF3366",
          "#FF3399",
          "#FF33CC",
          "#FF33FF",
          "#FF6600",
          "#FF6633",
          "#FF9900",
          "#FF9933",
          "#FFCC00",
          "#FFCC33"
        ];
        function useColors() {
          if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
            return true;
          }
          if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
            return false;
          }
          return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
        }
        __name(useColors, "useColors");
        function formatArgs(args) {
          args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module2.exports.humanize(this.diff);
          if (!this.useColors) {
            return;
          }
          const c = "color: " + this.color;
          args.splice(1, 0, c, "color: inherit");
          let index = 0;
          let lastC = 0;
          args[0].replace(/%[a-zA-Z%]/g, (match) => {
            if (match === "%%") {
              return;
            }
            index++;
            if (match === "%c") {
              lastC = index;
            }
          });
          args.splice(lastC, 0, c);
        }
        __name(formatArgs, "formatArgs");
        exports2.log = console.debug || console.log || (() => {
        });
        function save(namespaces) {
          try {
            if (namespaces) {
              exports2.storage.setItem("debug", namespaces);
            } else {
              exports2.storage.removeItem("debug");
            }
          } catch (error2) {
          }
        }
        __name(save, "save");
        function load() {
          let r;
          try {
            r = exports2.storage.getItem("debug");
          } catch (error2) {
          }
          if (!r && typeof process !== "undefined" && "env" in process) {
            r = process.env.DEBUG;
          }
          return r;
        }
        __name(load, "load");
        function localstorage() {
          try {
            return localStorage;
          } catch (error2) {
          }
        }
        __name(localstorage, "localstorage");
        module2.exports = require_common()(exports2);
        var { formatters } = module2.exports;
        formatters.j = function(v) {
          try {
            return JSON.stringify(v);
          } catch (error2) {
            return "[UnexpectedJSONParseError]: " + error2.message;
          }
        };
      }
    });
    var require_node = __commonJS({
      "../../node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/node.js"(exports2, module2) {
        var tty = require("tty");
        var util2 = require("util");
        exports2.init = init;
        exports2.log = log4;
        exports2.formatArgs = formatArgs;
        exports2.save = save;
        exports2.load = load;
        exports2.useColors = useColors;
        exports2.destroy = util2.deprecate(() => {
        }, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        exports2.colors = [6, 2, 3, 4, 5, 1];
        try {
          const supportsColor = require_supports_color();
          if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
            exports2.colors = [
              20,
              21,
              26,
              27,
              32,
              33,
              38,
              39,
              40,
              41,
              42,
              43,
              44,
              45,
              56,
              57,
              62,
              63,
              68,
              69,
              74,
              75,
              76,
              77,
              78,
              79,
              80,
              81,
              92,
              93,
              98,
              99,
              112,
              113,
              128,
              129,
              134,
              135,
              148,
              149,
              160,
              161,
              162,
              163,
              164,
              165,
              166,
              167,
              168,
              169,
              170,
              171,
              172,
              173,
              178,
              179,
              184,
              185,
              196,
              197,
              198,
              199,
              200,
              201,
              202,
              203,
              204,
              205,
              206,
              207,
              208,
              209,
              214,
              215,
              220,
              221
            ];
          }
        } catch (error2) {
        }
        exports2.inspectOpts = Object.keys(process.env).filter((key) => {
          return /^debug_/i.test(key);
        }).reduce((obj, key) => {
          const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
            return k.toUpperCase();
          });
          let val = process.env[key];
          if (/^(yes|on|true|enabled)$/i.test(val)) {
            val = true;
          } else if (/^(no|off|false|disabled)$/i.test(val)) {
            val = false;
          } else if (val === "null") {
            val = null;
          } else {
            val = Number(val);
          }
          obj[prop] = val;
          return obj;
        }, {});
        function useColors() {
          return "colors" in exports2.inspectOpts ? Boolean(exports2.inspectOpts.colors) : tty.isatty(process.stderr.fd);
        }
        __name(useColors, "useColors");
        function formatArgs(args) {
          const { namespace: name, useColors: useColors2 } = this;
          if (useColors2) {
            const c = this.color;
            const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
            const prefix = `  ${colorCode};1m${name} \x1B[0m`;
            args[0] = prefix + args[0].split("\n").join("\n" + prefix);
            args.push(colorCode + "m+" + module2.exports.humanize(this.diff) + "\x1B[0m");
          } else {
            args[0] = getDate() + name + " " + args[0];
          }
        }
        __name(formatArgs, "formatArgs");
        function getDate() {
          if (exports2.inspectOpts.hideDate) {
            return "";
          }
          return new Date().toISOString() + " ";
        }
        __name(getDate, "getDate");
        function log4(...args) {
          return process.stderr.write(util2.format(...args) + "\n");
        }
        __name(log4, "log");
        function save(namespaces) {
          if (namespaces) {
            process.env.DEBUG = namespaces;
          } else {
            delete process.env.DEBUG;
          }
        }
        __name(save, "save");
        function load() {
          return process.env.DEBUG;
        }
        __name(load, "load");
        function init(debug12) {
          debug12.inspectOpts = {};
          const keys2 = Object.keys(exports2.inspectOpts);
          for (let i = 0; i < keys2.length; i++) {
            debug12.inspectOpts[keys2[i]] = exports2.inspectOpts[keys2[i]];
          }
        }
        __name(init, "init");
        module2.exports = require_common()(exports2);
        var { formatters } = module2.exports;
        formatters.o = function(v) {
          this.inspectOpts.colors = this.useColors;
          return util2.inspect(v, this.inspectOpts).split("\n").map((str) => str.trim()).join(" ");
        };
        formatters.O = function(v) {
          this.inspectOpts.colors = this.useColors;
          return util2.inspect(v, this.inspectOpts);
        };
      }
    });
    var require_src = __commonJS({
      "../../node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js"(exports2, module2) {
        if (typeof process === "undefined" || process.type === "renderer" || process.browser === true || process.__nwjs) {
          module2.exports = require_browser();
        } else {
          module2.exports = require_node();
        }
      }
    });
    var require_windows = __commonJS({
      "../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/windows.js"(exports2, module2) {
        module2.exports = isexe;
        isexe.sync = sync;
        var fs10 = require("fs");
        function checkPathExt(path7, options) {
          var pathext = options.pathExt !== void 0 ? options.pathExt : process.env.PATHEXT;
          if (!pathext) {
            return true;
          }
          pathext = pathext.split(";");
          if (pathext.indexOf("") !== -1) {
            return true;
          }
          for (var i = 0; i < pathext.length; i++) {
            var p = pathext[i].toLowerCase();
            if (p && path7.substr(-p.length).toLowerCase() === p) {
              return true;
            }
          }
          return false;
        }
        __name(checkPathExt, "checkPathExt");
        function checkStat(stat, path7, options) {
          if (!stat.isSymbolicLink() && !stat.isFile()) {
            return false;
          }
          return checkPathExt(path7, options);
        }
        __name(checkStat, "checkStat");
        function isexe(path7, options, cb) {
          fs10.stat(path7, function(er, stat) {
            cb(er, er ? false : checkStat(stat, path7, options));
          });
        }
        __name(isexe, "isexe");
        function sync(path7, options) {
          return checkStat(fs10.statSync(path7), path7, options);
        }
        __name(sync, "sync");
      }
    });
    var require_mode = __commonJS({
      "../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/mode.js"(exports2, module2) {
        module2.exports = isexe;
        isexe.sync = sync;
        var fs10 = require("fs");
        function isexe(path7, options, cb) {
          fs10.stat(path7, function(er, stat) {
            cb(er, er ? false : checkStat(stat, options));
          });
        }
        __name(isexe, "isexe");
        function sync(path7, options) {
          return checkStat(fs10.statSync(path7), options);
        }
        __name(sync, "sync");
        function checkStat(stat, options) {
          return stat.isFile() && checkMode(stat, options);
        }
        __name(checkStat, "checkStat");
        function checkMode(stat, options) {
          var mod2 = stat.mode;
          var uid = stat.uid;
          var gid = stat.gid;
          var myUid = options.uid !== void 0 ? options.uid : process.getuid && process.getuid();
          var myGid = options.gid !== void 0 ? options.gid : process.getgid && process.getgid();
          var u = parseInt("100", 8);
          var g = parseInt("010", 8);
          var o = parseInt("001", 8);
          var ug = u | g;
          var ret = mod2 & o || mod2 & g && gid === myGid || mod2 & u && uid === myUid || mod2 & ug && myUid === 0;
          return ret;
        }
        __name(checkMode, "checkMode");
      }
    });
    var require_isexe = __commonJS({
      "../../node_modules/.pnpm/isexe@2.0.0/node_modules/isexe/index.js"(exports2, module2) {
        var fs10 = require("fs");
        var core;
        if (process.platform === "win32" || global.TESTING_WINDOWS) {
          core = require_windows();
        } else {
          core = require_mode();
        }
        module2.exports = isexe;
        isexe.sync = sync;
        function isexe(path7, options, cb) {
          if (typeof options === "function") {
            cb = options;
            options = {};
          }
          if (!cb) {
            if (typeof Promise !== "function") {
              throw new TypeError("callback not provided");
            }
            return new Promise(function(resolve, reject) {
              isexe(path7, options || {}, function(er, is) {
                if (er) {
                  reject(er);
                } else {
                  resolve(is);
                }
              });
            });
          }
          core(path7, options || {}, function(er, is) {
            if (er) {
              if (er.code === "EACCES" || options && options.ignoreErrors) {
                er = null;
                is = false;
              }
            }
            cb(er, is);
          });
        }
        __name(isexe, "isexe");
        function sync(path7, options) {
          try {
            return core.sync(path7, options || {});
          } catch (er) {
            if (options && options.ignoreErrors || er.code === "EACCES") {
              return false;
            } else {
              throw er;
            }
          }
        }
        __name(sync, "sync");
      }
    });
    var require_which = __commonJS({
      "../../node_modules/.pnpm/which@2.0.2/node_modules/which/which.js"(exports2, module2) {
        var isWindows = process.platform === "win32" || process.env.OSTYPE === "cygwin" || process.env.OSTYPE === "msys";
        var path7 = require("path");
        var COLON = isWindows ? ";" : ":";
        var isexe = require_isexe();
        var getNotFoundError = /* @__PURE__ */ __name((cmd) => Object.assign(new Error(`not found: ${cmd}`), { code: "ENOENT" }), "getNotFoundError");
        var getPathInfo = /* @__PURE__ */ __name((cmd, opt) => {
          const colon = opt.colon || COLON;
          const pathEnv = cmd.match(/\//) || isWindows && cmd.match(/\\/) ? [""] : [
            ...isWindows ? [process.cwd()] : [],
            ...(opt.path || process.env.PATH || "").split(colon)
          ];
          const pathExtExe = isWindows ? opt.pathExt || process.env.PATHEXT || ".EXE;.CMD;.BAT;.COM" : "";
          const pathExt = isWindows ? pathExtExe.split(colon) : [""];
          if (isWindows) {
            if (cmd.indexOf(".") !== -1 && pathExt[0] !== "")
              pathExt.unshift("");
          }
          return {
            pathEnv,
            pathExt,
            pathExtExe
          };
        }, "getPathInfo");
        var which = /* @__PURE__ */ __name((cmd, opt, cb) => {
          if (typeof opt === "function") {
            cb = opt;
            opt = {};
          }
          if (!opt)
            opt = {};
          const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
          const found = [];
          const step = /* @__PURE__ */ __name((i) => new Promise((resolve, reject) => {
            if (i === pathEnv.length)
              return opt.all && found.length ? resolve(found) : reject(getNotFoundError(cmd));
            const ppRaw = pathEnv[i];
            const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
            const pCmd = path7.join(pathPart, cmd);
            const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
            resolve(subStep(p, i, 0));
          }), "step");
          const subStep = /* @__PURE__ */ __name((p, i, ii) => new Promise((resolve, reject) => {
            if (ii === pathExt.length)
              return resolve(step(i + 1));
            const ext = pathExt[ii];
            isexe(p + ext, { pathExt: pathExtExe }, (er, is) => {
              if (!er && is) {
                if (opt.all)
                  found.push(p + ext);
                else
                  return resolve(p + ext);
              }
              return resolve(subStep(p, i, ii + 1));
            });
          }), "subStep");
          return cb ? step(0).then((res) => cb(null, res), cb) : step(0);
        }, "which");
        var whichSync = /* @__PURE__ */ __name((cmd, opt) => {
          opt = opt || {};
          const { pathEnv, pathExt, pathExtExe } = getPathInfo(cmd, opt);
          const found = [];
          for (let i = 0; i < pathEnv.length; i++) {
            const ppRaw = pathEnv[i];
            const pathPart = /^".*"$/.test(ppRaw) ? ppRaw.slice(1, -1) : ppRaw;
            const pCmd = path7.join(pathPart, cmd);
            const p = !pathPart && /^\.[\\\/]/.test(cmd) ? cmd.slice(0, 2) + pCmd : pCmd;
            for (let j = 0; j < pathExt.length; j++) {
              const cur = p + pathExt[j];
              try {
                const is = isexe.sync(cur, { pathExt: pathExtExe });
                if (is) {
                  if (opt.all)
                    found.push(cur);
                  else
                    return cur;
                }
              } catch (ex) {
              }
            }
          }
          if (opt.all && found.length)
            return found;
          if (opt.nothrow)
            return null;
          throw getNotFoundError(cmd);
        }, "whichSync");
        module2.exports = which;
        which.sync = whichSync;
      }
    });
    var require_path_key = __commonJS({
      "../../node_modules/.pnpm/path-key@3.1.1/node_modules/path-key/index.js"(exports2, module2) {
        "use strict";
        var pathKey = /* @__PURE__ */ __name((options = {}) => {
          const environment = options.env || process.env;
          const platform3 = options.platform || process.platform;
          if (platform3 !== "win32") {
            return "PATH";
          }
          return Object.keys(environment).reverse().find((key) => key.toUpperCase() === "PATH") || "Path";
        }, "pathKey");
        module2.exports = pathKey;
        module2.exports.default = pathKey;
      }
    });
    var require_resolveCommand = __commonJS({
      "../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/util/resolveCommand.js"(exports2, module2) {
        "use strict";
        var path7 = require("path");
        var which = require_which();
        var getPathKey = require_path_key();
        function resolveCommandAttempt(parsed, withoutPathExt) {
          const env2 = parsed.options.env || process.env;
          const cwd = process.cwd();
          const hasCustomCwd = parsed.options.cwd != null;
          const shouldSwitchCwd = hasCustomCwd && process.chdir !== void 0 && !process.chdir.disabled;
          if (shouldSwitchCwd) {
            try {
              process.chdir(parsed.options.cwd);
            } catch (err) {
            }
          }
          let resolved;
          try {
            resolved = which.sync(parsed.command, {
              path: env2[getPathKey({ env: env2 })],
              pathExt: withoutPathExt ? path7.delimiter : void 0
            });
          } catch (e) {
          } finally {
            if (shouldSwitchCwd) {
              process.chdir(cwd);
            }
          }
          if (resolved) {
            resolved = path7.resolve(hasCustomCwd ? parsed.options.cwd : "", resolved);
          }
          return resolved;
        }
        __name(resolveCommandAttempt, "resolveCommandAttempt");
        function resolveCommand(parsed) {
          return resolveCommandAttempt(parsed) || resolveCommandAttempt(parsed, true);
        }
        __name(resolveCommand, "resolveCommand");
        module2.exports = resolveCommand;
      }
    });
    var require_escape = __commonJS({
      "../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/util/escape.js"(exports2, module2) {
        "use strict";
        var metaCharsRegExp = /([()\][%!^"`<>&|;, *?])/g;
        function escapeCommand(arg2) {
          arg2 = arg2.replace(metaCharsRegExp, "^$1");
          return arg2;
        }
        __name(escapeCommand, "escapeCommand");
        function escapeArgument(arg2, doubleEscapeMetaChars) {
          arg2 = `${arg2}`;
          arg2 = arg2.replace(/(\\*)"/g, '$1$1\\"');
          arg2 = arg2.replace(/(\\*)$/, "$1$1");
          arg2 = `"${arg2}"`;
          arg2 = arg2.replace(metaCharsRegExp, "^$1");
          if (doubleEscapeMetaChars) {
            arg2 = arg2.replace(metaCharsRegExp, "^$1");
          }
          return arg2;
        }
        __name(escapeArgument, "escapeArgument");
        module2.exports.command = escapeCommand;
        module2.exports.argument = escapeArgument;
      }
    });
    var require_shebang_regex = __commonJS({
      "../../node_modules/.pnpm/shebang-regex@3.0.0/node_modules/shebang-regex/index.js"(exports2, module2) {
        "use strict";
        module2.exports = /^#!(.*)/;
      }
    });
    var require_shebang_command = __commonJS({
      "../../node_modules/.pnpm/shebang-command@2.0.0/node_modules/shebang-command/index.js"(exports2, module2) {
        "use strict";
        var shebangRegex = require_shebang_regex();
        module2.exports = (string = "") => {
          const match = string.match(shebangRegex);
          if (!match) {
            return null;
          }
          const [path7, argument] = match[0].replace(/#! ?/, "").split(" ");
          const binary = path7.split("/").pop();
          if (binary === "env") {
            return argument;
          }
          return argument ? `${binary} ${argument}` : binary;
        };
      }
    });
    var require_readShebang = __commonJS({
      "../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/util/readShebang.js"(exports2, module2) {
        "use strict";
        var fs10 = require("fs");
        var shebangCommand = require_shebang_command();
        function readShebang(command) {
          const size = 150;
          const buffer = Buffer.alloc(size);
          let fd;
          try {
            fd = fs10.openSync(command, "r");
            fs10.readSync(fd, buffer, 0, size, 0);
            fs10.closeSync(fd);
          } catch (e) {
          }
          return shebangCommand(buffer.toString());
        }
        __name(readShebang, "readShebang");
        module2.exports = readShebang;
      }
    });
    var require_parse = __commonJS({
      "../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/parse.js"(exports2, module2) {
        "use strict";
        var path7 = require("path");
        var resolveCommand = require_resolveCommand();
        var escape = require_escape();
        var readShebang = require_readShebang();
        var isWin = process.platform === "win32";
        var isExecutableRegExp = /\.(?:com|exe)$/i;
        var isCmdShimRegExp = /node_modules[\\/].bin[\\/][^\\/]+\.cmd$/i;
        function detectShebang(parsed) {
          parsed.file = resolveCommand(parsed);
          const shebang = parsed.file && readShebang(parsed.file);
          if (shebang) {
            parsed.args.unshift(parsed.file);
            parsed.command = shebang;
            return resolveCommand(parsed);
          }
          return parsed.file;
        }
        __name(detectShebang, "detectShebang");
        function parseNonShell(parsed) {
          if (!isWin) {
            return parsed;
          }
          const commandFile = detectShebang(parsed);
          const needsShell = !isExecutableRegExp.test(commandFile);
          if (parsed.options.forceShell || needsShell) {
            const needsDoubleEscapeMetaChars = isCmdShimRegExp.test(commandFile);
            parsed.command = path7.normalize(parsed.command);
            parsed.command = escape.command(parsed.command);
            parsed.args = parsed.args.map((arg2) => escape.argument(arg2, needsDoubleEscapeMetaChars));
            const shellCommand = [parsed.command].concat(parsed.args).join(" ");
            parsed.args = ["/d", "/s", "/c", `"${shellCommand}"`];
            parsed.command = process.env.comspec || "cmd.exe";
            parsed.options.windowsVerbatimArguments = true;
          }
          return parsed;
        }
        __name(parseNonShell, "parseNonShell");
        function parse2(command, args, options) {
          if (args && !Array.isArray(args)) {
            options = args;
            args = null;
          }
          args = args ? args.slice(0) : [];
          options = Object.assign({}, options);
          const parsed = {
            command,
            args,
            options,
            file: void 0,
            original: {
              command,
              args
            }
          };
          return options.shell ? parsed : parseNonShell(parsed);
        }
        __name(parse2, "parse");
        module2.exports = parse2;
      }
    });
    var require_enoent = __commonJS({
      "../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/lib/enoent.js"(exports2, module2) {
        "use strict";
        var isWin = process.platform === "win32";
        function notFoundError(original, syscall) {
          return Object.assign(new Error(`${syscall} ${original.command} ENOENT`), {
            code: "ENOENT",
            errno: "ENOENT",
            syscall: `${syscall} ${original.command}`,
            path: original.command,
            spawnargs: original.args
          });
        }
        __name(notFoundError, "notFoundError");
        function hookChildProcess(cp, parsed) {
          if (!isWin) {
            return;
          }
          const originalEmit = cp.emit;
          cp.emit = function(name, arg1) {
            if (name === "exit") {
              const err = verifyENOENT(arg1, parsed, "spawn");
              if (err) {
                return originalEmit.call(cp, "error", err);
              }
            }
            return originalEmit.apply(cp, arguments);
          };
        }
        __name(hookChildProcess, "hookChildProcess");
        function verifyENOENT(status, parsed) {
          if (isWin && status === 1 && !parsed.file) {
            return notFoundError(parsed.original, "spawn");
          }
          return null;
        }
        __name(verifyENOENT, "verifyENOENT");
        function verifyENOENTSync(status, parsed) {
          if (isWin && status === 1 && !parsed.file) {
            return notFoundError(parsed.original, "spawnSync");
          }
          return null;
        }
        __name(verifyENOENTSync, "verifyENOENTSync");
        module2.exports = {
          hookChildProcess,
          verifyENOENT,
          verifyENOENTSync,
          notFoundError
        };
      }
    });
    var require_cross_spawn = __commonJS({
      "../../node_modules/.pnpm/cross-spawn@7.0.3/node_modules/cross-spawn/index.js"(exports2, module2) {
        "use strict";
        var cp = require("child_process");
        var parse2 = require_parse();
        var enoent = require_enoent();
        function spawn2(command, args, options) {
          const parsed = parse2(command, args, options);
          const spawned = cp.spawn(parsed.command, parsed.args, parsed.options);
          enoent.hookChildProcess(spawned, parsed);
          return spawned;
        }
        __name(spawn2, "spawn");
        function spawnSync(command, args, options) {
          const parsed = parse2(command, args, options);
          const result = cp.spawnSync(parsed.command, parsed.args, parsed.options);
          result.error = result.error || enoent.verifyENOENTSync(result.status, parsed);
          return result;
        }
        __name(spawnSync, "spawnSync");
        module2.exports = spawn2;
        module2.exports.spawn = spawn2;
        module2.exports.sync = spawnSync;
        module2.exports._parse = parse2;
        module2.exports._enoent = enoent;
      }
    });
    var require_package = __commonJS({
      "../../node_modules/.pnpm/@prisma+engines-version@4.1.0-48.8d8414deb360336e4698a65aa45a1fbaf1ce13d8/node_modules/@prisma/engines-version/package.json"(exports2, module2) {
        module2.exports = {
          name: "@prisma/engines-version",
          version: "4.1.0-48.8d8414deb360336e4698a65aa45a1fbaf1ce13d8",
          main: "index.js",
          types: "index.d.ts",
          license: "Apache-2.0",
          author: "Tim Suchanek <suchanek@prisma.io>",
          prisma: {
            enginesVersion: "8d8414deb360336e4698a65aa45a1fbaf1ce13d8"
          },
          repository: {
            type: "git",
            url: "https://github.com/prisma/engines-wrapper.git",
            directory: "packages/engines-version"
          },
          devDependencies: {
            "@types/node": "16.11.43",
            typescript: "4.7.4"
          },
          files: [
            "index.js",
            "index.d.ts"
          ],
          scripts: {
            build: "tsc -d"
          }
        };
      }
    });
    var require_engines_version = __commonJS({
      "../../node_modules/.pnpm/@prisma+engines-version@4.1.0-48.8d8414deb360336e4698a65aa45a1fbaf1ce13d8/node_modules/@prisma/engines-version/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.enginesVersion = void 0;
        exports2.enginesVersion = require_package().prisma.enginesVersion;
      }
    });
    var require_strip_final_newline = __commonJS({
      "../../node_modules/.pnpm/strip-final-newline@2.0.0/node_modules/strip-final-newline/index.js"(exports2, module2) {
        "use strict";
        module2.exports = (input) => {
          const LF = typeof input === "string" ? "\n" : "\n".charCodeAt();
          const CR = typeof input === "string" ? "\r" : "\r".charCodeAt();
          if (input[input.length - 1] === LF) {
            input = input.slice(0, input.length - 1);
          }
          if (input[input.length - 1] === CR) {
            input = input.slice(0, input.length - 1);
          }
          return input;
        };
      }
    });
    var require_npm_run_path = __commonJS({
      "../../node_modules/.pnpm/npm-run-path@4.0.1/node_modules/npm-run-path/index.js"(exports2, module2) {
        "use strict";
        var path7 = require("path");
        var pathKey = require_path_key();
        var npmRunPath = /* @__PURE__ */ __name((options) => {
          options = {
            cwd: process.cwd(),
            path: process.env[pathKey()],
            execPath: process.execPath,
            ...options
          };
          let previous;
          let cwdPath = path7.resolve(options.cwd);
          const result = [];
          while (previous !== cwdPath) {
            result.push(path7.join(cwdPath, "node_modules/.bin"));
            previous = cwdPath;
            cwdPath = path7.resolve(cwdPath, "..");
          }
          const execPathDir = path7.resolve(options.cwd, options.execPath, "..");
          result.push(execPathDir);
          return result.concat(options.path).join(path7.delimiter);
        }, "npmRunPath");
        module2.exports = npmRunPath;
        module2.exports.default = npmRunPath;
        module2.exports.env = (options) => {
          options = {
            env: process.env,
            ...options
          };
          const env2 = { ...options.env };
          const path8 = pathKey({ env: env2 });
          options.path = env2[path8];
          env2[path8] = module2.exports(options);
          return env2;
        };
      }
    });
    var require_mimic_fn = __commonJS({
      "../../node_modules/.pnpm/mimic-fn@2.1.0/node_modules/mimic-fn/index.js"(exports2, module2) {
        "use strict";
        var mimicFn = /* @__PURE__ */ __name((to, from) => {
          for (const prop of Reflect.ownKeys(from)) {
            Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
          }
          return to;
        }, "mimicFn");
        module2.exports = mimicFn;
        module2.exports.default = mimicFn;
      }
    });
    var require_onetime = __commonJS({
      "../../node_modules/.pnpm/onetime@5.1.2/node_modules/onetime/index.js"(exports2, module2) {
        "use strict";
        var mimicFn = require_mimic_fn();
        var calledFunctions = /* @__PURE__ */ new WeakMap();
        var onetime = /* @__PURE__ */ __name((function_, options = {}) => {
          if (typeof function_ !== "function") {
            throw new TypeError("Expected a function");
          }
          let returnValue;
          let callCount = 0;
          const functionName = function_.displayName || function_.name || "<anonymous>";
          const onetime2 = /* @__PURE__ */ __name(function(...arguments_) {
            calledFunctions.set(onetime2, ++callCount);
            if (callCount === 1) {
              returnValue = function_.apply(this, arguments_);
              function_ = null;
            } else if (options.throw === true) {
              throw new Error(`Function \`${functionName}\` can only be called once`);
            }
            return returnValue;
          }, "onetime");
          mimicFn(onetime2, function_);
          calledFunctions.set(onetime2, callCount);
          return onetime2;
        }, "onetime");
        module2.exports = onetime;
        module2.exports.default = onetime;
        module2.exports.callCount = (function_) => {
          if (!calledFunctions.has(function_)) {
            throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
          }
          return calledFunctions.get(function_);
        };
      }
    });
    var require_core = __commonJS({
      "../../node_modules/.pnpm/human-signals@2.1.0/node_modules/human-signals/build/src/core.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.SIGNALS = void 0;
        var SIGNALS = [
          {
            name: "SIGHUP",
            number: 1,
            action: "terminate",
            description: "Terminal closed",
            standard: "posix"
          },
          {
            name: "SIGINT",
            number: 2,
            action: "terminate",
            description: "User interruption with CTRL-C",
            standard: "ansi"
          },
          {
            name: "SIGQUIT",
            number: 3,
            action: "core",
            description: "User interruption with CTRL-\\",
            standard: "posix"
          },
          {
            name: "SIGILL",
            number: 4,
            action: "core",
            description: "Invalid machine instruction",
            standard: "ansi"
          },
          {
            name: "SIGTRAP",
            number: 5,
            action: "core",
            description: "Debugger breakpoint",
            standard: "posix"
          },
          {
            name: "SIGABRT",
            number: 6,
            action: "core",
            description: "Aborted",
            standard: "ansi"
          },
          {
            name: "SIGIOT",
            number: 6,
            action: "core",
            description: "Aborted",
            standard: "bsd"
          },
          {
            name: "SIGBUS",
            number: 7,
            action: "core",
            description: "Bus error due to misaligned, non-existing address or paging error",
            standard: "bsd"
          },
          {
            name: "SIGEMT",
            number: 7,
            action: "terminate",
            description: "Command should be emulated but is not implemented",
            standard: "other"
          },
          {
            name: "SIGFPE",
            number: 8,
            action: "core",
            description: "Floating point arithmetic error",
            standard: "ansi"
          },
          {
            name: "SIGKILL",
            number: 9,
            action: "terminate",
            description: "Forced termination",
            standard: "posix",
            forced: true
          },
          {
            name: "SIGUSR1",
            number: 10,
            action: "terminate",
            description: "Application-specific signal",
            standard: "posix"
          },
          {
            name: "SIGSEGV",
            number: 11,
            action: "core",
            description: "Segmentation fault",
            standard: "ansi"
          },
          {
            name: "SIGUSR2",
            number: 12,
            action: "terminate",
            description: "Application-specific signal",
            standard: "posix"
          },
          {
            name: "SIGPIPE",
            number: 13,
            action: "terminate",
            description: "Broken pipe or socket",
            standard: "posix"
          },
          {
            name: "SIGALRM",
            number: 14,
            action: "terminate",
            description: "Timeout or timer",
            standard: "posix"
          },
          {
            name: "SIGTERM",
            number: 15,
            action: "terminate",
            description: "Termination",
            standard: "ansi"
          },
          {
            name: "SIGSTKFLT",
            number: 16,
            action: "terminate",
            description: "Stack is empty or overflowed",
            standard: "other"
          },
          {
            name: "SIGCHLD",
            number: 17,
            action: "ignore",
            description: "Child process terminated, paused or unpaused",
            standard: "posix"
          },
          {
            name: "SIGCLD",
            number: 17,
            action: "ignore",
            description: "Child process terminated, paused or unpaused",
            standard: "other"
          },
          {
            name: "SIGCONT",
            number: 18,
            action: "unpause",
            description: "Unpaused",
            standard: "posix",
            forced: true
          },
          {
            name: "SIGSTOP",
            number: 19,
            action: "pause",
            description: "Paused",
            standard: "posix",
            forced: true
          },
          {
            name: "SIGTSTP",
            number: 20,
            action: "pause",
            description: 'Paused using CTRL-Z or "suspend"',
            standard: "posix"
          },
          {
            name: "SIGTTIN",
            number: 21,
            action: "pause",
            description: "Background process cannot read terminal input",
            standard: "posix"
          },
          {
            name: "SIGBREAK",
            number: 21,
            action: "terminate",
            description: "User interruption with CTRL-BREAK",
            standard: "other"
          },
          {
            name: "SIGTTOU",
            number: 22,
            action: "pause",
            description: "Background process cannot write to terminal output",
            standard: "posix"
          },
          {
            name: "SIGURG",
            number: 23,
            action: "ignore",
            description: "Socket received out-of-band data",
            standard: "bsd"
          },
          {
            name: "SIGXCPU",
            number: 24,
            action: "core",
            description: "Process timed out",
            standard: "bsd"
          },
          {
            name: "SIGXFSZ",
            number: 25,
            action: "core",
            description: "File too big",
            standard: "bsd"
          },
          {
            name: "SIGVTALRM",
            number: 26,
            action: "terminate",
            description: "Timeout or timer",
            standard: "bsd"
          },
          {
            name: "SIGPROF",
            number: 27,
            action: "terminate",
            description: "Timeout or timer",
            standard: "bsd"
          },
          {
            name: "SIGWINCH",
            number: 28,
            action: "ignore",
            description: "Terminal window size changed",
            standard: "bsd"
          },
          {
            name: "SIGIO",
            number: 29,
            action: "terminate",
            description: "I/O is available",
            standard: "other"
          },
          {
            name: "SIGPOLL",
            number: 29,
            action: "terminate",
            description: "Watched event",
            standard: "other"
          },
          {
            name: "SIGINFO",
            number: 29,
            action: "ignore",
            description: "Request for process information",
            standard: "other"
          },
          {
            name: "SIGPWR",
            number: 30,
            action: "terminate",
            description: "Device running out of power",
            standard: "systemv"
          },
          {
            name: "SIGSYS",
            number: 31,
            action: "core",
            description: "Invalid system call",
            standard: "other"
          },
          {
            name: "SIGUNUSED",
            number: 31,
            action: "terminate",
            description: "Invalid system call",
            standard: "other"
          }
        ];
        exports2.SIGNALS = SIGNALS;
      }
    });
    var require_realtime = __commonJS({
      "../../node_modules/.pnpm/human-signals@2.1.0/node_modules/human-signals/build/src/realtime.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.SIGRTMAX = exports2.getRealtimeSignals = void 0;
        var getRealtimeSignals = /* @__PURE__ */ __name(function() {
          const length = SIGRTMAX - SIGRTMIN + 1;
          return Array.from({ length }, getRealtimeSignal);
        }, "getRealtimeSignals");
        exports2.getRealtimeSignals = getRealtimeSignals;
        var getRealtimeSignal = /* @__PURE__ */ __name(function(value, index) {
          return {
            name: `SIGRT${index + 1}`,
            number: SIGRTMIN + index,
            action: "terminate",
            description: "Application-specific signal (realtime)",
            standard: "posix"
          };
        }, "getRealtimeSignal");
        var SIGRTMIN = 34;
        var SIGRTMAX = 64;
        exports2.SIGRTMAX = SIGRTMAX;
      }
    });
    var require_signals = __commonJS({
      "../../node_modules/.pnpm/human-signals@2.1.0/node_modules/human-signals/build/src/signals.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.getSignals = void 0;
        var _os = require("os");
        var _core = require_core();
        var _realtime = require_realtime();
        var getSignals = /* @__PURE__ */ __name(function() {
          const realtimeSignals = (0, _realtime.getRealtimeSignals)();
          const signals = [..._core.SIGNALS, ...realtimeSignals].map(normalizeSignal);
          return signals;
        }, "getSignals");
        exports2.getSignals = getSignals;
        var normalizeSignal = /* @__PURE__ */ __name(function({
          name,
          number: defaultNumber,
          description,
          action,
          forced = false,
          standard
        }) {
          const {
            signals: { [name]: constantSignal }
          } = _os.constants;
          const supported = constantSignal !== void 0;
          const number = supported ? constantSignal : defaultNumber;
          return { name, number, description, supported, action, forced, standard };
        }, "normalizeSignal");
      }
    });
    var require_main = __commonJS({
      "../../node_modules/.pnpm/human-signals@2.1.0/node_modules/human-signals/build/src/main.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.signalsByNumber = exports2.signalsByName = void 0;
        var _os = require("os");
        var _signals = require_signals();
        var _realtime = require_realtime();
        var getSignalsByName = /* @__PURE__ */ __name(function() {
          const signals = (0, _signals.getSignals)();
          return signals.reduce(getSignalByName, {});
        }, "getSignalsByName");
        var getSignalByName = /* @__PURE__ */ __name(function(signalByNameMemo, { name, number, description, supported, action, forced, standard }) {
          return {
            ...signalByNameMemo,
            [name]: { name, number, description, supported, action, forced, standard }
          };
        }, "getSignalByName");
        var signalsByName = getSignalsByName();
        exports2.signalsByName = signalsByName;
        var getSignalsByNumber = /* @__PURE__ */ __name(function() {
          const signals = (0, _signals.getSignals)();
          const length = _realtime.SIGRTMAX + 1;
          const signalsA = Array.from({ length }, (value, number) => getSignalByNumber(number, signals));
          return Object.assign({}, ...signalsA);
        }, "getSignalsByNumber");
        var getSignalByNumber = /* @__PURE__ */ __name(function(number, signals) {
          const signal = findSignalByNumber(number, signals);
          if (signal === void 0) {
            return {};
          }
          const { name, description, supported, action, forced, standard } = signal;
          return {
            [number]: {
              name,
              number,
              description,
              supported,
              action,
              forced,
              standard
            }
          };
        }, "getSignalByNumber");
        var findSignalByNumber = /* @__PURE__ */ __name(function(number, signals) {
          const signal = signals.find(({ name }) => _os.constants.signals[name] === number);
          if (signal !== void 0) {
            return signal;
          }
          return signals.find((signalA) => signalA.number === number);
        }, "findSignalByNumber");
        var signalsByNumber = getSignalsByNumber();
        exports2.signalsByNumber = signalsByNumber;
      }
    });
    var require_error = __commonJS({
      "../../node_modules/.pnpm/execa@5.1.1/node_modules/execa/lib/error.js"(exports2, module2) {
        "use strict";
        var { signalsByName } = require_main();
        var getErrorPrefix = /* @__PURE__ */ __name(({ timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled }) => {
          if (timedOut) {
            return `timed out after ${timeout} milliseconds`;
          }
          if (isCanceled) {
            return "was canceled";
          }
          if (errorCode !== void 0) {
            return `failed with ${errorCode}`;
          }
          if (signal !== void 0) {
            return `was killed with ${signal} (${signalDescription})`;
          }
          if (exitCode !== void 0) {
            return `failed with exit code ${exitCode}`;
          }
          return "failed";
        }, "getErrorPrefix");
        var makeError = /* @__PURE__ */ __name(({
          stdout,
          stderr,
          all,
          error: error2,
          signal,
          exitCode,
          command,
          escapedCommand,
          timedOut,
          isCanceled,
          killed,
          parsed: { options: { timeout } }
        }) => {
          exitCode = exitCode === null ? void 0 : exitCode;
          signal = signal === null ? void 0 : signal;
          const signalDescription = signal === void 0 ? void 0 : signalsByName[signal].description;
          const errorCode = error2 && error2.code;
          const prefix = getErrorPrefix({ timedOut, timeout, errorCode, signal, signalDescription, exitCode, isCanceled });
          const execaMessage = `Command ${prefix}: ${command}`;
          const isError2 = Object.prototype.toString.call(error2) === "[object Error]";
          const shortMessage = isError2 ? `${execaMessage}
${error2.message}` : execaMessage;
          const message = [shortMessage, stderr, stdout].filter(Boolean).join("\n");
          if (isError2) {
            error2.originalMessage = error2.message;
            error2.message = message;
          } else {
            error2 = new Error(message);
          }
          error2.shortMessage = shortMessage;
          error2.command = command;
          error2.escapedCommand = escapedCommand;
          error2.exitCode = exitCode;
          error2.signal = signal;
          error2.signalDescription = signalDescription;
          error2.stdout = stdout;
          error2.stderr = stderr;
          if (all !== void 0) {
            error2.all = all;
          }
          if ("bufferedData" in error2) {
            delete error2.bufferedData;
          }
          error2.failed = true;
          error2.timedOut = Boolean(timedOut);
          error2.isCanceled = isCanceled;
          error2.killed = killed && !timedOut;
          return error2;
        }, "makeError");
        module2.exports = makeError;
      }
    });
    var require_stdio = __commonJS({
      "../../node_modules/.pnpm/execa@5.1.1/node_modules/execa/lib/stdio.js"(exports2, module2) {
        "use strict";
        var aliases = ["stdin", "stdout", "stderr"];
        var hasAlias = /* @__PURE__ */ __name((options) => aliases.some((alias) => options[alias] !== void 0), "hasAlias");
        var normalizeStdio = /* @__PURE__ */ __name((options) => {
          if (!options) {
            return;
          }
          const { stdio } = options;
          if (stdio === void 0) {
            return aliases.map((alias) => options[alias]);
          }
          if (hasAlias(options)) {
            throw new Error(`It's not possible to provide \`stdio\` in combination with one of ${aliases.map((alias) => `\`${alias}\``).join(", ")}`);
          }
          if (typeof stdio === "string") {
            return stdio;
          }
          if (!Array.isArray(stdio)) {
            throw new TypeError(`Expected \`stdio\` to be of type \`string\` or \`Array\`, got \`${typeof stdio}\``);
          }
          const length = Math.max(stdio.length, aliases.length);
          return Array.from({ length }, (value, index) => stdio[index]);
        }, "normalizeStdio");
        module2.exports = normalizeStdio;
        module2.exports.node = (options) => {
          const stdio = normalizeStdio(options);
          if (stdio === "ipc") {
            return "ipc";
          }
          if (stdio === void 0 || typeof stdio === "string") {
            return [stdio, stdio, stdio, "ipc"];
          }
          if (stdio.includes("ipc")) {
            return stdio;
          }
          return [...stdio, "ipc"];
        };
      }
    });
    var require_signals2 = __commonJS({
      "../../node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/signals.js"(exports2, module2) {
        module2.exports = [
          "SIGABRT",
          "SIGALRM",
          "SIGHUP",
          "SIGINT",
          "SIGTERM"
        ];
        if (process.platform !== "win32") {
          module2.exports.push("SIGVTALRM", "SIGXCPU", "SIGXFSZ", "SIGUSR2", "SIGTRAP", "SIGSYS", "SIGQUIT", "SIGIOT");
        }
        if (process.platform === "linux") {
          module2.exports.push("SIGIO", "SIGPOLL", "SIGPWR", "SIGSTKFLT", "SIGUNUSED");
        }
      }
    });
    var require_signal_exit = __commonJS({
      "../../node_modules/.pnpm/signal-exit@3.0.7/node_modules/signal-exit/index.js"(exports2, module2) {
        var process2 = global.process;
        var processOk = /* @__PURE__ */ __name(function(process3) {
          return process3 && typeof process3 === "object" && typeof process3.removeListener === "function" && typeof process3.emit === "function" && typeof process3.reallyExit === "function" && typeof process3.listeners === "function" && typeof process3.kill === "function" && typeof process3.pid === "number" && typeof process3.on === "function";
        }, "processOk");
        if (!processOk(process2)) {
          module2.exports = function() {
            return function() {
            };
          };
        } else {
          assert = require("assert");
          signals = require_signals2();
          isWin = /^win/i.test(process2.platform);
          EE = require("events");
          if (typeof EE !== "function") {
            EE = EE.EventEmitter;
          }
          if (process2.__signal_exit_emitter__) {
            emitter = process2.__signal_exit_emitter__;
          } else {
            emitter = process2.__signal_exit_emitter__ = new EE();
            emitter.count = 0;
            emitter.emitted = {};
          }
          if (!emitter.infinite) {
            emitter.setMaxListeners(Infinity);
            emitter.infinite = true;
          }
          module2.exports = function(cb, opts) {
            if (!processOk(global.process)) {
              return function() {
              };
            }
            assert.equal(typeof cb, "function", "a callback must be provided for exit handler");
            if (loaded === false) {
              load();
            }
            var ev = "exit";
            if (opts && opts.alwaysLast) {
              ev = "afterexit";
            }
            var remove = /* @__PURE__ */ __name(function() {
              emitter.removeListener(ev, cb);
              if (emitter.listeners("exit").length === 0 && emitter.listeners("afterexit").length === 0) {
                unload();
              }
            }, "remove");
            emitter.on(ev, cb);
            return remove;
          };
          unload = /* @__PURE__ */ __name(function unload2() {
            if (!loaded || !processOk(global.process)) {
              return;
            }
            loaded = false;
            signals.forEach(function(sig) {
              try {
                process2.removeListener(sig, sigListeners[sig]);
              } catch (er) {
              }
            });
            process2.emit = originalProcessEmit;
            process2.reallyExit = originalProcessReallyExit;
            emitter.count -= 1;
          }, "unload");
          module2.exports.unload = unload;
          emit = /* @__PURE__ */ __name(function emit2(event, code, signal) {
            if (emitter.emitted[event]) {
              return;
            }
            emitter.emitted[event] = true;
            emitter.emit(event, code, signal);
          }, "emit");
          sigListeners = {};
          signals.forEach(function(sig) {
            sigListeners[sig] = /* @__PURE__ */ __name(function listener() {
              if (!processOk(global.process)) {
                return;
              }
              var listeners = process2.listeners(sig);
              if (listeners.length === emitter.count) {
                unload();
                emit("exit", null, sig);
                emit("afterexit", null, sig);
                if (isWin && sig === "SIGHUP") {
                  sig = "SIGINT";
                }
                process2.kill(process2.pid, sig);
              }
            }, "listener");
          });
          module2.exports.signals = function() {
            return signals;
          };
          loaded = false;
          load = /* @__PURE__ */ __name(function load2() {
            if (loaded || !processOk(global.process)) {
              return;
            }
            loaded = true;
            emitter.count += 1;
            signals = signals.filter(function(sig) {
              try {
                process2.on(sig, sigListeners[sig]);
                return true;
              } catch (er) {
                return false;
              }
            });
            process2.emit = processEmit;
            process2.reallyExit = processReallyExit;
          }, "load");
          module2.exports.load = load;
          originalProcessReallyExit = process2.reallyExit;
          processReallyExit = /* @__PURE__ */ __name(function processReallyExit2(code) {
            if (!processOk(global.process)) {
              return;
            }
            process2.exitCode = code || 0;
            emit("exit", process2.exitCode, null);
            emit("afterexit", process2.exitCode, null);
            originalProcessReallyExit.call(process2, process2.exitCode);
          }, "processReallyExit");
          originalProcessEmit = process2.emit;
          processEmit = /* @__PURE__ */ __name(function processEmit2(ev, arg2) {
            if (ev === "exit" && processOk(global.process)) {
              if (arg2 !== void 0) {
                process2.exitCode = arg2;
              }
              var ret = originalProcessEmit.apply(this, arguments);
              emit("exit", process2.exitCode, null);
              emit("afterexit", process2.exitCode, null);
              return ret;
            } else {
              return originalProcessEmit.apply(this, arguments);
            }
          }, "processEmit");
        }
        var assert;
        var signals;
        var isWin;
        var EE;
        var emitter;
        var unload;
        var emit;
        var sigListeners;
        var loaded;
        var load;
        var originalProcessReallyExit;
        var processReallyExit;
        var originalProcessEmit;
        var processEmit;
      }
    });
    var require_kill = __commonJS({
      "../../node_modules/.pnpm/execa@5.1.1/node_modules/execa/lib/kill.js"(exports2, module2) {
        "use strict";
        var os3 = require("os");
        var onExit = require_signal_exit();
        var DEFAULT_FORCE_KILL_TIMEOUT = 1e3 * 5;
        var spawnedKill = /* @__PURE__ */ __name((kill, signal = "SIGTERM", options = {}) => {
          const killResult = kill(signal);
          setKillTimeout(kill, signal, options, killResult);
          return killResult;
        }, "spawnedKill");
        var setKillTimeout = /* @__PURE__ */ __name((kill, signal, options, killResult) => {
          if (!shouldForceKill(signal, options, killResult)) {
            return;
          }
          const timeout = getForceKillAfterTimeout(options);
          const t = setTimeout(() => {
            kill("SIGKILL");
          }, timeout);
          if (t.unref) {
            t.unref();
          }
        }, "setKillTimeout");
        var shouldForceKill = /* @__PURE__ */ __name((signal, { forceKillAfterTimeout }, killResult) => {
          return isSigterm(signal) && forceKillAfterTimeout !== false && killResult;
        }, "shouldForceKill");
        var isSigterm = /* @__PURE__ */ __name((signal) => {
          return signal === os3.constants.signals.SIGTERM || typeof signal === "string" && signal.toUpperCase() === "SIGTERM";
        }, "isSigterm");
        var getForceKillAfterTimeout = /* @__PURE__ */ __name(({ forceKillAfterTimeout = true }) => {
          if (forceKillAfterTimeout === true) {
            return DEFAULT_FORCE_KILL_TIMEOUT;
          }
          if (!Number.isFinite(forceKillAfterTimeout) || forceKillAfterTimeout < 0) {
            throw new TypeError(`Expected the \`forceKillAfterTimeout\` option to be a non-negative integer, got \`${forceKillAfterTimeout}\` (${typeof forceKillAfterTimeout})`);
          }
          return forceKillAfterTimeout;
        }, "getForceKillAfterTimeout");
        var spawnedCancel = /* @__PURE__ */ __name((spawned, context3) => {
          const killResult = spawned.kill();
          if (killResult) {
            context3.isCanceled = true;
          }
        }, "spawnedCancel");
        var timeoutKill = /* @__PURE__ */ __name((spawned, signal, reject) => {
          spawned.kill(signal);
          reject(Object.assign(new Error("Timed out"), { timedOut: true, signal }));
        }, "timeoutKill");
        var setupTimeout = /* @__PURE__ */ __name((spawned, { timeout, killSignal = "SIGTERM" }, spawnedPromise) => {
          if (timeout === 0 || timeout === void 0) {
            return spawnedPromise;
          }
          let timeoutId;
          const timeoutPromise = new Promise((resolve, reject) => {
            timeoutId = setTimeout(() => {
              timeoutKill(spawned, killSignal, reject);
            }, timeout);
          });
          const safeSpawnedPromise = spawnedPromise.finally(() => {
            clearTimeout(timeoutId);
          });
          return Promise.race([timeoutPromise, safeSpawnedPromise]);
        }, "setupTimeout");
        var validateTimeout = /* @__PURE__ */ __name(({ timeout }) => {
          if (timeout !== void 0 && (!Number.isFinite(timeout) || timeout < 0)) {
            throw new TypeError(`Expected the \`timeout\` option to be a non-negative integer, got \`${timeout}\` (${typeof timeout})`);
          }
        }, "validateTimeout");
        var setExitHandler = /* @__PURE__ */ __name(async (spawned, { cleanup, detached }, timedPromise) => {
          if (!cleanup || detached) {
            return timedPromise;
          }
          const removeExitHandler = onExit(() => {
            spawned.kill();
          });
          return timedPromise.finally(() => {
            removeExitHandler();
          });
        }, "setExitHandler");
        module2.exports = {
          spawnedKill,
          spawnedCancel,
          setupTimeout,
          validateTimeout,
          setExitHandler
        };
      }
    });
    var require_is_stream = __commonJS({
      "../../node_modules/.pnpm/is-stream@2.0.1/node_modules/is-stream/index.js"(exports2, module2) {
        "use strict";
        var isStream = /* @__PURE__ */ __name((stream2) => stream2 !== null && typeof stream2 === "object" && typeof stream2.pipe === "function", "isStream");
        isStream.writable = (stream2) => isStream(stream2) && stream2.writable !== false && typeof stream2._write === "function" && typeof stream2._writableState === "object";
        isStream.readable = (stream2) => isStream(stream2) && stream2.readable !== false && typeof stream2._read === "function" && typeof stream2._readableState === "object";
        isStream.duplex = (stream2) => isStream.writable(stream2) && isStream.readable(stream2);
        isStream.transform = (stream2) => isStream.duplex(stream2) && typeof stream2._transform === "function";
        module2.exports = isStream;
      }
    });
    var require_buffer_stream = __commonJS({
      "../../node_modules/.pnpm/get-stream@6.0.1/node_modules/get-stream/buffer-stream.js"(exports2, module2) {
        "use strict";
        var { PassThrough: PassThroughStream } = require("stream");
        module2.exports = (options) => {
          options = { ...options };
          const { array } = options;
          let { encoding } = options;
          const isBuffer = encoding === "buffer";
          let objectMode = false;
          if (array) {
            objectMode = !(encoding || isBuffer);
          } else {
            encoding = encoding || "utf8";
          }
          if (isBuffer) {
            encoding = null;
          }
          const stream2 = new PassThroughStream({ objectMode });
          if (encoding) {
            stream2.setEncoding(encoding);
          }
          let length = 0;
          const chunks = [];
          stream2.on("data", (chunk) => {
            chunks.push(chunk);
            if (objectMode) {
              length = chunks.length;
            } else {
              length += chunk.length;
            }
          });
          stream2.getBufferedValue = () => {
            if (array) {
              return chunks;
            }
            return isBuffer ? Buffer.concat(chunks, length) : chunks.join("");
          };
          stream2.getBufferedLength = () => length;
          return stream2;
        };
      }
    });
    var require_get_stream = __commonJS({
      "../../node_modules/.pnpm/get-stream@6.0.1/node_modules/get-stream/index.js"(exports2, module2) {
        "use strict";
        var { constants: BufferConstants } = require("buffer");
        var stream2 = require("stream");
        var { promisify: promisify4 } = require("util");
        var bufferStream = require_buffer_stream();
        var streamPipelinePromisified = promisify4(stream2.pipeline);
        var MaxBufferError = class extends Error {
          constructor() {
            super("maxBuffer exceeded");
            this.name = "MaxBufferError";
          }
        };
        __name(MaxBufferError, "MaxBufferError");
        async function getStream2(inputStream, options) {
          if (!inputStream) {
            throw new Error("Expected a stream");
          }
          options = {
            maxBuffer: Infinity,
            ...options
          };
          const { maxBuffer } = options;
          const stream3 = bufferStream(options);
          await new Promise((resolve, reject) => {
            const rejectPromise = /* @__PURE__ */ __name((error2) => {
              if (error2 && stream3.getBufferedLength() <= BufferConstants.MAX_LENGTH) {
                error2.bufferedData = stream3.getBufferedValue();
              }
              reject(error2);
            }, "rejectPromise");
            (async () => {
              try {
                await streamPipelinePromisified(inputStream, stream3);
                resolve();
              } catch (error2) {
                rejectPromise(error2);
              }
            })();
            stream3.on("data", () => {
              if (stream3.getBufferedLength() > maxBuffer) {
                rejectPromise(new MaxBufferError());
              }
            });
          });
          return stream3.getBufferedValue();
        }
        __name(getStream2, "getStream");
        module2.exports = getStream2;
        module2.exports.buffer = (stream3, options) => getStream2(stream3, { ...options, encoding: "buffer" });
        module2.exports.array = (stream3, options) => getStream2(stream3, { ...options, array: true });
        module2.exports.MaxBufferError = MaxBufferError;
      }
    });
    var require_merge_stream = __commonJS({
      "../../node_modules/.pnpm/merge-stream@2.0.0/node_modules/merge-stream/index.js"(exports2, module2) {
        "use strict";
        var { PassThrough } = require("stream");
        module2.exports = function() {
          var sources = [];
          var output = new PassThrough({ objectMode: true });
          output.setMaxListeners(0);
          output.add = add2;
          output.isEmpty = isEmpty;
          output.on("unpipe", remove);
          Array.prototype.slice.call(arguments).forEach(add2);
          return output;
          function add2(source) {
            if (Array.isArray(source)) {
              source.forEach(add2);
              return this;
            }
            sources.push(source);
            source.once("end", remove.bind(null, source));
            source.once("error", output.emit.bind(output, "error"));
            source.pipe(output, { end: false });
            return this;
          }
          __name(add2, "add");
          function isEmpty() {
            return sources.length == 0;
          }
          __name(isEmpty, "isEmpty");
          function remove(source) {
            sources = sources.filter(function(it) {
              return it !== source;
            });
            if (!sources.length && output.readable) {
              output.end();
            }
          }
          __name(remove, "remove");
        };
      }
    });
    var require_stream = __commonJS({
      "../../node_modules/.pnpm/execa@5.1.1/node_modules/execa/lib/stream.js"(exports2, module2) {
        "use strict";
        var isStream = require_is_stream();
        var getStream2 = require_get_stream();
        var mergeStream = require_merge_stream();
        var handleInput = /* @__PURE__ */ __name((spawned, input) => {
          if (input === void 0 || spawned.stdin === void 0) {
            return;
          }
          if (isStream(input)) {
            input.pipe(spawned.stdin);
          } else {
            spawned.stdin.end(input);
          }
        }, "handleInput");
        var makeAllStream = /* @__PURE__ */ __name((spawned, { all }) => {
          if (!all || !spawned.stdout && !spawned.stderr) {
            return;
          }
          const mixed = mergeStream();
          if (spawned.stdout) {
            mixed.add(spawned.stdout);
          }
          if (spawned.stderr) {
            mixed.add(spawned.stderr);
          }
          return mixed;
        }, "makeAllStream");
        var getBufferedData = /* @__PURE__ */ __name(async (stream2, streamPromise) => {
          if (!stream2) {
            return;
          }
          stream2.destroy();
          try {
            return await streamPromise;
          } catch (error2) {
            return error2.bufferedData;
          }
        }, "getBufferedData");
        var getStreamPromise = /* @__PURE__ */ __name((stream2, { encoding, buffer, maxBuffer }) => {
          if (!stream2 || !buffer) {
            return;
          }
          if (encoding) {
            return getStream2(stream2, { encoding, maxBuffer });
          }
          return getStream2.buffer(stream2, { maxBuffer });
        }, "getStreamPromise");
        var getSpawnedResult = /* @__PURE__ */ __name(async ({ stdout, stderr, all }, { encoding, buffer, maxBuffer }, processDone) => {
          const stdoutPromise = getStreamPromise(stdout, { encoding, buffer, maxBuffer });
          const stderrPromise = getStreamPromise(stderr, { encoding, buffer, maxBuffer });
          const allPromise = getStreamPromise(all, { encoding, buffer, maxBuffer: maxBuffer * 2 });
          try {
            return await Promise.all([processDone, stdoutPromise, stderrPromise, allPromise]);
          } catch (error2) {
            return Promise.all([
              { error: error2, signal: error2.signal, timedOut: error2.timedOut },
              getBufferedData(stdout, stdoutPromise),
              getBufferedData(stderr, stderrPromise),
              getBufferedData(all, allPromise)
            ]);
          }
        }, "getSpawnedResult");
        var validateInputSync = /* @__PURE__ */ __name(({ input }) => {
          if (isStream(input)) {
            throw new TypeError("The `input` option cannot be a stream in sync mode");
          }
        }, "validateInputSync");
        module2.exports = {
          handleInput,
          makeAllStream,
          getSpawnedResult,
          validateInputSync
        };
      }
    });
    var require_promise = __commonJS({
      "../../node_modules/.pnpm/execa@5.1.1/node_modules/execa/lib/promise.js"(exports2, module2) {
        "use strict";
        var nativePromisePrototype = (async () => {
        })().constructor.prototype;
        var descriptors = ["then", "catch", "finally"].map((property) => [
          property,
          Reflect.getOwnPropertyDescriptor(nativePromisePrototype, property)
        ]);
        var mergePromise = /* @__PURE__ */ __name((spawned, promise) => {
          for (const [property, descriptor] of descriptors) {
            const value = typeof promise === "function" ? (...args) => Reflect.apply(descriptor.value, promise(), args) : descriptor.value.bind(promise);
            Reflect.defineProperty(spawned, property, { ...descriptor, value });
          }
          return spawned;
        }, "mergePromise");
        var getSpawnedPromise = /* @__PURE__ */ __name((spawned) => {
          return new Promise((resolve, reject) => {
            spawned.on("exit", (exitCode, signal) => {
              resolve({ exitCode, signal });
            });
            spawned.on("error", (error2) => {
              reject(error2);
            });
            if (spawned.stdin) {
              spawned.stdin.on("error", (error2) => {
                reject(error2);
              });
            }
          });
        }, "getSpawnedPromise");
        module2.exports = {
          mergePromise,
          getSpawnedPromise
        };
      }
    });
    var require_command = __commonJS({
      "../../node_modules/.pnpm/execa@5.1.1/node_modules/execa/lib/command.js"(exports2, module2) {
        "use strict";
        var normalizeArgs = /* @__PURE__ */ __name((file, args = []) => {
          if (!Array.isArray(args)) {
            return [file];
          }
          return [file, ...args];
        }, "normalizeArgs");
        var NO_ESCAPE_REGEXP = /^[\w.-]+$/;
        var DOUBLE_QUOTES_REGEXP = /"/g;
        var escapeArg = /* @__PURE__ */ __name((arg2) => {
          if (typeof arg2 !== "string" || NO_ESCAPE_REGEXP.test(arg2)) {
            return arg2;
          }
          return `"${arg2.replace(DOUBLE_QUOTES_REGEXP, '\\"')}"`;
        }, "escapeArg");
        var joinCommand = /* @__PURE__ */ __name((file, args) => {
          return normalizeArgs(file, args).join(" ");
        }, "joinCommand");
        var getEscapedCommand = /* @__PURE__ */ __name((file, args) => {
          return normalizeArgs(file, args).map((arg2) => escapeArg(arg2)).join(" ");
        }, "getEscapedCommand");
        var SPACES_REGEXP = / +/g;
        var parseCommand = /* @__PURE__ */ __name((command) => {
          const tokens = [];
          for (const token of command.trim().split(SPACES_REGEXP)) {
            const previousToken = tokens[tokens.length - 1];
            if (previousToken && previousToken.endsWith("\\")) {
              tokens[tokens.length - 1] = `${previousToken.slice(0, -1)} ${token}`;
            } else {
              tokens.push(token);
            }
          }
          return tokens;
        }, "parseCommand");
        module2.exports = {
          joinCommand,
          getEscapedCommand,
          parseCommand
        };
      }
    });
    var require_execa = __commonJS({
      "../../node_modules/.pnpm/execa@5.1.1/node_modules/execa/index.js"(exports2, module2) {
        "use strict";
        var path7 = require("path");
        var childProcess = require("child_process");
        var crossSpawn = require_cross_spawn();
        var stripFinalNewline = require_strip_final_newline();
        var npmRunPath = require_npm_run_path();
        var onetime = require_onetime();
        var makeError = require_error();
        var normalizeStdio = require_stdio();
        var { spawnedKill, spawnedCancel, setupTimeout, validateTimeout, setExitHandler } = require_kill();
        var { handleInput, getSpawnedResult, makeAllStream, validateInputSync } = require_stream();
        var { mergePromise, getSpawnedPromise } = require_promise();
        var { joinCommand, parseCommand, getEscapedCommand } = require_command();
        var DEFAULT_MAX_BUFFER = 1e3 * 1e3 * 100;
        var getEnv2 = /* @__PURE__ */ __name(({ env: envOption, extendEnv, preferLocal, localDir, execPath }) => {
          const env2 = extendEnv ? { ...process.env, ...envOption } : envOption;
          if (preferLocal) {
            return npmRunPath.env({ env: env2, cwd: localDir, execPath });
          }
          return env2;
        }, "getEnv");
        var handleArguments = /* @__PURE__ */ __name((file, args, options = {}) => {
          const parsed = crossSpawn._parse(file, args, options);
          file = parsed.command;
          args = parsed.args;
          options = parsed.options;
          options = {
            maxBuffer: DEFAULT_MAX_BUFFER,
            buffer: true,
            stripFinalNewline: true,
            extendEnv: true,
            preferLocal: false,
            localDir: options.cwd || process.cwd(),
            execPath: process.execPath,
            encoding: "utf8",
            reject: true,
            cleanup: true,
            all: false,
            windowsHide: true,
            ...options
          };
          options.env = getEnv2(options);
          options.stdio = normalizeStdio(options);
          if (process.platform === "win32" && path7.basename(file, ".exe") === "cmd") {
            args.unshift("/q");
          }
          return { file, args, options, parsed };
        }, "handleArguments");
        var handleOutput = /* @__PURE__ */ __name((options, value, error2) => {
          if (typeof value !== "string" && !Buffer.isBuffer(value)) {
            return error2 === void 0 ? void 0 : "";
          }
          if (options.stripFinalNewline) {
            return stripFinalNewline(value);
          }
          return value;
        }, "handleOutput");
        var execa2 = /* @__PURE__ */ __name((file, args, options) => {
          const parsed = handleArguments(file, args, options);
          const command = joinCommand(file, args);
          const escapedCommand = getEscapedCommand(file, args);
          validateTimeout(parsed.options);
          let spawned;
          try {
            spawned = childProcess.spawn(parsed.file, parsed.args, parsed.options);
          } catch (error2) {
            const dummySpawned = new childProcess.ChildProcess();
            const errorPromise = Promise.reject(makeError({
              error: error2,
              stdout: "",
              stderr: "",
              all: "",
              command,
              escapedCommand,
              parsed,
              timedOut: false,
              isCanceled: false,
              killed: false
            }));
            return mergePromise(dummySpawned, errorPromise);
          }
          const spawnedPromise = getSpawnedPromise(spawned);
          const timedPromise = setupTimeout(spawned, parsed.options, spawnedPromise);
          const processDone = setExitHandler(spawned, parsed.options, timedPromise);
          const context3 = { isCanceled: false };
          spawned.kill = spawnedKill.bind(null, spawned.kill.bind(spawned));
          spawned.cancel = spawnedCancel.bind(null, spawned, context3);
          const handlePromise = /* @__PURE__ */ __name(async () => {
            const [{ error: error2, exitCode, signal, timedOut }, stdoutResult, stderrResult, allResult] = await getSpawnedResult(spawned, parsed.options, processDone);
            const stdout = handleOutput(parsed.options, stdoutResult);
            const stderr = handleOutput(parsed.options, stderrResult);
            const all = handleOutput(parsed.options, allResult);
            if (error2 || exitCode !== 0 || signal !== null) {
              const returnedError = makeError({
                error: error2,
                exitCode,
                signal,
                stdout,
                stderr,
                all,
                command,
                escapedCommand,
                parsed,
                timedOut,
                isCanceled: context3.isCanceled,
                killed: spawned.killed
              });
              if (!parsed.options.reject) {
                return returnedError;
              }
              throw returnedError;
            }
            return {
              command,
              escapedCommand,
              exitCode: 0,
              stdout,
              stderr,
              all,
              failed: false,
              timedOut: false,
              isCanceled: false,
              killed: false
            };
          }, "handlePromise");
          const handlePromiseOnce = onetime(handlePromise);
          handleInput(spawned, parsed.options.input);
          spawned.all = makeAllStream(spawned, parsed.options);
          return mergePromise(spawned, handlePromiseOnce);
        }, "execa");
        module2.exports = execa2;
        module2.exports.sync = (file, args, options) => {
          const parsed = handleArguments(file, args, options);
          const command = joinCommand(file, args);
          const escapedCommand = getEscapedCommand(file, args);
          validateInputSync(parsed.options);
          let result;
          try {
            result = childProcess.spawnSync(parsed.file, parsed.args, parsed.options);
          } catch (error2) {
            throw makeError({
              error: error2,
              stdout: "",
              stderr: "",
              all: "",
              command,
              escapedCommand,
              parsed,
              timedOut: false,
              isCanceled: false,
              killed: false
            });
          }
          const stdout = handleOutput(parsed.options, result.stdout, result.error);
          const stderr = handleOutput(parsed.options, result.stderr, result.error);
          if (result.error || result.status !== 0 || result.signal !== null) {
            const error2 = makeError({
              stdout,
              stderr,
              error: result.error,
              signal: result.signal,
              exitCode: result.status,
              command,
              escapedCommand,
              parsed,
              timedOut: result.error && result.error.code === "ETIMEDOUT",
              isCanceled: false,
              killed: result.signal !== null
            });
            if (!parsed.options.reject) {
              return error2;
            }
            throw error2;
          }
          return {
            command,
            escapedCommand,
            exitCode: 0,
            stdout,
            stderr,
            failed: false,
            timedOut: false,
            isCanceled: false,
            killed: false
          };
        };
        module2.exports.command = (command, options) => {
          const [file, ...args] = parseCommand(command);
          return execa2(file, args, options);
        };
        module2.exports.commandSync = (command, options) => {
          const [file, ...args] = parseCommand(command);
          return execa2.sync(file, args, options);
        };
        module2.exports.node = (scriptPath, args, options = {}) => {
          if (args && !Array.isArray(args) && typeof args === "object") {
            options = args;
            args = [];
          }
          const stdio = normalizeStdio.node(options);
          const defaultExecArgv = process.execArgv.filter((arg2) => !arg2.startsWith("--inspect"));
          const {
            nodePath = process.execPath,
            nodeOptions = defaultExecArgv
          } = options;
          return execa2(nodePath, [
            ...nodeOptions,
            scriptPath,
            ...Array.isArray(args) ? args : []
          ], {
            ...options,
            stdin: void 0,
            stdout: void 0,
            stderr: void 0,
            stdio,
            shell: false
          });
        };
      }
    });
    var require_retry_operation = __commonJS({
      "../../node_modules/.pnpm/retry@0.13.1/node_modules/retry/lib/retry_operation.js"(exports2, module2) {
        function RetryOperation(timeouts, options) {
          if (typeof options === "boolean") {
            options = { forever: options };
          }
          this._originalTimeouts = JSON.parse(JSON.stringify(timeouts));
          this._timeouts = timeouts;
          this._options = options || {};
          this._maxRetryTime = options && options.maxRetryTime || Infinity;
          this._fn = null;
          this._errors = [];
          this._attempts = 1;
          this._operationTimeout = null;
          this._operationTimeoutCb = null;
          this._timeout = null;
          this._operationStart = null;
          this._timer = null;
          if (this._options.forever) {
            this._cachedTimeouts = this._timeouts.slice(0);
          }
        }
        __name(RetryOperation, "RetryOperation");
        module2.exports = RetryOperation;
        RetryOperation.prototype.reset = function() {
          this._attempts = 1;
          this._timeouts = this._originalTimeouts.slice(0);
        };
        RetryOperation.prototype.stop = function() {
          if (this._timeout) {
            clearTimeout(this._timeout);
          }
          if (this._timer) {
            clearTimeout(this._timer);
          }
          this._timeouts = [];
          this._cachedTimeouts = null;
        };
        RetryOperation.prototype.retry = function(err) {
          if (this._timeout) {
            clearTimeout(this._timeout);
          }
          if (!err) {
            return false;
          }
          var currentTime = new Date().getTime();
          if (err && currentTime - this._operationStart >= this._maxRetryTime) {
            this._errors.push(err);
            this._errors.unshift(new Error("RetryOperation timeout occurred"));
            return false;
          }
          this._errors.push(err);
          var timeout = this._timeouts.shift();
          if (timeout === void 0) {
            if (this._cachedTimeouts) {
              this._errors.splice(0, this._errors.length - 1);
              timeout = this._cachedTimeouts.slice(-1);
            } else {
              return false;
            }
          }
          var self2 = this;
          this._timer = setTimeout(function() {
            self2._attempts++;
            if (self2._operationTimeoutCb) {
              self2._timeout = setTimeout(function() {
                self2._operationTimeoutCb(self2._attempts);
              }, self2._operationTimeout);
              if (self2._options.unref) {
                self2._timeout.unref();
              }
            }
            self2._fn(self2._attempts);
          }, timeout);
          if (this._options.unref) {
            this._timer.unref();
          }
          return true;
        };
        RetryOperation.prototype.attempt = function(fn, timeoutOps) {
          this._fn = fn;
          if (timeoutOps) {
            if (timeoutOps.timeout) {
              this._operationTimeout = timeoutOps.timeout;
            }
            if (timeoutOps.cb) {
              this._operationTimeoutCb = timeoutOps.cb;
            }
          }
          var self2 = this;
          if (this._operationTimeoutCb) {
            this._timeout = setTimeout(function() {
              self2._operationTimeoutCb();
            }, self2._operationTimeout);
          }
          this._operationStart = new Date().getTime();
          this._fn(this._attempts);
        };
        RetryOperation.prototype.try = function(fn) {
          console.log("Using RetryOperation.try() is deprecated");
          this.attempt(fn);
        };
        RetryOperation.prototype.start = function(fn) {
          console.log("Using RetryOperation.start() is deprecated");
          this.attempt(fn);
        };
        RetryOperation.prototype.start = RetryOperation.prototype.try;
        RetryOperation.prototype.errors = function() {
          return this._errors;
        };
        RetryOperation.prototype.attempts = function() {
          return this._attempts;
        };
        RetryOperation.prototype.mainError = function() {
          if (this._errors.length === 0) {
            return null;
          }
          var counts = {};
          var mainError = null;
          var mainErrorCount = 0;
          for (var i = 0; i < this._errors.length; i++) {
            var error2 = this._errors[i];
            var message = error2.message;
            var count2 = (counts[message] || 0) + 1;
            counts[message] = count2;
            if (count2 >= mainErrorCount) {
              mainError = error2;
              mainErrorCount = count2;
            }
          }
          return mainError;
        };
      }
    });
    var require_retry = __commonJS({
      "../../node_modules/.pnpm/retry@0.13.1/node_modules/retry/lib/retry.js"(exports2) {
        var RetryOperation = require_retry_operation();
        exports2.operation = function(options) {
          var timeouts = exports2.timeouts(options);
          return new RetryOperation(timeouts, {
            forever: options && (options.forever || options.retries === Infinity),
            unref: options && options.unref,
            maxRetryTime: options && options.maxRetryTime
          });
        };
        exports2.timeouts = function(options) {
          if (options instanceof Array) {
            return [].concat(options);
          }
          var opts = {
            retries: 10,
            factor: 2,
            minTimeout: 1 * 1e3,
            maxTimeout: Infinity,
            randomize: false
          };
          for (var key in options) {
            opts[key] = options[key];
          }
          if (opts.minTimeout > opts.maxTimeout) {
            throw new Error("minTimeout is greater than maxTimeout");
          }
          var timeouts = [];
          for (var i = 0; i < opts.retries; i++) {
            timeouts.push(this.createTimeout(i, opts));
          }
          if (options && options.forever && !timeouts.length) {
            timeouts.push(this.createTimeout(i, opts));
          }
          timeouts.sort(function(a, b) {
            return a - b;
          });
          return timeouts;
        };
        exports2.createTimeout = function(attempt, opts) {
          var random2 = opts.randomize ? Math.random() + 1 : 1;
          var timeout = Math.round(random2 * Math.max(opts.minTimeout, 1) * Math.pow(opts.factor, attempt));
          timeout = Math.min(timeout, opts.maxTimeout);
          return timeout;
        };
        exports2.wrap = function(obj, options, methods) {
          if (options instanceof Array) {
            methods = options;
            options = null;
          }
          if (!methods) {
            methods = [];
            for (var key in obj) {
              if (typeof obj[key] === "function") {
                methods.push(key);
              }
            }
          }
          for (var i = 0; i < methods.length; i++) {
            var method = methods[i];
            var original = obj[method];
            obj[method] = (/* @__PURE__ */ __name(function retryWrapper(original2) {
              var op = exports2.operation(options);
              var args = Array.prototype.slice.call(arguments, 1);
              var callback = args.pop();
              args.push(function(err) {
                if (op.retry(err)) {
                  return;
                }
                if (err) {
                  arguments[0] = op.mainError();
                }
                callback.apply(this, arguments);
              });
              op.attempt(function() {
                original2.apply(obj, args);
              });
            }, "retryWrapper")).bind(obj, original);
            obj[method].options = options;
          }
        };
      }
    });
    var require_retry2 = __commonJS({
      "../../node_modules/.pnpm/retry@0.13.1/node_modules/retry/index.js"(exports2, module2) {
        module2.exports = require_retry();
      }
    });
    var require_p_retry = __commonJS({
      "../../node_modules/.pnpm/p-retry@4.6.2/node_modules/p-retry/index.js"(exports2, module2) {
        "use strict";
        var retry = require_retry2();
        var networkErrorMsgs = [
          "Failed to fetch",
          "NetworkError when attempting to fetch resource.",
          "The Internet connection appears to be offline.",
          "Network request failed"
        ];
        var AbortError = class extends Error {
          constructor(message) {
            super();
            if (message instanceof Error) {
              this.originalError = message;
              ({ message } = message);
            } else {
              this.originalError = new Error(message);
              this.originalError.stack = this.stack;
            }
            this.name = "AbortError";
            this.message = message;
          }
        };
        __name(AbortError, "AbortError");
        var decorateErrorWithCounts = /* @__PURE__ */ __name((error2, attemptNumber, options) => {
          const retriesLeft = options.retries - (attemptNumber - 1);
          error2.attemptNumber = attemptNumber;
          error2.retriesLeft = retriesLeft;
          return error2;
        }, "decorateErrorWithCounts");
        var isNetworkError = /* @__PURE__ */ __name((errorMessage) => networkErrorMsgs.includes(errorMessage), "isNetworkError");
        var pRetry2 = /* @__PURE__ */ __name((input, options) => new Promise((resolve, reject) => {
          options = {
            onFailedAttempt: () => {
            },
            retries: 10,
            ...options
          };
          const operation = retry.operation(options);
          operation.attempt(async (attemptNumber) => {
            try {
              resolve(await input(attemptNumber));
            } catch (error2) {
              if (!(error2 instanceof Error)) {
                reject(new TypeError(`Non-error was thrown: "${error2}". You should only throw errors.`));
                return;
              }
              if (error2 instanceof AbortError) {
                operation.stop();
                reject(error2.originalError);
              } else if (error2 instanceof TypeError && !isNetworkError(error2.message)) {
                operation.stop();
                reject(error2);
              } else {
                decorateErrorWithCounts(error2, attemptNumber, options);
                try {
                  await options.onFailedAttempt(error2);
                } catch (error3) {
                  reject(error3);
                  return;
                }
                if (!operation.retry(error2)) {
                  reject(operation.mainError());
                }
              }
            }
          });
        }), "pRetry");
        module2.exports = pRetry2;
        module2.exports.default = pRetry2;
        module2.exports.AbortError = AbortError;
      }
    });
    var require_ansi_regex = __commonJS({
      "../../node_modules/.pnpm/ansi-regex@5.0.1/node_modules/ansi-regex/index.js"(exports2, module2) {
        "use strict";
        module2.exports = ({ onlyFirst = false } = {}) => {
          const pattern = [
            "[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)",
            "(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))"
          ].join("|");
          return new RegExp(pattern, onlyFirst ? void 0 : "g");
        };
      }
    });
    var require_strip_ansi = __commonJS({
      "../../node_modules/.pnpm/strip-ansi@6.0.1/node_modules/strip-ansi/index.js"(exports2, module2) {
        "use strict";
        var ansiRegex = require_ansi_regex();
        module2.exports = (string) => typeof string === "string" ? string.replace(ansiRegex(), "") : string;
      }
    });
    var require_new_github_issue_url = __commonJS({
      "../../node_modules/.pnpm/new-github-issue-url@0.2.1/node_modules/new-github-issue-url/index.js"(exports2, module2) {
        "use strict";
        module2.exports = (options = {}) => {
          let repoUrl;
          if (options.repoUrl) {
            repoUrl = options.repoUrl;
          } else if (options.user && options.repo) {
            repoUrl = `https://github.com/${options.user}/${options.repo}`;
          } else {
            throw new Error("You need to specify either the `repoUrl` option or both the `user` and `repo` options");
          }
          const url = new URL(`${repoUrl}/issues/new`);
          const types = [
            "body",
            "title",
            "labels",
            "template",
            "milestone",
            "assignee",
            "projects"
          ];
          for (const type of types) {
            let value = options[type];
            if (value === void 0) {
              continue;
            }
            if (type === "labels" || type === "projects") {
              if (!Array.isArray(value)) {
                throw new TypeError(`The \`${type}\` option should be an array`);
              }
              value = value.join(",");
            }
            url.searchParams.set(type, value);
          }
          return url.toString();
        };
        module2.exports.default = module2.exports;
      }
    });
    var require_symbols = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/core/symbols.js"(exports2, module2) {
        module2.exports = {
          kClose: Symbol("close"),
          kDestroy: Symbol("destroy"),
          kDispatch: Symbol("dispatch"),
          kUrl: Symbol("url"),
          kWriting: Symbol("writing"),
          kResuming: Symbol("resuming"),
          kQueue: Symbol("queue"),
          kConnect: Symbol("connect"),
          kConnecting: Symbol("connecting"),
          kHeadersList: Symbol("headers list"),
          kKeepAliveDefaultTimeout: Symbol("default keep alive timeout"),
          kKeepAliveMaxTimeout: Symbol("max keep alive timeout"),
          kKeepAliveTimeoutThreshold: Symbol("keep alive timeout threshold"),
          kKeepAliveTimeoutValue: Symbol("keep alive timeout"),
          kKeepAlive: Symbol("keep alive"),
          kHeadersTimeout: Symbol("headers timeout"),
          kBodyTimeout: Symbol("body timeout"),
          kServerName: Symbol("server name"),
          kHost: Symbol("host"),
          kNoRef: Symbol("no ref"),
          kBodyUsed: Symbol("used"),
          kRunning: Symbol("running"),
          kBlocking: Symbol("blocking"),
          kPending: Symbol("pending"),
          kSize: Symbol("size"),
          kBusy: Symbol("busy"),
          kQueued: Symbol("queued"),
          kFree: Symbol("free"),
          kConnected: Symbol("connected"),
          kClosed: Symbol("closed"),
          kNeedDrain: Symbol("need drain"),
          kReset: Symbol("reset"),
          kDestroyed: Symbol("destroyed"),
          kMaxHeadersSize: Symbol("max headers size"),
          kRunningIdx: Symbol("running index"),
          kPendingIdx: Symbol("pending index"),
          kError: Symbol("error"),
          kClients: Symbol("clients"),
          kClient: Symbol("client"),
          kParser: Symbol("parser"),
          kOnDestroyed: Symbol("destroy callbacks"),
          kPipelining: Symbol("pipelinig"),
          kSocket: Symbol("socket"),
          kHostHeader: Symbol("host header"),
          kConnector: Symbol("connector"),
          kStrictContentLength: Symbol("strict content length"),
          kMaxRedirections: Symbol("maxRedirections"),
          kMaxRequests: Symbol("maxRequestsPerClient"),
          kProxy: Symbol("proxy agent options"),
          kCounter: Symbol("socket request counter")
        };
      }
    });
    var require_errors = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/core/errors.js"(exports2, module2) {
        "use strict";
        var UndiciError = class extends Error {
          constructor(message) {
            super(message);
            this.name = "UndiciError";
            this.code = "UND_ERR";
          }
        };
        __name(UndiciError, "UndiciError");
        var ConnectTimeoutError = class extends UndiciError {
          constructor(message) {
            super(message);
            Error.captureStackTrace(this, ConnectTimeoutError);
            this.name = "ConnectTimeoutError";
            this.message = message || "Connect Timeout Error";
            this.code = "UND_ERR_CONNECT_TIMEOUT";
          }
        };
        __name(ConnectTimeoutError, "ConnectTimeoutError");
        var HeadersTimeoutError = class extends UndiciError {
          constructor(message) {
            super(message);
            Error.captureStackTrace(this, HeadersTimeoutError);
            this.name = "HeadersTimeoutError";
            this.message = message || "Headers Timeout Error";
            this.code = "UND_ERR_HEADERS_TIMEOUT";
          }
        };
        __name(HeadersTimeoutError, "HeadersTimeoutError");
        var HeadersOverflowError = class extends UndiciError {
          constructor(message) {
            super(message);
            Error.captureStackTrace(this, HeadersOverflowError);
            this.name = "HeadersOverflowError";
            this.message = message || "Headers Overflow Error";
            this.code = "UND_ERR_HEADERS_OVERFLOW";
          }
        };
        __name(HeadersOverflowError, "HeadersOverflowError");
        var BodyTimeoutError = class extends UndiciError {
          constructor(message) {
            super(message);
            Error.captureStackTrace(this, BodyTimeoutError);
            this.name = "BodyTimeoutError";
            this.message = message || "Body Timeout Error";
            this.code = "UND_ERR_BODY_TIMEOUT";
          }
        };
        __name(BodyTimeoutError, "BodyTimeoutError");
        var ResponseStatusCodeError = class extends UndiciError {
          constructor(message, statusCode, headers, body) {
            super(message);
            Error.captureStackTrace(this, ResponseStatusCodeError);
            this.name = "ResponseStatusCodeError";
            this.message = message || "Response Status Code Error";
            this.code = "UND_ERR_RESPONSE_STATUS_CODE";
            this.body = body;
            this.status = statusCode;
            this.statusCode = statusCode;
            this.headers = headers;
          }
        };
        __name(ResponseStatusCodeError, "ResponseStatusCodeError");
        var InvalidArgumentError = class extends UndiciError {
          constructor(message) {
            super(message);
            Error.captureStackTrace(this, InvalidArgumentError);
            this.name = "InvalidArgumentError";
            this.message = message || "Invalid Argument Error";
            this.code = "UND_ERR_INVALID_ARG";
          }
        };
        __name(InvalidArgumentError, "InvalidArgumentError");
        var InvalidReturnValueError = class extends UndiciError {
          constructor(message) {
            super(message);
            Error.captureStackTrace(this, InvalidReturnValueError);
            this.name = "InvalidReturnValueError";
            this.message = message || "Invalid Return Value Error";
            this.code = "UND_ERR_INVALID_RETURN_VALUE";
          }
        };
        __name(InvalidReturnValueError, "InvalidReturnValueError");
        var RequestAbortedError = class extends UndiciError {
          constructor(message) {
            super(message);
            Error.captureStackTrace(this, RequestAbortedError);
            this.name = "AbortError";
            this.message = message || "Request aborted";
            this.code = "UND_ERR_ABORTED";
          }
        };
        __name(RequestAbortedError, "RequestAbortedError");
        var InformationalError = class extends UndiciError {
          constructor(message) {
            super(message);
            Error.captureStackTrace(this, InformationalError);
            this.name = "InformationalError";
            this.message = message || "Request information";
            this.code = "UND_ERR_INFO";
          }
        };
        __name(InformationalError, "InformationalError");
        var RequestContentLengthMismatchError = class extends UndiciError {
          constructor(message) {
            super(message);
            Error.captureStackTrace(this, RequestContentLengthMismatchError);
            this.name = "RequestContentLengthMismatchError";
            this.message = message || "Request body length does not match content-length header";
            this.code = "UND_ERR_REQ_CONTENT_LENGTH_MISMATCH";
          }
        };
        __name(RequestContentLengthMismatchError, "RequestContentLengthMismatchError");
        var ResponseContentLengthMismatchError = class extends UndiciError {
          constructor(message) {
            super(message);
            Error.captureStackTrace(this, ResponseContentLengthMismatchError);
            this.name = "ResponseContentLengthMismatchError";
            this.message = message || "Response body length does not match content-length header";
            this.code = "UND_ERR_RES_CONTENT_LENGTH_MISMATCH";
          }
        };
        __name(ResponseContentLengthMismatchError, "ResponseContentLengthMismatchError");
        var ClientDestroyedError = class extends UndiciError {
          constructor(message) {
            super(message);
            Error.captureStackTrace(this, ClientDestroyedError);
            this.name = "ClientDestroyedError";
            this.message = message || "The client is destroyed";
            this.code = "UND_ERR_DESTROYED";
          }
        };
        __name(ClientDestroyedError, "ClientDestroyedError");
        var ClientClosedError = class extends UndiciError {
          constructor(message) {
            super(message);
            Error.captureStackTrace(this, ClientClosedError);
            this.name = "ClientClosedError";
            this.message = message || "The client is closed";
            this.code = "UND_ERR_CLOSED";
          }
        };
        __name(ClientClosedError, "ClientClosedError");
        var SocketError = class extends UndiciError {
          constructor(message, socket) {
            super(message);
            Error.captureStackTrace(this, SocketError);
            this.name = "SocketError";
            this.message = message || "Socket error";
            this.code = "UND_ERR_SOCKET";
            this.socket = socket;
          }
        };
        __name(SocketError, "SocketError");
        var NotSupportedError = class extends UndiciError {
          constructor(message) {
            super(message);
            Error.captureStackTrace(this, NotSupportedError);
            this.name = "NotSupportedError";
            this.message = message || "Not supported error";
            this.code = "UND_ERR_NOT_SUPPORTED";
          }
        };
        __name(NotSupportedError, "NotSupportedError");
        var BalancedPoolMissingUpstreamError = class extends UndiciError {
          constructor(message) {
            super(message);
            Error.captureStackTrace(this, NotSupportedError);
            this.name = "MissingUpstreamError";
            this.message = message || "No upstream has been added to the BalancedPool";
            this.code = "UND_ERR_BPL_MISSING_UPSTREAM";
          }
        };
        __name(BalancedPoolMissingUpstreamError, "BalancedPoolMissingUpstreamError");
        var HTTPParserError = class extends Error {
          constructor(message, code, data) {
            super(message);
            Error.captureStackTrace(this, HTTPParserError);
            this.name = "HTTPParserError";
            this.code = code ? `HPE_${code}` : void 0;
            this.data = data ? data.toString() : void 0;
          }
        };
        __name(HTTPParserError, "HTTPParserError");
        module2.exports = {
          HTTPParserError,
          UndiciError,
          HeadersTimeoutError,
          HeadersOverflowError,
          BodyTimeoutError,
          RequestContentLengthMismatchError,
          ConnectTimeoutError,
          ResponseStatusCodeError,
          InvalidArgumentError,
          InvalidReturnValueError,
          RequestAbortedError,
          ClientDestroyedError,
          ClientClosedError,
          InformationalError,
          SocketError,
          NotSupportedError,
          ResponseContentLengthMismatchError,
          BalancedPoolMissingUpstreamError
        };
      }
    });
    var require_util2 = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/core/util.js"(exports2, module2) {
        "use strict";
        var assert = require("assert");
        var { kDestroyed, kBodyUsed } = require_symbols();
        var { IncomingMessage } = require("http");
        var stream2 = require("stream");
        var net2 = require("net");
        var { InvalidArgumentError } = require_errors();
        var { Blob } = require("buffer");
        var nodeUtil = require("util");
        function nop() {
        }
        __name(nop, "nop");
        function isStream(obj) {
          return obj && typeof obj.pipe === "function";
        }
        __name(isStream, "isStream");
        function isBlobLike(object) {
          return Blob && object instanceof Blob || object && typeof object === "object" && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(Blob|File)$/.test(object[Symbol.toStringTag]);
        }
        __name(isBlobLike, "isBlobLike");
        function isObject3(val) {
          return val !== null && typeof val === "object";
        }
        __name(isObject3, "isObject");
        function encode(val) {
          return encodeURIComponent(val);
        }
        __name(encode, "encode");
        function buildURL(url, queryParams) {
          if (url.includes("?") || url.includes("#")) {
            throw new Error('Query params cannot be passed when url already contains "?" or "#".');
          }
          if (!isObject3(queryParams)) {
            throw new Error("Query params must be an object");
          }
          const parts = [];
          for (let [key, val] of Object.entries(queryParams)) {
            if (val === null || typeof val === "undefined") {
              continue;
            }
            if (!Array.isArray(val)) {
              val = [val];
            }
            for (const v of val) {
              if (isObject3(v)) {
                throw new Error("Passing object as a query param is not supported, please serialize to string up-front");
              }
              parts.push(encode(key) + "=" + encode(v));
            }
          }
          const serializedParams = parts.join("&");
          if (serializedParams) {
            url += "?" + serializedParams;
          }
          return url;
        }
        __name(buildURL, "buildURL");
        function parseURL(url) {
          if (typeof url === "string") {
            url = new URL(url);
          }
          if (!url || typeof url !== "object") {
            throw new InvalidArgumentError("invalid url");
          }
          if (url.port != null && url.port !== "" && !Number.isFinite(parseInt(url.port))) {
            throw new InvalidArgumentError("invalid port");
          }
          if (url.path != null && typeof url.path !== "string") {
            throw new InvalidArgumentError("invalid path");
          }
          if (url.pathname != null && typeof url.pathname !== "string") {
            throw new InvalidArgumentError("invalid pathname");
          }
          if (url.hostname != null && typeof url.hostname !== "string") {
            throw new InvalidArgumentError("invalid hostname");
          }
          if (url.origin != null && typeof url.origin !== "string") {
            throw new InvalidArgumentError("invalid origin");
          }
          if (!/^https?:/.test(url.origin || url.protocol)) {
            throw new InvalidArgumentError("invalid protocol");
          }
          if (!(url instanceof URL)) {
            const port = url.port != null ? url.port : url.protocol === "https:" ? 443 : 80;
            const origin = url.origin != null ? url.origin : `${url.protocol}//${url.hostname}:${port}`;
            const path7 = url.path != null ? url.path : `${url.pathname || ""}${url.search || ""}`;
            url = new URL(path7, origin);
          }
          return url;
        }
        __name(parseURL, "parseURL");
        function parseOrigin(url) {
          url = parseURL(url);
          if (url.pathname !== "/" || url.search || url.hash) {
            throw new InvalidArgumentError("invalid url");
          }
          return url;
        }
        __name(parseOrigin, "parseOrigin");
        function getHostname(host) {
          if (host[0] === "[") {
            const idx2 = host.indexOf("]");
            assert(idx2 !== -1);
            return host.substr(1, idx2 - 1);
          }
          const idx = host.indexOf(":");
          if (idx === -1)
            return host;
          return host.substr(0, idx);
        }
        __name(getHostname, "getHostname");
        function getServerName(host) {
          if (!host) {
            return null;
          }
          assert.strictEqual(typeof host, "string");
          const servername = getHostname(host);
          if (net2.isIP(servername)) {
            return "";
          }
          return servername;
        }
        __name(getServerName, "getServerName");
        function deepClone2(obj) {
          return JSON.parse(JSON.stringify(obj));
        }
        __name(deepClone2, "deepClone");
        function isAsyncIterable(obj) {
          return !!(obj != null && typeof obj[Symbol.asyncIterator] === "function");
        }
        __name(isAsyncIterable, "isAsyncIterable");
        function isIterable(obj) {
          return !!(obj != null && (typeof obj[Symbol.iterator] === "function" || typeof obj[Symbol.asyncIterator] === "function"));
        }
        __name(isIterable, "isIterable");
        function bodyLength(body) {
          if (body == null) {
            return 0;
          } else if (isStream(body)) {
            const state = body._readableState;
            return state && state.ended === true && Number.isFinite(state.length) ? state.length : null;
          } else if (isBlobLike(body)) {
            return body.size != null ? body.size : null;
          } else if (isBuffer(body)) {
            return body.byteLength;
          }
          return null;
        }
        __name(bodyLength, "bodyLength");
        function isDestroyed(stream3) {
          return !stream3 || !!(stream3.destroyed || stream3[kDestroyed]);
        }
        __name(isDestroyed, "isDestroyed");
        function isReadableAborted(stream3) {
          const state = stream3 && stream3._readableState;
          return isDestroyed(stream3) && state && !state.endEmitted;
        }
        __name(isReadableAborted, "isReadableAborted");
        function destroy(stream3, err) {
          if (!isStream(stream3) || isDestroyed(stream3)) {
            return;
          }
          if (typeof stream3.destroy === "function") {
            if (Object.getPrototypeOf(stream3).constructor === IncomingMessage) {
              stream3.socket = null;
            }
            stream3.destroy(err);
          } else if (err) {
            process.nextTick((stream4, err2) => {
              stream4.emit("error", err2);
            }, stream3, err);
          }
          if (stream3.destroyed !== true) {
            stream3[kDestroyed] = true;
          }
        }
        __name(destroy, "destroy");
        var KEEPALIVE_TIMEOUT_EXPR = /timeout=(\d+)/;
        function parseKeepAliveTimeout(val) {
          const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR);
          return m ? parseInt(m[1], 10) * 1e3 : null;
        }
        __name(parseKeepAliveTimeout, "parseKeepAliveTimeout");
        function parseHeaders(headers, obj = {}) {
          for (let i = 0; i < headers.length; i += 2) {
            const key = headers[i].toString().toLowerCase();
            let val = obj[key];
            if (!val) {
              obj[key] = headers[i + 1].toString();
            } else {
              if (!Array.isArray(val)) {
                val = [val];
                obj[key] = val;
              }
              val.push(headers[i + 1].toString());
            }
          }
          return obj;
        }
        __name(parseHeaders, "parseHeaders");
        function parseRawHeaders(headers) {
          return headers.map((header) => header.toString());
        }
        __name(parseRawHeaders, "parseRawHeaders");
        function isBuffer(buffer) {
          return buffer instanceof Uint8Array || Buffer.isBuffer(buffer);
        }
        __name(isBuffer, "isBuffer");
        function validateHandler(handler, method, upgrade) {
          if (!handler || typeof handler !== "object") {
            throw new InvalidArgumentError("handler must be an object");
          }
          if (typeof handler.onConnect !== "function") {
            throw new InvalidArgumentError("invalid onConnect method");
          }
          if (typeof handler.onError !== "function") {
            throw new InvalidArgumentError("invalid onError method");
          }
          if (typeof handler.onBodySent !== "function" && handler.onBodySent !== void 0) {
            throw new InvalidArgumentError("invalid onBodySent method");
          }
          if (upgrade || method === "CONNECT") {
            if (typeof handler.onUpgrade !== "function") {
              throw new InvalidArgumentError("invalid onUpgrade method");
            }
          } else {
            if (typeof handler.onHeaders !== "function") {
              throw new InvalidArgumentError("invalid onHeaders method");
            }
            if (typeof handler.onData !== "function") {
              throw new InvalidArgumentError("invalid onData method");
            }
            if (typeof handler.onComplete !== "function") {
              throw new InvalidArgumentError("invalid onComplete method");
            }
          }
        }
        __name(validateHandler, "validateHandler");
        function isDisturbed(body) {
          return !!(body && (stream2.isDisturbed ? stream2.isDisturbed(body) || body[kBodyUsed] : body[kBodyUsed] || body.readableDidRead || body._readableState && body._readableState.dataEmitted || isReadableAborted(body)));
        }
        __name(isDisturbed, "isDisturbed");
        function isErrored(body) {
          return !!(body && (stream2.isErrored ? stream2.isErrored(body) : /state: 'errored'/.test(nodeUtil.inspect(body))));
        }
        __name(isErrored, "isErrored");
        function isReadable(body) {
          return !!(body && (stream2.isReadable ? stream2.isReadable(body) : /state: 'readable'/.test(nodeUtil.inspect(body))));
        }
        __name(isReadable, "isReadable");
        function getSocketInfo(socket) {
          return {
            localAddress: socket.localAddress,
            localPort: socket.localPort,
            remoteAddress: socket.remoteAddress,
            remotePort: socket.remotePort,
            remoteFamily: socket.remoteFamily,
            timeout: socket.timeout,
            bytesWritten: socket.bytesWritten,
            bytesRead: socket.bytesRead
          };
        }
        __name(getSocketInfo, "getSocketInfo");
        var ReadableStream;
        function ReadableStreamFrom(iterable) {
          if (!ReadableStream) {
            ReadableStream = require("stream/web").ReadableStream;
          }
          if (ReadableStream.from) {
            return ReadableStream.from(iterable);
          }
          let iterator;
          return new ReadableStream({
            async start() {
              iterator = iterable[Symbol.asyncIterator]();
            },
            async pull(controller) {
              const { done, value } = await iterator.next();
              if (done) {
                queueMicrotask(() => {
                  controller.close();
                });
              } else {
                const buf = Buffer.isBuffer(value) ? value : Buffer.from(value);
                controller.enqueue(new Uint8Array(buf));
              }
              return controller.desiredSize > 0;
            },
            async cancel(reason) {
              await iterator.return();
            }
          }, 0);
        }
        __name(ReadableStreamFrom, "ReadableStreamFrom");
        function isFormDataLike(chunk) {
          return chunk && chunk.constructor && chunk.constructor.name === "FormData";
        }
        __name(isFormDataLike, "isFormDataLike");
        var kEnumerableProperty = /* @__PURE__ */ Object.create(null);
        kEnumerableProperty.enumerable = true;
        module2.exports = {
          kEnumerableProperty,
          nop,
          isDisturbed,
          isErrored,
          isReadable,
          toUSVString: nodeUtil.toUSVString || ((val) => `${val}`),
          isReadableAborted,
          isBlobLike,
          parseOrigin,
          parseURL,
          getServerName,
          isStream,
          isIterable,
          isAsyncIterable,
          isDestroyed,
          parseRawHeaders,
          parseHeaders,
          parseKeepAliveTimeout,
          destroy,
          bodyLength,
          deepClone: deepClone2,
          ReadableStreamFrom,
          isBuffer,
          validateHandler,
          getSocketInfo,
          isFormDataLike,
          buildURL
        };
      }
    });
    var require_constants = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/fetch/constants.js"(exports2, module2) {
        "use strict";
        var corsSafeListedMethods = ["GET", "HEAD", "POST"];
        var nullBodyStatus = [101, 204, 205, 304];
        var redirectStatus = [301, 302, 303, 307, 308];
        var referrerPolicy = [
          "",
          "no-referrer",
          "no-referrer-when-downgrade",
          "same-origin",
          "origin",
          "strict-origin",
          "origin-when-cross-origin",
          "strict-origin-when-cross-origin",
          "unsafe-url"
        ];
        var requestRedirect = ["follow", "manual", "error"];
        var safeMethods = ["GET", "HEAD", "OPTIONS", "TRACE"];
        var requestMode = ["navigate", "same-origin", "no-cors", "cors"];
        var requestCredentials = ["omit", "same-origin", "include"];
        var requestCache = [
          "default",
          "no-store",
          "reload",
          "no-cache",
          "force-cache",
          "only-if-cached"
        ];
        var requestBodyHeader = [
          "content-encoding",
          "content-language",
          "content-location",
          "content-type"
        ];
        var forbiddenMethods = ["CONNECT", "TRACE", "TRACK"];
        var subresource = [
          "audio",
          "audioworklet",
          "font",
          "image",
          "manifest",
          "paintworklet",
          "script",
          "style",
          "track",
          "video",
          "xslt",
          ""
        ];
        var _a22;
        var DOMException = (_a22 = globalThis.DOMException) != null ? _a22 : (() => {
          try {
            atob("~");
          } catch (err) {
            return Object.getPrototypeOf(err).constructor;
          }
        })();
        module2.exports = {
          DOMException,
          subresource,
          forbiddenMethods,
          requestBodyHeader,
          referrerPolicy,
          requestRedirect,
          requestMode,
          requestCredentials,
          requestCache,
          redirectStatus,
          corsSafeListedMethods,
          nullBodyStatus,
          safeMethods
        };
      }
    });
    var require_symbols2 = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/fetch/symbols.js"(exports2, module2) {
        "use strict";
        module2.exports = {
          kUrl: Symbol("url"),
          kHeaders: Symbol("headers"),
          kSignal: Symbol("signal"),
          kState: Symbol("state"),
          kGuard: Symbol("guard"),
          kRealm: Symbol("realm")
        };
      }
    });
    var require_webidl = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/fetch/webidl.js"(exports2, module2) {
        "use strict";
        var { types } = require("util");
        var { hasOwn, toUSVString } = require_util3();
        var webidl = {};
        webidl.converters = {};
        webidl.util = {};
        webidl.errors = {};
        webidl.errors.exception = function(message) {
          throw new TypeError(`${message.header}: ${message.message}`);
        };
        webidl.errors.conversionFailed = function(context3) {
          const plural = context3.types.length === 1 ? "" : " one of";
          const message = `${context3.argument} could not be converted to${plural}: ${context3.types.join(", ")}.`;
          return webidl.errors.exception({
            header: context3.prefix,
            message
          });
        };
        webidl.errors.invalidArgument = function(context3) {
          return webidl.errors.exception({
            header: context3.prefix,
            message: `"${context3.value}" is an invalid ${context3.type}.`
          });
        };
        webidl.util.Type = function(V) {
          switch (typeof V) {
            case "undefined":
              return "Undefined";
            case "boolean":
              return "Boolean";
            case "string":
              return "String";
            case "symbol":
              return "Symbol";
            case "number":
              return "Number";
            case "bigint":
              return "BigInt";
            case "function":
            case "object": {
              if (V === null) {
                return "Null";
              }
              return "Object";
            }
          }
        };
        webidl.util.ConvertToInt = function(V, bitLength, signedness, opts = {}) {
          let upperBound;
          let lowerBound;
          if (bitLength === 64) {
            upperBound = Math.pow(2, 53) - 1;
            if (signedness === "unsigned") {
              lowerBound = 0;
            } else {
              lowerBound = Math.pow(-2, 53) + 1;
            }
          } else if (signedness === "unsigned") {
            lowerBound = 0;
            upperBound = Math.pow(2, bitLength) - 1;
          } else {
            lowerBound = Math.pow(-2, bitLength) - 1;
            upperBound = Math.pow(2, bitLength - 1) - 1;
          }
          let x = Number(V);
          if (Object.is(-0, x)) {
            x = 0;
          }
          if (opts.enforceRange === true) {
            if (Number.isNaN(x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {
              webidl.errors.exception({
                header: "Integer conversion",
                message: `Could not convert ${V} to an integer.`
              });
            }
            x = webidl.util.IntegerPart(x);
            if (x < lowerBound || x > upperBound) {
              webidl.errors.exception({
                header: "Integer conversion",
                message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`
              });
            }
            return x;
          }
          if (!Number.isNaN(x) && opts.clamp === true) {
            x = Math.min(Math.max(x, lowerBound), upperBound);
            if (Math.floor(x) % 2 === 0) {
              x = Math.floor(x);
            } else {
              x = Math.ceil(x);
            }
            return x;
          }
          if (Number.isNaN(x) || Object.is(0, x) || x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY) {
            return 0;
          }
          x = webidl.util.IntegerPart(x);
          x = x % Math.pow(2, bitLength);
          if (signedness === "signed" && x >= Math.pow(2, bitLength) - 1) {
            return x - Math.pow(2, bitLength);
          }
          return x;
        };
        webidl.util.IntegerPart = function(n) {
          const r = Math.floor(Math.abs(n));
          if (n < 0) {
            return -1 * r;
          }
          return r;
        };
        webidl.sequenceConverter = function(converter) {
          return (V) => {
            var _a22;
            if (webidl.util.Type(V) !== "Object") {
              webidl.errors.exception({
                header: "Sequence",
                message: `Value of type ${webidl.util.Type(V)} is not an Object.`
              });
            }
            const method = (_a22 = V == null ? void 0 : V[Symbol.iterator]) == null ? void 0 : _a22.call(V);
            const seq = [];
            if (method === void 0 || typeof method.next !== "function") {
              webidl.errors.exception({
                header: "Sequence",
                message: "Object is not an iterator."
              });
            }
            while (true) {
              const { done, value } = method.next();
              if (done) {
                break;
              }
              seq.push(converter(value));
            }
            return seq;
          };
        };
        webidl.recordConverter = function(keyConverter, valueConverter) {
          return (V) => {
            const record = {};
            const type = webidl.util.Type(V);
            if (type === "Undefined" || type === "Null") {
              return record;
            }
            if (type !== "Object") {
              webidl.errors.exception({
                header: "Record",
                message: `Expected ${V} to be an Object type.`
              });
            }
            for (let [key, value] of Object.entries(V)) {
              key = keyConverter(key);
              value = valueConverter(value);
              record[key] = value;
            }
            return record;
          };
        };
        webidl.interfaceConverter = function(i) {
          return (V, opts = {}) => {
            if (opts.strict !== false && !(V instanceof i)) {
              webidl.errors.exception({
                header: i.name,
                message: `Expected ${V} to be an instance of ${i.name}.`
              });
            }
            return V;
          };
        };
        webidl.dictionaryConverter = function(converters) {
          return (dictionary) => {
            const type = webidl.util.Type(dictionary);
            const dict = {};
            if (type !== "Null" && type !== "Undefined" && type !== "Object") {
              webidl.errors.exception({
                header: "Dictionary",
                message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`
              });
            }
            for (const options of converters) {
              const { key, defaultValue, required, converter } = options;
              if (required === true) {
                if (!hasOwn(dictionary, key)) {
                  webidl.errors.exception({
                    header: "Dictionary",
                    message: `Missing required key "${key}".`
                  });
                }
              }
              let value = dictionary[key];
              const hasDefault = hasOwn(options, "defaultValue");
              if (hasDefault && value !== null) {
                value = value != null ? value : defaultValue;
              }
              if (required || hasDefault || value !== void 0) {
                value = converter(value);
                if (options.allowedValues && !options.allowedValues.includes(value)) {
                  webidl.errors.exception({
                    header: "Dictionary",
                    message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(", ")}.`
                  });
                }
                dict[key] = value;
              }
            }
            return dict;
          };
        };
        webidl.nullableConverter = function(converter) {
          return (V) => {
            if (V === null) {
              return V;
            }
            return converter(V);
          };
        };
        webidl.converters.DOMString = function(V, opts = {}) {
          if (V === null && opts.legacyNullToEmptyString) {
            return "";
          }
          if (typeof V === "symbol") {
            throw new TypeError("Could not convert argument of type symbol to string.");
          }
          return String(V);
        };
        var isNotLatin1 = /[^\u0000-\u00ff]/;
        webidl.converters.ByteString = function(V) {
          const x = webidl.converters.DOMString(V);
          if (isNotLatin1.test(x)) {
            throw new TypeError("Argument is not a ByteString");
          }
          return x;
        };
        webidl.converters.USVString = toUSVString;
        webidl.converters.boolean = function(V) {
          const x = Boolean(V);
          return x;
        };
        webidl.converters.any = function(V) {
          return V;
        };
        webidl.converters["long long"] = function(V, opts) {
          const x = webidl.util.ConvertToInt(V, 64, "signed", opts);
          return x;
        };
        webidl.converters["unsigned short"] = function(V) {
          const x = webidl.util.ConvertToInt(V, 16, "unsigned");
          return x;
        };
        webidl.converters.ArrayBuffer = function(V, opts = {}) {
          if (webidl.util.Type(V) !== "Object" || !types.isAnyArrayBuffer(V)) {
            webidl.errors.conversionFailed({
              prefix: `${V}`,
              argument: `${V}`,
              types: ["ArrayBuffer"]
            });
          }
          if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {
            webidl.errors.exception({
              header: "ArrayBuffer",
              message: "SharedArrayBuffer is not allowed."
            });
          }
          return V;
        };
        webidl.converters.TypedArray = function(V, T, opts = {}) {
          if (webidl.util.Type(V) !== "Object" || !types.isTypedArray(V) || V.constructor.name !== T.name) {
            webidl.errors.conversionFailed({
              prefix: `${T.name}`,
              argument: `${V}`,
              types: [T.name]
            });
          }
          if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
            webidl.errors.exception({
              header: "ArrayBuffer",
              message: "SharedArrayBuffer is not allowed."
            });
          }
          return V;
        };
        webidl.converters.DataView = function(V, opts = {}) {
          if (webidl.util.Type(V) !== "Object" || !types.isDataView(V)) {
            webidl.errors.exception({
              header: "DataView",
              message: "Object is not a DataView."
            });
          }
          if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {
            webidl.errors.exception({
              header: "ArrayBuffer",
              message: "SharedArrayBuffer is not allowed."
            });
          }
          return V;
        };
        webidl.converters.BufferSource = function(V, opts = {}) {
          if (types.isAnyArrayBuffer(V)) {
            return webidl.converters.ArrayBuffer(V, opts);
          }
          if (types.isTypedArray(V)) {
            return webidl.converters.TypedArray(V, V.constructor);
          }
          if (types.isDataView(V)) {
            return webidl.converters.DataView(V, opts);
          }
          throw new TypeError(`Could not convert ${V} to a BufferSource.`);
        };
        webidl.converters["sequence<ByteString>"] = webidl.sequenceConverter(webidl.converters.ByteString);
        webidl.converters["sequence<sequence<ByteString>>"] = webidl.sequenceConverter(webidl.converters["sequence<ByteString>"]);
        webidl.converters["record<ByteString, ByteString>"] = webidl.recordConverter(webidl.converters.ByteString, webidl.converters.ByteString);
        module2.exports = {
          webidl
        };
      }
    });
    var require_file = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/fetch/file.js"(exports2, module2) {
        "use strict";
        var { Blob } = require("buffer");
        var { types } = require("util");
        var { kState } = require_symbols2();
        var { isBlobLike } = require_util3();
        var { webidl } = require_webidl();
        var File = class extends Blob {
          constructor(fileBits, fileName, options = {}) {
            if (arguments.length < 2) {
              throw new TypeError("2 arguments required");
            }
            fileBits = webidl.converters["sequence<BlobPart>"](fileBits);
            fileName = webidl.converters.USVString(fileName);
            options = webidl.converters.FilePropertyBag(options);
            const n = fileName;
            const d = options.lastModified;
            super(processBlobParts(fileBits, options), { type: options.type });
            this[kState] = {
              name: n,
              lastModified: d
            };
          }
          get name() {
            if (!(this instanceof File)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].name;
          }
          get lastModified() {
            if (!(this instanceof File)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].lastModified;
          }
          get [Symbol.toStringTag]() {
            return this.constructor.name;
          }
        };
        __name(File, "File");
        var FileLike = class {
          constructor(blobLike, fileName, options = {}) {
            var _a22;
            const n = fileName;
            const t = options.type;
            const d = (_a22 = options.lastModified) != null ? _a22 : Date.now();
            this[kState] = {
              blobLike,
              name: n,
              type: t,
              lastModified: d
            };
          }
          stream(...args) {
            if (!(this instanceof FileLike)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].blobLike.stream(...args);
          }
          arrayBuffer(...args) {
            if (!(this instanceof FileLike)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].blobLike.arrayBuffer(...args);
          }
          slice(...args) {
            if (!(this instanceof FileLike)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].blobLike.slice(...args);
          }
          text(...args) {
            if (!(this instanceof FileLike)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].blobLike.text(...args);
          }
          get size() {
            if (!(this instanceof FileLike)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].blobLike.size;
          }
          get type() {
            if (!(this instanceof FileLike)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].blobLike.type;
          }
          get name() {
            if (!(this instanceof FileLike)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].name;
          }
          get lastModified() {
            if (!(this instanceof FileLike)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].lastModified;
          }
          get [Symbol.toStringTag]() {
            return "File";
          }
        };
        __name(FileLike, "FileLike");
        webidl.converters.Blob = webidl.interfaceConverter(Blob);
        webidl.converters.BlobPart = function(V, opts) {
          if (webidl.util.Type(V) === "Object") {
            if (isBlobLike(V)) {
              return webidl.converters.Blob(V, { strict: false });
            }
            return webidl.converters.BufferSource(V, opts);
          } else {
            return webidl.converters.USVString(V, opts);
          }
        };
        webidl.converters["sequence<BlobPart>"] = webidl.sequenceConverter(webidl.converters.BlobPart);
        webidl.converters.FilePropertyBag = webidl.dictionaryConverter([
          {
            key: "lastModified",
            converter: webidl.converters["long long"],
            get defaultValue() {
              return Date.now();
            }
          },
          {
            key: "type",
            converter: webidl.converters.DOMString,
            defaultValue: ""
          },
          {
            key: "endings",
            converter: (value) => {
              value = webidl.converters.DOMString(value);
              value = value.toLowerCase();
              if (value !== "native") {
                value = "transparent";
              }
              return value;
            },
            defaultValue: "transparent"
          }
        ]);
        function processBlobParts(parts, options) {
          const bytes = [];
          for (const element of parts) {
            if (typeof element === "string") {
              let s = element;
              if (options.endings === "native") {
                s = convertLineEndingsNative(s);
              }
              bytes.push(new TextEncoder().encode(s));
            } else if (types.isAnyArrayBuffer(element) || types.isTypedArray(element)) {
              if (!element.buffer) {
                bytes.push(new Uint8Array(element));
              } else {
                bytes.push(element.buffer);
              }
            } else if (isBlobLike(element)) {
              bytes.push(element);
            }
          }
          return bytes;
        }
        __name(processBlobParts, "processBlobParts");
        function convertLineEndingsNative(s) {
          let nativeLineEnding = "\n";
          if (process.platform === "win32") {
            nativeLineEnding = "\r\n";
          }
          return s.replace(/\r?\n/g, nativeLineEnding);
        }
        __name(convertLineEndingsNative, "convertLineEndingsNative");
        module2.exports = { File, FileLike };
      }
    });
    var require_util3 = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/fetch/util.js"(exports2, module2) {
        "use strict";
        var { redirectStatus } = require_constants();
        var { performance: performance3 } = require("perf_hooks");
        var { isBlobLike, toUSVString, ReadableStreamFrom } = require_util2();
        var assert = require("assert");
        var File;
        var badPorts = [
          "1",
          "7",
          "9",
          "11",
          "13",
          "15",
          "17",
          "19",
          "20",
          "21",
          "22",
          "23",
          "25",
          "37",
          "42",
          "43",
          "53",
          "69",
          "77",
          "79",
          "87",
          "95",
          "101",
          "102",
          "103",
          "104",
          "109",
          "110",
          "111",
          "113",
          "115",
          "117",
          "119",
          "123",
          "135",
          "137",
          "139",
          "143",
          "161",
          "179",
          "389",
          "427",
          "465",
          "512",
          "513",
          "514",
          "515",
          "526",
          "530",
          "531",
          "532",
          "540",
          "548",
          "554",
          "556",
          "563",
          "587",
          "601",
          "636",
          "989",
          "990",
          "993",
          "995",
          "1719",
          "1720",
          "1723",
          "2049",
          "3659",
          "4045",
          "5060",
          "5061",
          "6000",
          "6566",
          "6665",
          "6666",
          "6667",
          "6668",
          "6669",
          "6697",
          "10080"
        ];
        function responseURL(response) {
          const urlList = response.urlList;
          const length = urlList.length;
          return length === 0 ? null : urlList[length - 1].toString();
        }
        __name(responseURL, "responseURL");
        function responseLocationURL(response, requestFragment) {
          if (!redirectStatus.includes(response.status)) {
            return null;
          }
          let location = response.headersList.get("location");
          location = location ? new URL(location, responseURL(response)) : null;
          if (location && !location.hash) {
            location.hash = requestFragment;
          }
          return location;
        }
        __name(responseLocationURL, "responseLocationURL");
        function requestCurrentURL(request2) {
          return request2.urlList[request2.urlList.length - 1];
        }
        __name(requestCurrentURL, "requestCurrentURL");
        function requestBadPort(request2) {
          const url = requestCurrentURL(request2);
          if (/^https?:/.test(url.protocol) && badPorts.includes(url.port)) {
            return "blocked";
          }
          return "allowed";
        }
        __name(requestBadPort, "requestBadPort");
        function isFileLike(object) {
          if (!File) {
            File = require_file().File;
          }
          return object instanceof File || object && (typeof object.stream === "function" || typeof object.arrayBuffer === "function") && /^(File)$/.test(object[Symbol.toStringTag]);
        }
        __name(isFileLike, "isFileLike");
        function isValidReasonPhrase(statusText) {
          for (let i = 0; i < statusText.length; ++i) {
            const c = statusText.charCodeAt(i);
            if (!(c === 9 || c >= 32 && c <= 126 || c >= 128 && c <= 255)) {
              return false;
            }
          }
          return true;
        }
        __name(isValidReasonPhrase, "isValidReasonPhrase");
        function isTokenChar(c) {
          return !(c >= 127 || c <= 32 || c === "(" || c === ")" || c === "<" || c === ">" || c === "@" || c === "," || c === ";" || c === ":" || c === "\\" || c === '"' || c === "/" || c === "[" || c === "]" || c === "?" || c === "=" || c === "{" || c === "}");
        }
        __name(isTokenChar, "isTokenChar");
        function isValidHTTPToken(characters) {
          if (!characters || typeof characters !== "string") {
            return false;
          }
          for (let i = 0; i < characters.length; ++i) {
            const c = characters.charCodeAt(i);
            if (c > 127 || !isTokenChar(c)) {
              return false;
            }
          }
          return true;
        }
        __name(isValidHTTPToken, "isValidHTTPToken");
        function isValidHeaderName(potentialValue) {
          if (potentialValue.length === 0) {
            return false;
          }
          for (const char of potentialValue) {
            if (!isValidHTTPToken(char)) {
              return false;
            }
          }
          return true;
        }
        __name(isValidHeaderName, "isValidHeaderName");
        function isValidHeaderValue(potentialValue) {
          if (potentialValue.startsWith("	") || potentialValue.startsWith(" ") || potentialValue.endsWith("	") || potentialValue.endsWith(" ")) {
            return false;
          }
          if (potentialValue.includes("\0") || potentialValue.includes("\r") || potentialValue.includes("\n")) {
            return false;
          }
          return true;
        }
        __name(isValidHeaderValue, "isValidHeaderValue");
        function setRequestReferrerPolicyOnRedirect(request2, actualResponse) {
          const policy = "";
          if (policy !== "") {
            request2.referrerPolicy = policy;
          }
        }
        __name(setRequestReferrerPolicyOnRedirect, "setRequestReferrerPolicyOnRedirect");
        function crossOriginResourcePolicyCheck() {
          return "allowed";
        }
        __name(crossOriginResourcePolicyCheck, "crossOriginResourcePolicyCheck");
        function corsCheck() {
          return "success";
        }
        __name(corsCheck, "corsCheck");
        function TAOCheck() {
          return "success";
        }
        __name(TAOCheck, "TAOCheck");
        function appendFetchMetadata(httpRequest) {
          let header = null;
          header = httpRequest.mode;
          httpRequest.headersList.set("sec-fetch-mode", header);
        }
        __name(appendFetchMetadata, "appendFetchMetadata");
        function appendRequestOriginHeader(request2) {
          let serializedOrigin = request2.origin;
          if (request2.responseTainting === "cors" || request2.mode === "websocket") {
            if (serializedOrigin) {
              request2.headersList.append("Origin", serializedOrigin);
            }
          } else if (request2.method !== "GET" && request2.method !== "HEAD") {
            switch (request2.referrerPolicy) {
              case "no-referrer":
                serializedOrigin = null;
                break;
              case "no-referrer-when-downgrade":
              case "strict-origin":
              case "strict-origin-when-cross-origin":
                if (/^https:/.test(request2.origin) && !/^https:/.test(requestCurrentURL(request2))) {
                  serializedOrigin = null;
                }
                break;
              case "same-origin":
                if (!sameOrigin(request2, requestCurrentURL(request2))) {
                  serializedOrigin = null;
                }
                break;
              default:
            }
            if (serializedOrigin) {
              request2.headersList.append("Origin", serializedOrigin);
            }
          }
        }
        __name(appendRequestOriginHeader, "appendRequestOriginHeader");
        function coarsenedSharedCurrentTime(crossOriginIsolatedCapability) {
          return performance3.now();
        }
        __name(coarsenedSharedCurrentTime, "coarsenedSharedCurrentTime");
        function createOpaqueTimingInfo(timingInfo) {
          var _a22, _b2;
          return {
            startTime: (_a22 = timingInfo.startTime) != null ? _a22 : 0,
            redirectStartTime: 0,
            redirectEndTime: 0,
            postRedirectStartTime: (_b2 = timingInfo.startTime) != null ? _b2 : 0,
            finalServiceWorkerStartTime: 0,
            finalNetworkResponseStartTime: 0,
            finalNetworkRequestStartTime: 0,
            endTime: 0,
            encodedBodySize: 0,
            decodedBodySize: 0,
            finalConnectionTimingInfo: null
          };
        }
        __name(createOpaqueTimingInfo, "createOpaqueTimingInfo");
        function makePolicyContainer() {
          return {};
        }
        __name(makePolicyContainer, "makePolicyContainer");
        function clonePolicyContainer() {
          return {};
        }
        __name(clonePolicyContainer, "clonePolicyContainer");
        function determineRequestsReferrer(request2) {
          return "no-referrer";
        }
        __name(determineRequestsReferrer, "determineRequestsReferrer");
        function matchRequestIntegrity(request2, bytes) {
          return false;
        }
        __name(matchRequestIntegrity, "matchRequestIntegrity");
        function tryUpgradeRequestToAPotentiallyTrustworthyURL(request2) {
        }
        __name(tryUpgradeRequestToAPotentiallyTrustworthyURL, "tryUpgradeRequestToAPotentiallyTrustworthyURL");
        function sameOrigin(A, B) {
          if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {
            return true;
          }
          return false;
        }
        __name(sameOrigin, "sameOrigin");
        function createDeferredPromise() {
          let res;
          let rej;
          const promise = new Promise((resolve, reject) => {
            res = resolve;
            rej = reject;
          });
          return { promise, resolve: res, reject: rej };
        }
        __name(createDeferredPromise, "createDeferredPromise");
        function isAborted(fetchParams) {
          return fetchParams.controller.state === "aborted";
        }
        __name(isAborted, "isAborted");
        function isCancelled(fetchParams) {
          return fetchParams.controller.state === "aborted" || fetchParams.controller.state === "terminated";
        }
        __name(isCancelled, "isCancelled");
        function normalizeMethod(method) {
          return /^(DELETE|GET|HEAD|OPTIONS|POST|PUT)$/i.test(method) ? method.toUpperCase() : method;
        }
        __name(normalizeMethod, "normalizeMethod");
        function serializeJavascriptValueToJSONString(value) {
          const result = JSON.stringify(value);
          if (result === void 0) {
            throw new TypeError("Value is not JSON serializable");
          }
          assert(typeof result === "string");
          return result;
        }
        __name(serializeJavascriptValueToJSONString, "serializeJavascriptValueToJSONString");
        var esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()));
        function makeIterator(iterator, name) {
          const i = {
            next() {
              if (Object.getPrototypeOf(this) !== i) {
                throw new TypeError(`'next' called on an object that does not implement interface ${name} Iterator.`);
              }
              return iterator.next();
            },
            [Symbol.toStringTag]: `${name} Iterator`
          };
          Object.setPrototypeOf(i, esIteratorPrototype);
          return Object.setPrototypeOf({}, i);
        }
        __name(makeIterator, "makeIterator");
        var hasOwn = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key));
        module2.exports = {
          isAborted,
          isCancelled,
          createDeferredPromise,
          ReadableStreamFrom,
          toUSVString,
          tryUpgradeRequestToAPotentiallyTrustworthyURL,
          coarsenedSharedCurrentTime,
          matchRequestIntegrity,
          determineRequestsReferrer,
          makePolicyContainer,
          clonePolicyContainer,
          appendFetchMetadata,
          appendRequestOriginHeader,
          TAOCheck,
          corsCheck,
          crossOriginResourcePolicyCheck,
          createOpaqueTimingInfo,
          setRequestReferrerPolicyOnRedirect,
          isValidHTTPToken,
          requestBadPort,
          requestCurrentURL,
          responseURL,
          responseLocationURL,
          isBlobLike,
          isFileLike,
          isValidReasonPhrase,
          sameOrigin,
          normalizeMethod,
          serializeJavascriptValueToJSONString,
          makeIterator,
          isValidHeaderName,
          isValidHeaderValue,
          hasOwn
        };
      }
    });
    var require_formdata = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/fetch/formdata.js"(exports2, module2) {
        "use strict";
        var { isBlobLike, isFileLike, toUSVString, makeIterator } = require_util3();
        var { kState } = require_symbols2();
        var { File, FileLike } = require_file();
        var { webidl } = require_webidl();
        var { Blob } = require("buffer");
        var _FormData = class {
          constructor(form) {
            if (arguments.length > 0 && form != null) {
              webidl.errors.conversionFailed({
                prefix: "FormData constructor",
                argument: "Argument 1",
                types: ["null"]
              });
            }
            this[kState] = [];
          }
          append(name, value, filename = void 0) {
            if (!(this instanceof _FormData)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 2) {
              throw new TypeError(`Failed to execute 'append' on 'FormData': 2 arguments required, but only ${arguments.length} present.`);
            }
            if (arguments.length === 3 && !isBlobLike(value)) {
              throw new TypeError("Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'");
            }
            name = webidl.converters.USVString(name);
            value = isBlobLike(value) ? webidl.converters.Blob(value, { strict: false }) : webidl.converters.USVString(value);
            filename = arguments.length === 3 ? webidl.converters.USVString(filename) : void 0;
            const entry = makeEntry(name, value, filename);
            this[kState].push(entry);
          }
          delete(name) {
            if (!(this instanceof _FormData)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError(`Failed to execute 'delete' on 'FormData': 1 arguments required, but only ${arguments.length} present.`);
            }
            name = webidl.converters.USVString(name);
            const next = [];
            for (const entry of this[kState]) {
              if (entry.name !== name) {
                next.push(entry);
              }
            }
            this[kState] = next;
          }
          get(name) {
            if (!(this instanceof _FormData)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError(`Failed to execute 'get' on 'FormData': 1 arguments required, but only ${arguments.length} present.`);
            }
            name = webidl.converters.USVString(name);
            const idx = this[kState].findIndex((entry) => entry.name === name);
            if (idx === -1) {
              return null;
            }
            return this[kState][idx].value;
          }
          getAll(name) {
            if (!(this instanceof _FormData)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError(`Failed to execute 'getAll' on 'FormData': 1 arguments required, but only ${arguments.length} present.`);
            }
            name = webidl.converters.USVString(name);
            return this[kState].filter((entry) => entry.name === name).map((entry) => entry.value);
          }
          has(name) {
            if (!(this instanceof _FormData)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError(`Failed to execute 'has' on 'FormData': 1 arguments required, but only ${arguments.length} present.`);
            }
            name = webidl.converters.USVString(name);
            return this[kState].findIndex((entry) => entry.name === name) !== -1;
          }
          set(name, value, filename = void 0) {
            if (!(this instanceof _FormData)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 2) {
              throw new TypeError(`Failed to execute 'set' on 'FormData': 2 arguments required, but only ${arguments.length} present.`);
            }
            if (arguments.length === 3 && !isBlobLike(value)) {
              throw new TypeError("Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'");
            }
            name = webidl.converters.USVString(name);
            value = isBlobLike(value) ? webidl.converters.Blob(value, { strict: false }) : webidl.converters.USVString(value);
            filename = arguments.length === 3 ? toUSVString(filename) : void 0;
            const entry = makeEntry(name, value, filename);
            const idx = this[kState].findIndex((entry2) => entry2.name === name);
            if (idx !== -1) {
              this[kState] = [
                ...this[kState].slice(0, idx),
                entry,
                ...this[kState].slice(idx + 1).filter((entry2) => entry2.name !== name)
              ];
            } else {
              this[kState].push(entry);
            }
          }
          get [Symbol.toStringTag]() {
            return this.constructor.name;
          }
          entries() {
            if (!(this instanceof _FormData)) {
              throw new TypeError("Illegal invocation");
            }
            return makeIterator(makeIterable(this[kState], "entries"), "FormData");
          }
          keys() {
            if (!(this instanceof _FormData)) {
              throw new TypeError("Illegal invocation");
            }
            return makeIterator(makeIterable(this[kState], "keys"), "FormData");
          }
          values() {
            if (!(this instanceof _FormData)) {
              throw new TypeError("Illegal invocation");
            }
            return makeIterator(makeIterable(this[kState], "values"), "FormData");
          }
          forEach(callbackFn, thisArg = globalThis) {
            if (!(this instanceof _FormData)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError(`Failed to execute 'forEach' on 'FormData': 1 argument required, but only ${arguments.length} present.`);
            }
            if (typeof callbackFn !== "function") {
              throw new TypeError("Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.");
            }
            for (const [key, value] of this) {
              callbackFn.apply(thisArg, [value, key, this]);
            }
          }
        };
        var FormData = _FormData;
        __name(FormData, "FormData");
        __publicField(FormData, "name", "FormData");
        FormData.prototype[Symbol.iterator] = FormData.prototype.entries;
        function makeEntry(name, value, filename) {
          name = Buffer.from(name).toString("utf8");
          if (typeof value === "string") {
            value = Buffer.from(value).toString("utf8");
          } else {
            if (!isFileLike(value)) {
              value = value instanceof Blob ? new File([value], "blob", { type: value.type }) : new FileLike(value, "blob", { type: value.type });
            }
            if (filename !== void 0) {
              value = value instanceof File ? new File([value], filename, { type: value.type }) : new FileLike(value, filename, { type: value.type });
            }
          }
          return { name, value };
        }
        __name(makeEntry, "makeEntry");
        function* makeIterable(entries, type) {
          for (const { name, value } of entries) {
            if (type === "entries") {
              yield [name, value];
            } else if (type === "values") {
              yield value;
            } else {
              yield name;
            }
          }
        }
        __name(makeIterable, "makeIterable");
        module2.exports = { FormData };
      }
    });
    var require_body = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/fetch/body.js"(exports2, module2) {
        "use strict";
        var util2 = require_util2();
        var { ReadableStreamFrom, toUSVString, isBlobLike } = require_util3();
        var { FormData } = require_formdata();
        var { kState } = require_symbols2();
        var { webidl } = require_webidl();
        var { Blob } = require("buffer");
        var { kBodyUsed } = require_symbols();
        var assert = require("assert");
        var { NotSupportedError } = require_errors();
        var { isErrored } = require_util2();
        var { isUint8Array, isArrayBuffer } = require("util/types");
        var ReadableStream;
        async function* blobGen(blob) {
          yield* blob.stream();
        }
        __name(blobGen, "blobGen");
        function extractBody(object, keepalive = false) {
          if (!ReadableStream) {
            ReadableStream = require("stream/web").ReadableStream;
          }
          let stream2 = null;
          let action = null;
          let source = null;
          let length = null;
          let contentType = null;
          if (object == null) {
          } else if (object instanceof URLSearchParams) {
            source = object.toString();
            contentType = "application/x-www-form-urlencoded;charset=UTF-8";
          } else if (isArrayBuffer(object) || ArrayBuffer.isView(object)) {
            if (object instanceof DataView) {
              object = object.buffer;
            }
            source = new Uint8Array(object);
          } else if (util2.isFormDataLike(object)) {
            const boundary = "----formdata-undici-" + Math.random();
            const prefix = `--${boundary}\r
Content-Disposition: form-data`;
            const escape = /* @__PURE__ */ __name((str) => str.replace(/\n/g, "%0A").replace(/\r/g, "%0D").replace(/"/g, "%22"), "escape");
            const normalizeLinefeeds = /* @__PURE__ */ __name((value) => value.replace(/\r?\n|\r/g, "\r\n"), "normalizeLinefeeds");
            action = /* @__PURE__ */ __name(async function* (object2) {
              const enc = new TextEncoder();
              for (const [name, value] of object2) {
                if (typeof value === "string") {
                  yield enc.encode(prefix + `; name="${escape(normalizeLinefeeds(name))}"\r
\r
${normalizeLinefeeds(value)}\r
`);
                } else {
                  yield enc.encode(prefix + `; name="${escape(normalizeLinefeeds(name))}"` + (value.name ? `; filename="${escape(value.name)}"` : "") + `\r
Content-Type: ${value.type || "application/octet-stream"}\r
\r
`);
                  yield* blobGen(value);
                  yield enc.encode("\r\n");
                }
              }
              yield enc.encode(`--${boundary}--`);
            }, "action");
            source = object;
            contentType = "multipart/form-data; boundary=" + boundary;
          } else if (isBlobLike(object)) {
            action = blobGen;
            source = object;
            length = object.size;
            if (object.type) {
              contentType = object.type;
            }
          } else if (typeof object[Symbol.asyncIterator] === "function") {
            if (keepalive) {
              throw new TypeError("keepalive");
            }
            if (util2.isDisturbed(object) || object.locked) {
              throw new TypeError("Response body object should not be disturbed or locked");
            }
            stream2 = object instanceof ReadableStream ? object : ReadableStreamFrom(object);
          } else {
            source = toUSVString(object);
            contentType = "text/plain;charset=UTF-8";
          }
          if (typeof source === "string" || util2.isBuffer(source)) {
            length = Buffer.byteLength(source);
          }
          if (action != null) {
            let iterator;
            stream2 = new ReadableStream({
              async start() {
                iterator = action(object)[Symbol.asyncIterator]();
              },
              async pull(controller) {
                const { value, done } = await iterator.next();
                if (done) {
                  queueMicrotask(() => {
                    controller.close();
                  });
                } else {
                  if (!isErrored(stream2)) {
                    controller.enqueue(new Uint8Array(value));
                  }
                }
                return controller.desiredSize > 0;
              },
              async cancel(reason) {
                await iterator.return();
              }
            });
          } else if (!stream2) {
            stream2 = new ReadableStream({
              async pull(controller) {
                controller.enqueue(typeof source === "string" ? new TextEncoder().encode(source) : source);
                queueMicrotask(() => {
                  controller.close();
                });
              }
            });
          }
          const body = { stream: stream2, source, length };
          return [body, contentType];
        }
        __name(extractBody, "extractBody");
        function safelyExtractBody(object, keepalive = false) {
          if (!ReadableStream) {
            ReadableStream = require("stream/web").ReadableStream;
          }
          if (object instanceof ReadableStream) {
            assert(!util2.isDisturbed(object), "disturbed");
            assert(!object.locked, "locked");
          }
          return extractBody(object, keepalive);
        }
        __name(safelyExtractBody, "safelyExtractBody");
        function cloneBody(body) {
          const [out1, out2] = body.stream.tee();
          body.stream = out1;
          return {
            stream: out2,
            length: body.length,
            source: body.source
          };
        }
        __name(cloneBody, "cloneBody");
        async function* consumeBody(body) {
          if (body) {
            if (isUint8Array(body)) {
              yield body;
            } else {
              const stream2 = body.stream;
              if (util2.isDisturbed(stream2)) {
                throw new TypeError("disturbed");
              }
              if (stream2.locked) {
                throw new TypeError("locked");
              }
              stream2[kBodyUsed] = true;
              yield* stream2;
            }
          }
        }
        __name(consumeBody, "consumeBody");
        function bodyMixinMethods(instance) {
          const methods = {
            async blob() {
              if (!(this instanceof instance)) {
                throw new TypeError("Illegal invocation");
              }
              const chunks = [];
              for await (const chunk of consumeBody(this[kState].body)) {
                chunks.push(new Blob([chunk]));
              }
              return new Blob(chunks, { type: this.headers.get("Content-Type") || "" });
            },
            async arrayBuffer() {
              if (!(this instanceof instance)) {
                throw new TypeError("Illegal invocation");
              }
              const contentLength = this.headers.get("content-length");
              const encoded = this.headers.has("content-encoding");
              if (!encoded && contentLength) {
                const buffer2 = new Uint8Array(contentLength);
                let offset2 = 0;
                for await (const chunk of consumeBody(this[kState].body)) {
                  buffer2.set(chunk, offset2);
                  offset2 += chunk.length;
                }
                return buffer2.buffer;
              }
              const chunks = [];
              let size = 0;
              for await (const chunk of consumeBody(this[kState].body)) {
                chunks.push(chunk);
                size += chunk.byteLength;
              }
              const buffer = new Uint8Array(size);
              let offset = 0;
              for (const chunk of chunks) {
                buffer.set(chunk, offset);
                offset += chunk.byteLength;
              }
              return buffer.buffer;
            },
            async text() {
              if (!(this instanceof instance)) {
                throw new TypeError("Illegal invocation");
              }
              let result = "";
              const textDecoder = new TextDecoder();
              for await (const chunk of consumeBody(this[kState].body)) {
                result += textDecoder.decode(chunk, { stream: true });
              }
              result += textDecoder.decode();
              return result;
            },
            async json() {
              if (!(this instanceof instance)) {
                throw new TypeError("Illegal invocation");
              }
              return JSON.parse(await this.text());
            },
            async formData() {
              if (!(this instanceof instance)) {
                throw new TypeError("Illegal invocation");
              }
              const contentType = this.headers.get("Content-Type");
              if (/multipart\/form-data/.test(contentType)) {
                throw new NotSupportedError("multipart/form-data not supported");
              } else if (/application\/x-www-form-urlencoded/.test(contentType)) {
                let entries;
                try {
                  entries = new URLSearchParams(await this.text());
                } catch (err) {
                  throw Object.assign(new TypeError(), { cause: err });
                }
                const formData = new FormData();
                for (const [name, value] of entries) {
                  formData.append(name, value);
                }
                return formData;
              } else {
                webidl.errors.exception({
                  header: `${instance.name}.formData`,
                  value: "Could not parse content as FormData."
                });
              }
            }
          };
          return methods;
        }
        __name(bodyMixinMethods, "bodyMixinMethods");
        var properties = {
          body: {
            enumerable: true,
            get() {
              if (!this || !this[kState]) {
                throw new TypeError("Illegal invocation");
              }
              return this[kState].body ? this[kState].body.stream : null;
            }
          },
          bodyUsed: {
            enumerable: true,
            get() {
              if (!this || !this[kState]) {
                throw new TypeError("Illegal invocation");
              }
              return !!this[kState].body && util2.isDisturbed(this[kState].body.stream);
            }
          }
        };
        function mixinBody(prototype) {
          Object.assign(prototype.prototype, bodyMixinMethods(prototype));
          Object.defineProperties(prototype.prototype, properties);
        }
        __name(mixinBody, "mixinBody");
        module2.exports = {
          extractBody,
          safelyExtractBody,
          cloneBody,
          mixinBody
        };
      }
    });
    var require_request = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/core/request.js"(exports2, module2) {
        "use strict";
        var {
          InvalidArgumentError,
          NotSupportedError
        } = require_errors();
        var assert = require("assert");
        var util2 = require_util2();
        var kHandler = Symbol("handler");
        var channels = {};
        var extractBody;
        var nodeVersion = process.versions.node.split(".");
        var nodeMajor = Number(nodeVersion[0]);
        var nodeMinor = Number(nodeVersion[1]);
        try {
          const diagnosticsChannel = require("diagnostics_channel");
          channels.create = diagnosticsChannel.channel("undici:request:create");
          channels.bodySent = diagnosticsChannel.channel("undici:request:bodySent");
          channels.headers = diagnosticsChannel.channel("undici:request:headers");
          channels.trailers = diagnosticsChannel.channel("undici:request:trailers");
          channels.error = diagnosticsChannel.channel("undici:request:error");
        } catch (e) {
          channels.create = { hasSubscribers: false };
          channels.bodySent = { hasSubscribers: false };
          channels.headers = { hasSubscribers: false };
          channels.trailers = { hasSubscribers: false };
          channels.error = { hasSubscribers: false };
        }
        var Request = class {
          constructor(origin, {
            path: path7,
            method,
            body,
            headers,
            query: query2,
            idempotent,
            blocking,
            upgrade,
            headersTimeout,
            bodyTimeout,
            throwOnError
          }, handler) {
            if (typeof path7 !== "string") {
              throw new InvalidArgumentError("path must be a string");
            } else if (path7[0] !== "/" && !(path7.startsWith("http://") || path7.startsWith("https://")) && method !== "CONNECT") {
              throw new InvalidArgumentError("path must be an absolute URL or start with a slash");
            }
            if (typeof method !== "string") {
              throw new InvalidArgumentError("method must be a string");
            }
            if (upgrade && typeof upgrade !== "string") {
              throw new InvalidArgumentError("upgrade must be a string");
            }
            if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {
              throw new InvalidArgumentError("invalid headersTimeout");
            }
            if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {
              throw new InvalidArgumentError("invalid bodyTimeout");
            }
            this.headersTimeout = headersTimeout;
            this.bodyTimeout = bodyTimeout;
            this.throwOnError = throwOnError === true;
            this.method = method;
            if (body == null) {
              this.body = null;
            } else if (util2.isStream(body)) {
              this.body = body;
            } else if (util2.isBuffer(body)) {
              this.body = body.byteLength ? body : null;
            } else if (ArrayBuffer.isView(body)) {
              this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null;
            } else if (body instanceof ArrayBuffer) {
              this.body = body.byteLength ? Buffer.from(body) : null;
            } else if (typeof body === "string") {
              this.body = body.length ? Buffer.from(body) : null;
            } else if (util2.isFormDataLike(body) || util2.isIterable(body) || util2.isBlobLike(body)) {
              this.body = body;
            } else {
              throw new InvalidArgumentError("body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable");
            }
            this.completed = false;
            this.aborted = false;
            this.upgrade = upgrade || null;
            this.path = query2 ? util2.buildURL(path7, query2) : path7;
            this.origin = origin;
            this.idempotent = idempotent == null ? method === "HEAD" || method === "GET" : idempotent;
            this.blocking = blocking == null ? false : blocking;
            this.host = null;
            this.contentLength = null;
            this.contentType = null;
            this.headers = "";
            if (Array.isArray(headers)) {
              if (headers.length % 2 !== 0) {
                throw new InvalidArgumentError("headers array must be even");
              }
              for (let i = 0; i < headers.length; i += 2) {
                processHeader(this, headers[i], headers[i + 1]);
              }
            } else if (headers && typeof headers === "object") {
              const keys2 = Object.keys(headers);
              for (let i = 0; i < keys2.length; i++) {
                const key = keys2[i];
                processHeader(this, key, headers[key]);
              }
            } else if (headers != null) {
              throw new InvalidArgumentError("headers must be an object or an array");
            }
            if (util2.isFormDataLike(this.body)) {
              if (nodeMajor < 16 || nodeMajor === 16 && nodeMinor < 8) {
                throw new InvalidArgumentError("Form-Data bodies are only supported in node v16.8 and newer.");
              }
              if (!extractBody) {
                extractBody = require_body().extractBody;
              }
              const [bodyStream, contentType] = extractBody(body);
              if (this.contentType == null) {
                this.contentType = contentType;
                this.headers += `content-type: ${contentType}\r
`;
              }
              this.body = bodyStream.stream;
            } else if (util2.isBlobLike(body) && this.contentType == null && body.type) {
              this.contentType = body.type;
              this.headers += `content-type: ${body.type}\r
`;
            }
            util2.validateHandler(handler, method, upgrade);
            this.servername = util2.getServerName(this.host);
            this[kHandler] = handler;
            if (channels.create.hasSubscribers) {
              channels.create.publish({ request: this });
            }
          }
          onBodySent(chunk) {
            if (this[kHandler].onBodySent) {
              try {
                this[kHandler].onBodySent(chunk);
              } catch (err) {
                this.onError(err);
              }
            }
          }
          onRequestSent() {
            if (channels.bodySent.hasSubscribers) {
              channels.bodySent.publish({ request: this });
            }
          }
          onConnect(abort) {
            assert(!this.aborted);
            assert(!this.completed);
            return this[kHandler].onConnect(abort);
          }
          onHeaders(statusCode, headers, resume, statusText) {
            assert(!this.aborted);
            assert(!this.completed);
            if (channels.headers.hasSubscribers) {
              channels.headers.publish({ request: this, response: { statusCode, headers, statusText } });
            }
            return this[kHandler].onHeaders(statusCode, headers, resume, statusText);
          }
          onData(chunk) {
            assert(!this.aborted);
            assert(!this.completed);
            return this[kHandler].onData(chunk);
          }
          onUpgrade(statusCode, headers, socket) {
            assert(!this.aborted);
            assert(!this.completed);
            return this[kHandler].onUpgrade(statusCode, headers, socket);
          }
          onComplete(trailers) {
            assert(!this.aborted);
            this.completed = true;
            if (channels.trailers.hasSubscribers) {
              channels.trailers.publish({ request: this, trailers });
            }
            return this[kHandler].onComplete(trailers);
          }
          onError(error2) {
            if (channels.error.hasSubscribers) {
              channels.error.publish({ request: this, error: error2 });
            }
            if (this.aborted) {
              return;
            }
            this.aborted = true;
            return this[kHandler].onError(error2);
          }
          addHeader(key, value) {
            processHeader(this, key, value);
            return this;
          }
        };
        __name(Request, "Request");
        function processHeader(request2, key, val) {
          if (val && typeof val === "object") {
            throw new InvalidArgumentError(`invalid ${key} header`);
          } else if (val === void 0) {
            return;
          }
          if (request2.host === null && key.length === 4 && key.toLowerCase() === "host") {
            request2.host = val;
          } else if (request2.contentLength === null && key.length === 14 && key.toLowerCase() === "content-length") {
            request2.contentLength = parseInt(val, 10);
            if (!Number.isFinite(request2.contentLength)) {
              throw new InvalidArgumentError("invalid content-length header");
            }
          } else if (request2.contentType === null && key.length === 12 && key.toLowerCase() === "content-type") {
            request2.contentType = val;
            request2.headers += `${key}: ${val}\r
`;
          } else if (key.length === 17 && key.toLowerCase() === "transfer-encoding") {
            throw new InvalidArgumentError("invalid transfer-encoding header");
          } else if (key.length === 10 && key.toLowerCase() === "connection") {
            throw new InvalidArgumentError("invalid connection header");
          } else if (key.length === 10 && key.toLowerCase() === "keep-alive") {
            throw new InvalidArgumentError("invalid keep-alive header");
          } else if (key.length === 7 && key.toLowerCase() === "upgrade") {
            throw new InvalidArgumentError("invalid upgrade header");
          } else if (key.length === 6 && key.toLowerCase() === "expect") {
            throw new NotSupportedError("expect header not supported");
          } else {
            request2.headers += `${key}: ${val}\r
`;
          }
        }
        __name(processHeader, "processHeader");
        module2.exports = Request;
      }
    });
    var require_dispatcher = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/dispatcher.js"(exports2, module2) {
        "use strict";
        var EventEmitter4 = require("events");
        var Dispatcher = class extends EventEmitter4 {
          dispatch() {
            throw new Error("not implemented");
          }
          close() {
            throw new Error("not implemented");
          }
          destroy() {
            throw new Error("not implemented");
          }
        };
        __name(Dispatcher, "Dispatcher");
        module2.exports = Dispatcher;
      }
    });
    var require_dispatcher_base = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/dispatcher-base.js"(exports2, module2) {
        "use strict";
        var Dispatcher = require_dispatcher();
        var {
          ClientDestroyedError,
          ClientClosedError,
          InvalidArgumentError
        } = require_errors();
        var { kDestroy, kClose, kDispatch } = require_symbols();
        var kDestroyed = Symbol("destroyed");
        var kClosed = Symbol("closed");
        var kOnDestroyed = Symbol("onDestroyed");
        var kOnClosed = Symbol("onClosed");
        var DispatcherBase = class extends Dispatcher {
          constructor() {
            super();
            this[kDestroyed] = false;
            this[kOnDestroyed] = [];
            this[kClosed] = false;
            this[kOnClosed] = [];
          }
          get destroyed() {
            return this[kDestroyed];
          }
          get closed() {
            return this[kClosed];
          }
          close(callback) {
            if (callback === void 0) {
              return new Promise((resolve, reject) => {
                this.close((err, data) => {
                  return err ? reject(err) : resolve(data);
                });
              });
            }
            if (typeof callback !== "function") {
              throw new InvalidArgumentError("invalid callback");
            }
            if (this[kDestroyed]) {
              queueMicrotask(() => callback(new ClientDestroyedError(), null));
              return;
            }
            if (this[kClosed]) {
              if (this[kOnClosed]) {
                this[kOnClosed].push(callback);
              } else {
                queueMicrotask(() => callback(null, null));
              }
              return;
            }
            this[kClosed] = true;
            this[kOnClosed].push(callback);
            const onClosed = /* @__PURE__ */ __name(() => {
              const callbacks = this[kOnClosed];
              this[kOnClosed] = null;
              for (let i = 0; i < callbacks.length; i++) {
                callbacks[i](null, null);
              }
            }, "onClosed");
            this[kClose]().then(() => this.destroy()).then(() => {
              queueMicrotask(onClosed);
            });
          }
          destroy(err, callback) {
            if (typeof err === "function") {
              callback = err;
              err = null;
            }
            if (callback === void 0) {
              return new Promise((resolve, reject) => {
                this.destroy(err, (err2, data) => {
                  return err2 ? reject(err2) : resolve(data);
                });
              });
            }
            if (typeof callback !== "function") {
              throw new InvalidArgumentError("invalid callback");
            }
            if (this[kDestroyed]) {
              if (this[kOnDestroyed]) {
                this[kOnDestroyed].push(callback);
              } else {
                queueMicrotask(() => callback(null, null));
              }
              return;
            }
            if (!err) {
              err = new ClientDestroyedError();
            }
            this[kDestroyed] = true;
            this[kOnDestroyed].push(callback);
            const onDestroyed = /* @__PURE__ */ __name(() => {
              const callbacks = this[kOnDestroyed];
              this[kOnDestroyed] = null;
              for (let i = 0; i < callbacks.length; i++) {
                callbacks[i](null, null);
              }
            }, "onDestroyed");
            this[kDestroy](err).then(() => {
              queueMicrotask(onDestroyed);
            });
          }
          dispatch(opts, handler) {
            if (!handler || typeof handler !== "object") {
              throw new InvalidArgumentError("handler must be an object");
            }
            try {
              if (!opts || typeof opts !== "object") {
                throw new InvalidArgumentError("opts must be an object.");
              }
              if (this[kDestroyed]) {
                throw new ClientDestroyedError();
              }
              if (this[kClosed]) {
                throw new ClientClosedError();
              }
              return this[kDispatch](opts, handler);
            } catch (err) {
              if (typeof handler.onError !== "function") {
                throw new InvalidArgumentError("invalid onError method");
              }
              handler.onError(err);
              return false;
            }
          }
        };
        __name(DispatcherBase, "DispatcherBase");
        module2.exports = DispatcherBase;
      }
    });
    var require_redirect = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/handler/redirect.js"(exports2, module2) {
        "use strict";
        var util2 = require_util2();
        var { kBodyUsed } = require_symbols();
        var assert = require("assert");
        var { InvalidArgumentError } = require_errors();
        var EE = require("events");
        var redirectableStatusCodes = [300, 301, 302, 303, 307, 308];
        var kBody = Symbol("body");
        var BodyAsyncIterable = class {
          constructor(body) {
            this[kBody] = body;
            this[kBodyUsed] = false;
          }
          async *[Symbol.asyncIterator]() {
            assert(!this[kBodyUsed], "disturbed");
            this[kBodyUsed] = true;
            yield* this[kBody];
          }
        };
        __name(BodyAsyncIterable, "BodyAsyncIterable");
        var RedirectHandler = class {
          constructor(dispatcher, maxRedirections, opts, handler) {
            if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
              throw new InvalidArgumentError("maxRedirections must be a positive number");
            }
            util2.validateHandler(handler, opts.method, opts.upgrade);
            this.dispatcher = dispatcher;
            this.location = null;
            this.abort = null;
            this.opts = { ...opts, maxRedirections: 0 };
            this.maxRedirections = maxRedirections;
            this.handler = handler;
            this.history = [];
            if (util2.isStream(this.opts.body)) {
              if (util2.bodyLength(this.opts.body) === 0) {
                this.opts.body.on("data", function() {
                  assert(false);
                });
              }
              if (typeof this.opts.body.readableDidRead !== "boolean") {
                this.opts.body[kBodyUsed] = false;
                EE.prototype.on.call(this.opts.body, "data", function() {
                  this[kBodyUsed] = true;
                });
              }
            } else if (this.opts.body && typeof this.opts.body.pipeTo === "function") {
              this.opts.body = new BodyAsyncIterable(this.opts.body);
            } else if (this.opts.body && typeof this.opts.body !== "string" && !ArrayBuffer.isView(this.opts.body) && util2.isIterable(this.opts.body)) {
              this.opts.body = new BodyAsyncIterable(this.opts.body);
            }
          }
          onConnect(abort) {
            this.abort = abort;
            this.handler.onConnect(abort, { history: this.history });
          }
          onUpgrade(statusCode, headers, socket) {
            this.handler.onUpgrade(statusCode, headers, socket);
          }
          onError(error2) {
            this.handler.onError(error2);
          }
          onHeaders(statusCode, headers, resume, statusText) {
            this.location = this.history.length >= this.maxRedirections || util2.isDisturbed(this.opts.body) ? null : parseLocation(statusCode, headers);
            if (this.opts.origin) {
              this.history.push(new URL(this.opts.path, this.opts.origin));
            }
            if (!this.location) {
              return this.handler.onHeaders(statusCode, headers, resume, statusText);
            }
            const { origin, pathname, search } = util2.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)));
            const path7 = search ? `${pathname}${search}` : pathname;
            this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin);
            this.opts.path = path7;
            this.opts.origin = origin;
            this.opts.maxRedirections = 0;
            if (statusCode === 303 && this.opts.method !== "HEAD") {
              this.opts.method = "GET";
              this.opts.body = null;
            }
          }
          onData(chunk) {
            if (this.location) {
            } else {
              return this.handler.onData(chunk);
            }
          }
          onComplete(trailers) {
            if (this.location) {
              this.location = null;
              this.abort = null;
              this.dispatcher.dispatch(this.opts, this);
            } else {
              this.handler.onComplete(trailers);
            }
          }
          onBodySent(chunk) {
            if (this.handler.onBodySent) {
              this.handler.onBodySent(chunk);
            }
          }
        };
        __name(RedirectHandler, "RedirectHandler");
        function parseLocation(statusCode, headers) {
          if (redirectableStatusCodes.indexOf(statusCode) === -1) {
            return null;
          }
          for (let i = 0; i < headers.length; i += 2) {
            if (headers[i].toString().toLowerCase() === "location") {
              return headers[i + 1];
            }
          }
        }
        __name(parseLocation, "parseLocation");
        function shouldRemoveHeader(header, removeContent, unknownOrigin) {
          return header.length === 4 && header.toString().toLowerCase() === "host" || removeContent && header.toString().toLowerCase().indexOf("content-") === 0 || unknownOrigin && header.length === 13 && header.toString().toLowerCase() === "authorization";
        }
        __name(shouldRemoveHeader, "shouldRemoveHeader");
        function cleanRequestHeaders(headers, removeContent, unknownOrigin) {
          const ret = [];
          if (Array.isArray(headers)) {
            for (let i = 0; i < headers.length; i += 2) {
              if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {
                ret.push(headers[i], headers[i + 1]);
              }
            }
          } else if (headers && typeof headers === "object") {
            for (const key of Object.keys(headers)) {
              if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {
                ret.push(key, headers[key]);
              }
            }
          } else {
            assert(headers == null, "headers must be an object or an array");
          }
          return ret;
        }
        __name(cleanRequestHeaders, "cleanRequestHeaders");
        module2.exports = RedirectHandler;
      }
    });
    var require_connect = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/core/connect.js"(exports2, module2) {
        "use strict";
        var net2 = require("net");
        var assert = require("assert");
        var util2 = require_util2();
        var { InvalidArgumentError, ConnectTimeoutError } = require_errors();
        var tls;
        function buildConnector({ maxCachedSessions, socketPath, timeout, ...opts }) {
          if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {
            throw new InvalidArgumentError("maxCachedSessions must be a positive integer or zero");
          }
          const options = { path: socketPath, ...opts };
          const sessionCache = /* @__PURE__ */ new Map();
          timeout = timeout == null ? 1e4 : timeout;
          maxCachedSessions = maxCachedSessions == null ? 100 : maxCachedSessions;
          return /* @__PURE__ */ __name(function connect({ hostname: hostname3, host, protocol, port, servername, httpSocket }, callback) {
            let socket;
            if (protocol === "https:") {
              if (!tls) {
                tls = require("tls");
              }
              servername = servername || options.servername || util2.getServerName(host) || null;
              const sessionKey = servername || hostname3;
              const session = sessionCache.get(sessionKey) || null;
              assert(sessionKey);
              socket = tls.connect({
                highWaterMark: 16384,
                ...options,
                servername,
                session,
                socket: httpSocket,
                port: port || 443,
                host: hostname3
              });
              socket.on("session", function(session2) {
                if (maxCachedSessions === 0) {
                  return;
                }
                if (sessionCache.size >= maxCachedSessions) {
                  const { value: oldestKey } = sessionCache.keys().next();
                  sessionCache.delete(oldestKey);
                }
                sessionCache.set(sessionKey, session2);
              }).on("error", function(err) {
                if (sessionKey && err.code !== "UND_ERR_INFO") {
                  sessionCache.delete(sessionKey);
                }
              });
            } else {
              assert(!httpSocket, "httpSocket can only be sent on TLS update");
              socket = net2.connect({
                highWaterMark: 64 * 1024,
                ...options,
                port: port || 80,
                host: hostname3
              });
            }
            const timeoutId = timeout ? setTimeout(onConnectTimeout, timeout, socket) : null;
            socket.setNoDelay(true).once(protocol === "https:" ? "secureConnect" : "connect", function() {
              clearTimeout(timeoutId);
              if (callback) {
                const cb = callback;
                callback = null;
                cb(null, this);
              }
            }).on("error", function(err) {
              clearTimeout(timeoutId);
              if (callback) {
                const cb = callback;
                callback = null;
                cb(err);
              }
            });
            return socket;
          }, "connect");
        }
        __name(buildConnector, "buildConnector");
        function onConnectTimeout(socket) {
          util2.destroy(socket, new ConnectTimeoutError());
        }
        __name(onConnectTimeout, "onConnectTimeout");
        module2.exports = buildConnector;
      }
    });
    var require_utils = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/llhttp/utils.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.enumToMap = void 0;
        function enumToMap(obj) {
          const res = {};
          Object.keys(obj).forEach((key) => {
            const value = obj[key];
            if (typeof value === "number") {
              res[key] = value;
            }
          });
          return res;
        }
        __name(enumToMap, "enumToMap");
        exports2.enumToMap = enumToMap;
      }
    });
    var require_constants2 = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/llhttp/constants.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.SPECIAL_HEADERS = exports2.HEADER_STATE = exports2.MINOR = exports2.MAJOR = exports2.CONNECTION_TOKEN_CHARS = exports2.HEADER_CHARS = exports2.TOKEN = exports2.STRICT_TOKEN = exports2.HEX = exports2.URL_CHAR = exports2.STRICT_URL_CHAR = exports2.USERINFO_CHARS = exports2.MARK = exports2.ALPHANUM = exports2.NUM = exports2.HEX_MAP = exports2.NUM_MAP = exports2.ALPHA = exports2.FINISH = exports2.H_METHOD_MAP = exports2.METHOD_MAP = exports2.METHODS_RTSP = exports2.METHODS_ICE = exports2.METHODS_HTTP = exports2.METHODS = exports2.LENIENT_FLAGS = exports2.FLAGS = exports2.TYPE = exports2.ERROR = void 0;
        var utils_1 = require_utils();
        var ERROR;
        (function(ERROR2) {
          ERROR2[ERROR2["OK"] = 0] = "OK";
          ERROR2[ERROR2["INTERNAL"] = 1] = "INTERNAL";
          ERROR2[ERROR2["STRICT"] = 2] = "STRICT";
          ERROR2[ERROR2["LF_EXPECTED"] = 3] = "LF_EXPECTED";
          ERROR2[ERROR2["UNEXPECTED_CONTENT_LENGTH"] = 4] = "UNEXPECTED_CONTENT_LENGTH";
          ERROR2[ERROR2["CLOSED_CONNECTION"] = 5] = "CLOSED_CONNECTION";
          ERROR2[ERROR2["INVALID_METHOD"] = 6] = "INVALID_METHOD";
          ERROR2[ERROR2["INVALID_URL"] = 7] = "INVALID_URL";
          ERROR2[ERROR2["INVALID_CONSTANT"] = 8] = "INVALID_CONSTANT";
          ERROR2[ERROR2["INVALID_VERSION"] = 9] = "INVALID_VERSION";
          ERROR2[ERROR2["INVALID_HEADER_TOKEN"] = 10] = "INVALID_HEADER_TOKEN";
          ERROR2[ERROR2["INVALID_CONTENT_LENGTH"] = 11] = "INVALID_CONTENT_LENGTH";
          ERROR2[ERROR2["INVALID_CHUNK_SIZE"] = 12] = "INVALID_CHUNK_SIZE";
          ERROR2[ERROR2["INVALID_STATUS"] = 13] = "INVALID_STATUS";
          ERROR2[ERROR2["INVALID_EOF_STATE"] = 14] = "INVALID_EOF_STATE";
          ERROR2[ERROR2["INVALID_TRANSFER_ENCODING"] = 15] = "INVALID_TRANSFER_ENCODING";
          ERROR2[ERROR2["CB_MESSAGE_BEGIN"] = 16] = "CB_MESSAGE_BEGIN";
          ERROR2[ERROR2["CB_HEADERS_COMPLETE"] = 17] = "CB_HEADERS_COMPLETE";
          ERROR2[ERROR2["CB_MESSAGE_COMPLETE"] = 18] = "CB_MESSAGE_COMPLETE";
          ERROR2[ERROR2["CB_CHUNK_HEADER"] = 19] = "CB_CHUNK_HEADER";
          ERROR2[ERROR2["CB_CHUNK_COMPLETE"] = 20] = "CB_CHUNK_COMPLETE";
          ERROR2[ERROR2["PAUSED"] = 21] = "PAUSED";
          ERROR2[ERROR2["PAUSED_UPGRADE"] = 22] = "PAUSED_UPGRADE";
          ERROR2[ERROR2["PAUSED_H2_UPGRADE"] = 23] = "PAUSED_H2_UPGRADE";
          ERROR2[ERROR2["USER"] = 24] = "USER";
        })(ERROR = exports2.ERROR || (exports2.ERROR = {}));
        var TYPE;
        (function(TYPE2) {
          TYPE2[TYPE2["BOTH"] = 0] = "BOTH";
          TYPE2[TYPE2["REQUEST"] = 1] = "REQUEST";
          TYPE2[TYPE2["RESPONSE"] = 2] = "RESPONSE";
        })(TYPE = exports2.TYPE || (exports2.TYPE = {}));
        var FLAGS;
        (function(FLAGS2) {
          FLAGS2[FLAGS2["CONNECTION_KEEP_ALIVE"] = 1] = "CONNECTION_KEEP_ALIVE";
          FLAGS2[FLAGS2["CONNECTION_CLOSE"] = 2] = "CONNECTION_CLOSE";
          FLAGS2[FLAGS2["CONNECTION_UPGRADE"] = 4] = "CONNECTION_UPGRADE";
          FLAGS2[FLAGS2["CHUNKED"] = 8] = "CHUNKED";
          FLAGS2[FLAGS2["UPGRADE"] = 16] = "UPGRADE";
          FLAGS2[FLAGS2["CONTENT_LENGTH"] = 32] = "CONTENT_LENGTH";
          FLAGS2[FLAGS2["SKIPBODY"] = 64] = "SKIPBODY";
          FLAGS2[FLAGS2["TRAILING"] = 128] = "TRAILING";
          FLAGS2[FLAGS2["TRANSFER_ENCODING"] = 512] = "TRANSFER_ENCODING";
        })(FLAGS = exports2.FLAGS || (exports2.FLAGS = {}));
        var LENIENT_FLAGS;
        (function(LENIENT_FLAGS2) {
          LENIENT_FLAGS2[LENIENT_FLAGS2["HEADERS"] = 1] = "HEADERS";
          LENIENT_FLAGS2[LENIENT_FLAGS2["CHUNKED_LENGTH"] = 2] = "CHUNKED_LENGTH";
          LENIENT_FLAGS2[LENIENT_FLAGS2["KEEP_ALIVE"] = 4] = "KEEP_ALIVE";
        })(LENIENT_FLAGS = exports2.LENIENT_FLAGS || (exports2.LENIENT_FLAGS = {}));
        var METHODS;
        (function(METHODS2) {
          METHODS2[METHODS2["DELETE"] = 0] = "DELETE";
          METHODS2[METHODS2["GET"] = 1] = "GET";
          METHODS2[METHODS2["HEAD"] = 2] = "HEAD";
          METHODS2[METHODS2["POST"] = 3] = "POST";
          METHODS2[METHODS2["PUT"] = 4] = "PUT";
          METHODS2[METHODS2["CONNECT"] = 5] = "CONNECT";
          METHODS2[METHODS2["OPTIONS"] = 6] = "OPTIONS";
          METHODS2[METHODS2["TRACE"] = 7] = "TRACE";
          METHODS2[METHODS2["COPY"] = 8] = "COPY";
          METHODS2[METHODS2["LOCK"] = 9] = "LOCK";
          METHODS2[METHODS2["MKCOL"] = 10] = "MKCOL";
          METHODS2[METHODS2["MOVE"] = 11] = "MOVE";
          METHODS2[METHODS2["PROPFIND"] = 12] = "PROPFIND";
          METHODS2[METHODS2["PROPPATCH"] = 13] = "PROPPATCH";
          METHODS2[METHODS2["SEARCH"] = 14] = "SEARCH";
          METHODS2[METHODS2["UNLOCK"] = 15] = "UNLOCK";
          METHODS2[METHODS2["BIND"] = 16] = "BIND";
          METHODS2[METHODS2["REBIND"] = 17] = "REBIND";
          METHODS2[METHODS2["UNBIND"] = 18] = "UNBIND";
          METHODS2[METHODS2["ACL"] = 19] = "ACL";
          METHODS2[METHODS2["REPORT"] = 20] = "REPORT";
          METHODS2[METHODS2["MKACTIVITY"] = 21] = "MKACTIVITY";
          METHODS2[METHODS2["CHECKOUT"] = 22] = "CHECKOUT";
          METHODS2[METHODS2["MERGE"] = 23] = "MERGE";
          METHODS2[METHODS2["M-SEARCH"] = 24] = "M-SEARCH";
          METHODS2[METHODS2["NOTIFY"] = 25] = "NOTIFY";
          METHODS2[METHODS2["SUBSCRIBE"] = 26] = "SUBSCRIBE";
          METHODS2[METHODS2["UNSUBSCRIBE"] = 27] = "UNSUBSCRIBE";
          METHODS2[METHODS2["PATCH"] = 28] = "PATCH";
          METHODS2[METHODS2["PURGE"] = 29] = "PURGE";
          METHODS2[METHODS2["MKCALENDAR"] = 30] = "MKCALENDAR";
          METHODS2[METHODS2["LINK"] = 31] = "LINK";
          METHODS2[METHODS2["UNLINK"] = 32] = "UNLINK";
          METHODS2[METHODS2["SOURCE"] = 33] = "SOURCE";
          METHODS2[METHODS2["PRI"] = 34] = "PRI";
          METHODS2[METHODS2["DESCRIBE"] = 35] = "DESCRIBE";
          METHODS2[METHODS2["ANNOUNCE"] = 36] = "ANNOUNCE";
          METHODS2[METHODS2["SETUP"] = 37] = "SETUP";
          METHODS2[METHODS2["PLAY"] = 38] = "PLAY";
          METHODS2[METHODS2["PAUSE"] = 39] = "PAUSE";
          METHODS2[METHODS2["TEARDOWN"] = 40] = "TEARDOWN";
          METHODS2[METHODS2["GET_PARAMETER"] = 41] = "GET_PARAMETER";
          METHODS2[METHODS2["SET_PARAMETER"] = 42] = "SET_PARAMETER";
          METHODS2[METHODS2["REDIRECT"] = 43] = "REDIRECT";
          METHODS2[METHODS2["RECORD"] = 44] = "RECORD";
          METHODS2[METHODS2["FLUSH"] = 45] = "FLUSH";
        })(METHODS = exports2.METHODS || (exports2.METHODS = {}));
        exports2.METHODS_HTTP = [
          METHODS.DELETE,
          METHODS.GET,
          METHODS.HEAD,
          METHODS.POST,
          METHODS.PUT,
          METHODS.CONNECT,
          METHODS.OPTIONS,
          METHODS.TRACE,
          METHODS.COPY,
          METHODS.LOCK,
          METHODS.MKCOL,
          METHODS.MOVE,
          METHODS.PROPFIND,
          METHODS.PROPPATCH,
          METHODS.SEARCH,
          METHODS.UNLOCK,
          METHODS.BIND,
          METHODS.REBIND,
          METHODS.UNBIND,
          METHODS.ACL,
          METHODS.REPORT,
          METHODS.MKACTIVITY,
          METHODS.CHECKOUT,
          METHODS.MERGE,
          METHODS["M-SEARCH"],
          METHODS.NOTIFY,
          METHODS.SUBSCRIBE,
          METHODS.UNSUBSCRIBE,
          METHODS.PATCH,
          METHODS.PURGE,
          METHODS.MKCALENDAR,
          METHODS.LINK,
          METHODS.UNLINK,
          METHODS.PRI,
          METHODS.SOURCE
        ];
        exports2.METHODS_ICE = [
          METHODS.SOURCE
        ];
        exports2.METHODS_RTSP = [
          METHODS.OPTIONS,
          METHODS.DESCRIBE,
          METHODS.ANNOUNCE,
          METHODS.SETUP,
          METHODS.PLAY,
          METHODS.PAUSE,
          METHODS.TEARDOWN,
          METHODS.GET_PARAMETER,
          METHODS.SET_PARAMETER,
          METHODS.REDIRECT,
          METHODS.RECORD,
          METHODS.FLUSH,
          METHODS.GET,
          METHODS.POST
        ];
        exports2.METHOD_MAP = utils_1.enumToMap(METHODS);
        exports2.H_METHOD_MAP = {};
        Object.keys(exports2.METHOD_MAP).forEach((key) => {
          if (/^H/.test(key)) {
            exports2.H_METHOD_MAP[key] = exports2.METHOD_MAP[key];
          }
        });
        var FINISH;
        (function(FINISH2) {
          FINISH2[FINISH2["SAFE"] = 0] = "SAFE";
          FINISH2[FINISH2["SAFE_WITH_CB"] = 1] = "SAFE_WITH_CB";
          FINISH2[FINISH2["UNSAFE"] = 2] = "UNSAFE";
        })(FINISH = exports2.FINISH || (exports2.FINISH = {}));
        exports2.ALPHA = [];
        for (let i = "A".charCodeAt(0); i <= "Z".charCodeAt(0); i++) {
          exports2.ALPHA.push(String.fromCharCode(i));
          exports2.ALPHA.push(String.fromCharCode(i + 32));
        }
        exports2.NUM_MAP = {
          0: 0,
          1: 1,
          2: 2,
          3: 3,
          4: 4,
          5: 5,
          6: 6,
          7: 7,
          8: 8,
          9: 9
        };
        exports2.HEX_MAP = {
          0: 0,
          1: 1,
          2: 2,
          3: 3,
          4: 4,
          5: 5,
          6: 6,
          7: 7,
          8: 8,
          9: 9,
          A: 10,
          B: 11,
          C: 12,
          D: 13,
          E: 14,
          F: 15,
          a: 10,
          b: 11,
          c: 12,
          d: 13,
          e: 14,
          f: 15
        };
        exports2.NUM = [
          "0",
          "1",
          "2",
          "3",
          "4",
          "5",
          "6",
          "7",
          "8",
          "9"
        ];
        exports2.ALPHANUM = exports2.ALPHA.concat(exports2.NUM);
        exports2.MARK = ["-", "_", ".", "!", "~", "*", "'", "(", ")"];
        exports2.USERINFO_CHARS = exports2.ALPHANUM.concat(exports2.MARK).concat(["%", ";", ":", "&", "=", "+", "$", ","]);
        exports2.STRICT_URL_CHAR = [
          "!",
          '"',
          "$",
          "%",
          "&",
          "'",
          "(",
          ")",
          "*",
          "+",
          ",",
          "-",
          ".",
          "/",
          ":",
          ";",
          "<",
          "=",
          ">",
          "@",
          "[",
          "\\",
          "]",
          "^",
          "_",
          "`",
          "{",
          "|",
          "}",
          "~"
        ].concat(exports2.ALPHANUM);
        exports2.URL_CHAR = exports2.STRICT_URL_CHAR.concat(["	", "\f"]);
        for (let i = 128; i <= 255; i++) {
          exports2.URL_CHAR.push(i);
        }
        exports2.HEX = exports2.NUM.concat(["a", "b", "c", "d", "e", "f", "A", "B", "C", "D", "E", "F"]);
        exports2.STRICT_TOKEN = [
          "!",
          "#",
          "$",
          "%",
          "&",
          "'",
          "*",
          "+",
          "-",
          ".",
          "^",
          "_",
          "`",
          "|",
          "~"
        ].concat(exports2.ALPHANUM);
        exports2.TOKEN = exports2.STRICT_TOKEN.concat([" "]);
        exports2.HEADER_CHARS = ["	"];
        for (let i = 32; i <= 255; i++) {
          if (i !== 127) {
            exports2.HEADER_CHARS.push(i);
          }
        }
        exports2.CONNECTION_TOKEN_CHARS = exports2.HEADER_CHARS.filter((c) => c !== 44);
        exports2.MAJOR = exports2.NUM_MAP;
        exports2.MINOR = exports2.MAJOR;
        var HEADER_STATE;
        (function(HEADER_STATE2) {
          HEADER_STATE2[HEADER_STATE2["GENERAL"] = 0] = "GENERAL";
          HEADER_STATE2[HEADER_STATE2["CONNECTION"] = 1] = "CONNECTION";
          HEADER_STATE2[HEADER_STATE2["CONTENT_LENGTH"] = 2] = "CONTENT_LENGTH";
          HEADER_STATE2[HEADER_STATE2["TRANSFER_ENCODING"] = 3] = "TRANSFER_ENCODING";
          HEADER_STATE2[HEADER_STATE2["UPGRADE"] = 4] = "UPGRADE";
          HEADER_STATE2[HEADER_STATE2["CONNECTION_KEEP_ALIVE"] = 5] = "CONNECTION_KEEP_ALIVE";
          HEADER_STATE2[HEADER_STATE2["CONNECTION_CLOSE"] = 6] = "CONNECTION_CLOSE";
          HEADER_STATE2[HEADER_STATE2["CONNECTION_UPGRADE"] = 7] = "CONNECTION_UPGRADE";
          HEADER_STATE2[HEADER_STATE2["TRANSFER_ENCODING_CHUNKED"] = 8] = "TRANSFER_ENCODING_CHUNKED";
        })(HEADER_STATE = exports2.HEADER_STATE || (exports2.HEADER_STATE = {}));
        exports2.SPECIAL_HEADERS = {
          "connection": HEADER_STATE.CONNECTION,
          "content-length": HEADER_STATE.CONTENT_LENGTH,
          "proxy-connection": HEADER_STATE.CONNECTION,
          "transfer-encoding": HEADER_STATE.TRANSFER_ENCODING,
          "upgrade": HEADER_STATE.UPGRADE
        };
      }
    });
    var require_llhttp_wasm = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/llhttp/llhttp.wasm.js"(exports2, module2) {
        module2.exports = "";
      }
    });
    var require_llhttp_simd_wasm = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/llhttp/llhttp_simd.wasm.js"(exports2, module2) {
        module2.exports = "AGFzbQEAAAABMAhgAX8Bf2ADf39/AX9gBH9/f38Bf2AAAGADf39/AGABfwBgAn9/AGAGf39/f39/AALLAQgDZW52GHdhc21fb25faGVhZGVyc19jb21wbGV0ZQACA2VudhV3YXNtX29uX21lc3NhZ2VfYmVnaW4AAANlbnYLd2FzbV9vbl91cmwAAQNlbnYOd2FzbV9vbl9zdGF0dXMAAQNlbnYUd2FzbV9vbl9oZWFkZXJfZmllbGQAAQNlbnYUd2FzbV9vbl9oZWFkZXJfdmFsdWUAAQNlbnYMd2FzbV9vbl9ib2R5AAEDZW52GHdhc21fb25fbWVzc2FnZV9jb21wbGV0ZQAAAzk4AwMEAAAFAAAAAAAABQEFAAUFBQAABgAAAAYGAQEBAQEBAQEBAQEBAQEBAQABAAABAQcAAAUFAAMEBQFwAQ4OBQMBAAIGCAF/AUGAuAQLB/UEHwZtZW1vcnkCAAtfaW5pdGlhbGl6ZQAJGV9faW5kaXJlY3RfZnVuY3Rpb25fdGFibGUBAAtsbGh0dHBfaW5pdAAKGGxsaHR0cF9zaG91bGRfa2VlcF9hbGl2ZQA1DGxsaHR0cF9hbGxvYwAMBm1hbGxvYwA6C2xsaHR0cF9mcmVlAA0EZnJlZQA8D2xsaHR0cF9nZXRfdHlwZQAOFWxsaHR0cF9nZXRfaHR0cF9tYWpvcgAPFWxsaHR0cF9nZXRfaHR0cF9taW5vcgAQEWxsaHR0cF9nZXRfbWV0aG9kABEWbGxodHRwX2dldF9zdGF0dXNfY29kZQASEmxsaHR0cF9nZXRfdXBncmFkZQATDGxsaHR0cF9yZXNldAAUDmxsaHR0cF9leGVjdXRlABUUbGxodHRwX3NldHRpbmdzX2luaXQAFg1sbGh0dHBfZmluaXNoABcMbGxodHRwX3BhdXNlABgNbGxodHRwX3Jlc3VtZQAZG2xsaHR0cF9yZXN1bWVfYWZ0ZXJfdXBncmFkZQAaEGxsaHR0cF9nZXRfZXJybm8AGxdsbGh0dHBfZ2V0X2Vycm9yX3JlYXNvbgAcF2xsaHR0cF9zZXRfZXJyb3JfcmVhc29uAB0UbGxodHRwX2dldF9lcnJvcl9wb3MAHhFsbGh0dHBfZXJybm9fbmFtZQAfEmxsaHR0cF9tZXRob2RfbmFtZQAgGmxsaHR0cF9zZXRfbGVuaWVudF9oZWFkZXJzACEhbGxodHRwX3NldF9sZW5pZW50X2NodW5rZWRfbGVuZ3RoACIYbGxodHRwX21lc3NhZ2VfbmVlZHNfZW9mADMJEwEAQQELDQECAwQFCwYHLiooJCYKuKgCOAIACwgAEIiAgIAACxkAIAAQtoCAgAAaIAAgAjYCNCAAIAE6ACgLHAAgACAALwEyIAAtAC4gABC1gICAABCAgICAAAspAQF/QTgQuoCAgAAiARC2gICAABogAUGAiICAADYCNCABIAA6ACggAQsKACAAELyAgIAACwcAIAAtACgLBwAgAC0AKgsHACAALQArCwcAIAAtACkLBwAgAC8BMgsHACAALQAuC0UBBH8gACgCGCEBIAAtAC0hAiAALQAoIQMgACgCNCEEIAAQtoCAgAAaIAAgBDYCNCAAIAM6ACggACACOgAtIAAgATYCGAsRACAAIAEgASACahC3gICAAAs+AQF7IAD9DAAAAAAAAAAAAAAAAAAAAAAiAf0LAgAgAEEwakIANwIAIABBIGogAf0LAgAgAEEQaiAB/QsCAAtnAQF/QQAhAQJAIAAoAgwNAAJAAkACQAJAIAAtAC8OAwEAAwILIAAoAjQiAUUNACABKAIcIgFFDQAgACABEYCAgIAAACIBDQMLQQAPCxC/gICAAAALIABB/5GAgAA2AhBBDiEBCyABCx4AAkAgACgCDA0AIABBhJSAgAA2AhAgAEEVNgIMCwsWAAJAIAAoAgxBFUcNACAAQQA2AgwLCxYAAkAgACgCDEEWRw0AIABBADYCDAsLBwAgACgCDAsHACAAKAIQCwkAIAAgATYCEAsHACAAKAIUCyIAAkAgAEEaSQ0AEL+AgIAAAAsgAEECdEHIm4CAAGooAgALIgACQCAAQS5JDQAQv4CAgAAACyAAQQJ0QbCcgIAAaigCAAsWACAAIAAtAC1B/gFxIAFBAEdyOgAtCxkAIAAgAC0ALUH9AXEgAUEAR0EBdHI6AC0LLgECf0EAIQMCQCAAKAI0IgRFDQAgBCgCACIERQ0AIAAgBBGAgICAAAAhAwsgAwtJAQJ/QQAhAwJAIAAoAjQiBEUNACAEKAIEIgRFDQAgACABIAIgAWsgBBGBgICAAAAiA0F/Rw0AIABBnI6AgAA2AhBBGCEDCyADCy4BAn9BACEDAkAgACgCNCIERQ0AIAQoAigiBEUNACAAIAQRgICAgAAAIQMLIAMLSQECf0EAIQMCQCAAKAI0IgRFDQAgBCgCCCIERQ0AIAAgASACIAFrIAQRgYCAgAAAIgNBf0cNACAAQdKKgIAANgIQQRghAwsgAwsuAQJ/QQAhAwJAIAAoAjQiBEUNACAEKAIsIgRFDQAgACAEEYCAgIAAACEDCyADC0kBAn9BACEDAkAgACgCNCIERQ0AIAQoAgwiBEUNACAAIAEgAiABayAEEYGAgIAAACIDQX9HDQAgAEHdk4CAADYCEEEYIQMLIAMLLgECf0EAIQMCQCAAKAI0IgRFDQAgBCgCMCIERQ0AIAAgBBGAgICAAAAhAwsgAwtJAQJ/QQAhAwJAIAAoAjQiBEUNACAEKAIQIgRFDQAgACABIAIgAWsgBBGBgICAAAAiA0F/Rw0AIABBw5CAgAA2AhBBGCEDCyADCy4BAn9BACEDAkAgACgCNCIERQ0AIAQoAjQiBEUNACAAIAQRgICAgAAAIQMLIAMLLgECf0EAIQMCQCAAKAI0IgRFDQAgBCgCFCIERQ0AIAAgBBGAgICAAAAhAwsgAwsuAQJ/QQAhAwJAIAAoAjQiBEUNACAEKAIcIgRFDQAgACAEEYCAgIAAACEDCyADC0kBAn9BACEDAkAgACgCNCIERQ0AIAQoAhgiBEUNACAAIAEgAiABayAEEYGAgIAAACIDQX9HDQAgAEHSiICAADYCEEEYIQMLIAMLLgECf0EAIQMCQCAAKAI0IgRFDQAgBCgCICIERQ0AIAAgBBGAgICAAAAhAwsgAwsuAQJ/QQAhAwJAIAAoAjQiBEUNACAEKAIkIgRFDQAgACAEEYCAgIAAACEDCyADC0UBAX8CQAJAIAAvATBBFHFBFEcNAEEBIQMgAC0AKEEBRg0BIAAvATJB5QBGIQMMAQsgAC0AKUEFRiEDCyAAIAM6AC5BAAvyAQEDf0EBIQMCQCAALwEwIgRBCHENACAAKQMgQgBSIQMLAkACQCAALQAuRQ0AQQEhBSAALQApQQVGDQFBASEFIARBwABxRSADcUEBRw0BC0EAIQUgBEHAAHENAEECIQUgBEEIcQ0AAkAgBEGABHFFDQACQCAALQAoQQFHDQAgAC0ALUEKcQ0AQQUPC0EEDwsCQCAEQSBxDQACQCAALQAoQQFGDQAgAC8BMiIAQZx/akHkAEkNACAAQcwBRg0AIABBsAJGDQBBBCEFIARBiARxQYAERg0CIARBKHFFDQILQQAPC0EAQQMgACkDIFAbIQULIAULXQECf0EAIQECQCAALQAoQQFGDQAgAC8BMiICQZx/akHkAEkNACACQcwBRg0AIAJBsAJGDQAgAC8BMCIAQcAAcQ0AQQEhASAAQYgEcUGABEYNACAAQShxRSEBCyABC6IBAQN/AkACQAJAIAAtACpFDQAgAC0AK0UNAEEAIQMgAC8BMCIEQQJxRQ0BDAILQQAhAyAALwEwIgRBAXFFDQELQQEhAyAALQAoQQFGDQAgAC8BMiIFQZx/akHkAEkNACAFQcwBRg0AIAVBsAJGDQAgBEHAAHENAEEAIQMgBEGIBHFBgARGDQAgBEEocUEARyEDCyAAQQA7ATAgAEEAOgAvIAMLlAEBAn8CQAJAAkAgAC0AKkUNACAALQArRQ0AQQAhASAALwEwIgJBAnFFDQEMAgtBACEBIAAvATAiAkEBcUUNAQtBASEBIAAtAChBAUYNACAALwEyIgBBnH9qQeQASQ0AIABBzAFGDQAgAEGwAkYNACACQcAAcQ0AQQAhASACQYgEcUGABEYNACACQShxQQBHIQELIAELSAEBeyAAQRBq/QwAAAAAAAAAAAAAAAAAAAAAIgH9CwMAIAAgAf0LAwAgAEEwakIANwMAIABBIGogAf0LAwAgAEG8ATYCHEEAC3sBAX8CQCAAKAIMIgMNAAJAIAAoAgRFDQAgACABNgIECwJAIAAgASACELiAgIAAIgMNACAAKAIMDwsgACADNgIcQQAhAyAAKAIEIgFFDQAgACABIAIgACgCCBGBgICAAAAiAUUNACAAIAI2AhQgACABNgIMIAEhAwsgAwvTzgEDHH8DfgV/I4CAgIAAQRBrIgMkgICAgAAgASEEIAEhBSABIQYgASEHIAEhCCABIQkgASEKIAEhCyABIQwgASENIAEhDiABIQ8gASEQIAEhESABIRIgASETIAEhFCABIRUgASEWIAEhFyABIRggASEZIAEhGiABIRsgASEcIAEhHQJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIAAoAhwiHkF/ag68AbcBAbYBAgMEBQYHCAkKCwwNDg8QwAG/ARESE7UBFBUWFxgZGr0BvAEbHB0eHyAhtAGzASIjsgGxASQlJicoKSorLC0uLzAxMjM0NTY3ODk6uAE7PD0+P0BBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWltcXV5fYGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6e3x9fn+AAYEBggGDAYQBhQGGAYcBiAGJAYoBiwGMAY0BjgGPAZABkQGSAZMBlAGVAZYBlwGYAZkBmgGbAZwBnQGeAZ8BoAGhAaIBowGkAaUBpgGnAagBqQGqAasBrAGtAa4BrwEAuQELQQAhHgyvAQtBDyEeDK4BC0EOIR4MrQELQRAhHgysAQtBESEeDKsBC0EUIR4MqgELQRUhHgypAQtBFiEeDKgBC0EXIR4MpwELQRghHgymAQtBCCEeDKUBC0EZIR4MpAELQRohHgyjAQtBEyEeDKIBC0ESIR4MoQELQRshHgygAQtBHCEeDJ8BC0EdIR4MngELQR4hHgydAQtBqgEhHgycAQtBqwEhHgybAQtBICEeDJoBC0EhIR4MmQELQSIhHgyYAQtBIyEeDJcBC0EkIR4MlgELQa0BIR4MlQELQSUhHgyUAQtBKSEeDJMBC0ENIR4MkgELQSYhHgyRAQtBJyEeDJABC0EoIR4MjwELQS4hHgyOAQtBKiEeDI0BC0GuASEeDIwBC0EMIR4MiwELQS8hHgyKAQtBKyEeDIkBC0ELIR4MiAELQSwhHgyHAQtBLSEeDIYBC0EKIR4MhQELQTEhHgyEAQtBMCEeDIMBC0EJIR4MggELQR8hHgyBAQtBMiEeDIABC0EzIR4MfwtBNCEeDH4LQTUhHgx9C0E2IR4MfAtBNyEeDHsLQTghHgx6C0E5IR4MeQtBOiEeDHgLQawBIR4MdwtBOyEeDHYLQTwhHgx1C0E9IR4MdAtBPiEeDHMLQT8hHgxyC0HAACEeDHELQcEAIR4McAtBwgAhHgxvC0HDACEeDG4LQcQAIR4MbQtBByEeDGwLQcUAIR4MawtBBiEeDGoLQcYAIR4MaQtBBSEeDGgLQccAIR4MZwtBBCEeDGYLQcgAIR4MZQtByQAhHgxkC0HKACEeDGMLQcsAIR4MYgtBAyEeDGELQcwAIR4MYAtBzQAhHgxfC0HOACEeDF4LQdAAIR4MXQtBzwAhHgxcC0HRACEeDFsLQdIAIR4MWgtBAiEeDFkLQdMAIR4MWAtB1AAhHgxXC0HVACEeDFYLQdYAIR4MVQtB1wAhHgxUC0HYACEeDFMLQdkAIR4MUgtB2gAhHgxRC0HbACEeDFALQdwAIR4MTwtB3QAhHgxOC0HeACEeDE0LQd8AIR4MTAtB4AAhHgxLC0HhACEeDEoLQeIAIR4MSQtB4wAhHgxIC0HkACEeDEcLQeUAIR4MRgtB5gAhHgxFC0HnACEeDEQLQegAIR4MQwtB6QAhHgxCC0HqACEeDEELQesAIR4MQAtB7AAhHgw/C0HtACEeDD4LQe4AIR4MPQtB7wAhHgw8C0HwACEeDDsLQfEAIR4MOgtB8gAhHgw5C0HzACEeDDgLQfQAIR4MNwtB9QAhHgw2C0H2ACEeDDULQfcAIR4MNAtB+AAhHgwzC0H5ACEeDDILQfoAIR4MMQtB+wAhHgwwC0H8ACEeDC8LQf0AIR4MLgtB/gAhHgwtC0H/ACEeDCwLQYABIR4MKwtBgQEhHgwqC0GCASEeDCkLQYMBIR4MKAtBhAEhHgwnC0GFASEeDCYLQYYBIR4MJQtBhwEhHgwkC0GIASEeDCMLQYkBIR4MIgtBigEhHgwhC0GLASEeDCALQYwBIR4MHwtBjQEhHgweC0GOASEeDB0LQY8BIR4MHAtBkAEhHgwbC0GRASEeDBoLQZIBIR4MGQtBkwEhHgwYC0GUASEeDBcLQZUBIR4MFgtBlgEhHgwVC0GXASEeDBQLQZgBIR4MEwtBmQEhHgwSC0GdASEeDBELQZoBIR4MEAtBASEeDA8LQZsBIR4MDgtBnAEhHgwNC0GeASEeDAwLQaABIR4MCwtBnwEhHgwKC0GhASEeDAkLQaIBIR4MCAtBowEhHgwHC0GkASEeDAYLQaUBIR4MBQtBpgEhHgwEC0GnASEeDAMLQagBIR4MAgtBqQEhHgwBC0GvASEeCwNAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIB4OsAEAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGhweHyAjJCUmJygpKiwtLi8w+wI0Njg5PD9BQkNERUZHSElKS0xNTk9QUVJTVVdZXF1eYGJjZGVmZ2hrbG1ub3BxcnN0dXZ3eHl6e3x9fn+AAYEBggGDAYQBhQGGAYcBiAGJAYoBiwGMAY0BjgGPAZABkQGSAZMBlAGVAZYBlwGYAZkBmgGbAZwBnQGeAZ8BoAGhAaIBowGkAaUBpgGnAagBqQGqAasBrAGtAa4BrwGwAbEBsgG0AbUBtgG3AbgBuQG6AbsBvAG9Ab4BvwHAAcEBwgHaAeAB4QHkAfEBvQK9AgsgASIIIAJHDcIBQbwBIR4MlQMLIAEiHiACRw2xAUGsASEeDJQDCyABIgEgAkcNZ0HiACEeDJMDCyABIgEgAkcNXUHaACEeDJIDCyABIgEgAkcNVkHVACEeDJEDCyABIgEgAkcNUkHTACEeDJADCyABIgEgAkcNT0HRACEeDI8DCyABIgEgAkcNTEHPACEeDI4DCyABIgEgAkcNEEEMIR4MjQMLIAEiASACRw0zQTghHgyMAwsgASIBIAJHDS9BNSEeDIsDCyABIgEgAkcNJkEyIR4MigMLIAEiASACRw0kQS8hHgyJAwsgASIBIAJHDR1BJCEeDIgDCyAALQAuQQFGDf0CDMcBCyAAIAEiASACELSAgIAAQQFHDbQBDLUBCyAAIAEiASACEK2AgIAAIh4NtQEgASEBDLACCwJAIAEiASACRw0AQQYhHgyFAwsgACABQQFqIgEgAhCwgICAACIeDbYBIAEhAQwPCyAAQgA3AyBBEyEeDPMCCyABIh4gAkcNCUEPIR4MggMLAkAgASIBIAJGDQAgAUEBaiEBQREhHgzyAgtBByEeDIEDCyAAQgAgACkDICIfIAIgASIea60iIH0iISAhIB9WGzcDICAfICBWIiJFDbMBQQghHgyAAwsCQCABIgEgAkYNACAAQYmAgIAANgIIIAAgATYCBCABIQFBFSEeDPACC0EJIR4M/wILIAEhASAAKQMgUA2yASABIQEMrQILAkAgASIBIAJHDQBBCyEeDP4CCyAAIAFBAWoiASACEK+AgIAAIh4NsgEgASEBDK0CCwNAAkAgAS0AAEHwnYCAAGotAAAiHkEBRg0AIB5BAkcNtAEgAUEBaiEBDAMLIAFBAWoiASACRw0AC0EMIR4M/AILAkAgASIBIAJHDQBBDSEeDPwCCwJAAkAgAS0AACIeQXNqDhQBtgG2AbYBtgG2AbYBtgG2AbYBtgG2AbYBtgG2AbYBtgG2AbYBALQBCyABQQFqIQEMtAELIAFBAWohAQtBGCEeDOoCCwJAIAEiHiACRw0AQQ4hHgz6AgtCACEfIB4hAQJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAgHi0AAEFQag43yAHHAQABAgMEBQYHvgK+Ar4CvgK+Ar4CvgIICQoLDA2+Ar4CvgK+Ar4CvgK+Ar4CvgK+Ar4CvgK+Ar4CvgK+Ar4CvgK+Ar4CvgK+Ar4CvgK+Ar4CDg8QERITvgILQgIhHwzHAQtCAyEfDMYBC0IEIR8MxQELQgUhHwzEAQtCBiEfDMMBC0IHIR8MwgELQgghHwzBAQtCCSEfDMABC0IKIR8MvwELQgshHwy+AQtCDCEfDL0BC0INIR8MvAELQg4hHwy7AQtCDyEfDLoBC0IKIR8MuQELQgshHwy4AQtCDCEfDLcBC0INIR8MtgELQg4hHwy1AQtCDyEfDLQBC0IAIR8CQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAIB4tAABBUGoON8cBxgEAAQIDBAUGB8gByAHIAcgByAHIAcgBCAkKCwwNyAHIAcgByAHIAcgByAHIAcgByAHIAcgByAHIAcgByAHIAcgByAHIAcgByAHIAcgByAHIAQ4PEBESE8gBC0ICIR8MxgELQgMhHwzFAQtCBCEfDMQBC0IFIR8MwwELQgYhHwzCAQtCByEfDMEBC0IIIR8MwAELQgkhHwy/AQtCCiEfDL4BC0ILIR8MvQELQgwhHwy8AQtCDSEfDLsBC0IOIR8MugELQg8hHwy5AQtCCiEfDLgBC0ILIR8MtwELQgwhHwy2AQtCDSEfDLUBC0IOIR8MtAELQg8hHwyzAQsgAEIAIAApAyAiHyACIAEiHmutIiB9IiEgISAfVhs3AyAgHyAgViIiRQ20AUERIR4M9wILAkAgASIBIAJGDQAgAEGJgICAADYCCCAAIAE2AgQgASEBQRshHgznAgtBEiEeDPYCCyAAIAEiHiACELKAgIAAQX9qDgWmAQCiAgGzAbQBC0ESIR4M5AILIABBAToALyAeIQEM8gILIAEiASACRw20AUEWIR4M8gILIAEiHCACRw0ZQTkhHgzxAgsCQCABIgEgAkcNAEEaIR4M8QILIABBADYCBCAAQYqAgIAANgIIIAAgASABEKqAgIAAIh4NtgEgASEBDLkBCwJAIAEiHiACRw0AQRshHgzwAgsCQCAeLQAAIgFBIEcNACAeQQFqIQEMGgsgAUEJRw22ASAeQQFqIQEMGQsCQCABIgEgAkYNACABQQFqIQEMFAtBHCEeDO4CCwJAIAEiHiACRw0AQR0hHgzuAgsCQCAeLQAAIgFBCUcNACAeIQEM0gILIAFBIEcNtQEgHiEBDNECCwJAIAEiASACRw0AQR4hHgztAgsgAS0AAEEKRw24ASABQQFqIQEMoAILIAEiASACRw24AUEiIR4M6wILA0ACQCABLQAAIh5BIEYNAAJAIB5BdmoOBAC+Ab4BALwBCyABIQEMxAELIAFBAWoiASACRw0AC0EkIR4M6gILQSUhHiABIiMgAkYN6QIgAiAjayAAKAIAIiRqISUgIyEmICQhAQJAA0AgJi0AACIiQSByICIgIkG/f2pB/wFxQRpJG0H/AXEgAUHwn4CAAGotAABHDQEgAUEDRg3WAiABQQFqIQEgJkEBaiImIAJHDQALIAAgJTYCAAzqAgsgAEEANgIAICYhAQy7AQtBJiEeIAEiIyACRg3oAiACICNrIAAoAgAiJGohJSAjISYgJCEBAkADQCAmLQAAIiJBIHIgIiAiQb9/akH/AXFBGkkbQf8BcSABQfSfgIAAai0AAEcNASABQQhGDb0BIAFBAWohASAmQQFqIiYgAkcNAAsgACAlNgIADOkCCyAAQQA2AgAgJiEBDLoBC0EnIR4gASIjIAJGDecCIAIgI2sgACgCACIkaiElICMhJiAkIQECQANAICYtAAAiIkEgciAiICJBv39qQf8BcUEaSRtB/wFxIAFB0KaAgABqLQAARw0BIAFBBUYNvQEgAUEBaiEBICZBAWoiJiACRw0ACyAAICU2AgAM6AILIABBADYCACAmIQEMuQELAkAgASIBIAJGDQADQAJAIAEtAABBgKKAgABqLQAAIh5BAUYNACAeQQJGDQogASEBDMEBCyABQQFqIgEgAkcNAAtBIyEeDOcCC0EjIR4M5gILAkAgASIBIAJGDQADQAJAIAEtAAAiHkEgRg0AIB5BdmoOBL0BvgG+Ab0BvgELIAFBAWoiASACRw0AC0ErIR4M5gILQSshHgzlAgsDQAJAIAEtAAAiHkEgRg0AIB5BCUcNAwsgAUEBaiIBIAJHDQALQS8hHgzkAgsDQAJAIAEtAAAiHkEgRg0AAkACQCAeQXZqDgS+AQEBvgEACyAeQSxGDb8BCyABIQEMBAsgAUEBaiIBIAJHDQALQTIhHgzjAgsgASEBDL8BC0EzIR4gASImIAJGDeECIAIgJmsgACgCACIjaiEkICYhIiAjIQECQANAICItAABBIHIgAUGApICAAGotAABHDQEgAUEGRg3QAiABQQFqIQEgIkEBaiIiIAJHDQALIAAgJDYCAAziAgsgAEEANgIAICIhAQtBKyEeDNACCwJAIAEiHSACRw0AQTQhHgzgAgsgAEGKgICAADYCCCAAIB02AgQgHSEBIAAtACxBf2oOBK8BuQG7Ab0BxwILIAFBAWohAQyuAQsCQCABIgEgAkYNAANAAkAgAS0AACIeQSByIB4gHkG/f2pB/wFxQRpJG0H/AXEiHkEJRg0AIB5BIEYNAAJAAkACQAJAIB5BnX9qDhMAAwMDAwMDAwEDAwMDAwMDAwMCAwsgAUEBaiEBQSYhHgzTAgsgAUEBaiEBQSchHgzSAgsgAUEBaiEBQSghHgzRAgsgASEBDLIBCyABQQFqIgEgAkcNAAtBKCEeDN4CC0EoIR4M3QILAkAgASIBIAJGDQADQAJAIAEtAABBgKCAgABqLQAAQQFGDQAgASEBDLcBCyABQQFqIgEgAkcNAAtBMCEeDN0CC0EwIR4M3AILAkADQAJAIAEtAABBd2oOGAACwQLBAscCwQLBAsECwQLBAsECwQLBAsECwQLBAsECwQLBAsECwQLBAsECAMECCyABQQFqIgEgAkcNAAtBNSEeDNwCCyABQQFqIQELQSEhHgzKAgsgASIBIAJHDbkBQTchHgzZAgsDQAJAIAEtAABBkKSAgABqLQAAQQFGDQAgASEBDJACCyABQQFqIgEgAkcNAAtBOCEeDNgCCyAcLQAAIh5BIEYNmgEgHkE6Rw3GAiAAKAIEIQEgAEEANgIEIAAgASAcEKiAgIAAIgENtgEgHEEBaiEBDLgBCyAAIAEgAhCpgICAABoLQQohHgzFAgtBOiEeIAEiJiACRg3UAiACICZrIAAoAgAiI2ohJCAmIRwgIyEBAkADQCAcLQAAIiJBIHIgIiAiQb9/akH/AXFBGkkbQf8BcSABQZCmgIAAai0AAEcNxAIgAUEFRg0BIAFBAWohASAcQQFqIhwgAkcNAAsgACAkNgIADNUCCyAAQQA2AgAgAEEBOgAsICYgI2tBBmohAQy+AgtBOyEeIAEiJiACRg3TAiACICZrIAAoAgAiI2ohJCAmIRwgIyEBAkADQCAcLQAAIiJBIHIgIiAiQb9/akH/AXFBGkkbQf8BcSABQZamgIAAai0AAEcNwwIgAUEJRg0BIAFBAWohASAcQQFqIhwgAkcNAAsgACAkNgIADNQCCyAAQQA2AgAgAEECOgAsICYgI2tBCmohAQy9AgsCQCABIhwgAkcNAEE8IR4M0wILAkACQCAcLQAAIgFBIHIgASABQb9/akH/AXFBGkkbQf8BcUGSf2oOBwDDAsMCwwLDAsMCAcMCCyAcQQFqIQFBMiEeDMMCCyAcQQFqIQFBMyEeDMICC0E9IR4gASImIAJGDdECIAIgJmsgACgCACIjaiEkICYhHCAjIQEDQCAcLQAAIiJBIHIgIiAiQb9/akH/AXFBGkkbQf8BcSABQaCmgIAAai0AAEcNwAIgAUEBRg20AiABQQFqIQEgHEEBaiIcIAJHDQALIAAgJDYCAAzRAgtBPiEeIAEiJiACRg3QAiACICZrIAAoAgAiI2ohJCAmIRwgIyEBAkADQCAcLQAAIiJBIHIgIiAiQb9/akH/AXFBGkkbQf8BcSABQaKmgIAAai0AAEcNwAIgAUEORg0BIAFBAWohASAcQQFqIhwgAkcNAAsgACAkNgIADNECCyAAQQA2AgAgAEEBOgAsICYgI2tBD2ohAQy6AgtBPyEeIAEiJiACRg3PAiACICZrIAAoAgAiI2ohJCAmIRwgIyEBAkADQCAcLQAAIiJBIHIgIiAiQb9/akH/AXFBGkkbQf8BcSABQcCmgIAAai0AAEcNvwIgAUEPRg0BIAFBAWohASAcQQFqIhwgAkcNAAsgACAkNgIADNACCyAAQQA2AgAgAEEDOgAsICYgI2tBEGohAQy5AgtBwAAhHiABIiYgAkYNzgIgAiAmayAAKAIAIiNqISQgJiEcICMhAQJAA0AgHC0AACIiQSByICIgIkG/f2pB/wFxQRpJG0H/AXEgAUHQpoCAAGotAABHDb4CIAFBBUYNASABQQFqIQEgHEEBaiIcIAJHDQALIAAgJDYCAAzPAgsgAEEANgIAIABBBDoALCAmICNrQQZqIQEMuAILAkAgASIcIAJHDQBBwQAhHgzOAgsCQAJAAkACQCAcLQAAIgFBIHIgASABQb9/akH/AXFBGkkbQf8BcUGdf2oOEwDAAsACwALAAsACwALAAsACwALAAsACwAIBwALAAsACAgPAAgsgHEEBaiEBQTUhHgzAAgsgHEEBaiEBQTYhHgy/AgsgHEEBaiEBQTchHgy+AgsgHEEBaiEBQTghHgy9AgsCQCABIgEgAkYNACAAQYuAgIAANgIIIAAgATYCBCABIQFBOSEeDL0CC0HCACEeDMwCCyABIgEgAkcNrwFBxAAhHgzLAgtBxQAhHiABIiYgAkYNygIgAiAmayAAKAIAIiNqISQgJiEiICMhAQJAA0AgIi0AACABQdamgIAAai0AAEcNtAEgAUEBRg0BIAFBAWohASAiQQFqIiIgAkcNAAsgACAkNgIADMsCCyAAQQA2AgAgJiAja0ECaiEBDK8BCwJAIAEiASACRw0AQccAIR4MygILIAEtAABBCkcNswEgAUEBaiEBDK8BCwJAIAEiASACRw0AQcgAIR4MyQILAkACQCABLQAAQXZqDgQBtAG0AQC0AQsgAUEBaiEBQT0hHgy5AgsgAUEBaiEBDK4BCwJAIAEiASACRw0AQckAIR4MyAILQQAhHgJAAkACQAJAAkACQAJAAkAgAS0AAEFQag4KuwG6AQABAgMEBQYHvAELQQIhHgy6AQtBAyEeDLkBC0EEIR4MuAELQQUhHgy3AQtBBiEeDLYBC0EHIR4MtQELQQghHgy0AQtBCSEeDLMBCwJAIAEiASACRw0AQcoAIR4MxwILIAEtAABBLkcNtAEgAUEBaiEBDIACCwJAIAEiASACRw0AQcsAIR4MxgILQQAhHgJAAkACQAJAAkACQAJAAkAgAS0AAEFQag4KvQG8AQABAgMEBQYHvgELQQIhHgy8AQtBAyEeDLsBC0EEIR4MugELQQUhHgy5AQtBBiEeDLgBC0EHIR4MtwELQQghHgy2AQtBCSEeDLUBC0HMACEeIAEiJiACRg3EAiACICZrIAAoAgAiI2ohJCAmIQEgIyEiA0AgAS0AACAiQeKmgIAAai0AAEcNuAEgIkEDRg23ASAiQQFqISIgAUEBaiIBIAJHDQALIAAgJDYCAAzEAgtBzQAhHiABIiYgAkYNwwIgAiAmayAAKAIAIiNqISQgJiEBICMhIgNAIAEtAAAgIkHmpoCAAGotAABHDbcBICJBAkYNuQEgIkEBaiEiIAFBAWoiASACRw0ACyAAICQ2AgAMwwILQc4AIR4gASImIAJGDcICIAIgJmsgACgCACIjaiEkICYhASAjISIDQCABLQAAICJB6aaAgABqLQAARw22ASAiQQNGDbkBICJBAWohIiABQQFqIgEgAkcNAAsgACAkNgIADMICCwNAAkAgAS0AACIeQSBGDQACQAJAAkAgHkG4f2oOCwABugG6AboBugG6AboBugG6AQK6AQsgAUEBaiEBQcIAIR4MtQILIAFBAWohAUHDACEeDLQCCyABQQFqIQFBxAAhHgyzAgsgAUEBaiIBIAJHDQALQc8AIR4MwQILAkAgASIBIAJGDQAgACABQQFqIgEgAhClgICAABogASEBQQchHgyxAgtB0AAhHgzAAgsDQAJAIAEtAABB8KaAgABqLQAAIh5BAUYNACAeQX5qDgO5AboBuwG8AQsgAUEBaiIBIAJHDQALQdEAIR4MvwILAkAgASIBIAJGDQAgAUEBaiEBDAMLQdIAIR4MvgILA0ACQCABLQAAQfCogIAAai0AACIeQQFGDQACQCAeQX5qDgS8Ab0BvgEAvwELIAEhAUHGACEeDK8CCyABQQFqIgEgAkcNAAtB0wAhHgy9AgsCQCABIgEgAkcNAEHUACEeDL0CCwJAIAEtAAAiHkF2ag4apAG/Ab8BpgG/Ab8BvwG/Ab8BvwG/Ab8BvwG/Ab8BvwG/Ab8BvwG/Ab8BvwG0Ab8BvwEAvQELIAFBAWohAQtBBiEeDKsCCwNAAkAgAS0AAEHwqoCAAGotAABBAUYNACABIQEM+gELIAFBAWoiASACRw0AC0HVACEeDLoCCwJAIAEiASACRg0AIAFBAWohAQwDC0HWACEeDLkCCwJAIAEiASACRw0AQdcAIR4MuQILIAFBAWohAQwBCwJAIAEiASACRw0AQdgAIR4MuAILIAFBAWohAQtBBCEeDKYCCwJAIAEiIiACRw0AQdkAIR4MtgILICIhAQJAAkACQCAiLQAAQfCsgIAAai0AAEF/ag4HvgG/AcABAPgBAQLBAQsgIkEBaiEBDAoLICJBAWohAQy3AQtBACEeIABBADYCHCAAQfGOgIAANgIQIABBBzYCDCAAICJBAWo2AhQMtQILAkADQAJAIAEtAABB8KyAgABqLQAAIh5BBEYNAAJAAkAgHkF/ag4HvAG9Ab4BwwEABAHDAQsgASEBQckAIR4MqAILIAFBAWohAUHLACEeDKcCCyABQQFqIgEgAkcNAAtB2gAhHgy1AgsgAUEBaiEBDLUBCwJAIAEiIiACRw0AQdsAIR4MtAILICItAABBL0cNvgEgIkEBaiEBDAYLAkAgASIiIAJHDQBB3AAhHgyzAgsCQCAiLQAAIgFBL0cNACAiQQFqIQFBzAAhHgyjAgsgAUF2aiIBQRZLDb0BQQEgAXRBiYCAAnFFDb0BDJMCCwJAIAEiASACRg0AIAFBAWohAUHNACEeDKICC0HdACEeDLECCwJAIAEiIiACRw0AQd8AIR4MsQILICIhAQJAICItAABB8LCAgABqLQAAQX9qDgOSAvABAL4BC0HQACEeDKACCwJAIAEiIiACRg0AA0ACQCAiLQAAQfCugIAAai0AACIBQQNGDQACQCABQX9qDgKUAgC/AQsgIiEBQc4AIR4MogILICJBAWoiIiACRw0AC0HeACEeDLACC0HeACEeDK8CCwJAIAEiASACRg0AIABBjICAgAA2AgggACABNgIEIAEhAUHPACEeDJ8CC0HgACEeDK4CCwJAIAEiASACRw0AQeEAIR4MrgILIABBjICAgAA2AgggACABNgIEIAEhAQtBAyEeDJwCCwNAIAEtAABBIEcNjAIgAUEBaiIBIAJHDQALQeIAIR4MqwILAkAgASIBIAJHDQBB4wAhHgyrAgsgAS0AAEEgRw24ASABQQFqIQEM1AELAkAgASIIIAJHDQBB5AAhHgyqAgsgCC0AAEHMAEcNuwEgCEEBaiEBQRMhHgy5AQtB5QAhHiABIiIgAkYNqAIgAiAiayAAKAIAIiZqISMgIiEIICYhAQNAIAgtAAAgAUHwsoCAAGotAABHDboBIAFBBUYNuAEgAUEBaiEBIAhBAWoiCCACRw0ACyAAICM2AgAMqAILAkAgASIIIAJHDQBB5gAhHgyoAgsCQAJAIAgtAABBvX9qDgwAuwG7AbsBuwG7AbsBuwG7AbsBuwEBuwELIAhBAWohAUHUACEeDJgCCyAIQQFqIQFB1QAhHgyXAgtB5wAhHiABIiIgAkYNpgIgAiAiayAAKAIAIiZqISMgIiEIICYhAQJAA0AgCC0AACABQe2zgIAAai0AAEcNuQEgAUECRg0BIAFBAWohASAIQQFqIgggAkcNAAsgACAjNgIADKcCCyAAQQA2AgAgIiAma0EDaiEBQRAhHgy2AQtB6AAhHiABIiIgAkYNpQIgAiAiayAAKAIAIiZqISMgIiEIICYhAQJAA0AgCC0AACABQfaygIAAai0AAEcNuAEgAUEFRg0BIAFBAWohASAIQQFqIgggAkcNAAsgACAjNgIADKYCCyAAQQA2AgAgIiAma0EGaiEBQRYhHgy1AQtB6QAhHiABIiIgAkYNpAIgAiAiayAAKAIAIiZqISMgIiEIICYhAQJAA0AgCC0AACABQfyygIAAai0AAEcNtwEgAUEDRg0BIAFBAWohASAIQQFqIgggAkcNAAsgACAjNgIADKUCCyAAQQA2AgAgIiAma0EEaiEBQQUhHgy0AQsCQCABIgggAkcNAEHqACEeDKQCCyAILQAAQdkARw21ASAIQQFqIQFBCCEeDLMBCwJAIAEiCCACRw0AQesAIR4MowILAkACQCAILQAAQbJ/ag4DALYBAbYBCyAIQQFqIQFB2QAhHgyTAgsgCEEBaiEBQdoAIR4MkgILAkAgASIIIAJHDQBB7AAhHgyiAgsCQAJAIAgtAABBuH9qDggAtQG1AbUBtQG1AbUBAbUBCyAIQQFqIQFB2AAhHgySAgsgCEEBaiEBQdsAIR4MkQILQe0AIR4gASIiIAJGDaACIAIgImsgACgCACImaiEjICIhCCAmIQECQANAIAgtAAAgAUGAs4CAAGotAABHDbMBIAFBAkYNASABQQFqIQEgCEEBaiIIIAJHDQALIAAgIzYCAAyhAgtBACEeIABBADYCACAiICZrQQNqIQEMsAELQe4AIR4gASIiIAJGDZ8CIAIgImsgACgCACImaiEjICIhCCAmIQECQANAIAgtAAAgAUGDs4CAAGotAABHDbIBIAFBBEYNASABQQFqIQEgCEEBaiIIIAJHDQALIAAgIzYCAAygAgsgAEEANgIAICIgJmtBBWohAUEjIR4MrwELAkAgASIIIAJHDQBB7wAhHgyfAgsCQAJAIAgtAABBtH9qDggAsgGyAbIBsgGyAbIBAbIBCyAIQQFqIQFB3QAhHgyPAgsgCEEBaiEBQd4AIR4MjgILAkAgASIIIAJHDQBB8AAhHgyeAgsgCC0AAEHFAEcNrwEgCEEBaiEBDN4BC0HxACEeIAEiIiACRg2cAiACICJrIAAoAgAiJmohIyAiIQggJiEBAkADQCAILQAAIAFBiLOAgABqLQAARw2vASABQQNGDQEgAUEBaiEBIAhBAWoiCCACRw0ACyAAICM2AgAMnQILIABBADYCACAiICZrQQRqIQFBLSEeDKwBC0HyACEeIAEiIiACRg2bAiACICJrIAAoAgAiJmohIyAiIQggJiEBAkADQCAILQAAIAFB0LOAgABqLQAARw2uASABQQhGDQEgAUEBaiEBIAhBAWoiCCACRw0ACyAAICM2AgAMnAILIABBADYCACAiICZrQQlqIQFBKSEeDKsBCwJAIAEiASACRw0AQfMAIR4MmwILQQEhHiABLQAAQd8ARw2qASABQQFqIQEM3AELQfQAIR4gASIiIAJGDZkCIAIgImsgACgCACImaiEjICIhCCAmIQEDQCAILQAAIAFBjLOAgABqLQAARw2rASABQQFGDfcBIAFBAWohASAIQQFqIgggAkcNAAsgACAjNgIADJkCCwJAIAEiHiACRw0AQfUAIR4MmQILIAIgHmsgACgCACIiaiEmIB4hCCAiIQECQANAIAgtAAAgAUGOs4CAAGotAABHDasBIAFBAkYNASABQQFqIQEgCEEBaiIIIAJHDQALIAAgJjYCAEH1ACEeDJkCCyAAQQA2AgAgHiAia0EDaiEBQQIhHgyoAQsCQCABIh4gAkcNAEH2ACEeDJgCCyACIB5rIAAoAgAiImohJiAeIQggIiEBAkADQCAILQAAIAFB8LOAgABqLQAARw2qASABQQFGDQEgAUEBaiEBIAhBAWoiCCACRw0ACyAAICY2AgBB9gAhHgyYAgsgAEEANgIAIB4gImtBAmohAUEfIR4MpwELAkAgASIeIAJHDQBB9wAhHgyXAgsgAiAeayAAKAIAIiJqISYgHiEIICIhAQJAA0AgCC0AACABQfKzgIAAai0AAEcNqQEgAUEBRg0BIAFBAWohASAIQQFqIgggAkcNAAsgACAmNgIAQfcAIR4MlwILIABBADYCACAeICJrQQJqIQFBCSEeDKYBCwJAIAEiCCACRw0AQfgAIR4MlgILAkACQCAILQAAQbd/ag4HAKkBqQGpAakBqQEBqQELIAhBAWohAUHmACEeDIYCCyAIQQFqIQFB5wAhHgyFAgsCQCABIh4gAkcNAEH5ACEeDJUCCyACIB5rIAAoAgAiImohJiAeIQggIiEBAkADQCAILQAAIAFBkbOAgABqLQAARw2nASABQQVGDQEgAUEBaiEBIAhBAWoiCCACRw0ACyAAICY2AgBB+QAhHgyVAgsgAEEANgIAIB4gImtBBmohAUEYIR4MpAELAkAgASIeIAJHDQBB+gAhHgyUAgsgAiAeayAAKAIAIiJqISYgHiEIICIhAQJAA0AgCC0AACABQZezgIAAai0AAEcNpgEgAUECRg0BIAFBAWohASAIQQFqIgggAkcNAAsgACAmNgIAQfoAIR4MlAILIABBADYCACAeICJrQQNqIQFBFyEeDKMBCwJAIAEiHiACRw0AQfsAIR4MkwILIAIgHmsgACgCACIiaiEmIB4hCCAiIQECQANAIAgtAAAgAUGas4CAAGotAABHDaUBIAFBBkYNASABQQFqIQEgCEEBaiIIIAJHDQALIAAgJjYCAEH7ACEeDJMCCyAAQQA2AgAgHiAia0EHaiEBQRUhHgyiAQsCQCABIh4gAkcNAEH8ACEeDJICCyACIB5rIAAoAgAiImohJiAeIQggIiEBAkADQCAILQAAIAFBobOAgABqLQAARw2kASABQQVGDQEgAUEBaiEBIAhBAWoiCCACRw0ACyAAICY2AgBB/AAhHgySAgsgAEEANgIAIB4gImtBBmohAUEeIR4MoQELAkAgASIIIAJHDQBB/QAhHgyRAgsgCC0AAEHMAEcNogEgCEEBaiEBQQohHgygAQsCQCABIgggAkcNAEH+ACEeDJACCwJAAkAgCC0AAEG/f2oODwCjAaMBowGjAaMBowGjAaMBowGjAaMBowGjAQGjAQsgCEEBaiEBQewAIR4MgAILIAhBAWohAUHtACEeDP8BCwJAIAEiCCACRw0AQf8AIR4MjwILAkACQCAILQAAQb9/ag4DAKIBAaIBCyAIQQFqIQFB6wAhHgz/AQsgCEEBaiEBQe4AIR4M/gELAkAgASIeIAJHDQBBgAEhHgyOAgsgAiAeayAAKAIAIiJqISYgHiEIICIhAQJAA0AgCC0AACABQaezgIAAai0AAEcNoAEgAUEBRg0BIAFBAWohASAIQQFqIgggAkcNAAsgACAmNgIAQYABIR4MjgILIABBADYCACAeICJrQQJqIQFBCyEeDJ0BCwJAIAEiCCACRw0AQYEBIR4MjQILAkACQAJAAkAgCC0AAEFTag4jAKIBogGiAaIBogGiAaIBogGiAaIBogGiAaIBogGiAaIBogGiAaIBogGiAaIBogEBogGiAaIBogGiAQKiAaIBogEDogELIAhBAWohAUHpACEeDP8BCyAIQQFqIQFB6gAhHgz+AQsgCEEBaiEBQe8AIR4M/QELIAhBAWohAUHwACEeDPwBCwJAIAEiHiACRw0AQYIBIR4MjAILIAIgHmsgACgCACIiaiEmIB4hCCAiIQECQANAIAgtAAAgAUGps4CAAGotAABHDZ4BIAFBBEYNASABQQFqIQEgCEEBaiIIIAJHDQALIAAgJjYCAEGCASEeDIwCCyAAQQA2AgAgHiAia0EFaiEBQRkhHgybAQsCQCABIiIgAkcNAEGDASEeDIsCCyACICJrIAAoAgAiJmohHiAiIQggJiEBAkADQCAILQAAIAFBrrOAgABqLQAARw2dASABQQVGDQEgAUEBaiEBIAhBAWoiCCACRw0ACyAAIB42AgBBgwEhHgyLAgsgAEEANgIAQQYhHiAiICZrQQZqIQEMmgELAkAgASIeIAJHDQBBhAEhHgyKAgsgAiAeayAAKAIAIiJqISYgHiEIICIhAQJAA0AgCC0AACABQbSzgIAAai0AAEcNnAEgAUEBRg0BIAFBAWohASAIQQFqIgggAkcNAAsgACAmNgIAQYQBIR4MigILIABBADYCACAeICJrQQJqIQFBHCEeDJkBCwJAIAEiHiACRw0AQYUBIR4MiQILIAIgHmsgACgCACIiaiEmIB4hCCAiIQECQANAIAgtAAAgAUG2s4CAAGotAABHDZsBIAFBAUYNASABQQFqIQEgCEEBaiIIIAJHDQALIAAgJjYCAEGFASEeDIkCCyAAQQA2AgAgHiAia0ECaiEBQSchHgyYAQsCQCABIgggAkcNAEGGASEeDIgCCwJAAkAgCC0AAEGsf2oOAgABmwELIAhBAWohAUH0ACEeDPgBCyAIQQFqIQFB9QAhHgz3AQsCQCABIh4gAkcNAEGHASEeDIcCCyACIB5rIAAoAgAiImohJiAeIQggIiEBAkADQCAILQAAIAFBuLOAgABqLQAARw2ZASABQQFGDQEgAUEBaiEBIAhBAWoiCCACRw0ACyAAICY2AgBBhwEhHgyHAgsgAEEANgIAIB4gImtBAmohAUEmIR4MlgELAkAgASIeIAJHDQBBiAEhHgyGAgsgAiAeayAAKAIAIiJqISYgHiEIICIhAQJAA0AgCC0AACABQbqzgIAAai0AAEcNmAEgAUEBRg0BIAFBAWohASAIQQFqIgggAkcNAAsgACAmNgIAQYgBIR4MhgILIABBADYCACAeICJrQQJqIQFBAyEeDJUBCwJAIAEiHiACRw0AQYkBIR4MhQILIAIgHmsgACgCACIiaiEmIB4hCCAiIQECQANAIAgtAAAgAUHts4CAAGotAABHDZcBIAFBAkYNASABQQFqIQEgCEEBaiIIIAJHDQALIAAgJjYCAEGJASEeDIUCCyAAQQA2AgAgHiAia0EDaiEBQQwhHgyUAQsCQCABIh4gAkcNAEGKASEeDIQCCyACIB5rIAAoAgAiImohJiAeIQggIiEBAkADQCAILQAAIAFBvLOAgABqLQAARw2WASABQQNGDQEgAUEBaiEBIAhBAWoiCCACRw0ACyAAICY2AgBBigEhHgyEAgsgAEEANgIAIB4gImtBBGohAUENIR4MkwELAkAgASIIIAJHDQBBiwEhHgyDAgsCQAJAIAgtAABBun9qDgsAlgGWAZYBlgGWAZYBlgGWAZYBAZYBCyAIQQFqIQFB+QAhHgzzAQsgCEEBaiEBQfoAIR4M8gELAkAgASIIIAJHDQBBjAEhHgyCAgsgCC0AAEHQAEcNkwEgCEEBaiEBDMQBCwJAIAEiCCACRw0AQY0BIR4MgQILAkACQCAILQAAQbd/ag4HAZQBlAGUAZQBlAEAlAELIAhBAWohAUH8ACEeDPEBCyAIQQFqIQFBIiEeDJABCwJAIAEiHiACRw0AQY4BIR4MgAILIAIgHmsgACgCACIiaiEmIB4hCCAiIQECQANAIAgtAAAgAUHAs4CAAGotAABHDZIBIAFBAUYNASABQQFqIQEgCEEBaiIIIAJHDQALIAAgJjYCAEGOASEeDIACCyAAQQA2AgAgHiAia0ECaiEBQR0hHgyPAQsCQCABIgggAkcNAEGPASEeDP8BCwJAAkAgCC0AAEGuf2oOAwCSAQGSAQsgCEEBaiEBQf4AIR4M7wELIAhBAWohAUEEIR4MjgELAkAgASIIIAJHDQBBkAEhHgz+AQsCQAJAAkACQAJAIAgtAABBv39qDhUAlAGUAZQBlAGUAZQBlAGUAZQBlAEBlAGUAQKUAZQBA5QBlAEElAELIAhBAWohAUH2ACEeDPEBCyAIQQFqIQFB9wAhHgzwAQsgCEEBaiEBQfgAIR4M7wELIAhBAWohAUH9ACEeDO4BCyAIQQFqIQFB/wAhHgztAQsCQCAEIAJHDQBBkQEhHgz9AQsgAiAEayAAKAIAIh5qISIgBCEIIB4hAQJAA0AgCC0AACABQe2zgIAAai0AAEcNjwEgAUECRg0BIAFBAWohASAIQQFqIgggAkcNAAsgACAiNgIAQZEBIR4M/QELIABBADYCACAEIB5rQQNqIQFBESEeDIwBCwJAIAUgAkcNAEGSASEeDPwBCyACIAVrIAAoAgAiHmohIiAFIQggHiEBAkADQCAILQAAIAFBwrOAgABqLQAARw2OASABQQJGDQEgAUEBaiEBIAhBAWoiCCACRw0ACyAAICI2AgBBkgEhHgz8AQsgAEEANgIAIAUgHmtBA2ohAUEsIR4MiwELAkAgBiACRw0AQZMBIR4M+wELIAIgBmsgACgCACIeaiEiIAYhCCAeIQECQANAIAgtAAAgAUHFs4CAAGotAABHDY0BIAFBBEYNASABQQFqIQEgCEEBaiIIIAJHDQALIAAgIjYCAEGTASEeDPsBCyAAQQA2AgAgBiAea0EFaiEBQSshHgyKAQsCQCAHIAJHDQBBlAEhHgz6AQsgAiAHayAAKAIAIh5qISIgByEIIB4hAQJAA0AgCC0AACABQcqzgIAAai0AAEcNjAEgAUECRg0BIAFBAWohASAIQQFqIgggAkcNAAsgACAiNgIAQZQBIR4M+gELIABBADYCACAHIB5rQQNqIQFBFCEeDIkBCwJAIAggAkcNAEGVASEeDPkBCwJAAkACQAJAIAgtAABBvn9qDg8AAQKOAY4BjgGOAY4BjgGOAY4BjgGOAY4BA44BCyAIQQFqIQRBgQEhHgzrAQsgCEEBaiEFQYIBIR4M6gELIAhBAWohBkGDASEeDOkBCyAIQQFqIQdBhAEhHgzoAQsCQCAIIAJHDQBBlgEhHgz4AQsgCC0AAEHFAEcNiQEgCEEBaiEIDLsBCwJAIAkgAkcNAEGXASEeDPcBCyACIAlrIAAoAgAiHmohIiAJIQggHiEBAkADQCAILQAAIAFBzbOAgABqLQAARw2JASABQQJGDQEgAUEBaiEBIAhBAWoiCCACRw0ACyAAICI2AgBBlwEhHgz3AQsgAEEANgIAIAkgHmtBA2ohAUEOIR4MhgELAkAgCCACRw0AQZgBIR4M9gELIAgtAABB0ABHDYcBIAhBAWohAUElIR4MhQELAkAgCiACRw0AQZkBIR4M9QELIAIgCmsgACgCACIeaiEiIAohCCAeIQECQANAIAgtAAAgAUHQs4CAAGotAABHDYcBIAFBCEYNASABQQFqIQEgCEEBaiIIIAJHDQALIAAgIjYCAEGZASEeDPUBCyAAQQA2AgAgCiAea0EJaiEBQSohHgyEAQsCQCAIIAJHDQBBmgEhHgz0AQsCQAJAIAgtAABBq39qDgsAhwGHAYcBhwGHAYcBhwGHAYcBAYcBCyAIQQFqIQhBiAEhHgzkAQsgCEEBaiEKQYkBIR4M4wELAkAgCCACRw0AQZsBIR4M8wELAkACQCAILQAAQb9/ag4UAIYBhgGGAYYBhgGGAYYBhgGGAYYBhgGGAYYBhgGGAYYBhgGGAQGGAQsgCEEBaiEJQYcBIR4M4wELIAhBAWohCEGKASEeDOIBCwJAIAsgAkcNAEGcASEeDPIBCyACIAtrIAAoAgAiHmohIiALIQggHiEBAkADQCAILQAAIAFB2bOAgABqLQAARw2EASABQQNGDQEgAUEBaiEBIAhBAWoiCCACRw0ACyAAICI2AgBBnAEhHgzyAQsgAEEANgIAIAsgHmtBBGohAUEhIR4MgQELAkAgDCACRw0AQZ0BIR4M8QELIAIgDGsgACgCACIeaiEiIAwhCCAeIQECQANAIAgtAAAgAUHds4CAAGotAABHDYMBIAFBBkYNASABQQFqIQEgCEEBaiIIIAJHDQALIAAgIjYCAEGdASEeDPEBCyAAQQA2AgAgDCAea0EHaiEBQRohHgyAAQsCQCAIIAJHDQBBngEhHgzwAQsCQAJAAkAgCC0AAEG7f2oOEQCEAYQBhAGEAYQBhAGEAYQBhAEBhAGEAYQBhAGEAQKEAQsgCEEBaiEIQYsBIR4M4QELIAhBAWohC0GMASEeDOABCyAIQQFqIQxBjQEhHgzfAQsCQCANIAJHDQBBnwEhHgzvAQsgAiANayAAKAIAIh5qISIgDSEIIB4hAQJAA0AgCC0AACABQeSzgIAAai0AAEcNgQEgAUEFRg0BIAFBAWohASAIQQFqIgggAkcNAAsgACAiNgIAQZ8BIR4M7wELIABBADYCACANIB5rQQZqIQFBKCEeDH4LAkAgDiACRw0AQaABIR4M7gELIAIgDmsgACgCACIeaiEiIA4hCCAeIQECQANAIAgtAAAgAUHqs4CAAGotAABHDYABIAFBAkYNASABQQFqIQEgCEEBaiIIIAJHDQALIAAgIjYCAEGgASEeDO4BCyAAQQA2AgAgDiAea0EDaiEBQQchHgx9CwJAIAggAkcNAEGhASEeDO0BCwJAAkAgCC0AAEG7f2oODgCAAYABgAGAAYABgAGAAYABgAGAAYABgAEBgAELIAhBAWohDUGPASEeDN0BCyAIQQFqIQ5BkAEhHgzcAQsCQCAPIAJHDQBBogEhHgzsAQsgAiAPayAAKAIAIh5qISIgDyEIIB4hAQJAA0AgCC0AACABQe2zgIAAai0AAEcNfiABQQJGDQEgAUEBaiEBIAhBAWoiCCACRw0ACyAAICI2AgBBogEhHgzsAQsgAEEANgIAIA8gHmtBA2ohAUESIR4MewsCQCAQIAJHDQBBowEhHgzrAQsgAiAQayAAKAIAIh5qISIgECEIIB4hAQJAA0AgCC0AACABQfCzgIAAai0AAEcNfSABQQFGDQEgAUEBaiEBIAhBAWoiCCACRw0ACyAAICI2AgBBowEhHgzrAQsgAEEANgIAIBAgHmtBAmohAUEgIR4MegsCQCARIAJHDQBBpAEhHgzqAQsgAiARayAAKAIAIh5qISIgESEIIB4hAQJAA0AgCC0AACABQfKzgIAAai0AAEcNfCABQQFGDQEgAUEBaiEBIAhBAWoiCCACRw0ACyAAICI2AgBBpAEhHgzqAQsgAEEANgIAIBEgHmtBAmohAUEPIR4MeQsCQCAIIAJHDQBBpQEhHgzpAQsCQAJAIAgtAABBt39qDgcAfHx8fHwBfAsgCEEBaiEQQZMBIR4M2QELIAhBAWohEUGUASEeDNgBCwJAIBIgAkcNAEGmASEeDOgBCyACIBJrIAAoAgAiHmohIiASIQggHiEBAkADQCAILQAAIAFB9LOAgABqLQAARw16IAFBB0YNASABQQFqIQEgCEEBaiIIIAJHDQALIAAgIjYCAEGmASEeDOgBCyAAQQA2AgAgEiAea0EIaiEBQRshHgx3CwJAIAggAkcNAEGnASEeDOcBCwJAAkACQCAILQAAQb5/ag4SAHt7e3t7e3t7ewF7e3t7e3sCewsgCEEBaiEPQZIBIR4M2AELIAhBAWohCEGVASEeDNcBCyAIQQFqIRJBlgEhHgzWAQsCQCAIIAJHDQBBqAEhHgzmAQsgCC0AAEHOAEcNdyAIQQFqIQgMqgELAkAgCCACRw0AQakBIR4M5QELAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkAgCC0AAEG/f2oOFQABAgOGAQQFBoYBhgGGAQcICQoLhgEMDQ4PhgELIAhBAWohAUHWACEeDOMBCyAIQQFqIQFB1wAhHgziAQsgCEEBaiEBQdwAIR4M4QELIAhBAWohAUHgACEeDOABCyAIQQFqIQFB4QAhHgzfAQsgCEEBaiEBQeQAIR4M3gELIAhBAWohAUHlACEeDN0BCyAIQQFqIQFB6AAhHgzcAQsgCEEBaiEBQfEAIR4M2wELIAhBAWohAUHyACEeDNoBCyAIQQFqIQFB8wAhHgzZAQsgCEEBaiEBQYABIR4M2AELIAhBAWohCEGGASEeDNcBCyAIQQFqIQhBjgEhHgzWAQsgCEEBaiEIQZEBIR4M1QELIAhBAWohCEGYASEeDNQBCwJAIBQgAkcNAEGrASEeDOQBCyAUQQFqIRMMdwsDQAJAIB4tAABBdmoOBHcAAHoACyAeQQFqIh4gAkcNAAtBrAEhHgziAQsCQCAVIAJGDQAgAEGNgICAADYCCCAAIBU2AgQgFSEBQQEhHgzSAQtBrQEhHgzhAQsCQCAVIAJHDQBBrgEhHgzhAQsCQAJAIBUtAABBdmoOBAGrAasBAKsBCyAVQQFqIRQMeAsgFUEBaiETDHQLIAAgEyACEKeAgIAAGiATIQEMRQsCQCAVIAJHDQBBrwEhHgzfAQsCQAJAIBUtAABBdmoOFwF5eQF5eXl5eXl5eXl5eXl5eXl5eXkAeQsgFUEBaiEVC0GcASEeDM4BCwJAIBYgAkcNAEGxASEeDN4BCyAWLQAAQSBHDXcgAEEAOwEyIBZBAWohAUGgASEeDM0BCyABISYCQANAICYiFSACRg0BIBUtAABBUGpB/wFxIh5BCk8NqAECQCAALwEyIiJBmTNLDQAgACAiQQpsIiI7ATIgHkH//wNzICJB/v8DcUkNACAVQQFqISYgACAiIB5qIh47ATIgHkH//wNxQegHSQ0BCwtBACEeIABBADYCHCAAQZ2JgIAANgIQIABBDTYCDCAAIBVBAWo2AhQM3QELQbABIR4M3AELAkAgFyACRw0AQbIBIR4M3AELQQAhHgJAAkACQAJAAkACQAJAAkAgFy0AAEFQag4Kf34AAQIDBAUGB4ABC0ECIR4MfgtBAyEeDH0LQQQhHgx8C0EFIR4MewtBBiEeDHoLQQchHgx5C0EIIR4MeAtBCSEeDHcLAkAgGCACRw0AQbMBIR4M2wELIBgtAABBLkcNeCAYQQFqIRcMpgELAkAgGSACRw0AQbQBIR4M2gELQQAhHgJAAkACQAJAAkACQAJAAkAgGS0AAEFQag4KgQGAAQABAgMEBQYHggELQQIhHgyAAQtBAyEeDH8LQQQhHgx+C0EFIR4MfQtBBiEeDHwLQQchHgx7C0EIIR4MegtBCSEeDHkLAkAgCCACRw0AQbUBIR4M2QELIAIgCGsgACgCACIiaiEmIAghGSAiIR4DQCAZLQAAIB5B/LOAgABqLQAARw17IB5BBEYNtAEgHkEBaiEeIBlBAWoiGSACRw0ACyAAICY2AgBBtQEhHgzYAQsCQCAaIAJHDQBBtgEhHgzYAQsgAiAaayAAKAIAIh5qISIgGiEIIB4hAQNAIAgtAAAgAUGBtICAAGotAABHDXsgAUEBRg22ASABQQFqIQEgCEEBaiIIIAJHDQALIAAgIjYCAEG2ASEeDNcBCwJAIBsgAkcNAEG3ASEeDNcBCyACIBtrIAAoAgAiGWohIiAbIQggGSEeA0AgCC0AACAeQYO0gIAAai0AAEcNeiAeQQJGDXwgHkEBaiEeIAhBAWoiCCACRw0ACyAAICI2AgBBtwEhHgzWAQsCQCAIIAJHDQBBuAEhHgzWAQsCQAJAIAgtAABBu39qDhAAe3t7e3t7e3t7e3t7e3sBewsgCEEBaiEaQaUBIR4MxgELIAhBAWohG0GmASEeDMUBCwJAIAggAkcNAEG5ASEeDNUBCyAILQAAQcgARw14IAhBAWohCAyiAQsCQCAIIAJHDQBBugEhHgzUAQsgCC0AAEHIAEYNogEgAEEBOgAoDJkBCwNAAkAgCC0AAEF2ag4EAHp6AHoLIAhBAWoiCCACRw0AC0G8ASEeDNIBCyAAQQA6AC8gAC0ALUEEcUUNyAELIABBADoALyABIQEMeQsgHkEVRg2pASAAQQA2AhwgACABNgIUIABBq4yAgAA2AhAgAEESNgIMQQAhHgzPAQsCQCAAIB4gAhCtgICAACIBDQAgHiEBDMUBCwJAIAFBFUcNACAAQQM2AhwgACAeNgIUIABB1pKAgAA2AhAgAEEVNgIMQQAhHgzPAQsgAEEANgIcIAAgHjYCFCAAQauMgIAANgIQIABBEjYCDEEAIR4MzgELIB5BFUYNpQEgAEEANgIcIAAgATYCFCAAQYiMgIAANgIQIABBFDYCDEEAIR4MzQELIAAoAgQhJiAAQQA2AgQgHiAfp2oiIyEBIAAgJiAeICMgIhsiHhCugICAACIiRQ16IABBBzYCHCAAIB42AhQgACAiNgIMQQAhHgzMAQsgACAALwEwQYABcjsBMCABIQEMMQsgHkEVRg2hASAAQQA2AhwgACABNgIUIABBxYuAgAA2AhAgAEETNgIMQQAhHgzKAQsgAEEANgIcIAAgATYCFCAAQYuLgIAANgIQIABBAjYCDEEAIR4MyQELIB5BO0cNASABQQFqIQELQQghHgy3AQtBACEeIABBADYCHCAAIAE2AhQgAEGjkICAADYCECAAQQw2AgwMxgELQgEhHwsgHkEBaiEBAkAgACkDICIgQv//////////D1YNACAAICBCBIYgH4Q3AyAgASEBDHcLIABBADYCHCAAIAE2AhQgAEGJiYCAADYCECAAQQw2AgxBACEeDMQBCyAAQQA2AhwgACAeNgIUIABBo5CAgAA2AhAgAEEMNgIMQQAhHgzDAQsgACgCBCEmIABBADYCBCAeIB+naiIjIQEgACAmIB4gIyAiGyIeEK6AgIAAIiJFDW4gAEEFNgIcIAAgHjYCFCAAICI2AgxBACEeDMIBCyAAQQA2AhwgACAeNgIUIABB3ZSAgAA2AhAgAEEPNgIMQQAhHgzBAQsgACAeIAIQrYCAgAAiAQ0BIB4hAQtBDyEeDK8BCwJAIAFBFUcNACAAQQI2AhwgACAeNgIUIABB1pKAgAA2AhAgAEEVNgIMQQAhHgy/AQsgAEEANgIcIAAgHjYCFCAAQauMgIAANgIQIABBEjYCDEEAIR4MvgELIAFBAWohHgJAIAAvATAiAUGAAXFFDQACQCAAIB4gAhCwgICAACIBDQAgHiEBDGsLIAFBFUcNlwEgAEEFNgIcIAAgHjYCFCAAQb6SgIAANgIQIABBFTYCDEEAIR4MvgELAkAgAUGgBHFBoARHDQAgAC0ALUECcQ0AIABBADYCHCAAIB42AhQgAEHsj4CAADYCECAAQQQ2AgxBACEeDL4BCyAAIB4gAhCxgICAABogHiEBAkACQAJAAkACQCAAIB4gAhCsgICAAA4WAgEABAQEBAQEBAQEBAQEBAQEBAQEAwQLIABBAToALgsgACAALwEwQcAAcjsBMCAeIQELQR0hHgyvAQsgAEEVNgIcIAAgHjYCFCAAQeGRgIAANgIQIABBFTYCDEEAIR4MvgELIABBADYCHCAAIB42AhQgAEGxi4CAADYCECAAQRE2AgxBACEeDL0BCyAALQAtQQFxRQ0BQaoBIR4MrAELAkAgHCACRg0AA0ACQCAcLQAAQSBGDQAgHCEBDKgBCyAcQQFqIhwgAkcNAAtBFyEeDLwBC0EXIR4MuwELIAAoAgQhASAAQQA2AgQgACABIBwQqICAgAAiAUUNkAEgAEEYNgIcIAAgATYCDCAAIBxBAWo2AhRBACEeDLoBCyAAQRk2AhwgACABNgIUIAAgHjYCDEEAIR4MuQELIB4hAUEBISICQAJAAkACQAJAAkACQCAALQAsQX5qDgcGBQUDAQIABQsgACAALwEwQQhyOwEwDAMLQQIhIgwBC0EEISILIABBAToALCAAIAAvATAgInI7ATALIB4hAQtBICEeDKkBCyAAQQA2AhwgACAeNgIUIABBgY+AgAA2AhAgAEELNgIMQQAhHgy4AQsgHiEBQQEhIgJAAkACQAJAAkAgAC0ALEF7ag4EAgABAwULQQIhIgwBC0EEISILIABBAToALCAAIAAvATAgInI7ATAMAQsgACAALwEwQQhyOwEwCyAeIQELQasBIR4MpgELIAAgASACEKuAgIAAGgwbCwJAIAEiHiACRg0AIB4hAQJAAkAgHi0AAEF2ag4EAWpqAGoLIB5BAWohAQtBHiEeDKUBC0HDACEeDLQBCyAAQQA2AhwgACABNgIUIABBkZGAgAA2AhAgAEEDNgIMQQAhHgyzAQsCQCABLQAAQQ1HDQAgACgCBCEeIABBADYCBAJAIAAgHiABEKqAgIAAIh4NACABQQFqIQEMaQsgAEEeNgIcIAAgHjYCDCAAIAFBAWo2AhRBACEeDLMBCyABIQEgAC0ALUEBcUUNrgFBrQEhHgyiAQsCQCABIgEgAkcNAEEfIR4MsgELAkACQANAAkAgAS0AAEF2ag4EAgAAAwALIAFBAWoiASACRw0AC0EfIR4MswELIAAoAgQhHiAAQQA2AgQCQCAAIB4gARCqgICAACIeDQAgASEBDGgLIABBHjYCHCAAIAE2AhQgACAeNgIMQQAhHgyyAQsgACgCBCEeIABBADYCBAJAIAAgHiABEKqAgIAAIh4NACABQQFqIQEMZwsgAEEeNgIcIAAgHjYCDCAAIAFBAWo2AhRBACEeDLEBCyAeQSxHDQEgAUEBaiEeQQEhAQJAAkACQAJAAkAgAC0ALEF7ag4EAwECBAALIB4hAQwEC0ECIQEMAQtBBCEBCyAAQQE6ACwgACAALwEwIAFyOwEwIB4hAQwBCyAAIAAvATBBCHI7ATAgHiEBC0EuIR4MnwELIABBADoALCABIQELQSkhHgydAQsgAEEANgIAICMgJGtBCWohAUEFIR4MmAELIABBADYCACAjICRrQQZqIQFBByEeDJcBCyAAIAAvATBBIHI7ATAgASEBDAILIAAoAgQhCCAAQQA2AgQCQCAAIAggARCqgICAACIIDQAgASEBDJ0BCyAAQSo2AhwgACABNgIUIAAgCDYCDEEAIR4MqQELIABBCDoALCABIQELQSUhHgyXAQsCQCAALQAoQQFGDQAgASEBDAQLIAAtAC1BCHFFDXggASEBDAMLIAAtADBBIHENeUGuASEeDJUBCwJAIB0gAkYNAAJAA0ACQCAdLQAAQVBqIgFB/wFxQQpJDQAgHSEBQSohHgyYAQsgACkDICIfQpmz5syZs+bMGVYNASAAIB9CCn4iHzcDICAfIAGtIiBCf4VCgH6EVg0BIAAgHyAgQv8Bg3w3AyAgHUEBaiIdIAJHDQALQSwhHgymAQsgACgCBCEIIABBADYCBCAAIAggHUEBaiIBEKqAgIAAIggNeiABIQEMmQELQSwhHgykAQsCQCAALwEwIgFBCHFFDQAgAC0AKEEBRw0AIAAtAC1BCHFFDXULIAAgAUH3+wNxQYAEcjsBMCAdIQELQSwhHgySAQsgACAALwEwQRByOwEwDIcBCyAAQTY2AhwgACABNgIMIAAgHEEBajYCFEEAIR4MoAELIAEtAABBOkcNAiAAKAIEIR4gAEEANgIEIAAgHiABEKiAgIAAIh4NASABQQFqIQELQTEhHgyOAQsgAEE2NgIcIAAgHjYCDCAAIAFBAWo2AhRBACEeDJ0BCyAAQQA2AhwgACABNgIUIABBh46AgAA2AhAgAEEKNgIMQQAhHgycAQsgAUEBaiEBCyAAQYASOwEqIAAgASACEKWAgIAAGiABIQELQawBIR4MiQELIAAoAgQhHiAAQQA2AgQCQCAAIB4gARCkgICAACIeDQAgASEBDFALIABBxAA2AhwgACABNgIUIAAgHjYCDEEAIR4MmAELIABBADYCHCAAICI2AhQgAEHlmICAADYCECAAQQc2AgwgAEEANgIAQQAhHgyXAQsgACgCBCEeIABBADYCBAJAIAAgHiABEKSAgIAAIh4NACABIQEMTwsgAEHFADYCHCAAIAE2AhQgACAeNgIMQQAhHgyWAQtBACEeIABBADYCHCAAIAE2AhQgAEHrjYCAADYCECAAQQk2AgwMlQELQQEhHgsgACAeOgArIAFBAWohASAALQApQSJGDYsBDEwLIABBADYCHCAAIAE2AhQgAEGijYCAADYCECAAQQk2AgxBACEeDJIBCyAAQQA2AhwgACABNgIUIABBxYqAgAA2AhAgAEEJNgIMQQAhHgyRAQtBASEeCyAAIB46ACogAUEBaiEBDEoLIABBADYCHCAAIAE2AhQgAEG4jYCAADYCECAAQQk2AgxBACEeDI4BCyAAQQA2AgAgJiAja0EEaiEBAkAgAC0AKUEjTw0AIAEhAQxKCyAAQQA2AhwgACABNgIUIABBr4mAgAA2AhAgAEEINgIMQQAhHgyNAQsgAEEANgIAC0EAIR4gAEEANgIcIAAgATYCFCAAQbmbgIAANgIQIABBCDYCDAyLAQsgAEEANgIAICYgI2tBA2ohAQJAIAAtAClBIUcNACABIQEMRwsgAEEANgIcIAAgATYCFCAAQfeJgIAANgIQIABBCDYCDEEAIR4MigELIABBADYCACAmICNrQQRqIQECQCAALQApIh5BXWpBC08NACABIQEMRgsCQCAeQQZLDQBBASAedEHKAHFFDQAgASEBDEYLQQAhHiAAQQA2AhwgACABNgIUIABB04mAgAA2AhAgAEEINgIMDIkBCyAAKAIEIR4gAEEANgIEAkAgACAeIAEQpICAgAAiHg0AIAEhAQxGCyAAQdAANgIcIAAgATYCFCAAIB42AgxBACEeDIgBCyAAKAIEIR4gAEEANgIEAkAgACAeIAEQpICAgAAiHg0AIAEhAQw/CyAAQcQANgIcIAAgATYCFCAAIB42AgxBACEeDIcBCyAAKAIEIR4gAEEANgIEAkAgACAeIAEQpICAgAAiHg0AIAEhAQw/CyAAQcUANgIcIAAgATYCFCAAIB42AgxBACEeDIYBCyAAKAIEIR4gAEEANgIEAkAgACAeIAEQpICAgAAiHg0AIAEhAQxDCyAAQdAANgIcIAAgATYCFCAAIB42AgxBACEeDIUBCyAAQQA2AhwgACABNgIUIABBooqAgAA2AhAgAEEHNgIMQQAhHgyEAQsgACgCBCEeIABBADYCBAJAIAAgHiABEKSAgIAAIh4NACABIQEMOwsgAEHEADYCHCAAIAE2AhQgACAeNgIMQQAhHgyDAQsgACgCBCEeIABBADYCBAJAIAAgHiABEKSAgIAAIh4NACABIQEMOwsgAEHFADYCHCAAIAE2AhQgACAeNgIMQQAhHgyCAQsgACgCBCEeIABBADYCBAJAIAAgHiABEKSAgIAAIh4NACABIQEMPwsgAEHQADYCHCAAIAE2AhQgACAeNgIMQQAhHgyBAQsgAEEANgIcIAAgATYCFCAAQbiIgIAANgIQIABBBzYCDEEAIR4MgAELIB5BP0cNASABQQFqIQELQQUhHgxuC0EAIR4gAEEANgIcIAAgATYCFCAAQdOPgIAANgIQIABBBzYCDAx9CyAAKAIEIR4gAEEANgIEAkAgACAeIAEQpICAgAAiHg0AIAEhAQw0CyAAQcQANgIcIAAgATYCFCAAIB42AgxBACEeDHwLIAAoAgQhHiAAQQA2AgQCQCAAIB4gARCkgICAACIeDQAgASEBDDQLIABBxQA2AhwgACABNgIUIAAgHjYCDEEAIR4MewsgACgCBCEeIABBADYCBAJAIAAgHiABEKSAgIAAIh4NACABIQEMOAsgAEHQADYCHCAAIAE2AhQgACAeNgIMQQAhHgx6CyAAKAIEIQEgAEEANgIEAkAgACABICIQpICAgAAiAQ0AICIhAQwxCyAAQcQANgIcIAAgIjYCFCAAIAE2AgxBACEeDHkLIAAoAgQhASAAQQA2AgQCQCAAIAEgIhCkgICAACIBDQAgIiEBDDELIABBxQA2AhwgACAiNgIUIAAgATYCDEEAIR4MeAsgACgCBCEBIABBADYCBAJAIAAgASAiEKSAgIAAIgENACAiIQEMNQsgAEHQADYCHCAAICI2AhQgACABNgIMQQAhHgx3CyAAQQA2AhwgACAiNgIUIABB0IyAgAA2AhAgAEEHNgIMQQAhHgx2CyAAQQA2AhwgACABNgIUIABB0IyAgAA2AhAgAEEHNgIMQQAhHgx1C0EAIR4gAEEANgIcIAAgIjYCFCAAQb+UgIAANgIQIABBBzYCDAx0CyAAQQA2AhwgACAiNgIUIABBv5SAgAA2AhAgAEEHNgIMQQAhHgxzCyAAQQA2AhwgACAiNgIUIABB1I6AgAA2AhAgAEEHNgIMQQAhHgxyCyAAQQA2AhwgACABNgIUIABBwZOAgAA2AhAgAEEGNgIMQQAhHgxxCyAAQQA2AgAgIiAma0EGaiEBQSQhHgsgACAeOgApIAEhAQxOCyAAQQA2AgALQQAhHiAAQQA2AhwgACAINgIUIABBpJSAgAA2AhAgAEEGNgIMDG0LIAAoAgQhEyAAQQA2AgQgACATIB4QpoCAgAAiEw0BIB5BAWohEwtBnQEhHgxbCyAAQaoBNgIcIAAgEzYCDCAAIB5BAWo2AhRBACEeDGoLIAAoAgQhFCAAQQA2AgQgACAUIB4QpoCAgAAiFA0BIB5BAWohFAtBmgEhHgxYCyAAQasBNgIcIAAgFDYCDCAAIB5BAWo2AhRBACEeDGcLIABBADYCHCAAIBU2AhQgAEHzioCAADYCECAAQQ02AgxBACEeDGYLIABBADYCHCAAIBY2AhQgAEHOjYCAADYCECAAQQk2AgxBACEeDGULQQEhHgsgACAeOgArIBdBAWohFgwuCyAAQQA2AhwgACAXNgIUIABBoo2AgAA2AhAgAEEJNgIMQQAhHgxiCyAAQQA2AhwgACAYNgIUIABBxYqAgAA2AhAgAEEJNgIMQQAhHgxhC0EBIR4LIAAgHjoAKiAZQQFqIRgMLAsgAEEANgIcIAAgGTYCFCAAQbiNgIAANgIQIABBCTYCDEEAIR4MXgsgAEEANgIcIAAgGTYCFCAAQbmbgIAANgIQIABBCDYCDCAAQQA2AgBBACEeDF0LIABBADYCAAtBACEeIABBADYCHCAAIAg2AhQgAEGLlICAADYCECAAQQg2AgwMWwsgAEECOgAoIABBADYCACAbIBlrQQNqIRkMNgsgAEECOgAvIAAgCCACEKOAgIAAIh4NAUGvASEeDEkLIAAtAChBf2oOAh4gHwsgHkEVRw0nIABBuwE2AhwgACAINgIUIABBp5KAgAA2AhAgAEEVNgIMQQAhHgxXC0EAIR4MRgtBAiEeDEULQQ4hHgxEC0EQIR4MQwtBHCEeDEILQRQhHgxBC0EWIR4MQAtBFyEeDD8LQRkhHgw+C0EaIR4MPQtBOiEeDDwLQSMhHgw7C0EkIR4MOgtBMCEeDDkLQTshHgw4C0E8IR4MNwtBPiEeDDYLQT8hHgw1C0HAACEeDDQLQcEAIR4MMwtBxQAhHgwyC0HHACEeDDELQcgAIR4MMAtBygAhHgwvC0HfACEeDC4LQeIAIR4MLQtB+wAhHgwsC0GFASEeDCsLQZcBIR4MKgtBmQEhHgwpC0GpASEeDCgLQaQBIR4MJwtBmwEhHgwmC0GeASEeDCULQZ8BIR4MJAtBoQEhHgwjC0GiASEeDCILQacBIR4MIQtBqAEhHgwgCyAAQQA2AhwgACAINgIUIABB5ouAgAA2AhAgAEEQNgIMQQAhHgwvCyAAQQA2AgQgACAdIB0QqoCAgAAiAUUNASAAQS02AhwgACABNgIMIAAgHUEBajYCFEEAIR4MLgsgACgCBCEIIABBADYCBAJAIAAgCCABEKqAgIAAIghFDQAgAEEuNgIcIAAgCDYCDCAAIAFBAWo2AhRBACEeDC4LIAFBAWohAQweCyAdQQFqIQEMHgsgAEEANgIcIAAgHTYCFCAAQbqPgIAANgIQIABBBDYCDEEAIR4MKwsgAEEpNgIcIAAgATYCFCAAIAg2AgxBACEeDCoLIBxBAWohAQweCyAAQQo2AhwgACABNgIUIABBkZKAgAA2AhAgAEEVNgIMQQAhHgwoCyAAQRA2AhwgACABNgIUIABBvpKAgAA2AhAgAEEVNgIMQQAhHgwnCyAAQQA2AhwgACAeNgIUIABBiIyAgAA2AhAgAEEUNgIMQQAhHgwmCyAAQQQ2AhwgACABNgIUIABB1pKAgAA2AhAgAEEVNgIMQQAhHgwlCyAAQQA2AgAgCCAia0EFaiEZC0GjASEeDBMLIABBADYCACAiICZrQQJqIQFB4wAhHgwSCyAAQQA2AgAgAEGBBDsBKCAaIB5rQQJqIQELQdMAIR4MEAsgASEBAkAgAC0AKUEFRw0AQdIAIR4MEAtB0QAhHgwPC0EAIR4gAEEANgIcIABBuo6AgAA2AhAgAEEHNgIMIAAgIkEBajYCFAweCyAAQQA2AgAgJiAja0ECaiEBQTQhHgwNCyABIQELQS0hHgwLCwJAIAEiHSACRg0AA0ACQCAdLQAAQYCigIAAai0AACIBQQFGDQAgAUECRw0DIB1BAWohAQwECyAdQQFqIh0gAkcNAAtBMSEeDBsLQTEhHgwaCyAAQQA6ACwgHSEBDAELQQwhHgwIC0EvIR4MBwsgAUEBaiEBQSIhHgwGC0EfIR4MBQsgAEEANgIAICMgJGtBBGohAUEGIR4LIAAgHjoALCABIQFBDSEeDAMLIABBADYCACAmICNrQQdqIQFBCyEeDAILIABBADYCAAsgAEEAOgAsIBwhAUEJIR4MAAsLQQAhHiAAQQA2AhwgACABNgIUIABBuJGAgAA2AhAgAEEPNgIMDA4LQQAhHiAAQQA2AhwgACABNgIUIABBuJGAgAA2AhAgAEEPNgIMDA0LQQAhHiAAQQA2AhwgACABNgIUIABBlo+AgAA2AhAgAEELNgIMDAwLQQAhHiAAQQA2AhwgACABNgIUIABB8YiAgAA2AhAgAEELNgIMDAsLQQAhHiAAQQA2AhwgACABNgIUIABBiI2AgAA2AhAgAEEKNgIMDAoLIABBAjYCHCAAIAE2AhQgAEHwkoCAADYCECAAQRY2AgxBACEeDAkLQQEhHgwIC0HGACEeIAEiASACRg0HIANBCGogACABIAJB2KaAgABBChC5gICAACADKAIMIQEgAygCCA4DAQcCAAsQv4CAgAAACyAAQQA2AhwgAEGJk4CAADYCECAAQRc2AgwgACABQQFqNgIUQQAhHgwFCyAAQQA2AhwgACABNgIUIABBnpOAgAA2AhAgAEEJNgIMQQAhHgwECwJAIAEiASACRw0AQSEhHgwECwJAIAEtAABBCkYNACAAQQA2AhwgACABNgIUIABB7oyAgAA2AhAgAEEKNgIMQQAhHgwECyAAKAIEIQggAEEANgIEIAAgCCABEKqAgIAAIggNASABQQFqIQELQQAhHiAAQQA2AhwgACABNgIUIABB6pCAgAA2AhAgAEEZNgIMDAILIABBIDYCHCAAIAg2AgwgACABQQFqNgIUQQAhHgwBCwJAIAEiASACRw0AQRQhHgwBCyAAQYmAgIAANgIIIAAgATYCBEETIR4LIANBEGokgICAgAAgHguvAQECfyABKAIAIQYCQAJAIAIgA0YNACAEIAZqIQQgBiADaiACayEHIAIgBkF/cyAFaiIGaiEFA0ACQCACLQAAIAQtAABGDQBBAiEEDAMLAkAgBg0AQQAhBCAFIQIMAwsgBkF/aiEGIARBAWohBCACQQFqIgIgA0cNAAsgByEGIAMhAgsgAEEBNgIAIAEgBjYCACAAIAI2AgQPCyABQQA2AgAgACAENgIAIAAgAjYCBAsKACAAELuAgIAAC5U3AQt/I4CAgIAAQRBrIgEkgICAgAACQEEAKAKgtICAAA0AQQAQvoCAgABBgLiEgABrIgJB2QBJDQBBACEDAkBBACgC4LeAgAAiBA0AQQBCfzcC7LeAgABBAEKAgISAgIDAADcC5LeAgABBACABQQhqQXBxQdiq1aoFcyIENgLgt4CAAEEAQQA2AvS3gIAAQQBBADYCxLeAgAALQQAgAjYCzLeAgABBAEGAuISAADYCyLeAgABBAEGAuISAADYCmLSAgABBACAENgKstICAAEEAQX82Aqi0gIAAA0AgA0HEtICAAGogA0G4tICAAGoiBDYCACAEIANBsLSAgABqIgU2AgAgA0G8tICAAGogBTYCACADQcy0gIAAaiADQcC0gIAAaiIFNgIAIAUgBDYCACADQdS0gIAAaiADQci0gIAAaiIENgIAIAQgBTYCACADQdC0gIAAaiAENgIAIANBIGoiA0GAAkcNAAtBgLiEgABBeEGAuISAAGtBD3FBAEGAuISAAEEIakEPcRsiA2oiBEEEaiACIANrQUhqIgNBAXI2AgBBAEEAKALwt4CAADYCpLSAgABBACAENgKgtICAAEEAIAM2ApS0gIAAIAJBgLiEgABqQUxqQTg2AgALAkACQAJAAkACQAJAAkACQAJAAkACQAJAIABB7AFLDQACQEEAKAKItICAACIGQRAgAEETakFwcSAAQQtJGyICQQN2IgR2IgNBA3FFDQAgA0EBcSAEckEBcyIFQQN0IgBBuLSAgABqKAIAIgRBCGohAwJAAkAgBCgCCCICIABBsLSAgABqIgBHDQBBACAGQX4gBXdxNgKItICAAAwBCyAAIAI2AgggAiAANgIMCyAEIAVBA3QiBUEDcjYCBCAEIAVqQQRqIgQgBCgCAEEBcjYCAAwMCyACQQAoApC0gIAAIgdNDQECQCADRQ0AAkACQCADIAR0QQIgBHQiA0EAIANrcnEiA0EAIANrcUF/aiIDIANBDHZBEHEiA3YiBEEFdkEIcSIFIANyIAQgBXYiA0ECdkEEcSIEciADIAR2IgNBAXZBAnEiBHIgAyAEdiIDQQF2QQFxIgRyIAMgBHZqIgVBA3QiAEG4tICAAGooAgAiBCgCCCIDIABBsLSAgABqIgBHDQBBACAGQX4gBXdxIgY2Aoi0gIAADAELIAAgAzYCCCADIAA2AgwLIARBCGohAyAEIAJBA3I2AgQgBCAFQQN0IgVqIAUgAmsiBTYCACAEIAJqIgAgBUEBcjYCBAJAIAdFDQAgB0EDdiIIQQN0QbC0gIAAaiECQQAoApy0gIAAIQQCQAJAIAZBASAIdCIIcQ0AQQAgBiAIcjYCiLSAgAAgAiEIDAELIAIoAgghCAsgCCAENgIMIAIgBDYCCCAEIAI2AgwgBCAINgIIC0EAIAA2Apy0gIAAQQAgBTYCkLSAgAAMDAtBACgCjLSAgAAiCUUNASAJQQAgCWtxQX9qIgMgA0EMdkEQcSIDdiIEQQV2QQhxIgUgA3IgBCAFdiIDQQJ2QQRxIgRyIAMgBHYiA0EBdkECcSIEciADIAR2IgNBAXZBAXEiBHIgAyAEdmpBAnRBuLaAgABqKAIAIgAoAgRBeHEgAmshBCAAIQUCQANAAkAgBSgCECIDDQAgBUEUaigCACIDRQ0CCyADKAIEQXhxIAJrIgUgBCAFIARJIgUbIQQgAyAAIAUbIQAgAyEFDAALCyAAKAIYIQoCQCAAKAIMIgggAEYNAEEAKAKYtICAACAAKAIIIgNLGiAIIAM2AgggAyAINgIMDAsLAkAgAEEUaiIFKAIAIgMNACAAKAIQIgNFDQMgAEEQaiEFCwNAIAUhCyADIghBFGoiBSgCACIDDQAgCEEQaiEFIAgoAhAiAw0ACyALQQA2AgAMCgtBfyECIABBv39LDQAgAEETaiIDQXBxIQJBACgCjLSAgAAiB0UNAEEAIQsCQCACQYACSQ0AQR8hCyACQf///wdLDQAgA0EIdiIDIANBgP4/akEQdkEIcSIDdCIEIARBgOAfakEQdkEEcSIEdCIFIAVBgIAPakEQdkECcSIFdEEPdiADIARyIAVyayIDQQF0IAIgA0EVanZBAXFyQRxqIQsLQQAgAmshBAJAAkACQAJAIAtBAnRBuLaAgABqKAIAIgUNAEEAIQNBACEIDAELQQAhAyACQQBBGSALQQF2ayALQR9GG3QhAEEAIQgDQAJAIAUoAgRBeHEgAmsiBiAETw0AIAYhBCAFIQggBg0AQQAhBCAFIQggBSEDDAMLIAMgBUEUaigCACIGIAYgBSAAQR12QQRxakEQaigCACIFRhsgAyAGGyEDIABBAXQhACAFDQALCwJAIAMgCHINAEEAIQhBAiALdCIDQQAgA2tyIAdxIgNFDQMgA0EAIANrcUF/aiIDIANBDHZBEHEiA3YiBUEFdkEIcSIAIANyIAUgAHYiA0ECdkEEcSIFciADIAV2IgNBAXZBAnEiBXIgAyAFdiIDQQF2QQFxIgVyIAMgBXZqQQJ0Qbi2gIAAaigCACEDCyADRQ0BCwNAIAMoAgRBeHEgAmsiBiAESSEAAkAgAygCECIFDQAgA0EUaigCACEFCyAGIAQgABshBCADIAggABshCCAFIQMgBQ0ACwsgCEUNACAEQQAoApC0gIAAIAJrTw0AIAgoAhghCwJAIAgoAgwiACAIRg0AQQAoApi0gIAAIAgoAggiA0saIAAgAzYCCCADIAA2AgwMCQsCQCAIQRRqIgUoAgAiAw0AIAgoAhAiA0UNAyAIQRBqIQULA0AgBSEGIAMiAEEUaiIFKAIAIgMNACAAQRBqIQUgACgCECIDDQALIAZBADYCAAwICwJAQQAoApC0gIAAIgMgAkkNAEEAKAKctICAACEEAkACQCADIAJrIgVBEEkNACAEIAJqIgAgBUEBcjYCBEEAIAU2ApC0gIAAQQAgADYCnLSAgAAgBCADaiAFNgIAIAQgAkEDcjYCBAwBCyAEIANBA3I2AgQgAyAEakEEaiIDIAMoAgBBAXI2AgBBAEEANgKctICAAEEAQQA2ApC0gIAACyAEQQhqIQMMCgsCQEEAKAKUtICAACIAIAJNDQBBACgCoLSAgAAiAyACaiIEIAAgAmsiBUEBcjYCBEEAIAU2ApS0gIAAQQAgBDYCoLSAgAAgAyACQQNyNgIEIANBCGohAwwKCwJAAkBBACgC4LeAgABFDQBBACgC6LeAgAAhBAwBC0EAQn83Auy3gIAAQQBCgICEgICAwAA3AuS3gIAAQQAgAUEMakFwcUHYqtWqBXM2AuC3gIAAQQBBADYC9LeAgABBAEEANgLEt4CAAEGAgAQhBAtBACEDAkAgBCACQccAaiIHaiIGQQAgBGsiC3EiCCACSw0AQQBBMDYC+LeAgAAMCgsCQEEAKALAt4CAACIDRQ0AAkBBACgCuLeAgAAiBCAIaiIFIARNDQAgBSADTQ0BC0EAIQNBAEEwNgL4t4CAAAwKC0EALQDEt4CAAEEEcQ0EAkACQAJAQQAoAqC0gIAAIgRFDQBByLeAgAAhAwNAAkAgAygCACIFIARLDQAgBSADKAIEaiAESw0DCyADKAIIIgMNAAsLQQAQvoCAgAAiAEF/Rg0FIAghBgJAQQAoAuS3gIAAIgNBf2oiBCAAcUUNACAIIABrIAQgAGpBACADa3FqIQYLIAYgAk0NBSAGQf7///8HSw0FAkBBACgCwLeAgAAiA0UNAEEAKAK4t4CAACIEIAZqIgUgBE0NBiAFIANLDQYLIAYQvoCAgAAiAyAARw0BDAcLIAYgAGsgC3EiBkH+////B0sNBCAGEL6AgIAAIgAgAygCACADKAIEakYNAyAAIQMLAkAgA0F/Rg0AIAJByABqIAZNDQACQCAHIAZrQQAoAui3gIAAIgRqQQAgBGtxIgRB/v///wdNDQAgAyEADAcLAkAgBBC+gICAAEF/Rg0AIAQgBmohBiADIQAMBwtBACAGaxC+gICAABoMBAsgAyEAIANBf0cNBQwDC0EAIQgMBwtBACEADAULIABBf0cNAgtBAEEAKALEt4CAAEEEcjYCxLeAgAALIAhB/v///wdLDQEgCBC+gICAACEAQQAQvoCAgAAhAyAAQX9GDQEgA0F/Rg0BIAAgA08NASADIABrIgYgAkE4ak0NAQtBAEEAKAK4t4CAACAGaiIDNgK4t4CAAAJAIANBACgCvLeAgABNDQBBACADNgK8t4CAAAsCQAJAAkACQEEAKAKgtICAACIERQ0AQci3gIAAIQMDQCAAIAMoAgAiBSADKAIEIghqRg0CIAMoAggiAw0ADAMLCwJAAkBBACgCmLSAgAAiA0UNACAAIANPDQELQQAgADYCmLSAgAALQQAhA0EAIAY2Asy3gIAAQQAgADYCyLeAgABBAEF/NgKotICAAEEAQQAoAuC3gIAANgKstICAAEEAQQA2AtS3gIAAA0AgA0HEtICAAGogA0G4tICAAGoiBDYCACAEIANBsLSAgABqIgU2AgAgA0G8tICAAGogBTYCACADQcy0gIAAaiADQcC0gIAAaiIFNgIAIAUgBDYCACADQdS0gIAAaiADQci0gIAAaiIENgIAIAQgBTYCACADQdC0gIAAaiAENgIAIANBIGoiA0GAAkcNAAsgAEF4IABrQQ9xQQAgAEEIakEPcRsiA2oiBCAGIANrQUhqIgNBAXI2AgRBAEEAKALwt4CAADYCpLSAgABBACAENgKgtICAAEEAIAM2ApS0gIAAIAYgAGpBTGpBODYCAAwCCyADLQAMQQhxDQAgBSAESw0AIAAgBE0NACAEQXggBGtBD3FBACAEQQhqQQ9xGyIFaiIAQQAoApS0gIAAIAZqIgsgBWsiBUEBcjYCBCADIAggBmo2AgRBAEEAKALwt4CAADYCpLSAgABBACAFNgKUtICAAEEAIAA2AqC0gIAAIAsgBGpBBGpBODYCAAwBCwJAIABBACgCmLSAgAAiC08NAEEAIAA2Api0gIAAIAAhCwsgACAGaiEIQci3gIAAIQMCQAJAAkACQAJAAkACQANAIAMoAgAgCEYNASADKAIIIgMNAAwCCwsgAy0ADEEIcUUNAQtByLeAgAAhAwNAAkAgAygCACIFIARLDQAgBSADKAIEaiIFIARLDQMLIAMoAgghAwwACwsgAyAANgIAIAMgAygCBCAGajYCBCAAQXggAGtBD3FBACAAQQhqQQ9xG2oiBiACQQNyNgIEIAhBeCAIa0EPcUEAIAhBCGpBD3EbaiIIIAYgAmoiAmshBQJAIAQgCEcNAEEAIAI2AqC0gIAAQQBBACgClLSAgAAgBWoiAzYClLSAgAAgAiADQQFyNgIEDAMLAkBBACgCnLSAgAAgCEcNAEEAIAI2Apy0gIAAQQBBACgCkLSAgAAgBWoiAzYCkLSAgAAgAiADQQFyNgIEIAIgA2ogAzYCAAwDCwJAIAgoAgQiA0EDcUEBRw0AIANBeHEhBwJAAkAgA0H/AUsNACAIKAIIIgQgA0EDdiILQQN0QbC0gIAAaiIARhoCQCAIKAIMIgMgBEcNAEEAQQAoAoi0gIAAQX4gC3dxNgKItICAAAwCCyADIABGGiADIAQ2AgggBCADNgIMDAELIAgoAhghCQJAAkAgCCgCDCIAIAhGDQAgCyAIKAIIIgNLGiAAIAM2AgggAyAANgIMDAELAkAgCEEUaiIDKAIAIgQNACAIQRBqIgMoAgAiBA0AQQAhAAwBCwNAIAMhCyAEIgBBFGoiAygCACIEDQAgAEEQaiEDIAAoAhAiBA0ACyALQQA2AgALIAlFDQACQAJAIAgoAhwiBEECdEG4toCAAGoiAygCACAIRw0AIAMgADYCACAADQFBAEEAKAKMtICAAEF+IAR3cTYCjLSAgAAMAgsgCUEQQRQgCSgCECAIRhtqIAA2AgAgAEUNAQsgACAJNgIYAkAgCCgCECIDRQ0AIAAgAzYCECADIAA2AhgLIAgoAhQiA0UNACAAQRRqIAM2AgAgAyAANgIYCyAHIAVqIQUgCCAHaiEICyAIIAgoAgRBfnE2AgQgAiAFaiAFNgIAIAIgBUEBcjYCBAJAIAVB/wFLDQAgBUEDdiIEQQN0QbC0gIAAaiEDAkACQEEAKAKItICAACIFQQEgBHQiBHENAEEAIAUgBHI2Aoi0gIAAIAMhBAwBCyADKAIIIQQLIAQgAjYCDCADIAI2AgggAiADNgIMIAIgBDYCCAwDC0EfIQMCQCAFQf///wdLDQAgBUEIdiIDIANBgP4/akEQdkEIcSIDdCIEIARBgOAfakEQdkEEcSIEdCIAIABBgIAPakEQdkECcSIAdEEPdiADIARyIAByayIDQQF0IAUgA0EVanZBAXFyQRxqIQMLIAIgAzYCHCACQgA3AhAgA0ECdEG4toCAAGohBAJAQQAoAoy0gIAAIgBBASADdCIIcQ0AIAQgAjYCAEEAIAAgCHI2Aoy0gIAAIAIgBDYCGCACIAI2AgggAiACNgIMDAMLIAVBAEEZIANBAXZrIANBH0YbdCEDIAQoAgAhAANAIAAiBCgCBEF4cSAFRg0CIANBHXYhACADQQF0IQMgBCAAQQRxakEQaiIIKAIAIgANAAsgCCACNgIAIAIgBDYCGCACIAI2AgwgAiACNgIIDAILIABBeCAAa0EPcUEAIABBCGpBD3EbIgNqIgsgBiADa0FIaiIDQQFyNgIEIAhBTGpBODYCACAEIAVBNyAFa0EPcUEAIAVBSWpBD3EbakFBaiIIIAggBEEQakkbIghBIzYCBEEAQQAoAvC3gIAANgKktICAAEEAIAs2AqC0gIAAQQAgAzYClLSAgAAgCEEQakEAKQLQt4CAADcCACAIQQApAsi3gIAANwIIQQAgCEEIajYC0LeAgABBACAGNgLMt4CAAEEAIAA2Asi3gIAAQQBBADYC1LeAgAAgCEEkaiEDA0AgA0EHNgIAIAUgA0EEaiIDSw0ACyAIIARGDQMgCCAIKAIEQX5xNgIEIAggCCAEayIGNgIAIAQgBkEBcjYCBAJAIAZB/wFLDQAgBkEDdiIFQQN0QbC0gIAAaiEDAkACQEEAKAKItICAACIAQQEgBXQiBXENAEEAIAAgBXI2Aoi0gIAAIAMhBQwBCyADKAIIIQULIAUgBDYCDCADIAQ2AgggBCADNgIMIAQgBTYCCAwEC0EfIQMCQCAGQf///wdLDQAgBkEIdiIDIANBgP4/akEQdkEIcSIDdCIFIAVBgOAfakEQdkEEcSIFdCIAIABBgIAPakEQdkECcSIAdEEPdiADIAVyIAByayIDQQF0IAYgA0EVanZBAXFyQRxqIQMLIARCADcCECAEQRxqIAM2AgAgA0ECdEG4toCAAGohBQJAQQAoAoy0gIAAIgBBASADdCIIcQ0AIAUgBDYCAEEAIAAgCHI2Aoy0gIAAIARBGGogBTYCACAEIAQ2AgggBCAENgIMDAQLIAZBAEEZIANBAXZrIANBH0YbdCEDIAUoAgAhAANAIAAiBSgCBEF4cSAGRg0DIANBHXYhACADQQF0IQMgBSAAQQRxakEQaiIIKAIAIgANAAsgCCAENgIAIARBGGogBTYCACAEIAQ2AgwgBCAENgIIDAMLIAQoAggiAyACNgIMIAQgAjYCCCACQQA2AhggAiAENgIMIAIgAzYCCAsgBkEIaiEDDAULIAUoAggiAyAENgIMIAUgBDYCCCAEQRhqQQA2AgAgBCAFNgIMIAQgAzYCCAtBACgClLSAgAAiAyACTQ0AQQAoAqC0gIAAIgQgAmoiBSADIAJrIgNBAXI2AgRBACADNgKUtICAAEEAIAU2AqC0gIAAIAQgAkEDcjYCBCAEQQhqIQMMAwtBACEDQQBBMDYC+LeAgAAMAgsCQCALRQ0AAkACQCAIIAgoAhwiBUECdEG4toCAAGoiAygCAEcNACADIAA2AgAgAA0BQQAgB0F+IAV3cSIHNgKMtICAAAwCCyALQRBBFCALKAIQIAhGG2ogADYCACAARQ0BCyAAIAs2AhgCQCAIKAIQIgNFDQAgACADNgIQIAMgADYCGAsgCEEUaigCACIDRQ0AIABBFGogAzYCACADIAA2AhgLAkACQCAEQQ9LDQAgCCAEIAJqIgNBA3I2AgQgAyAIakEEaiIDIAMoAgBBAXI2AgAMAQsgCCACaiIAIARBAXI2AgQgCCACQQNyNgIEIAAgBGogBDYCAAJAIARB/wFLDQAgBEEDdiIEQQN0QbC0gIAAaiEDAkACQEEAKAKItICAACIFQQEgBHQiBHENAEEAIAUgBHI2Aoi0gIAAIAMhBAwBCyADKAIIIQQLIAQgADYCDCADIAA2AgggACADNgIMIAAgBDYCCAwBC0EfIQMCQCAEQf///wdLDQAgBEEIdiIDIANBgP4/akEQdkEIcSIDdCIFIAVBgOAfakEQdkEEcSIFdCICIAJBgIAPakEQdkECcSICdEEPdiADIAVyIAJyayIDQQF0IAQgA0EVanZBAXFyQRxqIQMLIAAgAzYCHCAAQgA3AhAgA0ECdEG4toCAAGohBQJAIAdBASADdCICcQ0AIAUgADYCAEEAIAcgAnI2Aoy0gIAAIAAgBTYCGCAAIAA2AgggACAANgIMDAELIARBAEEZIANBAXZrIANBH0YbdCEDIAUoAgAhAgJAA0AgAiIFKAIEQXhxIARGDQEgA0EddiECIANBAXQhAyAFIAJBBHFqQRBqIgYoAgAiAg0ACyAGIAA2AgAgACAFNgIYIAAgADYCDCAAIAA2AggMAQsgBSgCCCIDIAA2AgwgBSAANgIIIABBADYCGCAAIAU2AgwgACADNgIICyAIQQhqIQMMAQsCQCAKRQ0AAkACQCAAIAAoAhwiBUECdEG4toCAAGoiAygCAEcNACADIAg2AgAgCA0BQQAgCUF+IAV3cTYCjLSAgAAMAgsgCkEQQRQgCigCECAARhtqIAg2AgAgCEUNAQsgCCAKNgIYAkAgACgCECIDRQ0AIAggAzYCECADIAg2AhgLIABBFGooAgAiA0UNACAIQRRqIAM2AgAgAyAINgIYCwJAAkAgBEEPSw0AIAAgBCACaiIDQQNyNgIEIAMgAGpBBGoiAyADKAIAQQFyNgIADAELIAAgAmoiBSAEQQFyNgIEIAAgAkEDcjYCBCAFIARqIAQ2AgACQCAHRQ0AIAdBA3YiCEEDdEGwtICAAGohAkEAKAKctICAACEDAkACQEEBIAh0IgggBnENAEEAIAggBnI2Aoi0gIAAIAIhCAwBCyACKAIIIQgLIAggAzYCDCACIAM2AgggAyACNgIMIAMgCDYCCAtBACAFNgKctICAAEEAIAQ2ApC0gIAACyAAQQhqIQMLIAFBEGokgICAgAAgAwsKACAAEL2AgIAAC/ANAQd/AkAgAEUNACAAQXhqIgEgAEF8aigCACICQXhxIgBqIQMCQCACQQFxDQAgAkEDcUUNASABIAEoAgAiAmsiAUEAKAKYtICAACIESQ0BIAIgAGohAAJAQQAoApy0gIAAIAFGDQACQCACQf8BSw0AIAEoAggiBCACQQN2IgVBA3RBsLSAgABqIgZGGgJAIAEoAgwiAiAERw0AQQBBACgCiLSAgABBfiAFd3E2Aoi0gIAADAMLIAIgBkYaIAIgBDYCCCAEIAI2AgwMAgsgASgCGCEHAkACQCABKAIMIgYgAUYNACAEIAEoAggiAksaIAYgAjYCCCACIAY2AgwMAQsCQCABQRRqIgIoAgAiBA0AIAFBEGoiAigCACIEDQBBACEGDAELA0AgAiEFIAQiBkEUaiICKAIAIgQNACAGQRBqIQIgBigCECIEDQALIAVBADYCAAsgB0UNAQJAAkAgASgCHCIEQQJ0Qbi2gIAAaiICKAIAIAFHDQAgAiAGNgIAIAYNAUEAQQAoAoy0gIAAQX4gBHdxNgKMtICAAAwDCyAHQRBBFCAHKAIQIAFGG2ogBjYCACAGRQ0CCyAGIAc2AhgCQCABKAIQIgJFDQAgBiACNgIQIAIgBjYCGAsgASgCFCICRQ0BIAZBFGogAjYCACACIAY2AhgMAQsgAygCBCICQQNxQQNHDQAgAyACQX5xNgIEQQAgADYCkLSAgAAgASAAaiAANgIAIAEgAEEBcjYCBA8LIAMgAU0NACADKAIEIgJBAXFFDQACQAJAIAJBAnENAAJAQQAoAqC0gIAAIANHDQBBACABNgKgtICAAEEAQQAoApS0gIAAIABqIgA2ApS0gIAAIAEgAEEBcjYCBCABQQAoApy0gIAARw0DQQBBADYCkLSAgABBAEEANgKctICAAA8LAkBBACgCnLSAgAAgA0cNAEEAIAE2Apy0gIAAQQBBACgCkLSAgAAgAGoiADYCkLSAgAAgASAAQQFyNgIEIAEgAGogADYCAA8LIAJBeHEgAGohAAJAAkAgAkH/AUsNACADKAIIIgQgAkEDdiIFQQN0QbC0gIAAaiIGRhoCQCADKAIMIgIgBEcNAEEAQQAoAoi0gIAAQX4gBXdxNgKItICAAAwCCyACIAZGGiACIAQ2AgggBCACNgIMDAELIAMoAhghBwJAAkAgAygCDCIGIANGDQBBACgCmLSAgAAgAygCCCICSxogBiACNgIIIAIgBjYCDAwBCwJAIANBFGoiAigCACIEDQAgA0EQaiICKAIAIgQNAEEAIQYMAQsDQCACIQUgBCIGQRRqIgIoAgAiBA0AIAZBEGohAiAGKAIQIgQNAAsgBUEANgIACyAHRQ0AAkACQCADKAIcIgRBAnRBuLaAgABqIgIoAgAgA0cNACACIAY2AgAgBg0BQQBBACgCjLSAgABBfiAEd3E2Aoy0gIAADAILIAdBEEEUIAcoAhAgA0YbaiAGNgIAIAZFDQELIAYgBzYCGAJAIAMoAhAiAkUNACAGIAI2AhAgAiAGNgIYCyADKAIUIgJFDQAgBkEUaiACNgIAIAIgBjYCGAsgASAAaiAANgIAIAEgAEEBcjYCBCABQQAoApy0gIAARw0BQQAgADYCkLSAgAAPCyADIAJBfnE2AgQgASAAaiAANgIAIAEgAEEBcjYCBAsCQCAAQf8BSw0AIABBA3YiAkEDdEGwtICAAGohAAJAAkBBACgCiLSAgAAiBEEBIAJ0IgJxDQBBACAEIAJyNgKItICAACAAIQIMAQsgACgCCCECCyACIAE2AgwgACABNgIIIAEgADYCDCABIAI2AggPC0EfIQICQCAAQf///wdLDQAgAEEIdiICIAJBgP4/akEQdkEIcSICdCIEIARBgOAfakEQdkEEcSIEdCIGIAZBgIAPakEQdkECcSIGdEEPdiACIARyIAZyayICQQF0IAAgAkEVanZBAXFyQRxqIQILIAFCADcCECABQRxqIAI2AgAgAkECdEG4toCAAGohBAJAAkBBACgCjLSAgAAiBkEBIAJ0IgNxDQAgBCABNgIAQQAgBiADcjYCjLSAgAAgAUEYaiAENgIAIAEgATYCCCABIAE2AgwMAQsgAEEAQRkgAkEBdmsgAkEfRht0IQIgBCgCACEGAkADQCAGIgQoAgRBeHEgAEYNASACQR12IQYgAkEBdCECIAQgBkEEcWpBEGoiAygCACIGDQALIAMgATYCACABQRhqIAQ2AgAgASABNgIMIAEgATYCCAwBCyAEKAIIIgAgATYCDCAEIAE2AgggAUEYakEANgIAIAEgBDYCDCABIAA2AggLQQBBACgCqLSAgABBf2oiAUF/IAEbNgKotICAAAsLTgACQCAADQA/AEEQdA8LAkAgAEH//wNxDQAgAEF/TA0AAkAgAEEQdkAAIgBBf0cNAEEAQTA2Avi3gIAAQX8PCyAAQRB0DwsQv4CAgAAACwQAAAALC44sAQBBgAgLhiwBAAAAAgAAAAMAAAAEAAAABQAAAAYAAAAHAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEludmFsaWQgY2hhciBpbiB1cmwgcXVlcnkAU3BhbiBjYWxsYmFjayBlcnJvciBpbiBvbl9ib2R5AENvbnRlbnQtTGVuZ3RoIG92ZXJmbG93AENodW5rIHNpemUgb3ZlcmZsb3cAUmVzcG9uc2Ugb3ZlcmZsb3cASW52YWxpZCBtZXRob2QgZm9yIEhUVFAveC54IHJlcXVlc3QASW52YWxpZCBtZXRob2QgZm9yIFJUU1AveC54IHJlcXVlc3QARXhwZWN0ZWQgU09VUkNFIG1ldGhvZCBmb3IgSUNFL3gueCByZXF1ZXN0AEludmFsaWQgY2hhciBpbiB1cmwgZnJhZ21lbnQgc3RhcnQARXhwZWN0ZWQgZG90AFNwYW4gY2FsbGJhY2sgZXJyb3IgaW4gb25fc3RhdHVzAEludmFsaWQgcmVzcG9uc2Ugc3RhdHVzAEludmFsaWQgY2hhcmFjdGVyIGluIGNodW5rIHBhcmFtZXRlcnMAVXNlciBjYWxsYmFjayBlcnJvcgBgb25fY2h1bmtfaGVhZGVyYCBjYWxsYmFjayBlcnJvcgBgb25fbWVzc2FnZV9iZWdpbmAgY2FsbGJhY2sgZXJyb3IAYG9uX2NodW5rX2NvbXBsZXRlYCBjYWxsYmFjayBlcnJvcgBgb25fbWVzc2FnZV9jb21wbGV0ZWAgY2FsbGJhY2sgZXJyb3IAVW5leHBlY3RlZCBjaGFyIGluIHVybCBzZXJ2ZXIASW52YWxpZCBoZWFkZXIgdmFsdWUgY2hhcgBJbnZhbGlkIGhlYWRlciBmaWVsZCBjaGFyAEludmFsaWQgbWlub3IgdmVyc2lvbgBJbnZhbGlkIG1ham9yIHZlcnNpb24ARXhwZWN0ZWQgc3BhY2UgYWZ0ZXIgdmVyc2lvbgBFeHBlY3RlZCBDUkxGIGFmdGVyIHZlcnNpb24ASW52YWxpZCBoZWFkZXIgdG9rZW4AU3BhbiBjYWxsYmFjayBlcnJvciBpbiBvbl91cmwASW52YWxpZCBjaGFyYWN0ZXJzIGluIHVybABVbmV4cGVjdGVkIHN0YXJ0IGNoYXIgaW4gdXJsAERvdWJsZSBAIGluIHVybABFbXB0eSBDb250ZW50LUxlbmd0aABJbnZhbGlkIGNoYXJhY3RlciBpbiBDb250ZW50LUxlbmd0aABEdXBsaWNhdGUgQ29udGVudC1MZW5ndGgASW52YWxpZCBjaGFyIGluIHVybCBwYXRoAENvbnRlbnQtTGVuZ3RoIGNhbid0IGJlIHByZXNlbnQgd2l0aCBUcmFuc2Zlci1FbmNvZGluZwBJbnZhbGlkIGNoYXJhY3RlciBpbiBjaHVuayBzaXplAFNwYW4gY2FsbGJhY2sgZXJyb3IgaW4gb25faGVhZGVyX3ZhbHVlAE1pc3NpbmcgZXhwZWN0ZWQgQ1IgYWZ0ZXIgaGVhZGVyIHZhbHVlAE1pc3NpbmcgZXhwZWN0ZWQgTEYgYWZ0ZXIgaGVhZGVyIHZhbHVlAEludmFsaWQgYFRyYW5zZmVyLUVuY29kaW5nYCBoZWFkZXIgdmFsdWUAUGF1c2VkIGJ5IG9uX2hlYWRlcnNfY29tcGxldGUASW52YWxpZCBFT0Ygc3RhdGUAb25fY2h1bmtfaGVhZGVyIHBhdXNlAG9uX21lc3NhZ2VfYmVnaW4gcGF1c2UAb25fY2h1bmtfY29tcGxldGUgcGF1c2UAb25fbWVzc2FnZV9jb21wbGV0ZSBwYXVzZQBQYXVzZSBvbiBDT05ORUNUL1VwZ3JhZGUAUGF1c2Ugb24gUFJJL1VwZ3JhZGUARXhwZWN0ZWQgSFRUUC8yIENvbm5lY3Rpb24gUHJlZmFjZQBFeHBlY3RlZCBzcGFjZSBhZnRlciBtZXRob2QAU3BhbiBjYWxsYmFjayBlcnJvciBpbiBvbl9oZWFkZXJfZmllbGQAUGF1c2VkAEludmFsaWQgd29yZCBlbmNvdW50ZXJlZABJbnZhbGlkIG1ldGhvZCBlbmNvdW50ZXJlZABVbmV4cGVjdGVkIGNoYXIgaW4gdXJsIHNjaGVtYQBSZXF1ZXN0IGhhcyBpbnZhbGlkIGBUcmFuc2Zlci1FbmNvZGluZ2AATUtBQ1RJVklUWQBDT1BZAE5PVElGWQBQTEFZAFBVVABDSEVDS09VVABQT1NUAFJFUE9SVABIUEVfSU5WQUxJRF9DT05TVEFOVABHRVQASFBFX1NUUklDVABSRURJUkVDVABDT05ORUNUAEhQRV9JTlZBTElEX1NUQVRVUwBPUFRJT05TAFNFVF9QQVJBTUVURVIAR0VUX1BBUkFNRVRFUgBIUEVfVVNFUgBIUEVfQ0JfQ0hVTktfSEVBREVSAE1LQ0FMRU5EQVIAU0VUVVAAVEVBUkRPV04ASFBFX0NMT1NFRF9DT05ORUNUSU9OAEhQRV9JTlZBTElEX1ZFUlNJT04ASFBFX0NCX01FU1NBR0VfQkVHSU4ASFBFX0lOVkFMSURfSEVBREVSX1RPS0VOAEhQRV9JTlZBTElEX1VSTABNS0NPTABBQ0wASFBFX0lOVEVSTkFMAEhQRV9PSwBVTkxJTksAVU5MT0NLAFBSSQBIUEVfSU5WQUxJRF9DT05URU5UX0xFTkdUSABIUEVfVU5FWFBFQ1RFRF9DT05URU5UX0xFTkdUSABGTFVTSABQUk9QUEFUQ0gATS1TRUFSQ0gASFBFX0lOVkFMSURfVFJBTlNGRVJfRU5DT0RJTkcARXhwZWN0ZWQgQ1JMRgBIUEVfSU5WQUxJRF9DSFVOS19TSVpFAE1PVkUASFBFX0NCX0hFQURFUlNfQ09NUExFVEUASFBFX0NCX0NIVU5LX0NPTVBMRVRFAEhQRV9DQl9NRVNTQUdFX0NPTVBMRVRFAERFTEVURQBIUEVfSU5WQUxJRF9FT0ZfU1RBVEUAUEFVU0UAUFVSR0UATUVSR0UASFBFX1BBVVNFRF9VUEdSQURFAEhQRV9QQVVTRURfSDJfVVBHUkFERQBTT1VSQ0UAQU5OT1VOQ0UAVFJBQ0UAREVTQ1JJQkUAVU5TVUJTQ1JJQkUAUkVDT1JEAEhQRV9JTlZBTElEX01FVEhPRABQUk9QRklORABVTkJJTkQAUkVCSU5EAEhQRV9DUl9FWFBFQ1RFRABIUEVfTEZfRVhQRUNURUQASFBFX1BBVVNFRABIRUFEAEV4cGVjdGVkIEhUVFAvANwLAADPCwAA0woAAJkNAAAQDAAAXQsAAF8NAAC1CwAAugoAAHMLAACcCwAA9QsAAHMMAADvCgAA3AwAAEcMAACHCwAAjwwAAL0MAAAvCwAApwwAAKkNAAAEDQAAFw0AACYLAACJDQAA1QwAAM8KAAC0DQAArgoAAKEKAADnCgAAAgsAAD0NAACQCgAA7AsAAMULAACKDAAAcg0AADQMAABADAAA6gsAAIQNAACCDQAAew0AAMsLAACzCgAAhQoAAKUKAAD+DAAAPgwAAJUKAABODQAATA0AADgMAAD4DAAAQwsAAOULAADjCwAALQ0AAPELAABDDQAANA0AAE4LAACcCgAA8gwAAFQLAAAYCwAACgsAAN4KAABYDQAALgwAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAIAAAAAAAAAAAAAAAAAAAAAAAABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAWxvc2VlZXAtYWxpdmUAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEBAQEBAQEBAQECAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAWNodW5rZWQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBAAEBAQEBAAABAQABAQABAQEBAQEBAQEBAAAAAAAAAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAAAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZWN0aW9uZW50LWxlbmd0aG9ucm94eS1jb25uZWN0aW9uAAAAAAAAAAAAAAAAAAAAcmFuc2Zlci1lbmNvZGluZ3BncmFkZQ0KDQoNClNNDQoNClRUUC9DRS9UU1AvAAAAAAAAAAAAAAAAAQIAAQMAAAAAAAAAAAAAAAAAAAAAAAAEAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQAAAAAAAAAAAAECAAEDAAAAAAAAAAAAAAAAAAAAAAAABAEBBQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAAAAAAAAAAABAAABAAAAAAAAAAAAAAAAAAAAAAAAAAABAQABAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAAAAAAAAAAAAAAEAAAIAAAAAAAAAAAAAAAAAAAAAAAADBAAABAQEBAQEBAQEBAQFBAQEBAQEBAQEBAQEAAQABgcEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQABAAEAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAABAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAAAAAAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAAAAAAAADAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAQAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAACAAAAAAIAAAAAAAAAAAAAAAAAAAAAAAMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAAAAAAAAAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATk9VTkNFRUNLT1VUTkVDVEVURUNSSUJFTFVTSEVURUFEU0VBUkNIUkdFQ1RJVklUWUxFTkRBUlZFT1RJRllQVElPTlNDSFNFQVlTVEFUQ0hHRU9SRElSRUNUT1JUUkNIUEFSQU1FVEVSVVJDRUJTQ1JJQkVBUkRPV05BQ0VJTkROS0NLVUJTQ1JJQkVIVFRQL0FEVFAv";
      }
    });
    var require_client = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/client.js"(exports2, module2) {
        "use strict";
        var assert = require("assert");
        var net2 = require("net");
        var util2 = require_util2();
        var Request = require_request();
        var DispatcherBase = require_dispatcher_base();
        var RedirectHandler = require_redirect();
        var {
          RequestContentLengthMismatchError,
          ResponseContentLengthMismatchError,
          InvalidArgumentError,
          RequestAbortedError,
          HeadersTimeoutError,
          HeadersOverflowError,
          SocketError,
          InformationalError,
          BodyTimeoutError,
          HTTPParserError
        } = require_errors();
        var buildConnector = require_connect();
        var {
          kUrl,
          kReset,
          kServerName,
          kClient,
          kBusy,
          kParser,
          kConnect,
          kBlocking,
          kResuming,
          kRunning,
          kPending,
          kSize,
          kWriting,
          kQueue,
          kConnected,
          kConnecting,
          kNeedDrain,
          kNoRef,
          kKeepAliveDefaultTimeout,
          kHostHeader,
          kPendingIdx,
          kRunningIdx,
          kError,
          kPipelining,
          kSocket,
          kKeepAliveTimeoutValue,
          kMaxHeadersSize,
          kKeepAliveMaxTimeout,
          kKeepAliveTimeoutThreshold,
          kHeadersTimeout,
          kBodyTimeout,
          kStrictContentLength,
          kConnector,
          kMaxRedirections,
          kMaxRequests,
          kCounter,
          kClose,
          kDestroy,
          kDispatch
        } = require_symbols();
        var kClosedResolve = Symbol("kClosedResolve");
        var channels = {};
        try {
          const diagnosticsChannel = require("diagnostics_channel");
          channels.sendHeaders = diagnosticsChannel.channel("undici:client:sendHeaders");
          channels.beforeConnect = diagnosticsChannel.channel("undici:client:beforeConnect");
          channels.connectError = diagnosticsChannel.channel("undici:client:connectError");
          channels.connected = diagnosticsChannel.channel("undici:client:connected");
        } catch (e) {
          channels.sendHeaders = { hasSubscribers: false };
          channels.beforeConnect = { hasSubscribers: false };
          channels.connectError = { hasSubscribers: false };
          channels.connected = { hasSubscribers: false };
        }
        var Client = class extends DispatcherBase {
          constructor(url, {
            maxHeaderSize,
            headersTimeout,
            socketTimeout,
            requestTimeout,
            connectTimeout,
            bodyTimeout,
            idleTimeout,
            keepAlive,
            keepAliveTimeout,
            maxKeepAliveTimeout,
            keepAliveMaxTimeout,
            keepAliveTimeoutThreshold,
            socketPath,
            pipelining,
            tls,
            strictContentLength,
            maxCachedSessions,
            maxRedirections,
            connect: connect2,
            maxRequestsPerClient
          } = {}) {
            super();
            if (keepAlive !== void 0) {
              throw new InvalidArgumentError("unsupported keepAlive, use pipelining=0 instead");
            }
            if (socketTimeout !== void 0) {
              throw new InvalidArgumentError("unsupported socketTimeout, use headersTimeout & bodyTimeout instead");
            }
            if (requestTimeout !== void 0) {
              throw new InvalidArgumentError("unsupported requestTimeout, use headersTimeout & bodyTimeout instead");
            }
            if (idleTimeout !== void 0) {
              throw new InvalidArgumentError("unsupported idleTimeout, use keepAliveTimeout instead");
            }
            if (maxKeepAliveTimeout !== void 0) {
              throw new InvalidArgumentError("unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead");
            }
            if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {
              throw new InvalidArgumentError("invalid maxHeaderSize");
            }
            if (socketPath != null && typeof socketPath !== "string") {
              throw new InvalidArgumentError("invalid socketPath");
            }
            if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {
              throw new InvalidArgumentError("invalid connectTimeout");
            }
            if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {
              throw new InvalidArgumentError("invalid keepAliveTimeout");
            }
            if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {
              throw new InvalidArgumentError("invalid keepAliveMaxTimeout");
            }
            if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {
              throw new InvalidArgumentError("invalid keepAliveTimeoutThreshold");
            }
            if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {
              throw new InvalidArgumentError("headersTimeout must be a positive integer or zero");
            }
            if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {
              throw new InvalidArgumentError("bodyTimeout must be a positive integer or zero");
            }
            if (connect2 != null && typeof connect2 !== "function" && typeof connect2 !== "object") {
              throw new InvalidArgumentError("connect must be a function or an object");
            }
            if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {
              throw new InvalidArgumentError("maxRedirections must be a positive number");
            }
            if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {
              throw new InvalidArgumentError("maxRequestsPerClient must be a positive number");
            }
            if (typeof connect2 !== "function") {
              connect2 = buildConnector({
                ...tls,
                maxCachedSessions,
                socketPath,
                timeout: connectTimeout,
                ...connect2
              });
            }
            this[kUrl] = util2.parseOrigin(url);
            this[kConnector] = connect2;
            this[kSocket] = null;
            this[kPipelining] = pipelining != null ? pipelining : 1;
            this[kMaxHeadersSize] = maxHeaderSize || 16384;
            this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout;
            this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 6e5 : keepAliveMaxTimeout;
            this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold;
            this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout];
            this[kServerName] = null;
            this[kResuming] = 0;
            this[kNeedDrain] = 0;
            this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ""}\r
`;
            this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 3e4;
            this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 3e4;
            this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength;
            this[kMaxRedirections] = maxRedirections;
            this[kMaxRequests] = maxRequestsPerClient;
            this[kClosedResolve] = null;
            this[kQueue] = [];
            this[kRunningIdx] = 0;
            this[kPendingIdx] = 0;
          }
          get pipelining() {
            return this[kPipelining];
          }
          set pipelining(value) {
            this[kPipelining] = value;
            resume(this, true);
          }
          get [kPending]() {
            return this[kQueue].length - this[kPendingIdx];
          }
          get [kRunning]() {
            return this[kPendingIdx] - this[kRunningIdx];
          }
          get [kSize]() {
            return this[kQueue].length - this[kRunningIdx];
          }
          get [kConnected]() {
            return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed;
          }
          get [kBusy]() {
            const socket = this[kSocket];
            return socket && (socket[kReset] || socket[kWriting] || socket[kBlocking]) || this[kSize] >= (this[kPipelining] || 1) || this[kPending] > 0;
          }
          [kConnect](cb) {
            connect(this);
            this.once("connect", cb);
          }
          [kDispatch](opts, handler) {
            const { maxRedirections = this[kMaxRedirections] } = opts;
            if (maxRedirections) {
              handler = new RedirectHandler(this, maxRedirections, opts, handler);
            }
            const origin = opts.origin || this[kUrl].origin;
            const request2 = new Request(origin, opts, handler);
            this[kQueue].push(request2);
            if (this[kResuming]) {
            } else if (util2.bodyLength(request2.body) == null && util2.isIterable(request2.body)) {
              this[kResuming] = 1;
              process.nextTick(resume, this);
            } else {
              resume(this, true);
            }
            if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {
              this[kNeedDrain] = 2;
            }
            return this[kNeedDrain] < 2;
          }
          async [kClose]() {
            return new Promise((resolve) => {
              if (!this[kSize]) {
                this.destroy(resolve);
              } else {
                this[kClosedResolve] = resolve;
              }
            });
          }
          async [kDestroy](err) {
            return new Promise((resolve) => {
              const requests = this[kQueue].splice(this[kPendingIdx]);
              for (let i = 0; i < requests.length; i++) {
                const request2 = requests[i];
                errorRequest(this, request2, err);
              }
              const callback = /* @__PURE__ */ __name(() => {
                if (this[kClosedResolve]) {
                  this[kClosedResolve]();
                  this[kClosedResolve] = null;
                }
                resolve();
              }, "callback");
              if (!this[kSocket]) {
                queueMicrotask(callback);
              } else {
                util2.destroy(this[kSocket].on("close", callback), err);
              }
              resume(this);
            });
          }
        };
        __name(Client, "Client");
        var constants = require_constants2();
        var EMPTY_BUF = Buffer.alloc(0);
        async function lazyllhttp() {
          const llhttpWasmData = process.env.JEST_WORKER_ID ? require_llhttp_wasm() : void 0;
          let mod2;
          try {
            mod2 = await WebAssembly.compile(Buffer.from(require_llhttp_simd_wasm(), "base64"));
          } catch (e) {
            mod2 = await WebAssembly.compile(Buffer.from(llhttpWasmData || require_llhttp_wasm(), "base64"));
          }
          return await WebAssembly.instantiate(mod2, {
            env: {
              wasm_on_url: (p, at, len) => {
                return 0;
              },
              wasm_on_status: (p, at, len) => {
                assert.strictEqual(currentParser.ptr, p);
                const start = at - currentBufferPtr;
                const end = start + len;
                return currentParser.onStatus(currentBufferRef.slice(start, end)) || 0;
              },
              wasm_on_message_begin: (p) => {
                assert.strictEqual(currentParser.ptr, p);
                return currentParser.onMessageBegin() || 0;
              },
              wasm_on_header_field: (p, at, len) => {
                assert.strictEqual(currentParser.ptr, p);
                const start = at - currentBufferPtr;
                const end = start + len;
                return currentParser.onHeaderField(currentBufferRef.slice(start, end)) || 0;
              },
              wasm_on_header_value: (p, at, len) => {
                assert.strictEqual(currentParser.ptr, p);
                const start = at - currentBufferPtr;
                const end = start + len;
                return currentParser.onHeaderValue(currentBufferRef.slice(start, end)) || 0;
              },
              wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {
                assert.strictEqual(currentParser.ptr, p);
                return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0;
              },
              wasm_on_body: (p, at, len) => {
                assert.strictEqual(currentParser.ptr, p);
                const start = at - currentBufferPtr;
                const end = start + len;
                return currentParser.onBody(currentBufferRef.slice(start, end)) || 0;
              },
              wasm_on_message_complete: (p) => {
                assert.strictEqual(currentParser.ptr, p);
                return currentParser.onMessageComplete() || 0;
              }
            }
          });
        }
        __name(lazyllhttp, "lazyllhttp");
        var llhttpInstance = null;
        var llhttpPromise = lazyllhttp().catch(() => {
        });
        var currentParser = null;
        var currentBufferRef = null;
        var currentBufferSize = 0;
        var currentBufferPtr = null;
        var TIMEOUT_HEADERS = 1;
        var TIMEOUT_BODY = 2;
        var TIMEOUT_IDLE = 3;
        var Parser = class {
          constructor(client, socket, { exports: exports22 }) {
            assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0);
            this.llhttp = exports22;
            this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE);
            this.client = client;
            this.socket = socket;
            this.timeout = null;
            this.timeoutValue = null;
            this.timeoutType = null;
            this.statusCode = null;
            this.statusText = "";
            this.upgrade = false;
            this.headers = [];
            this.headersSize = 0;
            this.headersMaxSize = client[kMaxHeadersSize];
            this.shouldKeepAlive = false;
            this.paused = false;
            this.resume = this.resume.bind(this);
            this.bytesRead = 0;
            this.keepAlive = "";
            this.contentLength = "";
          }
          setTimeout(value, type) {
            this.timeoutType = type;
            if (value !== this.timeoutValue) {
              clearTimeout(this.timeout);
              if (value) {
                this.timeout = setTimeout(onParserTimeout, value, this);
                if (this.timeout.unref) {
                  this.timeout.unref();
                }
              } else {
                this.timeout = null;
              }
              this.timeoutValue = value;
            } else if (this.timeout) {
              if (this.timeout.refresh) {
                this.timeout.refresh();
              }
            }
          }
          resume() {
            if (this.socket.destroyed || !this.paused) {
              return;
            }
            assert(this.ptr != null);
            assert(currentParser == null);
            this.llhttp.llhttp_resume(this.ptr);
            assert(this.timeoutType === TIMEOUT_BODY);
            if (this.timeout) {
              if (this.timeout.refresh) {
                this.timeout.refresh();
              }
            }
            this.paused = false;
            this.execute(this.socket.read() || EMPTY_BUF);
            this.readMore();
          }
          readMore() {
            while (!this.paused && this.ptr) {
              const chunk = this.socket.read();
              if (chunk === null) {
                break;
              }
              this.execute(chunk);
            }
          }
          execute(data) {
            assert(this.ptr != null);
            assert(currentParser == null);
            assert(!this.paused);
            const { socket, llhttp } = this;
            if (data.length > currentBufferSize) {
              if (currentBufferPtr) {
                llhttp.free(currentBufferPtr);
              }
              currentBufferSize = Math.ceil(data.length / 4096) * 4096;
              currentBufferPtr = llhttp.malloc(currentBufferSize);
            }
            new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data);
            try {
              let ret;
              try {
                currentBufferRef = data;
                currentParser = this;
                ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length);
              } catch (err) {
                throw err;
              } finally {
                currentParser = null;
                currentBufferRef = null;
              }
              const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr;
              if (ret === constants.ERROR.PAUSED_UPGRADE) {
                this.onUpgrade(data.slice(offset));
              } else if (ret === constants.ERROR.PAUSED) {
                this.paused = true;
                socket.unshift(data.slice(offset));
              } else if (ret !== constants.ERROR.OK) {
                const ptr = llhttp.llhttp_get_error_reason(this.ptr);
                let message = "";
                if (ptr) {
                  const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0);
                  message = Buffer.from(llhttp.memory.buffer, ptr, len).toString();
                }
                throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset));
              }
            } catch (err) {
              util2.destroy(socket, err);
            }
          }
          finish() {
            try {
              try {
                currentParser = this;
              } finally {
                currentParser = null;
              }
            } catch (err) {
              util2.destroy(this.socket, err);
            }
          }
          destroy() {
            assert(this.ptr != null);
            assert(currentParser == null);
            this.llhttp.llhttp_free(this.ptr);
            this.ptr = null;
            clearTimeout(this.timeout);
            this.timeout = null;
            this.timeoutValue = null;
            this.timeoutType = null;
            this.paused = false;
          }
          onStatus(buf) {
            this.statusText = buf.toString();
          }
          onMessageBegin() {
            const { socket, client } = this;
            if (socket.destroyed) {
              return -1;
            }
            const request2 = client[kQueue][client[kRunningIdx]];
            if (!request2) {
              return -1;
            }
          }
          onHeaderField(buf) {
            const len = this.headers.length;
            if ((len & 1) === 0) {
              this.headers.push(buf);
            } else {
              this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
            }
            this.trackHeader(buf.length);
          }
          onHeaderValue(buf) {
            let len = this.headers.length;
            if ((len & 1) === 1) {
              this.headers.push(buf);
              len += 1;
            } else {
              this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf]);
            }
            const key = this.headers[len - 2];
            if (key.length === 10 && key.toString().toLowerCase() === "keep-alive") {
              this.keepAlive += buf.toString();
            } else if (key.length === 14 && key.toString().toLowerCase() === "content-length") {
              this.contentLength += buf.toString();
            }
            this.trackHeader(buf.length);
          }
          trackHeader(len) {
            this.headersSize += len;
            if (this.headersSize >= this.headersMaxSize) {
              util2.destroy(this.socket, new HeadersOverflowError());
            }
          }
          onUpgrade(head) {
            const { upgrade, client, socket, headers, statusCode } = this;
            assert(upgrade);
            const request2 = client[kQueue][client[kRunningIdx]];
            assert(request2);
            assert(!socket.destroyed);
            assert(socket === client[kSocket]);
            assert(!this.paused);
            assert(request2.upgrade || request2.method === "CONNECT");
            this.statusCode = null;
            this.statusText = "";
            this.shouldKeepAlive = null;
            assert(this.headers.length % 2 === 0);
            this.headers = [];
            this.headersSize = 0;
            socket.unshift(head);
            socket[kParser].destroy();
            socket[kParser] = null;
            socket[kClient] = null;
            socket[kError] = null;
            socket.removeListener("error", onSocketError).removeListener("readable", onSocketReadable).removeListener("end", onSocketEnd).removeListener("close", onSocketClose);
            client[kSocket] = null;
            client[kQueue][client[kRunningIdx]++] = null;
            client.emit("disconnect", client[kUrl], [client], new InformationalError("upgrade"));
            try {
              request2.onUpgrade(statusCode, headers, socket);
            } catch (err) {
              util2.destroy(socket, err);
            }
            resume(client);
          }
          onHeadersComplete(statusCode, upgrade, shouldKeepAlive) {
            const { client, socket, headers, statusText } = this;
            if (socket.destroyed) {
              return -1;
            }
            const request2 = client[kQueue][client[kRunningIdx]];
            if (!request2) {
              return -1;
            }
            assert(!this.upgrade);
            assert(this.statusCode < 200);
            if (statusCode === 100) {
              util2.destroy(socket, new SocketError("bad response", util2.getSocketInfo(socket)));
              return -1;
            }
            if (upgrade && !request2.upgrade) {
              util2.destroy(socket, new SocketError("bad upgrade", util2.getSocketInfo(socket)));
              return -1;
            }
            assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS);
            this.statusCode = statusCode;
            this.shouldKeepAlive = shouldKeepAlive;
            if (this.statusCode >= 200) {
              const bodyTimeout = request2.bodyTimeout != null ? request2.bodyTimeout : client[kBodyTimeout];
              this.setTimeout(bodyTimeout, TIMEOUT_BODY);
            } else if (this.timeout) {
              if (this.timeout.refresh) {
                this.timeout.refresh();
              }
            }
            if (request2.method === "CONNECT") {
              assert(client[kRunning] === 1);
              this.upgrade = true;
              return 2;
            }
            if (upgrade) {
              assert(client[kRunning] === 1);
              this.upgrade = true;
              return 2;
            }
            assert(this.headers.length % 2 === 0);
            this.headers = [];
            this.headersSize = 0;
            if (shouldKeepAlive && client[kPipelining]) {
              const keepAliveTimeout = this.keepAlive ? util2.parseKeepAliveTimeout(this.keepAlive) : null;
              if (keepAliveTimeout != null) {
                const timeout = Math.min(keepAliveTimeout - client[kKeepAliveTimeoutThreshold], client[kKeepAliveMaxTimeout]);
                if (timeout <= 0) {
                  socket[kReset] = true;
                } else {
                  client[kKeepAliveTimeoutValue] = timeout;
                }
              } else {
                client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout];
              }
            } else {
              socket[kReset] = true;
            }
            let pause;
            try {
              pause = request2.onHeaders(statusCode, headers, this.resume, statusText) === false;
            } catch (err) {
              util2.destroy(socket, err);
              return -1;
            }
            if (request2.method === "HEAD") {
              assert(socket[kReset]);
              return 1;
            }
            if (statusCode < 200) {
              return 1;
            }
            if (socket[kBlocking]) {
              socket[kBlocking] = false;
              resume(client);
            }
            return pause ? constants.ERROR.PAUSED : 0;
          }
          onBody(buf) {
            const { client, socket, statusCode } = this;
            if (socket.destroyed) {
              return -1;
            }
            const request2 = client[kQueue][client[kRunningIdx]];
            assert(request2);
            assert.strictEqual(this.timeoutType, TIMEOUT_BODY);
            if (this.timeout) {
              if (this.timeout.refresh) {
                this.timeout.refresh();
              }
            }
            assert(statusCode >= 200);
            this.bytesRead += buf.length;
            try {
              if (request2.onData(buf) === false) {
                return constants.ERROR.PAUSED;
              }
            } catch (err) {
              util2.destroy(socket, err);
              return -1;
            }
          }
          onMessageComplete() {
            const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this;
            if (socket.destroyed && (!statusCode || shouldKeepAlive)) {
              return -1;
            }
            if (upgrade) {
              return;
            }
            const request2 = client[kQueue][client[kRunningIdx]];
            assert(request2);
            assert(statusCode >= 100);
            this.statusCode = null;
            this.statusText = "";
            this.bytesRead = 0;
            this.contentLength = "";
            this.keepAlive = "";
            assert(this.headers.length % 2 === 0);
            this.headers = [];
            this.headersSize = 0;
            if (statusCode < 200) {
              return;
            }
            if (request2.method !== "HEAD" && contentLength && bytesRead !== parseInt(contentLength, 10)) {
              util2.destroy(socket, new ResponseContentLengthMismatchError());
              return -1;
            }
            try {
              request2.onComplete(headers);
            } catch (err) {
              errorRequest(client, request2, err);
            }
            client[kQueue][client[kRunningIdx]++] = null;
            if (socket[kWriting]) {
              assert.strictEqual(client[kRunning], 0);
              util2.destroy(socket, new InformationalError("reset"));
              return constants.ERROR.PAUSED;
            } else if (!shouldKeepAlive) {
              util2.destroy(socket, new InformationalError("reset"));
              return constants.ERROR.PAUSED;
            } else if (socket[kReset] && client[kRunning] === 0) {
              util2.destroy(socket, new InformationalError("reset"));
              return constants.ERROR.PAUSED;
            } else if (client[kPipelining] === 1) {
              setImmediate(resume, client);
            } else {
              resume(client);
            }
          }
        };
        __name(Parser, "Parser");
        function onParserTimeout(parser) {
          const { socket, timeoutType, client } = parser;
          if (timeoutType === TIMEOUT_HEADERS) {
            assert(!parser.paused, "cannot be paused while waiting for headers");
            util2.destroy(socket, new HeadersTimeoutError());
          } else if (timeoutType === TIMEOUT_BODY) {
            if (!parser.paused) {
              util2.destroy(socket, new BodyTimeoutError());
            }
          } else if (timeoutType === TIMEOUT_IDLE) {
            assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue]);
            util2.destroy(socket, new InformationalError("socket idle timeout"));
          }
        }
        __name(onParserTimeout, "onParserTimeout");
        function onSocketReadable() {
          const { [kParser]: parser } = this;
          parser.readMore();
        }
        __name(onSocketReadable, "onSocketReadable");
        function onSocketError(err) {
          const { [kParser]: parser } = this;
          assert(err.code !== "ERR_TLS_CERT_ALTNAME_INVALID");
          if (err.code === "ECONNRESET" && parser.statusCode && !parser.shouldKeepAlive) {
            parser.finish();
            return;
          }
          this[kError] = err;
          onError(this[kClient], err);
        }
        __name(onSocketError, "onSocketError");
        function onError(client, err) {
          if (client[kRunning] === 0 && err.code !== "UND_ERR_INFO" && err.code !== "UND_ERR_SOCKET") {
            assert(client[kPendingIdx] === client[kRunningIdx]);
            const requests = client[kQueue].splice(client[kRunningIdx]);
            for (let i = 0; i < requests.length; i++) {
              const request2 = requests[i];
              errorRequest(client, request2, err);
            }
            assert(client[kSize] === 0);
          }
        }
        __name(onError, "onError");
        function onSocketEnd() {
          const { [kParser]: parser } = this;
          if (parser.statusCode && !parser.shouldKeepAlive) {
            parser.finish();
            return;
          }
          util2.destroy(this, new SocketError("other side closed", util2.getSocketInfo(this)));
        }
        __name(onSocketEnd, "onSocketEnd");
        function onSocketClose() {
          const { [kClient]: client } = this;
          this[kParser].destroy();
          this[kParser] = null;
          const err = this[kError] || new SocketError("closed", util2.getSocketInfo(this));
          client[kSocket] = null;
          if (client.destroyed) {
            assert(client[kPending] === 0);
            const requests = client[kQueue].splice(client[kRunningIdx]);
            for (let i = 0; i < requests.length; i++) {
              const request2 = requests[i];
              errorRequest(client, request2, err);
            }
          } else if (client[kRunning] > 0 && err.code !== "UND_ERR_INFO") {
            const request2 = client[kQueue][client[kRunningIdx]];
            client[kQueue][client[kRunningIdx]++] = null;
            errorRequest(client, request2, err);
          }
          client[kPendingIdx] = client[kRunningIdx];
          assert(client[kRunning] === 0);
          client.emit("disconnect", client[kUrl], [client], err);
          resume(client);
        }
        __name(onSocketClose, "onSocketClose");
        async function connect(client) {
          assert(!client[kConnecting]);
          assert(!client[kSocket]);
          let { host, hostname: hostname3, protocol, port } = client[kUrl];
          if (hostname3[0] === "[") {
            const idx = hostname3.indexOf("]");
            assert(idx !== -1);
            const ip = hostname3.substr(1, idx - 1);
            assert(net2.isIP(ip));
            hostname3 = ip;
          }
          client[kConnecting] = true;
          if (channels.beforeConnect.hasSubscribers) {
            channels.beforeConnect.publish({
              connectParams: {
                host,
                hostname: hostname3,
                protocol,
                port,
                servername: client[kServerName]
              },
              connector: client[kConnector]
            });
          }
          try {
            const socket = await new Promise((resolve, reject) => {
              client[kConnector]({
                host,
                hostname: hostname3,
                protocol,
                port,
                servername: client[kServerName]
              }, (err, socket2) => {
                if (err) {
                  reject(err);
                } else {
                  resolve(socket2);
                }
              });
            });
            if (!llhttpInstance) {
              llhttpInstance = await llhttpPromise;
              llhttpPromise = null;
            }
            client[kConnecting] = false;
            assert(socket);
            client[kSocket] = socket;
            socket[kNoRef] = false;
            socket[kWriting] = false;
            socket[kReset] = false;
            socket[kBlocking] = false;
            socket[kError] = null;
            socket[kParser] = new Parser(client, socket, llhttpInstance);
            socket[kClient] = client;
            socket[kCounter] = 0;
            socket[kMaxRequests] = client[kMaxRequests];
            socket.on("error", onSocketError).on("readable", onSocketReadable).on("end", onSocketEnd).on("close", onSocketClose);
            if (channels.connected.hasSubscribers) {
              channels.connected.publish({
                connectParams: {
                  host,
                  hostname: hostname3,
                  protocol,
                  port,
                  servername: client[kServerName]
                },
                connector: client[kConnector],
                socket
              });
            }
            client.emit("connect", client[kUrl], [client]);
          } catch (err) {
            client[kConnecting] = false;
            if (channels.connectError.hasSubscribers) {
              channels.connectError.publish({
                connectParams: {
                  host,
                  hostname: hostname3,
                  protocol,
                  port,
                  servername: client[kServerName]
                },
                connector: client[kConnector],
                error: err
              });
            }
            if (err.code === "ERR_TLS_CERT_ALTNAME_INVALID") {
              assert(client[kRunning] === 0);
              while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {
                const request2 = client[kQueue][client[kPendingIdx]++];
                errorRequest(client, request2, err);
              }
            } else {
              onError(client, err);
            }
            client.emit("connectionError", client[kUrl], [client], err);
          }
          resume(client);
        }
        __name(connect, "connect");
        function emitDrain(client) {
          client[kNeedDrain] = 0;
          client.emit("drain", client[kUrl], [client]);
        }
        __name(emitDrain, "emitDrain");
        function resume(client, sync) {
          if (client[kResuming] === 2) {
            return;
          }
          client[kResuming] = 2;
          _resume(client, sync);
          client[kResuming] = 0;
          if (client[kRunningIdx] > 256) {
            client[kQueue].splice(0, client[kRunningIdx]);
            client[kPendingIdx] -= client[kRunningIdx];
            client[kRunningIdx] = 0;
          }
        }
        __name(resume, "resume");
        function _resume(client, sync) {
          while (true) {
            if (client.destroyed) {
              assert(client[kPending] === 0);
              return;
            }
            if (client.closed && !client[kSize]) {
              client.destroy();
              return;
            }
            const socket = client[kSocket];
            if (socket) {
              if (client[kSize] === 0) {
                if (!socket[kNoRef] && socket.unref) {
                  socket.unref();
                  socket[kNoRef] = true;
                }
              } else if (socket[kNoRef] && socket.ref) {
                socket.ref();
                socket[kNoRef] = false;
              }
              if (client[kSize] === 0) {
                if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {
                  socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE);
                }
              } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {
                if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {
                  const request3 = client[kQueue][client[kRunningIdx]];
                  const headersTimeout = request3.headersTimeout != null ? request3.headersTimeout : client[kHeadersTimeout];
                  socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS);
                }
              }
            }
            if (client[kBusy]) {
              client[kNeedDrain] = 2;
            } else if (client[kNeedDrain] === 2) {
              if (sync) {
                client[kNeedDrain] = 1;
                process.nextTick(emitDrain, client);
              } else {
                emitDrain(client);
              }
              continue;
            }
            if (client[kPending] === 0) {
              return;
            }
            if (client[kRunning] >= (client[kPipelining] || 1)) {
              return;
            }
            const request2 = client[kQueue][client[kPendingIdx]];
            if (client[kUrl].protocol === "https:" && client[kServerName] !== request2.servername) {
              if (client[kRunning] > 0) {
                return;
              }
              client[kServerName] = request2.servername;
              if (socket && socket.servername !== request2.servername) {
                util2.destroy(socket, new InformationalError("servername changed"));
                return;
              }
            }
            if (client[kConnecting]) {
              return;
            }
            if (!socket) {
              connect(client);
              continue;
            }
            if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {
              return;
            }
            if (client[kRunning] > 0 && !request2.idempotent) {
              return;
            }
            if (client[kRunning] > 0 && (request2.upgrade || request2.method === "CONNECT")) {
              return;
            }
            if (util2.isStream(request2.body) && util2.bodyLength(request2.body) === 0) {
              request2.body.on("data", function() {
                assert(false);
              }).on("error", function(err) {
                errorRequest(client, request2, err);
              }).on("end", function() {
                util2.destroy(this);
              });
              request2.body = null;
            }
            if (client[kRunning] > 0 && (util2.isStream(request2.body) || util2.isAsyncIterable(request2.body))) {
              return;
            }
            if (!request2.aborted && write(client, request2)) {
              client[kPendingIdx]++;
            } else {
              client[kQueue].splice(client[kPendingIdx], 1);
            }
          }
        }
        __name(_resume, "_resume");
        function write(client, request2) {
          const { body, method, path: path7, host, upgrade, headers, blocking } = request2;
          const expectsPayload = method === "PUT" || method === "POST" || method === "PATCH";
          if (body && typeof body.read === "function") {
            body.read(0);
          }
          let contentLength = util2.bodyLength(body);
          if (contentLength === null) {
            contentLength = request2.contentLength;
          }
          if (contentLength === 0 && !expectsPayload) {
            contentLength = null;
          }
          if (request2.contentLength !== null && request2.contentLength !== contentLength) {
            if (client[kStrictContentLength]) {
              errorRequest(client, request2, new RequestContentLengthMismatchError());
              return false;
            }
            process.emitWarning(new RequestContentLengthMismatchError());
          }
          const socket = client[kSocket];
          try {
            request2.onConnect((err) => {
              if (request2.aborted || request2.completed) {
                return;
              }
              errorRequest(client, request2, err || new RequestAbortedError());
              util2.destroy(socket, new InformationalError("aborted"));
            });
          } catch (err) {
            errorRequest(client, request2, err);
          }
          if (request2.aborted) {
            return false;
          }
          if (method === "HEAD") {
            socket[kReset] = true;
          }
          if (upgrade || method === "CONNECT") {
            socket[kReset] = true;
          }
          if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {
            socket[kReset] = true;
          }
          if (blocking) {
            socket[kBlocking] = true;
          }
          let header = `${method} ${path7} HTTP/1.1\r
`;
          if (typeof host === "string") {
            header += `host: ${host}\r
`;
          } else {
            header += client[kHostHeader];
          }
          if (upgrade) {
            header += `connection: upgrade\r
upgrade: ${upgrade}\r
`;
          } else if (client[kPipelining]) {
            header += "connection: keep-alive\r\n";
          } else {
            header += "connection: close\r\n";
          }
          if (headers) {
            header += headers;
          }
          if (channels.sendHeaders.hasSubscribers) {
            channels.sendHeaders.publish({ request: request2, headers: header, socket });
          }
          if (!body) {
            if (contentLength === 0) {
              socket.write(`${header}content-length: 0\r
\r
`, "ascii");
            } else {
              assert(contentLength === null, "no body must not have content length");
              socket.write(`${header}\r
`, "ascii");
            }
            request2.onRequestSent();
          } else if (util2.isBuffer(body)) {
            assert(contentLength === body.byteLength, "buffer body must have content length");
            socket.cork();
            socket.write(`${header}content-length: ${contentLength}\r
\r
`, "ascii");
            socket.write(body);
            socket.uncork();
            request2.onBodySent(body);
            request2.onRequestSent();
            if (!expectsPayload) {
              socket[kReset] = true;
            }
          } else if (util2.isBlobLike(body)) {
            if (typeof body.stream === "function") {
              writeIterable({ body: body.stream(), client, request: request2, socket, contentLength, header, expectsPayload });
            } else {
              writeBlob({ body, client, request: request2, socket, contentLength, header, expectsPayload });
            }
          } else if (util2.isStream(body)) {
            writeStream({ body, client, request: request2, socket, contentLength, header, expectsPayload });
          } else if (util2.isIterable(body)) {
            writeIterable({ body, client, request: request2, socket, contentLength, header, expectsPayload });
          } else {
            assert(false);
          }
          return true;
        }
        __name(write, "write");
        function writeStream({ body, client, request: request2, socket, contentLength, header, expectsPayload }) {
          assert(contentLength !== 0 || client[kRunning] === 0, "stream body cannot be pipelined");
          let finished = false;
          const writer = new AsyncWriter({ socket, request: request2, contentLength, client, expectsPayload, header });
          const onData = /* @__PURE__ */ __name(function(chunk) {
            try {
              assert(!finished);
              if (!writer.write(chunk) && this.pause) {
                this.pause();
              }
            } catch (err) {
              util2.destroy(this, err);
            }
          }, "onData");
          const onDrain = /* @__PURE__ */ __name(function() {
            assert(!finished);
            if (body.resume) {
              body.resume();
            }
          }, "onDrain");
          const onAbort = /* @__PURE__ */ __name(function() {
            onFinished(new RequestAbortedError());
          }, "onAbort");
          const onFinished = /* @__PURE__ */ __name(function(err) {
            if (finished) {
              return;
            }
            finished = true;
            assert(socket.destroyed || socket[kWriting] && client[kRunning] <= 1);
            socket.off("drain", onDrain).off("error", onFinished);
            body.removeListener("data", onData).removeListener("end", onFinished).removeListener("error", onFinished).removeListener("close", onAbort);
            if (!err) {
              try {
                writer.end();
              } catch (er) {
                err = er;
              }
            }
            writer.destroy(err);
            if (err && (err.code !== "UND_ERR_INFO" || err.message !== "reset")) {
              util2.destroy(body, err);
            } else {
              util2.destroy(body);
            }
          }, "onFinished");
          body.on("data", onData).on("end", onFinished).on("error", onFinished).on("close", onAbort);
          if (body.resume) {
            body.resume();
          }
          socket.on("drain", onDrain).on("error", onFinished);
        }
        __name(writeStream, "writeStream");
        async function writeBlob({ body, client, request: request2, socket, contentLength, header, expectsPayload }) {
          assert(contentLength === body.size, "blob body must have content length");
          try {
            if (contentLength != null && contentLength !== body.size) {
              throw new RequestContentLengthMismatchError();
            }
            const buffer = Buffer.from(await body.arrayBuffer());
            socket.cork();
            socket.write(`${header}content-length: ${contentLength}\r
\r
`, "ascii");
            socket.write(buffer);
            socket.uncork();
            request2.onBodySent(buffer);
            request2.onRequestSent();
            if (!expectsPayload) {
              socket[kReset] = true;
            }
            resume(client);
          } catch (err) {
            util2.destroy(socket, err);
          }
        }
        __name(writeBlob, "writeBlob");
        async function writeIterable({ body, client, request: request2, socket, contentLength, header, expectsPayload }) {
          assert(contentLength !== 0 || client[kRunning] === 0, "iterator body cannot be pipelined");
          let callback = null;
          function onDrain() {
            if (callback) {
              const cb = callback;
              callback = null;
              cb();
            }
          }
          __name(onDrain, "onDrain");
          const waitForDrain = /* @__PURE__ */ __name(() => new Promise((resolve, reject) => {
            assert(callback === null);
            if (socket[kError]) {
              reject(socket[kError]);
            } else {
              callback = resolve;
            }
          }), "waitForDrain");
          socket.on("close", onDrain).on("drain", onDrain);
          const writer = new AsyncWriter({ socket, request: request2, contentLength, client, expectsPayload, header });
          try {
            for await (const chunk of body) {
              if (socket[kError]) {
                throw socket[kError];
              }
              if (!writer.write(chunk)) {
                await waitForDrain();
              }
            }
            writer.end();
          } catch (err) {
            writer.destroy(err);
          } finally {
            socket.off("close", onDrain).off("drain", onDrain);
          }
        }
        __name(writeIterable, "writeIterable");
        var AsyncWriter = class {
          constructor({ socket, request: request2, contentLength, client, expectsPayload, header }) {
            this.socket = socket;
            this.request = request2;
            this.contentLength = contentLength;
            this.client = client;
            this.bytesWritten = 0;
            this.expectsPayload = expectsPayload;
            this.header = header;
            socket[kWriting] = true;
          }
          write(chunk) {
            const { socket, request: request2, contentLength, client, bytesWritten, expectsPayload, header } = this;
            if (socket[kError]) {
              throw socket[kError];
            }
            if (socket.destroyed) {
              return false;
            }
            const len = Buffer.byteLength(chunk);
            if (!len) {
              return true;
            }
            if (contentLength !== null && bytesWritten + len > contentLength) {
              if (client[kStrictContentLength]) {
                throw new RequestContentLengthMismatchError();
              }
              process.emitWarning(new RequestContentLengthMismatchError());
            }
            if (bytesWritten === 0) {
              if (!expectsPayload) {
                socket[kReset] = true;
              }
              if (contentLength === null) {
                socket.write(`${header}transfer-encoding: chunked\r
`, "ascii");
              } else {
                socket.write(`${header}content-length: ${contentLength}\r
\r
`, "ascii");
              }
            }
            if (contentLength === null) {
              socket.write(`\r
${len.toString(16)}\r
`, "ascii");
            }
            this.bytesWritten += len;
            const ret = socket.write(chunk);
            request2.onBodySent(chunk);
            return ret;
          }
          end() {
            const { socket, contentLength, client, bytesWritten, expectsPayload, header, request: request2 } = this;
            request2.onRequestSent();
            socket[kWriting] = false;
            if (socket[kError]) {
              throw socket[kError];
            }
            if (socket.destroyed) {
              return;
            }
            if (bytesWritten === 0) {
              if (expectsPayload) {
                socket.write(`${header}content-length: 0\r
\r
`, "ascii");
              } else {
                socket.write(`${header}\r
`, "ascii");
              }
            } else if (contentLength === null) {
              socket.write("\r\n0\r\n\r\n", "ascii");
            }
            if (contentLength !== null && bytesWritten !== contentLength) {
              if (client[kStrictContentLength]) {
                throw new RequestContentLengthMismatchError();
              } else {
                process.emitWarning(new RequestContentLengthMismatchError());
              }
            }
            if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {
              if (socket[kParser].timeout.refresh) {
                socket[kParser].timeout.refresh();
              }
            }
            resume(client);
          }
          destroy(err) {
            const { socket, client } = this;
            socket[kWriting] = false;
            if (err) {
              assert(client[kRunning] <= 1, "pipeline should only contain this request");
              util2.destroy(socket, err);
            }
          }
        };
        __name(AsyncWriter, "AsyncWriter");
        function errorRequest(client, request2, err) {
          try {
            request2.onError(err);
            assert(request2.aborted);
          } catch (err2) {
            client.emit("error", err2);
          }
        }
        __name(errorRequest, "errorRequest");
        module2.exports = Client;
      }
    });
    var require_fixed_queue = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/node/fixed-queue.js"(exports2, module2) {
        "use strict";
        var kSize = 2048;
        var kMask = kSize - 1;
        var FixedCircularBuffer = class {
          constructor() {
            this.bottom = 0;
            this.top = 0;
            this.list = new Array(kSize);
            this.next = null;
          }
          isEmpty() {
            return this.top === this.bottom;
          }
          isFull() {
            return (this.top + 1 & kMask) === this.bottom;
          }
          push(data) {
            this.list[this.top] = data;
            this.top = this.top + 1 & kMask;
          }
          shift() {
            const nextItem = this.list[this.bottom];
            if (nextItem === void 0)
              return null;
            this.list[this.bottom] = void 0;
            this.bottom = this.bottom + 1 & kMask;
            return nextItem;
          }
        };
        __name(FixedCircularBuffer, "FixedCircularBuffer");
        module2.exports = /* @__PURE__ */ __name(class FixedQueue {
          constructor() {
            this.head = this.tail = new FixedCircularBuffer();
          }
          isEmpty() {
            return this.head.isEmpty();
          }
          push(data) {
            if (this.head.isFull()) {
              this.head = this.head.next = new FixedCircularBuffer();
            }
            this.head.push(data);
          }
          shift() {
            const tail = this.tail;
            const next = tail.shift();
            if (tail.isEmpty() && tail.next !== null) {
              this.tail = tail.next;
            }
            return next;
          }
        }, "FixedQueue");
      }
    });
    var require_pool_stats = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/pool-stats.js"(exports2, module2) {
        var { kFree, kConnected, kPending, kQueued, kRunning, kSize } = require_symbols();
        var kPool = Symbol("pool");
        var PoolStats = class {
          constructor(pool) {
            this[kPool] = pool;
          }
          get connected() {
            return this[kPool][kConnected];
          }
          get free() {
            return this[kPool][kFree];
          }
          get pending() {
            return this[kPool][kPending];
          }
          get queued() {
            return this[kPool][kQueued];
          }
          get running() {
            return this[kPool][kRunning];
          }
          get size() {
            return this[kPool][kSize];
          }
        };
        __name(PoolStats, "PoolStats");
        module2.exports = PoolStats;
      }
    });
    var require_pool_base = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/pool-base.js"(exports2, module2) {
        "use strict";
        var DispatcherBase = require_dispatcher_base();
        var FixedQueue = require_fixed_queue();
        var { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = require_symbols();
        var PoolStats = require_pool_stats();
        var kClients = Symbol("clients");
        var kNeedDrain = Symbol("needDrain");
        var kQueue = Symbol("queue");
        var kClosedResolve = Symbol("closed resolve");
        var kOnDrain = Symbol("onDrain");
        var kOnConnect = Symbol("onConnect");
        var kOnDisconnect = Symbol("onDisconnect");
        var kOnConnectionError = Symbol("onConnectionError");
        var kGetDispatcher = Symbol("get dispatcher");
        var kAddClient = Symbol("add client");
        var kRemoveClient = Symbol("remove client");
        var kStats = Symbol("stats");
        var PoolBase = class extends DispatcherBase {
          constructor() {
            super();
            this[kQueue] = new FixedQueue();
            this[kClients] = [];
            this[kQueued] = 0;
            const pool = this;
            this[kOnDrain] = /* @__PURE__ */ __name(function onDrain(origin, targets) {
              const queue = pool[kQueue];
              let needDrain = false;
              while (!needDrain) {
                const item = queue.shift();
                if (!item) {
                  break;
                }
                pool[kQueued]--;
                needDrain = !this.dispatch(item.opts, item.handler);
              }
              this[kNeedDrain] = needDrain;
              if (!this[kNeedDrain] && pool[kNeedDrain]) {
                pool[kNeedDrain] = false;
                pool.emit("drain", origin, [pool, ...targets]);
              }
              if (pool[kClosedResolve] && queue.isEmpty()) {
                Promise.all(pool[kClients].map((c) => c.close())).then(pool[kClosedResolve]);
              }
            }, "onDrain");
            this[kOnConnect] = (origin, targets) => {
              pool.emit("connect", origin, [pool, ...targets]);
            };
            this[kOnDisconnect] = (origin, targets, err) => {
              pool.emit("disconnect", origin, [pool, ...targets], err);
            };
            this[kOnConnectionError] = (origin, targets, err) => {
              pool.emit("connectionError", origin, [pool, ...targets], err);
            };
            this[kStats] = new PoolStats(this);
          }
          get [kBusy]() {
            return this[kNeedDrain];
          }
          get [kConnected]() {
            return this[kClients].filter((client) => client[kConnected]).length;
          }
          get [kFree]() {
            return this[kClients].filter((client) => client[kConnected] && !client[kNeedDrain]).length;
          }
          get [kPending]() {
            let ret = this[kQueued];
            for (const { [kPending]: pending } of this[kClients]) {
              ret += pending;
            }
            return ret;
          }
          get [kRunning]() {
            let ret = 0;
            for (const { [kRunning]: running } of this[kClients]) {
              ret += running;
            }
            return ret;
          }
          get [kSize]() {
            let ret = this[kQueued];
            for (const { [kSize]: size } of this[kClients]) {
              ret += size;
            }
            return ret;
          }
          get stats() {
            return this[kStats];
          }
          async [kClose]() {
            if (this[kQueue].isEmpty()) {
              return Promise.all(this[kClients].map((c) => c.close()));
            } else {
              return new Promise((resolve) => {
                this[kClosedResolve] = resolve;
              });
            }
          }
          async [kDestroy](err) {
            while (true) {
              const item = this[kQueue].shift();
              if (!item) {
                break;
              }
              item.handler.onError(err);
            }
            return Promise.all(this[kClients].map((c) => c.destroy(err)));
          }
          [kDispatch](opts, handler) {
            const dispatcher = this[kGetDispatcher]();
            if (!dispatcher) {
              this[kNeedDrain] = true;
              this[kQueue].push({ opts, handler });
              this[kQueued]++;
            } else if (!dispatcher.dispatch(opts, handler)) {
              dispatcher[kNeedDrain] = true;
              this[kNeedDrain] = !this[kGetDispatcher]();
            }
            return !this[kNeedDrain];
          }
          [kAddClient](client) {
            client.on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
            this[kClients].push(client);
            if (this[kNeedDrain]) {
              process.nextTick(() => {
                if (this[kNeedDrain]) {
                  this[kOnDrain](client[kUrl], [this, client]);
                }
              });
            }
            return this;
          }
          [kRemoveClient](client) {
            client.close(() => {
              const idx = this[kClients].indexOf(client);
              if (idx !== -1) {
                this[kClients].splice(idx, 1);
              }
            });
            this[kNeedDrain] = this[kClients].some((dispatcher) => !dispatcher[kNeedDrain] && dispatcher.closed !== true && dispatcher.destroyed !== true);
          }
        };
        __name(PoolBase, "PoolBase");
        module2.exports = {
          PoolBase,
          kClients,
          kNeedDrain,
          kAddClient,
          kRemoveClient,
          kGetDispatcher
        };
      }
    });
    var require_pool = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/pool.js"(exports2, module2) {
        "use strict";
        var {
          PoolBase,
          kClients,
          kNeedDrain,
          kAddClient,
          kGetDispatcher
        } = require_pool_base();
        var Client = require_client();
        var {
          InvalidArgumentError
        } = require_errors();
        var util2 = require_util2();
        var { kUrl } = require_symbols();
        var buildConnector = require_connect();
        var kOptions = Symbol("options");
        var kConnections = Symbol("connections");
        var kFactory = Symbol("factory");
        function defaultFactory(origin, opts) {
          return new Client(origin, opts);
        }
        __name(defaultFactory, "defaultFactory");
        var Pool = class extends PoolBase {
          constructor(origin, {
            connections,
            factory = defaultFactory,
            connect,
            connectTimeout,
            tls,
            maxCachedSessions,
            socketPath,
            ...options
          } = {}) {
            super();
            if (connections != null && (!Number.isFinite(connections) || connections < 0)) {
              throw new InvalidArgumentError("invalid connections");
            }
            if (typeof factory !== "function") {
              throw new InvalidArgumentError("factory must be a function.");
            }
            if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
              throw new InvalidArgumentError("connect must be a function or an object");
            }
            if (typeof connect !== "function") {
              connect = buildConnector({
                ...tls,
                maxCachedSessions,
                socketPath,
                timeout: connectTimeout == null ? 1e4 : connectTimeout,
                ...connect
              });
            }
            this[kConnections] = connections || null;
            this[kUrl] = util2.parseOrigin(origin);
            this[kOptions] = { ...util2.deepClone(options), connect };
            this[kFactory] = factory;
          }
          [kGetDispatcher]() {
            let dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain]);
            if (dispatcher) {
              return dispatcher;
            }
            if (!this[kConnections] || this[kClients].length < this[kConnections]) {
              dispatcher = this[kFactory](this[kUrl], this[kOptions]);
              this[kAddClient](dispatcher);
            }
            return dispatcher;
          }
        };
        __name(Pool, "Pool");
        module2.exports = Pool;
      }
    });
    var require_balanced_pool = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/balanced-pool.js"(exports2, module2) {
        "use strict";
        var {
          BalancedPoolMissingUpstreamError,
          InvalidArgumentError
        } = require_errors();
        var {
          PoolBase,
          kClients,
          kNeedDrain,
          kAddClient,
          kRemoveClient,
          kGetDispatcher
        } = require_pool_base();
        var Pool = require_pool();
        var { kUrl } = require_symbols();
        var { parseOrigin } = require_util2();
        var kFactory = Symbol("factory");
        var kOptions = Symbol("options");
        function defaultFactory(origin, opts) {
          return new Pool(origin, opts);
        }
        __name(defaultFactory, "defaultFactory");
        var BalancedPool = class extends PoolBase {
          constructor(upstreams = [], { factory = defaultFactory, ...opts } = {}) {
            super();
            this[kOptions] = opts;
            if (!Array.isArray(upstreams)) {
              upstreams = [upstreams];
            }
            if (typeof factory !== "function") {
              throw new InvalidArgumentError("factory must be a function.");
            }
            this[kFactory] = factory;
            for (const upstream of upstreams) {
              this.addUpstream(upstream);
            }
          }
          addUpstream(upstream) {
            const upstreamOrigin = parseOrigin(upstream).origin;
            if (this[kClients].find((pool) => pool[kUrl].origin === upstreamOrigin && pool.closed !== true && pool.destroyed !== true)) {
              return this;
            }
            this[kAddClient](this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions])));
            return this;
          }
          removeUpstream(upstream) {
            const upstreamOrigin = parseOrigin(upstream).origin;
            const pool = this[kClients].find((pool2) => pool2[kUrl].origin === upstreamOrigin && pool2.closed !== true && pool2.destroyed !== true);
            if (pool) {
              this[kRemoveClient](pool);
            }
            return this;
          }
          get upstreams() {
            return this[kClients].filter((dispatcher) => dispatcher.closed !== true && dispatcher.destroyed !== true).map((p) => p[kUrl].origin);
          }
          [kGetDispatcher]() {
            if (this[kClients].length === 0) {
              throw new BalancedPoolMissingUpstreamError();
            }
            const dispatcher = this[kClients].find((dispatcher2) => !dispatcher2[kNeedDrain] && dispatcher2.closed !== true && dispatcher2.destroyed !== true);
            if (!dispatcher) {
              return;
            }
            this[kClients].splice(this[kClients].indexOf(dispatcher), 1);
            this[kClients].push(dispatcher);
            return dispatcher;
          }
        };
        __name(BalancedPool, "BalancedPool");
        module2.exports = BalancedPool;
      }
    });
    var require_dispatcher_weakref = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/compat/dispatcher-weakref.js"(exports2, module2) {
        "use strict";
        var { kConnected, kSize } = require_symbols();
        var CompatWeakRef = class {
          constructor(value) {
            this.value = value;
          }
          deref() {
            return this.value[kConnected] === 0 && this.value[kSize] === 0 ? void 0 : this.value;
          }
        };
        __name(CompatWeakRef, "CompatWeakRef");
        var CompatFinalizer = class {
          constructor(finalizer) {
            this.finalizer = finalizer;
          }
          register(dispatcher, key) {
            dispatcher.on("disconnect", () => {
              if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {
                this.finalizer(key);
              }
            });
          }
        };
        __name(CompatFinalizer, "CompatFinalizer");
        module2.exports = function() {
          return {
            WeakRef: global.WeakRef || CompatWeakRef,
            FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
          };
        };
      }
    });
    var require_agent = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/agent.js"(exports2, module2) {
        "use strict";
        var { InvalidArgumentError } = require_errors();
        var { kClients, kRunning, kClose, kDestroy, kDispatch } = require_symbols();
        var DispatcherBase = require_dispatcher_base();
        var Pool = require_pool();
        var Client = require_client();
        var util2 = require_util2();
        var RedirectHandler = require_redirect();
        var { WeakRef: WeakRef2, FinalizationRegistry: FinalizationRegistry2 } = require_dispatcher_weakref()();
        var kOnConnect = Symbol("onConnect");
        var kOnDisconnect = Symbol("onDisconnect");
        var kOnConnectionError = Symbol("onConnectionError");
        var kMaxRedirections = Symbol("maxRedirections");
        var kOnDrain = Symbol("onDrain");
        var kFactory = Symbol("factory");
        var kFinalizer = Symbol("finalizer");
        var kOptions = Symbol("options");
        function defaultFactory(origin, opts) {
          return opts && opts.connections === 1 ? new Client(origin, opts) : new Pool(origin, opts);
        }
        __name(defaultFactory, "defaultFactory");
        var Agent = class extends DispatcherBase {
          constructor({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}) {
            super();
            if (typeof factory !== "function") {
              throw new InvalidArgumentError("factory must be a function.");
            }
            if (connect != null && typeof connect !== "function" && typeof connect !== "object") {
              throw new InvalidArgumentError("connect must be a function or an object");
            }
            if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {
              throw new InvalidArgumentError("maxRedirections must be a positive number");
            }
            if (connect && typeof connect !== "function") {
              connect = { ...connect };
            }
            this[kOptions] = { ...util2.deepClone(options), connect };
            this[kMaxRedirections] = maxRedirections;
            this[kFactory] = factory;
            this[kClients] = /* @__PURE__ */ new Map();
            this[kFinalizer] = new FinalizationRegistry2((key) => {
              const ref = this[kClients].get(key);
              if (ref !== void 0 && ref.deref() === void 0) {
                this[kClients].delete(key);
              }
            });
            const agent = this;
            this[kOnDrain] = (origin, targets) => {
              agent.emit("drain", origin, [agent, ...targets]);
            };
            this[kOnConnect] = (origin, targets) => {
              agent.emit("connect", origin, [agent, ...targets]);
            };
            this[kOnDisconnect] = (origin, targets, err) => {
              agent.emit("disconnect", origin, [agent, ...targets], err);
            };
            this[kOnConnectionError] = (origin, targets, err) => {
              agent.emit("connectionError", origin, [agent, ...targets], err);
            };
          }
          get [kRunning]() {
            let ret = 0;
            for (const ref of this[kClients].values()) {
              const client = ref.deref();
              if (client) {
                ret += client[kRunning];
              }
            }
            return ret;
          }
          [kDispatch](opts, handler) {
            let key;
            if (opts.origin && (typeof opts.origin === "string" || opts.origin instanceof URL)) {
              key = String(opts.origin);
            } else {
              throw new InvalidArgumentError("opts.origin must be a non-empty string or URL.");
            }
            const ref = this[kClients].get(key);
            let dispatcher = ref ? ref.deref() : null;
            if (!dispatcher) {
              dispatcher = this[kFactory](opts.origin, this[kOptions]).on("drain", this[kOnDrain]).on("connect", this[kOnConnect]).on("disconnect", this[kOnDisconnect]).on("connectionError", this[kOnConnectionError]);
              this[kClients].set(key, new WeakRef2(dispatcher));
              this[kFinalizer].register(dispatcher, key);
            }
            const { maxRedirections = this[kMaxRedirections] } = opts;
            if (maxRedirections != null && maxRedirections !== 0) {
              opts = { ...opts, maxRedirections: 0 };
              handler = new RedirectHandler(this, maxRedirections, opts, handler);
            }
            return dispatcher.dispatch(opts, handler);
          }
          async [kClose]() {
            const closePromises = [];
            for (const ref of this[kClients].values()) {
              const client = ref.deref();
              if (client) {
                closePromises.push(client.close());
              }
            }
            await Promise.all(closePromises);
          }
          async [kDestroy](err) {
            const destroyPromises = [];
            for (const ref of this[kClients].values()) {
              const client = ref.deref();
              if (client) {
                destroyPromises.push(client.destroy(err));
              }
            }
            await Promise.all(destroyPromises);
          }
        };
        __name(Agent, "Agent");
        module2.exports = Agent;
      }
    });
    var require_readable = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/api/readable.js"(exports2, module2) {
        "use strict";
        var assert = require("assert");
        var { Readable } = require("stream");
        var { RequestAbortedError, NotSupportedError } = require_errors();
        var util2 = require_util2();
        var { ReadableStreamFrom, toUSVString } = require_util2();
        var Blob;
        var kConsume = Symbol("kConsume");
        var kReading = Symbol("kReading");
        var kBody = Symbol("kBody");
        var kAbort = Symbol("abort");
        var kContentType = Symbol("kContentType");
        module2.exports = /* @__PURE__ */ __name(class BodyReadable extends Readable {
          constructor(resume, abort, contentType = "") {
            super({
              autoDestroy: true,
              read: resume,
              highWaterMark: 64 * 1024
            });
            this._readableState.dataEmitted = false;
            this[kAbort] = abort;
            this[kConsume] = null;
            this[kBody] = null;
            this[kContentType] = contentType;
            this[kReading] = false;
          }
          destroy(err) {
            if (this.destroyed) {
              return this;
            }
            if (!err && !this._readableState.endEmitted) {
              err = new RequestAbortedError();
            }
            if (err) {
              this[kAbort]();
            }
            return super.destroy(err);
          }
          emit(ev, ...args) {
            if (ev === "data") {
              this._readableState.dataEmitted = true;
            } else if (ev === "error") {
              this._readableState.errorEmitted = true;
            }
            return super.emit(ev, ...args);
          }
          on(ev, ...args) {
            if (ev === "data" || ev === "readable") {
              this[kReading] = true;
            }
            return super.on(ev, ...args);
          }
          addListener(ev, ...args) {
            return this.on(ev, ...args);
          }
          off(ev, ...args) {
            const ret = super.off(ev, ...args);
            if (ev === "data" || ev === "readable") {
              this[kReading] = this.listenerCount("data") > 0 || this.listenerCount("readable") > 0;
            }
            return ret;
          }
          removeListener(ev, ...args) {
            return this.off(ev, ...args);
          }
          push(chunk) {
            if (this[kConsume] && chunk !== null) {
              consumePush(this[kConsume], chunk);
              return this[kReading] ? super.push(chunk) : true;
            }
            return super.push(chunk);
          }
          async text() {
            return consume(this, "text");
          }
          async json() {
            return consume(this, "json");
          }
          async blob() {
            return consume(this, "blob");
          }
          async arrayBuffer() {
            return consume(this, "arrayBuffer");
          }
          async formData() {
            throw new NotSupportedError();
          }
          get bodyUsed() {
            return util2.isDisturbed(this);
          }
          get body() {
            if (!this[kBody]) {
              this[kBody] = ReadableStreamFrom(this);
              if (this[kConsume]) {
                this[kBody].getReader();
                assert(this[kBody].locked);
              }
            }
            return this[kBody];
          }
          async dump(opts) {
            let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144;
            try {
              for await (const chunk of this) {
                limit -= Buffer.byteLength(chunk);
                if (limit < 0) {
                  return;
                }
              }
            } catch (e) {
            }
          }
        }, "BodyReadable");
        function isLocked(self2) {
          return self2[kBody] && self2[kBody].locked === true || self2[kConsume];
        }
        __name(isLocked, "isLocked");
        function isUnusable(self2) {
          return util2.isDisturbed(self2) || isLocked(self2);
        }
        __name(isUnusable, "isUnusable");
        async function consume(stream2, type) {
          if (isUnusable(stream2)) {
            throw new TypeError("unusable");
          }
          assert(!stream2[kConsume]);
          return new Promise((resolve, reject) => {
            stream2[kConsume] = {
              type,
              stream: stream2,
              resolve,
              reject,
              length: 0,
              body: []
            };
            stream2.on("error", function(err) {
              consumeFinish(this[kConsume], err);
            }).on("close", function() {
              if (this[kConsume].body !== null) {
                consumeFinish(this[kConsume], new RequestAbortedError());
              }
            });
            process.nextTick(consumeStart, stream2[kConsume]);
          });
        }
        __name(consume, "consume");
        function consumeStart(consume2) {
          if (consume2.body === null) {
            return;
          }
          const { _readableState: state } = consume2.stream;
          for (const chunk of state.buffer) {
            consumePush(consume2, chunk);
          }
          if (state.endEmitted) {
            consumeEnd(this[kConsume]);
          } else {
            consume2.stream.on("end", function() {
              consumeEnd(this[kConsume]);
            });
          }
          consume2.stream.resume();
          while (consume2.stream.read() != null) {
          }
        }
        __name(consumeStart, "consumeStart");
        function consumeEnd(consume2) {
          const { type, body, resolve, stream: stream2, length } = consume2;
          try {
            if (type === "text") {
              resolve(toUSVString(Buffer.concat(body)));
            } else if (type === "json") {
              resolve(JSON.parse(Buffer.concat(body)));
            } else if (type === "arrayBuffer") {
              const dst = new Uint8Array(length);
              let pos = 0;
              for (const buf of body) {
                dst.set(buf, pos);
                pos += buf.byteLength;
              }
              resolve(dst);
            } else if (type === "blob") {
              if (!Blob) {
                Blob = require("buffer").Blob;
              }
              resolve(new Blob(body, { type: stream2[kContentType] }));
            }
            consumeFinish(consume2);
          } catch (err) {
            stream2.destroy(err);
          }
        }
        __name(consumeEnd, "consumeEnd");
        function consumePush(consume2, chunk) {
          consume2.length += chunk.length;
          consume2.body.push(chunk);
        }
        __name(consumePush, "consumePush");
        function consumeFinish(consume2, err) {
          if (consume2.body === null) {
            return;
          }
          if (err) {
            consume2.reject(err);
          } else {
            consume2.resolve();
          }
          consume2.type = null;
          consume2.stream = null;
          consume2.resolve = null;
          consume2.reject = null;
          consume2.length = 0;
          consume2.body = null;
        }
        __name(consumeFinish, "consumeFinish");
      }
    });
    var require_abort_signal = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/api/abort-signal.js"(exports2, module2) {
        var { RequestAbortedError } = require_errors();
        var kListener = Symbol("kListener");
        var kSignal = Symbol("kSignal");
        function abort(self2) {
          if (self2.abort) {
            self2.abort();
          } else {
            self2.onError(new RequestAbortedError());
          }
        }
        __name(abort, "abort");
        function addSignal(self2, signal) {
          self2[kSignal] = null;
          self2[kListener] = null;
          if (!signal) {
            return;
          }
          if (signal.aborted) {
            abort(self2);
            return;
          }
          self2[kSignal] = signal;
          self2[kListener] = () => {
            abort(self2);
          };
          if ("addEventListener" in self2[kSignal]) {
            self2[kSignal].addEventListener("abort", self2[kListener]);
          } else {
            self2[kSignal].addListener("abort", self2[kListener]);
          }
        }
        __name(addSignal, "addSignal");
        function removeSignal(self2) {
          if (!self2[kSignal]) {
            return;
          }
          if ("removeEventListener" in self2[kSignal]) {
            self2[kSignal].removeEventListener("abort", self2[kListener]);
          } else {
            self2[kSignal].removeListener("abort", self2[kListener]);
          }
          self2[kSignal] = null;
          self2[kListener] = null;
        }
        __name(removeSignal, "removeSignal");
        module2.exports = {
          addSignal,
          removeSignal
        };
      }
    });
    var require_api_request = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/api/api-request.js"(exports2, module2) {
        "use strict";
        var Readable = require_readable();
        var {
          InvalidArgumentError,
          RequestAbortedError,
          ResponseStatusCodeError
        } = require_errors();
        var util2 = require_util2();
        var { AsyncResource: AsyncResource2 } = require("async_hooks");
        var { addSignal, removeSignal } = require_abort_signal();
        var RequestHandler2 = class extends AsyncResource2 {
          constructor(opts, callback) {
            if (!opts || typeof opts !== "object") {
              throw new InvalidArgumentError("invalid opts");
            }
            const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts;
            try {
              if (typeof callback !== "function") {
                throw new InvalidArgumentError("invalid callback");
              }
              if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
                throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
              }
              if (method === "CONNECT") {
                throw new InvalidArgumentError("invalid method");
              }
              if (onInfo && typeof onInfo !== "function") {
                throw new InvalidArgumentError("invalid onInfo callback");
              }
              super("UNDICI_REQUEST");
            } catch (err) {
              if (util2.isStream(body)) {
                util2.destroy(body.on("error", util2.nop), err);
              }
              throw err;
            }
            this.responseHeaders = responseHeaders || null;
            this.opaque = opaque || null;
            this.callback = callback;
            this.res = null;
            this.abort = null;
            this.body = body;
            this.trailers = {};
            this.context = null;
            this.onInfo = onInfo || null;
            this.throwOnError = throwOnError;
            if (util2.isStream(body)) {
              body.on("error", (err) => {
                this.onError(err);
              });
            }
            addSignal(this, signal);
          }
          onConnect(abort, context3) {
            if (!this.callback) {
              throw new RequestAbortedError();
            }
            this.abort = abort;
            this.context = context3;
          }
          onHeaders(statusCode, rawHeaders, resume, statusMessage) {
            const { callback, opaque, abort, context: context3 } = this;
            if (statusCode < 200) {
              if (this.onInfo) {
                const headers2 = this.responseHeaders === "raw" ? util2.parseRawHeaders(rawHeaders) : util2.parseHeaders(rawHeaders);
                this.onInfo({ statusCode, headers: headers2 });
              }
              return;
            }
            const parsedHeaders = util2.parseHeaders(rawHeaders);
            const contentType = parsedHeaders["content-type"];
            const body = new Readable(resume, abort, contentType);
            this.callback = null;
            this.res = body;
            const headers = this.responseHeaders === "raw" ? util2.parseRawHeaders(rawHeaders) : util2.parseHeaders(rawHeaders);
            if (callback !== null) {
              if (this.throwOnError && statusCode >= 400) {
                this.runInAsyncScope(getResolveErrorBodyCallback, null, { callback, body, contentType, statusCode, statusMessage, headers });
                return;
              }
              this.runInAsyncScope(callback, null, null, {
                statusCode,
                headers,
                trailers: this.trailers,
                opaque,
                body,
                context: context3
              });
            }
          }
          onData(chunk) {
            const { res } = this;
            return res.push(chunk);
          }
          onComplete(trailers) {
            const { res } = this;
            removeSignal(this);
            util2.parseHeaders(trailers, this.trailers);
            res.push(null);
          }
          onError(err) {
            const { res, callback, body, opaque } = this;
            removeSignal(this);
            if (callback) {
              this.callback = null;
              queueMicrotask(() => {
                this.runInAsyncScope(callback, null, err, { opaque });
              });
            }
            if (res) {
              this.res = null;
              queueMicrotask(() => {
                util2.destroy(res, err);
              });
            }
            if (body) {
              this.body = null;
              util2.destroy(body, err);
            }
          }
        };
        __name(RequestHandler2, "RequestHandler");
        async function getResolveErrorBodyCallback({ callback, body, contentType, statusCode, statusMessage, headers }) {
          if (statusCode === 204 || !contentType) {
            body.dump();
            process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
            return;
          }
          try {
            if (contentType.startsWith("application/json")) {
              const payload = await body.json();
              process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
              return;
            }
            if (contentType.startsWith("text/")) {
              const payload = await body.text();
              process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers, payload));
              return;
            }
          } catch (err) {
          }
          body.dump();
          process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ""}`, statusCode, headers));
        }
        __name(getResolveErrorBodyCallback, "getResolveErrorBodyCallback");
        function request2(opts, callback) {
          if (callback === void 0) {
            return new Promise((resolve, reject) => {
              request2.call(this, opts, (err, data) => {
                return err ? reject(err) : resolve(data);
              });
            });
          }
          try {
            this.dispatch(opts, new RequestHandler2(opts, callback));
          } catch (err) {
            if (typeof callback !== "function") {
              throw err;
            }
            const opaque = opts && opts.opaque;
            queueMicrotask(() => callback(err, { opaque }));
          }
        }
        __name(request2, "request");
        module2.exports = request2;
      }
    });
    var require_api_stream = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/api/api-stream.js"(exports2, module2) {
        "use strict";
        var { finished } = require("stream");
        var {
          InvalidArgumentError,
          InvalidReturnValueError,
          RequestAbortedError
        } = require_errors();
        var util2 = require_util2();
        var { AsyncResource: AsyncResource2 } = require("async_hooks");
        var { addSignal, removeSignal } = require_abort_signal();
        var StreamHandler = class extends AsyncResource2 {
          constructor(opts, factory, callback) {
            if (!opts || typeof opts !== "object") {
              throw new InvalidArgumentError("invalid opts");
            }
            const { signal, method, opaque, body, onInfo, responseHeaders } = opts;
            try {
              if (typeof callback !== "function") {
                throw new InvalidArgumentError("invalid callback");
              }
              if (typeof factory !== "function") {
                throw new InvalidArgumentError("invalid factory");
              }
              if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
                throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
              }
              if (method === "CONNECT") {
                throw new InvalidArgumentError("invalid method");
              }
              if (onInfo && typeof onInfo !== "function") {
                throw new InvalidArgumentError("invalid onInfo callback");
              }
              super("UNDICI_STREAM");
            } catch (err) {
              if (util2.isStream(body)) {
                util2.destroy(body.on("error", util2.nop), err);
              }
              throw err;
            }
            this.responseHeaders = responseHeaders || null;
            this.opaque = opaque || null;
            this.factory = factory;
            this.callback = callback;
            this.res = null;
            this.abort = null;
            this.context = null;
            this.trailers = null;
            this.body = body;
            this.onInfo = onInfo || null;
            if (util2.isStream(body)) {
              body.on("error", (err) => {
                this.onError(err);
              });
            }
            addSignal(this, signal);
          }
          onConnect(abort, context3) {
            if (!this.callback) {
              throw new RequestAbortedError();
            }
            this.abort = abort;
            this.context = context3;
          }
          onHeaders(statusCode, rawHeaders, resume) {
            const { factory, opaque, context: context3 } = this;
            if (statusCode < 200) {
              if (this.onInfo) {
                const headers2 = this.responseHeaders === "raw" ? util2.parseRawHeaders(rawHeaders) : util2.parseHeaders(rawHeaders);
                this.onInfo({ statusCode, headers: headers2 });
              }
              return;
            }
            this.factory = null;
            const headers = this.responseHeaders === "raw" ? util2.parseRawHeaders(rawHeaders) : util2.parseHeaders(rawHeaders);
            const res = this.runInAsyncScope(factory, null, {
              statusCode,
              headers,
              opaque,
              context: context3
            });
            if (!res || typeof res.write !== "function" || typeof res.end !== "function" || typeof res.on !== "function") {
              throw new InvalidReturnValueError("expected Writable");
            }
            res.on("drain", resume);
            finished(res, { readable: false }, (err) => {
              const { callback, res: res2, opaque: opaque2, trailers, abort } = this;
              this.res = null;
              if (err || !res2.readable) {
                util2.destroy(res2, err);
              }
              this.callback = null;
              this.runInAsyncScope(callback, null, err || null, { opaque: opaque2, trailers });
              if (err) {
                abort();
              }
            });
            this.res = res;
            const needDrain = res.writableNeedDrain !== void 0 ? res.writableNeedDrain : res._writableState && res._writableState.needDrain;
            return needDrain !== true;
          }
          onData(chunk) {
            const { res } = this;
            return res.write(chunk);
          }
          onComplete(trailers) {
            const { res } = this;
            removeSignal(this);
            this.trailers = util2.parseHeaders(trailers);
            res.end();
          }
          onError(err) {
            const { res, callback, opaque, body } = this;
            removeSignal(this);
            this.factory = null;
            if (res) {
              this.res = null;
              util2.destroy(res, err);
            } else if (callback) {
              this.callback = null;
              queueMicrotask(() => {
                this.runInAsyncScope(callback, null, err, { opaque });
              });
            }
            if (body) {
              this.body = null;
              util2.destroy(body, err);
            }
          }
        };
        __name(StreamHandler, "StreamHandler");
        function stream2(opts, factory, callback) {
          if (callback === void 0) {
            return new Promise((resolve, reject) => {
              stream2.call(this, opts, factory, (err, data) => {
                return err ? reject(err) : resolve(data);
              });
            });
          }
          try {
            this.dispatch(opts, new StreamHandler(opts, factory, callback));
          } catch (err) {
            if (typeof callback !== "function") {
              throw err;
            }
            const opaque = opts && opts.opaque;
            queueMicrotask(() => callback(err, { opaque }));
          }
        }
        __name(stream2, "stream");
        module2.exports = stream2;
      }
    });
    var require_api_pipeline = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/api/api-pipeline.js"(exports2, module2) {
        "use strict";
        var {
          Readable,
          Duplex,
          PassThrough
        } = require("stream");
        var {
          InvalidArgumentError,
          InvalidReturnValueError,
          RequestAbortedError
        } = require_errors();
        var util2 = require_util2();
        var { AsyncResource: AsyncResource2 } = require("async_hooks");
        var { addSignal, removeSignal } = require_abort_signal();
        var assert = require("assert");
        var kResume = Symbol("resume");
        var PipelineRequest = class extends Readable {
          constructor() {
            super({ autoDestroy: true });
            this[kResume] = null;
          }
          _read() {
            const { [kResume]: resume } = this;
            if (resume) {
              this[kResume] = null;
              resume();
            }
          }
          _destroy(err, callback) {
            this._read();
            callback(err);
          }
        };
        __name(PipelineRequest, "PipelineRequest");
        var PipelineResponse = class extends Readable {
          constructor(resume) {
            super({ autoDestroy: true });
            this[kResume] = resume;
          }
          _read() {
            this[kResume]();
          }
          _destroy(err, callback) {
            if (!err && !this._readableState.endEmitted) {
              err = new RequestAbortedError();
            }
            callback(err);
          }
        };
        __name(PipelineResponse, "PipelineResponse");
        var PipelineHandler = class extends AsyncResource2 {
          constructor(opts, handler) {
            if (!opts || typeof opts !== "object") {
              throw new InvalidArgumentError("invalid opts");
            }
            if (typeof handler !== "function") {
              throw new InvalidArgumentError("invalid handler");
            }
            const { signal, method, opaque, onInfo, responseHeaders } = opts;
            if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
              throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
            }
            if (method === "CONNECT") {
              throw new InvalidArgumentError("invalid method");
            }
            if (onInfo && typeof onInfo !== "function") {
              throw new InvalidArgumentError("invalid onInfo callback");
            }
            super("UNDICI_PIPELINE");
            this.opaque = opaque || null;
            this.responseHeaders = responseHeaders || null;
            this.handler = handler;
            this.abort = null;
            this.context = null;
            this.onInfo = onInfo || null;
            this.req = new PipelineRequest().on("error", util2.nop);
            this.ret = new Duplex({
              readableObjectMode: opts.objectMode,
              autoDestroy: true,
              read: () => {
                const { body } = this;
                if (body && body.resume) {
                  body.resume();
                }
              },
              write: (chunk, encoding, callback) => {
                const { req } = this;
                if (req.push(chunk, encoding) || req._readableState.destroyed) {
                  callback();
                } else {
                  req[kResume] = callback;
                }
              },
              destroy: (err, callback) => {
                const { body, req, res, ret, abort } = this;
                if (!err && !ret._readableState.endEmitted) {
                  err = new RequestAbortedError();
                }
                if (abort && err) {
                  abort();
                }
                util2.destroy(body, err);
                util2.destroy(req, err);
                util2.destroy(res, err);
                removeSignal(this);
                callback(err);
              }
            }).on("prefinish", () => {
              const { req } = this;
              req.push(null);
            });
            this.res = null;
            addSignal(this, signal);
          }
          onConnect(abort, context3) {
            const { ret, res } = this;
            assert(!res, "pipeline cannot be retried");
            if (ret.destroyed) {
              throw new RequestAbortedError();
            }
            this.abort = abort;
            this.context = context3;
          }
          onHeaders(statusCode, rawHeaders, resume) {
            const { opaque, handler, context: context3 } = this;
            if (statusCode < 200) {
              if (this.onInfo) {
                const headers = this.responseHeaders === "raw" ? util2.parseRawHeaders(rawHeaders) : util2.parseHeaders(rawHeaders);
                this.onInfo({ statusCode, headers });
              }
              return;
            }
            this.res = new PipelineResponse(resume);
            let body;
            try {
              this.handler = null;
              const headers = this.responseHeaders === "raw" ? util2.parseRawHeaders(rawHeaders) : util2.parseHeaders(rawHeaders);
              body = this.runInAsyncScope(handler, null, {
                statusCode,
                headers,
                opaque,
                body: this.res,
                context: context3
              });
            } catch (err) {
              this.res.on("error", util2.nop);
              throw err;
            }
            if (!body || typeof body.on !== "function") {
              throw new InvalidReturnValueError("expected Readable");
            }
            body.on("data", (chunk) => {
              const { ret, body: body2 } = this;
              if (!ret.push(chunk) && body2.pause) {
                body2.pause();
              }
            }).on("error", (err) => {
              const { ret } = this;
              util2.destroy(ret, err);
            }).on("end", () => {
              const { ret } = this;
              ret.push(null);
            }).on("close", () => {
              const { ret } = this;
              if (!ret._readableState.ended) {
                util2.destroy(ret, new RequestAbortedError());
              }
            });
            this.body = body;
          }
          onData(chunk) {
            const { res } = this;
            return res.push(chunk);
          }
          onComplete(trailers) {
            const { res } = this;
            res.push(null);
          }
          onError(err) {
            const { ret } = this;
            this.handler = null;
            util2.destroy(ret, err);
          }
        };
        __name(PipelineHandler, "PipelineHandler");
        function pipeline(opts, handler) {
          try {
            const pipelineHandler = new PipelineHandler(opts, handler);
            this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler);
            return pipelineHandler.ret;
          } catch (err) {
            return new PassThrough().destroy(err);
          }
        }
        __name(pipeline, "pipeline");
        module2.exports = pipeline;
      }
    });
    var require_api_upgrade = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/api/api-upgrade.js"(exports2, module2) {
        "use strict";
        var { InvalidArgumentError, RequestAbortedError, SocketError } = require_errors();
        var { AsyncResource: AsyncResource2 } = require("async_hooks");
        var util2 = require_util2();
        var { addSignal, removeSignal } = require_abort_signal();
        var assert = require("assert");
        var UpgradeHandler = class extends AsyncResource2 {
          constructor(opts, callback) {
            if (!opts || typeof opts !== "object") {
              throw new InvalidArgumentError("invalid opts");
            }
            if (typeof callback !== "function") {
              throw new InvalidArgumentError("invalid callback");
            }
            const { signal, opaque, responseHeaders } = opts;
            if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
              throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
            }
            super("UNDICI_UPGRADE");
            this.responseHeaders = responseHeaders || null;
            this.opaque = opaque || null;
            this.callback = callback;
            this.abort = null;
            this.context = null;
            addSignal(this, signal);
          }
          onConnect(abort, context3) {
            if (!this.callback) {
              throw new RequestAbortedError();
            }
            this.abort = abort;
            this.context = null;
          }
          onHeaders() {
            throw new SocketError("bad upgrade", null);
          }
          onUpgrade(statusCode, rawHeaders, socket) {
            const { callback, opaque, context: context3 } = this;
            assert.strictEqual(statusCode, 101);
            removeSignal(this);
            this.callback = null;
            const headers = this.responseHeaders === "raw" ? util2.parseRawHeaders(rawHeaders) : util2.parseHeaders(rawHeaders);
            this.runInAsyncScope(callback, null, null, {
              headers,
              socket,
              opaque,
              context: context3
            });
          }
          onError(err) {
            const { callback, opaque } = this;
            removeSignal(this);
            if (callback) {
              this.callback = null;
              queueMicrotask(() => {
                this.runInAsyncScope(callback, null, err, { opaque });
              });
            }
          }
        };
        __name(UpgradeHandler, "UpgradeHandler");
        function upgrade(opts, callback) {
          if (callback === void 0) {
            return new Promise((resolve, reject) => {
              upgrade.call(this, opts, (err, data) => {
                return err ? reject(err) : resolve(data);
              });
            });
          }
          try {
            const upgradeHandler = new UpgradeHandler(opts, callback);
            this.dispatch({
              ...opts,
              method: opts.method || "GET",
              upgrade: opts.protocol || "Websocket"
            }, upgradeHandler);
          } catch (err) {
            if (typeof callback !== "function") {
              throw err;
            }
            const opaque = opts && opts.opaque;
            queueMicrotask(() => callback(err, { opaque }));
          }
        }
        __name(upgrade, "upgrade");
        module2.exports = upgrade;
      }
    });
    var require_api_connect = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/api/api-connect.js"(exports2, module2) {
        "use strict";
        var { InvalidArgumentError, RequestAbortedError, SocketError } = require_errors();
        var { AsyncResource: AsyncResource2 } = require("async_hooks");
        var util2 = require_util2();
        var { addSignal, removeSignal } = require_abort_signal();
        var ConnectHandler = class extends AsyncResource2 {
          constructor(opts, callback) {
            if (!opts || typeof opts !== "object") {
              throw new InvalidArgumentError("invalid opts");
            }
            if (typeof callback !== "function") {
              throw new InvalidArgumentError("invalid callback");
            }
            const { signal, opaque, responseHeaders } = opts;
            if (signal && typeof signal.on !== "function" && typeof signal.addEventListener !== "function") {
              throw new InvalidArgumentError("signal must be an EventEmitter or EventTarget");
            }
            super("UNDICI_CONNECT");
            this.opaque = opaque || null;
            this.responseHeaders = responseHeaders || null;
            this.callback = callback;
            this.abort = null;
            addSignal(this, signal);
          }
          onConnect(abort, context3) {
            if (!this.callback) {
              throw new RequestAbortedError();
            }
            this.abort = abort;
            this.context = context3;
          }
          onHeaders() {
            throw new SocketError("bad connect", null);
          }
          onUpgrade(statusCode, rawHeaders, socket) {
            const { callback, opaque, context: context3 } = this;
            removeSignal(this);
            this.callback = null;
            const headers = this.responseHeaders === "raw" ? util2.parseRawHeaders(rawHeaders) : util2.parseHeaders(rawHeaders);
            this.runInAsyncScope(callback, null, null, {
              statusCode,
              headers,
              socket,
              opaque,
              context: context3
            });
          }
          onError(err) {
            const { callback, opaque } = this;
            removeSignal(this);
            if (callback) {
              this.callback = null;
              queueMicrotask(() => {
                this.runInAsyncScope(callback, null, err, { opaque });
              });
            }
          }
        };
        __name(ConnectHandler, "ConnectHandler");
        function connect(opts, callback) {
          if (callback === void 0) {
            return new Promise((resolve, reject) => {
              connect.call(this, opts, (err, data) => {
                return err ? reject(err) : resolve(data);
              });
            });
          }
          try {
            const connectHandler = new ConnectHandler(opts, callback);
            this.dispatch({ ...opts, method: "CONNECT" }, connectHandler);
          } catch (err) {
            if (typeof callback !== "function") {
              throw err;
            }
            const opaque = opts && opts.opaque;
            queueMicrotask(() => callback(err, { opaque }));
          }
        }
        __name(connect, "connect");
        module2.exports = connect;
      }
    });
    var require_api = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/api/index.js"(exports2, module2) {
        "use strict";
        module2.exports.request = require_api_request();
        module2.exports.stream = require_api_stream();
        module2.exports.pipeline = require_api_pipeline();
        module2.exports.upgrade = require_api_upgrade();
        module2.exports.connect = require_api_connect();
      }
    });
    var require_mock_errors = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/mock/mock-errors.js"(exports2, module2) {
        "use strict";
        var { UndiciError } = require_errors();
        var MockNotMatchedError = class extends UndiciError {
          constructor(message) {
            super(message);
            Error.captureStackTrace(this, MockNotMatchedError);
            this.name = "MockNotMatchedError";
            this.message = message || "The request does not match any registered mock dispatches";
            this.code = "UND_MOCK_ERR_MOCK_NOT_MATCHED";
          }
        };
        __name(MockNotMatchedError, "MockNotMatchedError");
        module2.exports = {
          MockNotMatchedError
        };
      }
    });
    var require_mock_symbols = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/mock/mock-symbols.js"(exports2, module2) {
        "use strict";
        module2.exports = {
          kAgent: Symbol("agent"),
          kOptions: Symbol("options"),
          kFactory: Symbol("factory"),
          kDispatches: Symbol("dispatches"),
          kDispatchKey: Symbol("dispatch key"),
          kDefaultHeaders: Symbol("default headers"),
          kDefaultTrailers: Symbol("default trailers"),
          kContentLength: Symbol("content length"),
          kMockAgent: Symbol("mock agent"),
          kMockAgentSet: Symbol("mock agent set"),
          kMockAgentGet: Symbol("mock agent get"),
          kMockDispatch: Symbol("mock dispatch"),
          kClose: Symbol("close"),
          kOriginalClose: Symbol("original agent close"),
          kOrigin: Symbol("origin"),
          kIsMockActive: Symbol("is mock active"),
          kNetConnect: Symbol("net connect"),
          kGetNetConnect: Symbol("get net connect"),
          kConnected: Symbol("connected")
        };
      }
    });
    var require_mock_utils = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/mock/mock-utils.js"(exports2, module2) {
        "use strict";
        var { MockNotMatchedError } = require_mock_errors();
        var {
          kDispatches,
          kMockAgent,
          kOriginalDispatch,
          kOrigin,
          kGetNetConnect
        } = require_mock_symbols();
        var { buildURL } = require_util2();
        function matchValue(match, value) {
          if (typeof match === "string") {
            return match === value;
          }
          if (match instanceof RegExp) {
            return match.test(value);
          }
          if (typeof match === "function") {
            return match(value) === true;
          }
          return false;
        }
        __name(matchValue, "matchValue");
        function lowerCaseEntries(headers) {
          return Object.fromEntries(Object.entries(headers).map(([headerName, headerValue]) => {
            return [headerName.toLocaleLowerCase(), headerValue];
          }));
        }
        __name(lowerCaseEntries, "lowerCaseEntries");
        function getHeaderByName(headers, key) {
          if (Array.isArray(headers)) {
            for (let i = 0; i < headers.length; i += 2) {
              if (headers[i] === key) {
                return headers[i + 1];
              }
            }
            return void 0;
          } else if (typeof headers.get === "function") {
            return headers.get(key);
          } else {
            return headers[key];
          }
        }
        __name(getHeaderByName, "getHeaderByName");
        function matchHeaders(mockDispatch2, headers) {
          if (typeof mockDispatch2.headers === "function") {
            if (Array.isArray(headers)) {
              const clone2 = headers.slice();
              const entries = [];
              for (let index = 0; index < clone2.length; index += 2) {
                entries.push([clone2[index], clone2[index + 1]]);
              }
              headers = Object.fromEntries(entries);
            }
            return mockDispatch2.headers(headers ? lowerCaseEntries(headers) : {});
          }
          if (typeof mockDispatch2.headers === "undefined") {
            return true;
          }
          if (typeof headers !== "object" || typeof mockDispatch2.headers !== "object") {
            return false;
          }
          for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch2.headers)) {
            const headerValue = getHeaderByName(headers, matchHeaderName);
            if (!matchValue(matchHeaderValue, headerValue)) {
              return false;
            }
          }
          return true;
        }
        __name(matchHeaders, "matchHeaders");
        function matchKey(mockDispatch2, { path: path7, method, body, headers }) {
          const pathMatch = matchValue(mockDispatch2.path, path7);
          const methodMatch = matchValue(mockDispatch2.method, method);
          const bodyMatch = typeof mockDispatch2.body !== "undefined" ? matchValue(mockDispatch2.body, body) : true;
          const headersMatch = matchHeaders(mockDispatch2, headers);
          return pathMatch && methodMatch && bodyMatch && headersMatch;
        }
        __name(matchKey, "matchKey");
        function getResponseData(data) {
          if (Buffer.isBuffer(data)) {
            return data;
          } else if (typeof data === "object") {
            return JSON.stringify(data);
          } else {
            return data.toString();
          }
        }
        __name(getResponseData, "getResponseData");
        function getMockDispatch(mockDispatches, key) {
          const resolvedPath = key.query ? buildURL(key.path, key.query) : key.path;
          let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path: path7 }) => matchValue(path7, resolvedPath));
          if (matchedMockDispatches.length === 0) {
            throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`);
          }
          matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method));
          if (matchedMockDispatches.length === 0) {
            throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`);
          }
          matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== "undefined" ? matchValue(body, key.body) : true);
          if (matchedMockDispatches.length === 0) {
            throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`);
          }
          matchedMockDispatches = matchedMockDispatches.filter((mockDispatch2) => matchHeaders(mockDispatch2, key.headers));
          if (matchedMockDispatches.length === 0) {
            throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === "object" ? JSON.stringify(key.headers) : key.headers}'`);
          }
          return matchedMockDispatches[0];
        }
        __name(getMockDispatch, "getMockDispatch");
        function addMockDispatch(mockDispatches, key, data) {
          const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false };
          const replyData = typeof data === "function" ? { callback: data } : { ...data };
          const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } };
          mockDispatches.push(newMockDispatch);
          return newMockDispatch;
        }
        __name(addMockDispatch, "addMockDispatch");
        function deleteMockDispatch(mockDispatches, key) {
          const index = mockDispatches.findIndex((dispatch) => {
            if (!dispatch.consumed) {
              return false;
            }
            return matchKey(dispatch, key);
          });
          if (index !== -1) {
            mockDispatches.splice(index, 1);
          }
        }
        __name(deleteMockDispatch, "deleteMockDispatch");
        function buildKey(opts) {
          const { path: path7, method, body, headers, query: query2 } = opts;
          return {
            path: path7,
            method,
            body,
            headers,
            query: query2
          };
        }
        __name(buildKey, "buildKey");
        function generateKeyValues(data) {
          return Object.entries(data).reduce((keyValuePairs, [key, value]) => [...keyValuePairs, key, value], []);
        }
        __name(generateKeyValues, "generateKeyValues");
        function getStatusText(statusCode) {
          switch (statusCode) {
            case 100:
              return "Continue";
            case 101:
              return "Switching Protocols";
            case 102:
              return "Processing";
            case 103:
              return "Early Hints";
            case 200:
              return "OK";
            case 201:
              return "Created";
            case 202:
              return "Accepted";
            case 203:
              return "Non-Authoritative Information";
            case 204:
              return "No Content";
            case 205:
              return "Reset Content";
            case 206:
              return "Partial Content";
            case 207:
              return "Multi-Status";
            case 208:
              return "Already Reported";
            case 226:
              return "IM Used";
            case 300:
              return "Multiple Choice";
            case 301:
              return "Moved Permanently";
            case 302:
              return "Found";
            case 303:
              return "See Other";
            case 304:
              return "Not Modified";
            case 305:
              return "Use Proxy";
            case 306:
              return "unused";
            case 307:
              return "Temporary Redirect";
            case 308:
              return "Permanent Redirect";
            case 400:
              return "Bad Request";
            case 401:
              return "Unauthorized";
            case 402:
              return "Payment Required";
            case 403:
              return "Forbidden";
            case 404:
              return "Not Found";
            case 405:
              return "Method Not Allowed";
            case 406:
              return "Not Acceptable";
            case 407:
              return "Proxy Authentication Required";
            case 408:
              return "Request Timeout";
            case 409:
              return "Conflict";
            case 410:
              return "Gone";
            case 411:
              return "Length Required";
            case 412:
              return "Precondition Failed";
            case 413:
              return "Payload Too Large";
            case 414:
              return "URI Too Large";
            case 415:
              return "Unsupported Media Type";
            case 416:
              return "Range Not Satisfiable";
            case 417:
              return "Expectation Failed";
            case 418:
              return "I'm a teapot";
            case 421:
              return "Misdirected Request";
            case 422:
              return "Unprocessable Entity";
            case 423:
              return "Locked";
            case 424:
              return "Failed Dependency";
            case 425:
              return "Too Early";
            case 426:
              return "Upgrade Required";
            case 428:
              return "Precondition Required";
            case 429:
              return "Too Many Requests";
            case 431:
              return "Request Header Fields Too Large";
            case 451:
              return "Unavailable For Legal Reasons";
            case 500:
              return "Internal Server Error";
            case 501:
              return "Not Implemented";
            case 502:
              return "Bad Gateway";
            case 503:
              return "Service Unavailable";
            case 504:
              return "Gateway Timeout";
            case 505:
              return "HTTP Version Not Supported";
            case 506:
              return "Variant Also Negotiates";
            case 507:
              return "Insufficient Storage";
            case 508:
              return "Loop Detected";
            case 510:
              return "Not Extended";
            case 511:
              return "Network Authentication Required";
            default:
              return "unknown";
          }
        }
        __name(getStatusText, "getStatusText");
        async function getResponse(body) {
          const buffers = [];
          for await (const data of body) {
            buffers.push(data);
          }
          return Buffer.concat(buffers).toString("utf8");
        }
        __name(getResponse, "getResponse");
        function mockDispatch(opts, handler) {
          const key = buildKey(opts);
          const mockDispatch2 = getMockDispatch(this[kDispatches], key);
          mockDispatch2.timesInvoked++;
          if (mockDispatch2.data.callback) {
            mockDispatch2.data = { ...mockDispatch2.data, ...mockDispatch2.data.callback(opts) };
          }
          const { data: { statusCode, data, headers, trailers, error: error2 }, delay, persist } = mockDispatch2;
          const { timesInvoked, times } = mockDispatch2;
          mockDispatch2.consumed = !persist && timesInvoked >= times;
          mockDispatch2.pending = timesInvoked < times;
          if (error2 !== null) {
            deleteMockDispatch(this[kDispatches], key);
            handler.onError(error2);
            return true;
          }
          if (typeof delay === "number" && delay > 0) {
            setTimeout(() => {
              handleReply(this[kDispatches]);
            }, delay);
          } else {
            handleReply(this[kDispatches]);
          }
          function handleReply(mockDispatches) {
            const responseData = getResponseData(typeof data === "function" ? data(opts) : data);
            const responseHeaders = generateKeyValues(headers);
            const responseTrailers = generateKeyValues(trailers);
            handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode));
            handler.onData(Buffer.from(responseData));
            handler.onComplete(responseTrailers);
            deleteMockDispatch(mockDispatches, key);
          }
          __name(handleReply, "handleReply");
          function resume() {
          }
          __name(resume, "resume");
          return true;
        }
        __name(mockDispatch, "mockDispatch");
        function buildMockDispatch() {
          const agent = this[kMockAgent];
          const origin = this[kOrigin];
          const originalDispatch = this[kOriginalDispatch];
          return /* @__PURE__ */ __name(function dispatch(opts, handler) {
            if (agent.isMockActive) {
              try {
                mockDispatch.call(this, opts, handler);
              } catch (error2) {
                if (error2 instanceof MockNotMatchedError) {
                  const netConnect = agent[kGetNetConnect]();
                  if (netConnect === false) {
                    throw new MockNotMatchedError(`${error2.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`);
                  }
                  if (checkNetConnect(netConnect, origin)) {
                    originalDispatch.call(this, opts, handler);
                  } else {
                    throw new MockNotMatchedError(`${error2.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`);
                  }
                } else {
                  throw error2;
                }
              }
            } else {
              originalDispatch.call(this, opts, handler);
            }
          }, "dispatch");
        }
        __name(buildMockDispatch, "buildMockDispatch");
        function checkNetConnect(netConnect, origin) {
          const url = new URL(origin);
          if (netConnect === true) {
            return true;
          } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url.host))) {
            return true;
          }
          return false;
        }
        __name(checkNetConnect, "checkNetConnect");
        function buildMockOptions(opts) {
          if (opts) {
            const { agent, ...mockOptions } = opts;
            return mockOptions;
          }
        }
        __name(buildMockOptions, "buildMockOptions");
        module2.exports = {
          getResponseData,
          getMockDispatch,
          addMockDispatch,
          deleteMockDispatch,
          buildKey,
          generateKeyValues,
          matchValue,
          getResponse,
          getStatusText,
          mockDispatch,
          buildMockDispatch,
          checkNetConnect,
          buildMockOptions,
          getHeaderByName
        };
      }
    });
    var require_mock_interceptor = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/mock/mock-interceptor.js"(exports2, module2) {
        "use strict";
        var { getResponseData, buildKey, addMockDispatch } = require_mock_utils();
        var {
          kDispatches,
          kDispatchKey,
          kDefaultHeaders,
          kDefaultTrailers,
          kContentLength,
          kMockDispatch
        } = require_mock_symbols();
        var { InvalidArgumentError } = require_errors();
        var { buildURL } = require_util2();
        var MockScope = class {
          constructor(mockDispatch) {
            this[kMockDispatch] = mockDispatch;
          }
          delay(waitInMs) {
            if (typeof waitInMs !== "number" || !Number.isInteger(waitInMs) || waitInMs <= 0) {
              throw new InvalidArgumentError("waitInMs must be a valid integer > 0");
            }
            this[kMockDispatch].delay = waitInMs;
            return this;
          }
          persist() {
            this[kMockDispatch].persist = true;
            return this;
          }
          times(repeatTimes) {
            if (typeof repeatTimes !== "number" || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {
              throw new InvalidArgumentError("repeatTimes must be a valid integer > 0");
            }
            this[kMockDispatch].times = repeatTimes;
            return this;
          }
        };
        __name(MockScope, "MockScope");
        var MockInterceptor = class {
          constructor(opts, mockDispatches) {
            if (typeof opts !== "object") {
              throw new InvalidArgumentError("opts must be an object");
            }
            if (typeof opts.path === "undefined") {
              throw new InvalidArgumentError("opts.path must be defined");
            }
            if (typeof opts.method === "undefined") {
              opts.method = "GET";
            }
            if (typeof opts.path === "string") {
              if (opts.query) {
                opts.path = buildURL(opts.path, opts.query);
              } else {
                const parsedURL = new URL(opts.path, "data://");
                opts.path = parsedURL.pathname + parsedURL.search;
              }
            }
            if (typeof opts.method === "string") {
              opts.method = opts.method.toUpperCase();
            }
            this[kDispatchKey] = buildKey(opts);
            this[kDispatches] = mockDispatches;
            this[kDefaultHeaders] = {};
            this[kDefaultTrailers] = {};
            this[kContentLength] = false;
          }
          createMockScopeDispatchData(statusCode, data, responseOptions = {}) {
            const responseData = getResponseData(data);
            const contentLength = this[kContentLength] ? { "content-length": responseData.length } : {};
            const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers };
            const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers };
            return { statusCode, data, headers, trailers };
          }
          validateReplyParameters(statusCode, data, responseOptions) {
            if (typeof statusCode === "undefined") {
              throw new InvalidArgumentError("statusCode must be defined");
            }
            if (typeof data === "undefined") {
              throw new InvalidArgumentError("data must be defined");
            }
            if (typeof responseOptions !== "object") {
              throw new InvalidArgumentError("responseOptions must be an object");
            }
          }
          reply(replyData) {
            if (typeof replyData === "function") {
              const wrappedDefaultsCallback = /* @__PURE__ */ __name((opts) => {
                const resolvedData = replyData(opts);
                if (typeof resolvedData !== "object") {
                  throw new InvalidArgumentError("reply options callback must return an object");
                }
                const { statusCode: statusCode2, data: data2 = "", responseOptions: responseOptions2 = {} } = resolvedData;
                this.validateReplyParameters(statusCode2, data2, responseOptions2);
                return {
                  ...this.createMockScopeDispatchData(statusCode2, data2, responseOptions2)
                };
              }, "wrappedDefaultsCallback");
              const newMockDispatch2 = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback);
              return new MockScope(newMockDispatch2);
            }
            const [statusCode, data = "", responseOptions = {}] = [...arguments];
            this.validateReplyParameters(statusCode, data, responseOptions);
            const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions);
            const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData);
            return new MockScope(newMockDispatch);
          }
          replyWithError(error2) {
            if (typeof error2 === "undefined") {
              throw new InvalidArgumentError("error must be defined");
            }
            const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error: error2 });
            return new MockScope(newMockDispatch);
          }
          defaultReplyHeaders(headers) {
            if (typeof headers === "undefined") {
              throw new InvalidArgumentError("headers must be defined");
            }
            this[kDefaultHeaders] = headers;
            return this;
          }
          defaultReplyTrailers(trailers) {
            if (typeof trailers === "undefined") {
              throw new InvalidArgumentError("trailers must be defined");
            }
            this[kDefaultTrailers] = trailers;
            return this;
          }
          replyContentLength() {
            this[kContentLength] = true;
            return this;
          }
        };
        __name(MockInterceptor, "MockInterceptor");
        module2.exports.MockInterceptor = MockInterceptor;
        module2.exports.MockScope = MockScope;
      }
    });
    var require_mock_client = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/mock/mock-client.js"(exports2, module2) {
        "use strict";
        var { promisify: promisify4 } = require("util");
        var Client = require_client();
        var { buildMockDispatch } = require_mock_utils();
        var {
          kDispatches,
          kMockAgent,
          kClose,
          kOriginalClose,
          kOrigin,
          kOriginalDispatch,
          kConnected
        } = require_mock_symbols();
        var { MockInterceptor } = require_mock_interceptor();
        var Symbols = require_symbols();
        var { InvalidArgumentError } = require_errors();
        var MockClient = class extends Client {
          constructor(origin, opts) {
            super(origin, opts);
            if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
              throw new InvalidArgumentError("Argument opts.agent must implement Agent");
            }
            this[kMockAgent] = opts.agent;
            this[kOrigin] = origin;
            this[kDispatches] = [];
            this[kConnected] = 1;
            this[kOriginalDispatch] = this.dispatch;
            this[kOriginalClose] = this.close.bind(this);
            this.dispatch = buildMockDispatch.call(this);
            this.close = this[kClose];
          }
          get [Symbols.kConnected]() {
            return this[kConnected];
          }
          intercept(opts) {
            return new MockInterceptor(opts, this[kDispatches]);
          }
          async [kClose]() {
            await promisify4(this[kOriginalClose])();
            this[kConnected] = 0;
            this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
          }
        };
        __name(MockClient, "MockClient");
        module2.exports = MockClient;
      }
    });
    var require_mock_pool = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/mock/mock-pool.js"(exports2, module2) {
        "use strict";
        var { promisify: promisify4 } = require("util");
        var Pool = require_pool();
        var { buildMockDispatch } = require_mock_utils();
        var {
          kDispatches,
          kMockAgent,
          kClose,
          kOriginalClose,
          kOrigin,
          kOriginalDispatch,
          kConnected
        } = require_mock_symbols();
        var { MockInterceptor } = require_mock_interceptor();
        var Symbols = require_symbols();
        var { InvalidArgumentError } = require_errors();
        var MockPool = class extends Pool {
          constructor(origin, opts) {
            super(origin, opts);
            if (!opts || !opts.agent || typeof opts.agent.dispatch !== "function") {
              throw new InvalidArgumentError("Argument opts.agent must implement Agent");
            }
            this[kMockAgent] = opts.agent;
            this[kOrigin] = origin;
            this[kDispatches] = [];
            this[kConnected] = 1;
            this[kOriginalDispatch] = this.dispatch;
            this[kOriginalClose] = this.close.bind(this);
            this.dispatch = buildMockDispatch.call(this);
            this.close = this[kClose];
          }
          get [Symbols.kConnected]() {
            return this[kConnected];
          }
          intercept(opts) {
            return new MockInterceptor(opts, this[kDispatches]);
          }
          async [kClose]() {
            await promisify4(this[kOriginalClose])();
            this[kConnected] = 0;
            this[kMockAgent][Symbols.kClients].delete(this[kOrigin]);
          }
        };
        __name(MockPool, "MockPool");
        module2.exports = MockPool;
      }
    });
    var require_pluralizer = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/mock/pluralizer.js"(exports2, module2) {
        "use strict";
        var singulars = {
          pronoun: "it",
          is: "is",
          was: "was",
          this: "this"
        };
        var plurals = {
          pronoun: "they",
          is: "are",
          was: "were",
          this: "these"
        };
        module2.exports = /* @__PURE__ */ __name(class Pluralizer {
          constructor(singular, plural) {
            this.singular = singular;
            this.plural = plural;
          }
          pluralize(count2) {
            const one = count2 === 1;
            const keys2 = one ? singulars : plurals;
            const noun = one ? this.singular : this.plural;
            return { ...keys2, count: count2, noun };
          }
        }, "Pluralizer");
      }
    });
    var require_pending_interceptors_formatter = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/mock/pending-interceptors-formatter.js"(exports2, module2) {
        "use strict";
        var { Transform } = require("stream");
        var { Console } = require("console");
        module2.exports = /* @__PURE__ */ __name(class PendingInterceptorsFormatter {
          constructor({ disableColors } = {}) {
            this.transform = new Transform({
              transform(chunk, _enc, cb) {
                cb(null, chunk);
              }
            });
            this.logger = new Console({
              stdout: this.transform,
              inspectOptions: {
                colors: !disableColors && !process.env.CI
              }
            });
          }
          format(pendingInterceptors) {
            const withPrettyHeaders = pendingInterceptors.map(({ method, path: path7, data: { statusCode }, persist, times, timesInvoked, origin }) => ({
              Method: method,
              Origin: origin,
              Path: path7,
              "Status code": statusCode,
              Persistent: persist ? "\u2705" : "\u274C",
              Invocations: timesInvoked,
              Remaining: persist ? Infinity : times - timesInvoked
            }));
            this.logger.table(withPrettyHeaders);
            return this.transform.read().toString();
          }
        }, "PendingInterceptorsFormatter");
      }
    });
    var require_mock_agent = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/mock/mock-agent.js"(exports2, module2) {
        "use strict";
        var { kClients } = require_symbols();
        var Agent = require_agent();
        var {
          kAgent,
          kMockAgentSet,
          kMockAgentGet,
          kDispatches,
          kIsMockActive,
          kNetConnect,
          kGetNetConnect,
          kOptions,
          kFactory
        } = require_mock_symbols();
        var MockClient = require_mock_client();
        var MockPool = require_mock_pool();
        var { matchValue, buildMockOptions } = require_mock_utils();
        var { InvalidArgumentError, UndiciError } = require_errors();
        var Dispatcher = require_dispatcher();
        var Pluralizer = require_pluralizer();
        var PendingInterceptorsFormatter = require_pending_interceptors_formatter();
        var FakeWeakRef = class {
          constructor(value) {
            this.value = value;
          }
          deref() {
            return this.value;
          }
        };
        __name(FakeWeakRef, "FakeWeakRef");
        var MockAgent = class extends Dispatcher {
          constructor(opts) {
            super(opts);
            this[kNetConnect] = true;
            this[kIsMockActive] = true;
            if (opts && opts.agent && typeof opts.agent.dispatch !== "function") {
              throw new InvalidArgumentError("Argument opts.agent must implement Agent");
            }
            const agent = opts && opts.agent ? opts.agent : new Agent(opts);
            this[kAgent] = agent;
            this[kClients] = agent[kClients];
            this[kOptions] = buildMockOptions(opts);
          }
          get(origin) {
            let dispatcher = this[kMockAgentGet](origin);
            if (!dispatcher) {
              dispatcher = this[kFactory](origin);
              this[kMockAgentSet](origin, dispatcher);
            }
            return dispatcher;
          }
          dispatch(opts, handler) {
            this.get(opts.origin);
            return this[kAgent].dispatch(opts, handler);
          }
          async close() {
            await this[kAgent].close();
            this[kClients].clear();
          }
          deactivate() {
            this[kIsMockActive] = false;
          }
          activate() {
            this[kIsMockActive] = true;
          }
          enableNetConnect(matcher) {
            if (typeof matcher === "string" || typeof matcher === "function" || matcher instanceof RegExp) {
              if (Array.isArray(this[kNetConnect])) {
                this[kNetConnect].push(matcher);
              } else {
                this[kNetConnect] = [matcher];
              }
            } else if (typeof matcher === "undefined") {
              this[kNetConnect] = true;
            } else {
              throw new InvalidArgumentError("Unsupported matcher. Must be one of String|Function|RegExp.");
            }
          }
          disableNetConnect() {
            this[kNetConnect] = false;
          }
          get isMockActive() {
            return this[kIsMockActive];
          }
          [kMockAgentSet](origin, dispatcher) {
            this[kClients].set(origin, new FakeWeakRef(dispatcher));
          }
          [kFactory](origin) {
            const mockOptions = Object.assign({ agent: this }, this[kOptions]);
            return this[kOptions] && this[kOptions].connections === 1 ? new MockClient(origin, mockOptions) : new MockPool(origin, mockOptions);
          }
          [kMockAgentGet](origin) {
            const ref = this[kClients].get(origin);
            if (ref) {
              return ref.deref();
            }
            if (typeof origin !== "string") {
              const dispatcher = this[kFactory]("http://localhost:9999");
              this[kMockAgentSet](origin, dispatcher);
              return dispatcher;
            }
            for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {
              const nonExplicitDispatcher = nonExplicitRef.deref();
              if (nonExplicitDispatcher && typeof keyMatcher !== "string" && matchValue(keyMatcher, origin)) {
                const dispatcher = this[kFactory](origin);
                this[kMockAgentSet](origin, dispatcher);
                dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches];
                return dispatcher;
              }
            }
          }
          [kGetNetConnect]() {
            return this[kNetConnect];
          }
          pendingInterceptors() {
            const mockAgentClients = this[kClients];
            return Array.from(mockAgentClients.entries()).flatMap(([origin, scope]) => scope.deref()[kDispatches].map((dispatch) => ({ ...dispatch, origin }))).filter(({ pending }) => pending);
          }
          assertNoPendingInterceptors({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {
            const pending = this.pendingInterceptors();
            if (pending.length === 0) {
              return;
            }
            const pluralizer = new Pluralizer("interceptor", "interceptors").pluralize(pending.length);
            throw new UndiciError(`
${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:

${pendingInterceptorsFormatter.format(pending)}
`.trim());
          }
        };
        __name(MockAgent, "MockAgent");
        module2.exports = MockAgent;
      }
    });
    var require_proxy_agent = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/proxy-agent.js"(exports2, module2) {
        "use strict";
        var { kClose, kDestroy } = require_symbols();
        var Client = require_agent();
        var Agent = require_agent();
        var DispatcherBase = require_dispatcher_base();
        var { InvalidArgumentError, RequestAbortedError } = require_errors();
        var buildConnector = require_connect();
        var kAgent = Symbol("proxy agent");
        var kClient = Symbol("proxy client");
        var kProxyHeaders = Symbol("proxy headers");
        var kRequestTls = Symbol("request tls settings");
        var kProxyTls = Symbol("proxy tls settings");
        var kConnectEndpoint = Symbol("connect endpoint function");
        function defaultProtocolPort(protocol) {
          return protocol === "https:" ? 443 : 80;
        }
        __name(defaultProtocolPort, "defaultProtocolPort");
        var ProxyAgent = class extends DispatcherBase {
          constructor(opts) {
            super(opts);
            if (typeof opts === "string") {
              opts = { uri: opts };
            }
            if (!opts || !opts.uri) {
              throw new InvalidArgumentError("Proxy opts.uri is mandatory");
            }
            this[kRequestTls] = opts.requestTls;
            this[kProxyTls] = opts.proxyTls;
            this[kProxyHeaders] = {};
            if (opts.auth) {
              this[kProxyHeaders]["proxy-authorization"] = `Basic ${opts.auth}`;
            }
            const { origin, port } = new URL(opts.uri);
            const connect = buildConnector({ ...opts.proxyTls });
            this[kConnectEndpoint] = buildConnector({ ...opts.requestTls });
            this[kClient] = new Client({ origin: opts.origin, connect });
            this[kAgent] = new Agent({
              ...opts,
              connect: async (opts2, callback) => {
                let requestedHost = opts2.host;
                if (!opts2.port) {
                  requestedHost += `:${defaultProtocolPort(opts2.protocol)}`;
                }
                try {
                  const { socket, statusCode } = await this[kClient].connect({
                    origin,
                    port,
                    path: requestedHost,
                    signal: opts2.signal,
                    headers: {
                      ...this[kProxyHeaders],
                      host: opts2.host
                    }
                  });
                  if (statusCode !== 200) {
                    socket.on("error", () => {
                    }).destroy();
                    callback(new RequestAbortedError("Proxy response !== 200 when HTTP Tunneling"));
                  }
                  if (opts2.protocol !== "https:") {
                    callback(null, socket);
                    return;
                  }
                  let servername;
                  if (this[kRequestTls]) {
                    servername = this[kRequestTls].servername;
                  } else {
                    servername = opts2.servername;
                  }
                  this[kConnectEndpoint]({ ...opts2, servername, httpSocket: socket }, callback);
                } catch (err) {
                  callback(err);
                }
              }
            });
          }
          dispatch(opts, handler) {
            const { host } = new URL(opts.origin);
            const headers = buildHeaders2(opts.headers);
            throwIfProxyAuthIsSent(headers);
            return this[kAgent].dispatch({
              ...opts,
              headers: {
                ...headers,
                host
              }
            }, handler);
          }
          async [kClose]() {
            await this[kAgent].close();
            await this[kClient].close();
          }
          async [kDestroy]() {
            await this[kAgent].destroy();
            await this[kClient].destroy();
          }
        };
        __name(ProxyAgent, "ProxyAgent");
        function buildHeaders2(headers) {
          if (Array.isArray(headers)) {
            const headersPair = {};
            for (let i = 0; i < headers.length; i += 2) {
              headersPair[headers[i]] = headers[i + 1];
            }
            return headersPair;
          }
          return headers;
        }
        __name(buildHeaders2, "buildHeaders");
        function throwIfProxyAuthIsSent(headers) {
          const existProxyAuth = headers && Object.keys(headers).find((key) => key.toLowerCase() === "proxy-authorization");
          if (existProxyAuth) {
            throw new InvalidArgumentError("Proxy-Authorization should be sent in ProxyAgent constructor");
          }
        }
        __name(throwIfProxyAuthIsSent, "throwIfProxyAuthIsSent");
        module2.exports = ProxyAgent;
      }
    });
    var require_global = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/global.js"(exports2, module2) {
        "use strict";
        var globalDispatcher = Symbol.for("undici.globalDispatcher.1");
        var { InvalidArgumentError } = require_errors();
        var Agent = require_agent();
        if (getGlobalDispatcher() === void 0) {
          setGlobalDispatcher(new Agent());
        }
        function setGlobalDispatcher(agent) {
          if (!agent || typeof agent.dispatch !== "function") {
            throw new InvalidArgumentError("Argument agent must implement Agent");
          }
          Object.defineProperty(globalThis, globalDispatcher, {
            value: agent,
            writable: true,
            enumerable: false,
            configurable: false
          });
        }
        __name(setGlobalDispatcher, "setGlobalDispatcher");
        function getGlobalDispatcher() {
          return globalThis[globalDispatcher];
        }
        __name(getGlobalDispatcher, "getGlobalDispatcher");
        module2.exports = {
          setGlobalDispatcher,
          getGlobalDispatcher
        };
      }
    });
    var require_headers = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/fetch/headers.js"(exports2, module2) {
        "use strict";
        var { kHeadersList } = require_symbols();
        var { kGuard } = require_symbols2();
        var { kEnumerableProperty } = require_util2();
        var {
          makeIterator,
          isValidHeaderName,
          isValidHeaderValue
        } = require_util3();
        var { webidl } = require_webidl();
        var kHeadersMap = Symbol("headers map");
        var kHeadersSortedMap = Symbol("headers map sorted");
        function headerValueNormalize(potentialValue) {
          return potentialValue.replace(/^[\r\n\t ]+|[\r\n\t ]+$/g, "");
        }
        __name(headerValueNormalize, "headerValueNormalize");
        function fill(headers, object) {
          if (Array.isArray(object)) {
            for (const header of object) {
              if (header.length !== 2) {
                webidl.errors.exception({
                  header: "Headers constructor",
                  message: `expected name/value pair to be length 2, found ${header.length}.`
                });
              }
              headers.append(header[0], header[1]);
            }
          } else if (typeof object === "object" && object !== null) {
            for (const [key, value] of Object.entries(object)) {
              headers.append(key, value);
            }
          } else {
            webidl.errors.conversionFailed({
              prefix: "Headers constructor",
              argument: "Argument 1",
              types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
            });
          }
        }
        __name(fill, "fill");
        var HeadersList = class {
          constructor(init) {
            if (init instanceof HeadersList) {
              this[kHeadersMap] = new Map(init[kHeadersMap]);
              this[kHeadersSortedMap] = init[kHeadersSortedMap];
            } else {
              this[kHeadersMap] = new Map(init);
              this[kHeadersSortedMap] = null;
            }
          }
          contains(name) {
            name = name.toLowerCase();
            return this[kHeadersMap].has(name);
          }
          clear() {
            this[kHeadersMap].clear();
            this[kHeadersSortedMap] = null;
          }
          append(name, value) {
            this[kHeadersSortedMap] = null;
            name = name.toLowerCase();
            const exists4 = this[kHeadersMap].get(name);
            if (exists4) {
              this[kHeadersMap].set(name, `${exists4}, ${value}`);
            } else {
              this[kHeadersMap].set(name, `${value}`);
            }
          }
          set(name, value) {
            this[kHeadersSortedMap] = null;
            name = name.toLowerCase();
            return this[kHeadersMap].set(name, value);
          }
          delete(name) {
            this[kHeadersSortedMap] = null;
            name = name.toLowerCase();
            return this[kHeadersMap].delete(name);
          }
          get(name) {
            var _a22;
            name = name.toLowerCase();
            if (!this.contains(name)) {
              return null;
            }
            return (_a22 = this[kHeadersMap].get(name)) != null ? _a22 : null;
          }
          has(name) {
            name = name.toLowerCase();
            return this[kHeadersMap].has(name);
          }
          keys() {
            return this[kHeadersMap].keys();
          }
          values() {
            return this[kHeadersMap].values();
          }
          entries() {
            return this[kHeadersMap].entries();
          }
          [Symbol.iterator]() {
            return this[kHeadersMap][Symbol.iterator]();
          }
        };
        __name(HeadersList, "HeadersList");
        var Headers = class {
          constructor(init = void 0) {
            this[kHeadersList] = new HeadersList();
            this[kGuard] = "none";
            if (init !== void 0) {
              init = webidl.converters.HeadersInit(init);
              fill(this, init);
            }
          }
          get [Symbol.toStringTag]() {
            return this.constructor.name;
          }
          append(name, value) {
            if (!(this instanceof Headers)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 2) {
              throw new TypeError(`Failed to execute 'append' on 'Headers': 2 arguments required, but only ${arguments.length} present.`);
            }
            name = webidl.converters.ByteString(name);
            value = webidl.converters.ByteString(value);
            value = headerValueNormalize(value);
            if (!isValidHeaderName(name)) {
              webidl.errors.invalidArgument({
                prefix: "Headers.append",
                value: name,
                type: "header name"
              });
            } else if (!isValidHeaderValue(value)) {
              webidl.errors.invalidArgument({
                prefix: "Headers.append",
                value,
                type: "header value"
              });
            }
            if (this[kGuard] === "immutable") {
              throw new TypeError("immutable");
            } else if (this[kGuard] === "request-no-cors") {
            }
            return this[kHeadersList].append(name, value);
          }
          delete(name) {
            if (!(this instanceof Headers)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError(`Failed to execute 'delete' on 'Headers': 1 argument required, but only ${arguments.length} present.`);
            }
            name = webidl.converters.ByteString(name);
            if (!isValidHeaderName(name)) {
              webidl.errors.invalidArgument({
                prefix: "Headers.delete",
                value: name,
                type: "header name"
              });
            }
            if (this[kGuard] === "immutable") {
              throw new TypeError("immutable");
            } else if (this[kGuard] === "request-no-cors") {
            }
            if (!this[kHeadersList].contains(name)) {
              return;
            }
            return this[kHeadersList].delete(name);
          }
          get(name) {
            if (!(this instanceof Headers)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError(`Failed to execute 'get' on 'Headers': 1 argument required, but only ${arguments.length} present.`);
            }
            name = webidl.converters.ByteString(name);
            if (!isValidHeaderName(name)) {
              webidl.errors.invalidArgument({
                prefix: "Headers.get",
                value: name,
                type: "header name"
              });
            }
            return this[kHeadersList].get(name);
          }
          has(name) {
            if (!(this instanceof Headers)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError(`Failed to execute 'has' on 'Headers': 1 argument required, but only ${arguments.length} present.`);
            }
            name = webidl.converters.ByteString(name);
            if (!isValidHeaderName(name)) {
              webidl.errors.invalidArgument({
                prefix: "Headers.has",
                value: name,
                type: "header name"
              });
            }
            return this[kHeadersList].contains(name);
          }
          set(name, value) {
            if (!(this instanceof Headers)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 2) {
              throw new TypeError(`Failed to execute 'set' on 'Headers': 2 arguments required, but only ${arguments.length} present.`);
            }
            name = webidl.converters.ByteString(name);
            value = webidl.converters.ByteString(value);
            value = headerValueNormalize(value);
            if (!isValidHeaderName(name)) {
              webidl.errors.invalidArgument({
                prefix: "Headers.set",
                value: name,
                type: "header name"
              });
            } else if (!isValidHeaderValue(value)) {
              webidl.errors.invalidArgument({
                prefix: "Headers.set",
                value,
                type: "header value"
              });
            }
            if (this[kGuard] === "immutable") {
              throw new TypeError("immutable");
            } else if (this[kGuard] === "request-no-cors") {
            }
            return this[kHeadersList].set(name, value);
          }
          get [kHeadersSortedMap]() {
            var _a22, _b2;
            (_b2 = (_a22 = this[kHeadersList])[kHeadersSortedMap]) != null ? _b2 : _a22[kHeadersSortedMap] = new Map([...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1));
            return this[kHeadersList][kHeadersSortedMap];
          }
          keys() {
            if (!(this instanceof Headers)) {
              throw new TypeError("Illegal invocation");
            }
            return makeIterator(this[kHeadersSortedMap].keys(), "Headers");
          }
          values() {
            if (!(this instanceof Headers)) {
              throw new TypeError("Illegal invocation");
            }
            return makeIterator(this[kHeadersSortedMap].values(), "Headers");
          }
          entries() {
            if (!(this instanceof Headers)) {
              throw new TypeError("Illegal invocation");
            }
            return makeIterator(this[kHeadersSortedMap].entries(), "Headers");
          }
          forEach(callbackFn, thisArg = globalThis) {
            if (!(this instanceof Headers)) {
              throw new TypeError("Illegal invocation");
            }
            if (arguments.length < 1) {
              throw new TypeError(`Failed to execute 'forEach' on 'Headers': 1 argument required, but only ${arguments.length} present.`);
            }
            if (typeof callbackFn !== "function") {
              throw new TypeError("Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.");
            }
            for (const [key, value] of this) {
              callbackFn.apply(thisArg, [value, key, this]);
            }
          }
          [Symbol.for("nodejs.util.inspect.custom")]() {
            if (!(this instanceof Headers)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kHeadersList];
          }
        };
        __name(Headers, "Headers");
        Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
        Object.defineProperties(Headers.prototype, {
          append: kEnumerableProperty,
          delete: kEnumerableProperty,
          get: kEnumerableProperty,
          has: kEnumerableProperty,
          set: kEnumerableProperty,
          keys: kEnumerableProperty,
          values: kEnumerableProperty,
          entries: kEnumerableProperty,
          forEach: kEnumerableProperty
        });
        webidl.converters.HeadersInit = function(V) {
          if (webidl.util.Type(V) === "Object") {
            if (V[Symbol.iterator]) {
              return webidl.converters["sequence<sequence<ByteString>>"](V);
            }
            return webidl.converters["record<ByteString, ByteString>"](V);
          }
          webidl.errors.conversionFailed({
            prefix: "Headers constructor",
            argument: "Argument 1",
            types: ["sequence<sequence<ByteString>>", "record<ByteString, ByteString>"]
          });
        };
        module2.exports = {
          fill,
          Headers,
          HeadersList
        };
      }
    });
    var require_response = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/fetch/response.js"(exports2, module2) {
        "use strict";
        var { Headers, HeadersList, fill } = require_headers();
        var { extractBody, cloneBody, mixinBody } = require_body();
        var util2 = require_util2();
        var { kEnumerableProperty } = util2;
        var {
          responseURL,
          isValidReasonPhrase,
          isCancelled,
          isAborted,
          isBlobLike,
          serializeJavascriptValueToJSONString
        } = require_util3();
        var {
          redirectStatus,
          nullBodyStatus,
          DOMException
        } = require_constants();
        var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
        var { webidl } = require_webidl();
        var { FormData } = require_formdata();
        var { kHeadersList } = require_symbols();
        var assert = require("assert");
        var { types } = require("util");
        var ReadableStream = globalThis.ReadableStream || require("stream/web").ReadableStream;
        var Response = class {
          static error() {
            const relevantRealm = { settingsObject: {} };
            const responseObject = new Response();
            responseObject[kState] = makeNetworkError();
            responseObject[kRealm] = relevantRealm;
            responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList;
            responseObject[kHeaders][kGuard] = "immutable";
            responseObject[kHeaders][kRealm] = relevantRealm;
            return responseObject;
          }
          static json(data, init = {}) {
            if (arguments.length === 0) {
              throw new TypeError("Failed to execute 'json' on 'Response': 1 argument required, but 0 present.");
            }
            if (init !== null) {
              init = webidl.converters.ResponseInit(init);
            }
            const bytes = new TextEncoder("utf-8").encode(serializeJavascriptValueToJSONString(data));
            const body = extractBody(bytes);
            const relevantRealm = { settingsObject: {} };
            const responseObject = new Response();
            responseObject[kRealm] = relevantRealm;
            responseObject[kHeaders][kGuard] = "response";
            responseObject[kHeaders][kRealm] = relevantRealm;
            initializeResponse(responseObject, init, { body: body[0], type: "application/json" });
            return responseObject;
          }
          static redirect(url, status = 302) {
            const relevantRealm = { settingsObject: {} };
            if (arguments.length < 1) {
              throw new TypeError(`Failed to execute 'redirect' on 'Response': 1 argument required, but only ${arguments.length} present.`);
            }
            url = webidl.converters.USVString(url);
            status = webidl.converters["unsigned short"](status);
            let parsedURL;
            try {
              parsedURL = new URL(url);
            } catch (err) {
              throw Object.assign(new TypeError("Failed to parse URL from " + url), {
                cause: err
              });
            }
            if (!redirectStatus.includes(status)) {
              throw new RangeError("Invalid status code");
            }
            const responseObject = new Response();
            responseObject[kRealm] = relevantRealm;
            responseObject[kHeaders][kGuard] = "immutable";
            responseObject[kHeaders][kRealm] = relevantRealm;
            responseObject[kState].status = status;
            const value = parsedURL.toString();
            responseObject[kState].headersList.append("location", value);
            return responseObject;
          }
          constructor(body = null, init = {}) {
            if (body !== null) {
              body = webidl.converters.BodyInit(body);
            }
            init = webidl.converters.ResponseInit(init);
            this[kRealm] = { settingsObject: {} };
            this[kState] = makeResponse({});
            this[kHeaders] = new Headers();
            this[kHeaders][kGuard] = "response";
            this[kHeaders][kHeadersList] = this[kState].headersList;
            this[kHeaders][kRealm] = this[kRealm];
            let bodyWithType = null;
            if (body != null) {
              const [extractedBody, type] = extractBody(body);
              bodyWithType = { body: extractedBody, type };
            }
            initializeResponse(this, init, bodyWithType);
          }
          get [Symbol.toStringTag]() {
            return this.constructor.name;
          }
          get type() {
            if (!(this instanceof Response)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].type;
          }
          get url() {
            if (!(this instanceof Response)) {
              throw new TypeError("Illegal invocation");
            }
            let url = responseURL(this[kState]);
            if (url == null) {
              return "";
            }
            if (url.hash) {
              url = new URL(url);
              url.hash = "";
            }
            return url.toString();
          }
          get redirected() {
            if (!(this instanceof Response)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].urlList.length > 1;
          }
          get status() {
            if (!(this instanceof Response)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].status;
          }
          get ok() {
            if (!(this instanceof Response)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].status >= 200 && this[kState].status <= 299;
          }
          get statusText() {
            if (!(this instanceof Response)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].statusText;
          }
          get headers() {
            if (!(this instanceof Response)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kHeaders];
          }
          clone() {
            if (!(this instanceof Response)) {
              throw new TypeError("Illegal invocation");
            }
            if (this.bodyUsed || this.body && this.body.locked) {
              webidl.errors.exception({
                header: "Response.clone",
                message: "Body has already been consumed."
              });
            }
            const clonedResponse = cloneResponse(this[kState]);
            const clonedResponseObject = new Response();
            clonedResponseObject[kState] = clonedResponse;
            clonedResponseObject[kRealm] = this[kRealm];
            clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList;
            clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard];
            clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm];
            return clonedResponseObject;
          }
        };
        __name(Response, "Response");
        mixinBody(Response);
        Object.defineProperties(Response.prototype, {
          type: kEnumerableProperty,
          url: kEnumerableProperty,
          status: kEnumerableProperty,
          ok: kEnumerableProperty,
          redirected: kEnumerableProperty,
          statusText: kEnumerableProperty,
          headers: kEnumerableProperty,
          clone: kEnumerableProperty
        });
        function cloneResponse(response) {
          if (response.internalResponse) {
            return filterResponse(cloneResponse(response.internalResponse), response.type);
          }
          const newResponse = makeResponse({ ...response, body: null });
          if (response.body != null) {
            newResponse.body = cloneBody(response.body);
          }
          return newResponse;
        }
        __name(cloneResponse, "cloneResponse");
        function makeResponse(init) {
          return {
            aborted: false,
            rangeRequested: false,
            timingAllowPassed: false,
            requestIncludesCredentials: false,
            type: "default",
            status: 200,
            timingInfo: null,
            cacheState: "",
            statusText: "",
            ...init,
            headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList(),
            urlList: init.urlList ? [...init.urlList] : []
          };
        }
        __name(makeResponse, "makeResponse");
        function makeNetworkError(reason) {
          return makeResponse({
            type: "error",
            status: 0,
            error: reason instanceof Error ? reason : new Error(reason ? String(reason) : reason, {
              cause: reason instanceof Error ? reason : void 0
            }),
            aborted: reason && reason.name === "AbortError"
          });
        }
        __name(makeNetworkError, "makeNetworkError");
        function makeFilteredResponse(response, state) {
          state = {
            internalResponse: response,
            ...state
          };
          return new Proxy(response, {
            get(target, p) {
              return p in state ? state[p] : target[p];
            },
            set(target, p, value) {
              assert(!(p in state));
              target[p] = value;
              return true;
            }
          });
        }
        __name(makeFilteredResponse, "makeFilteredResponse");
        function filterResponse(response, type) {
          if (type === "basic") {
            return makeFilteredResponse(response, {
              type: "basic",
              headersList: response.headersList
            });
          } else if (type === "cors") {
            return makeFilteredResponse(response, {
              type: "cors",
              headersList: response.headersList
            });
          } else if (type === "opaque") {
            return makeFilteredResponse(response, {
              type: "opaque",
              urlList: Object.freeze([]),
              status: 0,
              statusText: "",
              body: null
            });
          } else if (type === "opaqueredirect") {
            return makeFilteredResponse(response, {
              type: "opaqueredirect",
              status: 0,
              statusText: "",
              headersList: [],
              body: null
            });
          } else {
            assert(false);
          }
        }
        __name(filterResponse, "filterResponse");
        function makeAppropriateNetworkError(fetchParams) {
          assert(isCancelled(fetchParams));
          return isAborted(fetchParams) ? makeNetworkError(new DOMException("The operation was aborted.", "AbortError")) : makeNetworkError(fetchParams.controller.terminated.reason);
        }
        __name(makeAppropriateNetworkError, "makeAppropriateNetworkError");
        function initializeResponse(response, init, body) {
          if (init.status !== null && (init.status < 200 || init.status > 599)) {
            throw new RangeError('init["status"] must be in the range of 200 to 599, inclusive.');
          }
          if ("statusText" in init && init.statusText != null) {
            if (!isValidReasonPhrase(String(init.statusText))) {
              throw new TypeError("Invalid statusText");
            }
          }
          if ("status" in init && init.status != null) {
            response[kState].status = init.status;
          }
          if ("statusText" in init && init.statusText != null) {
            response[kState].statusText = init.statusText;
          }
          if ("headers" in init && init.headers != null) {
            fill(response[kState].headersList, init.headers);
          }
          if (body) {
            if (nullBodyStatus.includes(response.status)) {
              webidl.errors.exception({
                header: "Response constructor",
                message: "Invalid response status code."
              });
            }
            response[kState].body = body.body;
            if (body.type != null && !response[kState].headersList.has("Content-Type")) {
              response[kState].headersList.append("content-type", body.type);
            }
          }
        }
        __name(initializeResponse, "initializeResponse");
        webidl.converters.ReadableStream = webidl.interfaceConverter(ReadableStream);
        webidl.converters.FormData = webidl.interfaceConverter(FormData);
        webidl.converters.URLSearchParams = webidl.interfaceConverter(URLSearchParams);
        webidl.converters.XMLHttpRequestBodyInit = function(V) {
          if (typeof V === "string") {
            return webidl.converters.USVString(V);
          }
          if (isBlobLike(V)) {
            return webidl.converters.Blob(V);
          }
          if (types.isAnyArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {
            return webidl.converters.BufferSource(V);
          }
          if (V instanceof FormData) {
            return webidl.converters.FormData(V);
          }
          if (V instanceof URLSearchParams) {
            return webidl.converters.URLSearchParams(V);
          }
          return webidl.converters.DOMString(V);
        };
        webidl.converters.BodyInit = function(V) {
          if (V instanceof ReadableStream) {
            return webidl.converters.ReadableStream(V);
          }
          if (V == null ? void 0 : V[Symbol.asyncIterator]) {
            return V;
          }
          return webidl.converters.XMLHttpRequestBodyInit(V);
        };
        webidl.converters.ResponseInit = webidl.dictionaryConverter([
          {
            key: "status",
            converter: webidl.converters["unsigned short"],
            defaultValue: 200
          },
          {
            key: "statusText",
            converter: webidl.converters.ByteString,
            defaultValue: ""
          },
          {
            key: "headers",
            converter: webidl.converters.HeadersInit
          }
        ]);
        module2.exports = {
          makeNetworkError,
          makeResponse,
          makeAppropriateNetworkError,
          filterResponse,
          Response
        };
      }
    });
    var require_request2 = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/fetch/request.js"(exports2, module2) {
        "use strict";
        var { extractBody, mixinBody, cloneBody } = require_body();
        var { Headers, fill: fillHeaders, HeadersList } = require_headers();
        var util2 = require_util2();
        var {
          isValidHTTPToken,
          sameOrigin,
          normalizeMethod
        } = require_util3();
        var {
          forbiddenMethods,
          corsSafeListedMethods,
          referrerPolicy,
          requestRedirect,
          requestMode,
          requestCredentials,
          requestCache
        } = require_constants();
        var { kEnumerableProperty } = util2;
        var { kHeaders, kSignal, kState, kGuard, kRealm } = require_symbols2();
        var { webidl } = require_webidl();
        var { kHeadersList } = require_symbols();
        var assert = require("assert");
        var TransformStream;
        var kInit = Symbol("init");
        var requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {
          signal.removeEventListener("abort", abort);
        });
        var Request = class {
          constructor(input, init = {}) {
            var _a22, _b2;
            if (input === kInit) {
              return;
            }
            if (arguments.length < 1) {
              throw new TypeError(`Failed to construct 'Request': 1 argument required, but only ${arguments.length} present.`);
            }
            input = webidl.converters.RequestInfo(input);
            init = webidl.converters.RequestInit(init);
            this[kRealm] = { settingsObject: {} };
            let request2 = null;
            let fallbackMode = null;
            const baseUrl = this[kRealm].settingsObject.baseUrl;
            let signal = null;
            if (typeof input === "string") {
              let parsedURL;
              try {
                parsedURL = new URL(input, baseUrl);
              } catch (err) {
                throw new TypeError("Failed to parse URL from " + input, { cause: err });
              }
              if (parsedURL.username || parsedURL.password) {
                throw new TypeError("Request cannot be constructed from a URL that includes credentials: " + input);
              }
              request2 = makeRequest({ urlList: [parsedURL] });
              fallbackMode = "cors";
            } else {
              assert(input instanceof Request);
              request2 = input[kState];
              signal = input[kSignal];
            }
            const origin = this[kRealm].settingsObject.origin;
            let window2 = "client";
            if (((_b2 = (_a22 = request2.window) == null ? void 0 : _a22.constructor) == null ? void 0 : _b2.name) === "EnvironmentSettingsObject" && sameOrigin(request2.window, origin)) {
              window2 = request2.window;
            }
            if (init.window !== void 0 && init.window != null) {
              throw new TypeError(`'window' option '${window2}' must be null`);
            }
            if (init.window !== void 0) {
              window2 = "no-window";
            }
            request2 = makeRequest({
              method: request2.method,
              headersList: request2.headersList,
              unsafeRequest: request2.unsafeRequest,
              client: this[kRealm].settingsObject,
              window: window2,
              priority: request2.priority,
              origin: request2.origin,
              referrer: request2.referrer,
              referrerPolicy: request2.referrerPolicy,
              mode: request2.mode,
              credentials: request2.credentials,
              cache: request2.cache,
              redirect: request2.redirect,
              integrity: request2.integrity,
              keepalive: request2.keepalive,
              reloadNavigation: request2.reloadNavigation,
              historyNavigation: request2.historyNavigation,
              urlList: [...request2.urlList]
            });
            if (Object.keys(init).length > 0) {
              if (request2.mode === "navigate") {
                request2.mode = "same-origin";
              }
              request2.reloadNavigation = false;
              request2.historyNavigation = false;
              request2.origin = "client";
              request2.referrer = "client";
              request2.referrerPolicy = "";
              request2.url = request2.urlList[request2.urlList.length - 1];
              request2.urlList = [request2.url];
            }
            if (init.referrer !== void 0) {
              const referrer = init.referrer;
              if (referrer === "") {
                request2.referrer = "no-referrer";
              } else {
                let parsedReferrer;
                try {
                  parsedReferrer = new URL(referrer, baseUrl);
                } catch (err) {
                  throw new TypeError(`Referrer "${referrer}" is not a valid URL.`, { cause: err });
                }
                request2.referrer = parsedReferrer;
              }
            }
            if (init.referrerPolicy !== void 0) {
              request2.referrerPolicy = init.referrerPolicy;
              if (!referrerPolicy.includes(request2.referrerPolicy)) {
                throw new TypeError(`Failed to construct 'Request': The provided value '${request2.referrerPolicy}' is not a valid enum value of type ReferrerPolicy.`);
              }
            }
            let mode;
            if (init.mode !== void 0) {
              mode = init.mode;
              if (!requestMode.includes(mode)) {
                throw new TypeError(`Failed to construct 'Request': The provided value '${request2.mode}' is not a valid enum value of type RequestMode.`);
              }
            } else {
              mode = fallbackMode;
            }
            if (mode === "navigate") {
              webidl.errors.exception({
                header: "Request constructor",
                message: "invalid request mode navigate."
              });
            }
            if (mode != null) {
              request2.mode = mode;
            }
            if (init.credentials !== void 0) {
              request2.credentials = init.credentials;
              if (!requestCredentials.includes(request2.credentials)) {
                throw new TypeError(`Failed to construct 'Request': The provided value '${request2.credentials}' is not a valid enum value of type RequestCredentials.`);
              }
            }
            if (init.cache !== void 0) {
              request2.cache = init.cache;
              if (!requestCache.includes(request2.cache)) {
                throw new TypeError(`Failed to construct 'Request': The provided value '${request2.cache}' is not a valid enum value of type RequestCache.`);
              }
            }
            if (request2.cache === "only-if-cached" && request2.mode !== "same-origin") {
              throw new TypeError("'only-if-cached' can be set only with 'same-origin' mode");
            }
            if (init.redirect !== void 0) {
              request2.redirect = init.redirect;
              if (!requestRedirect.includes(request2.redirect)) {
                throw new TypeError(`Failed to construct 'Request': The provided value '${request2.redirect}' is not a valid enum value of type RequestRedirect.`);
              }
            }
            if (init.integrity !== void 0 && init.integrity != null) {
              request2.integrity = String(init.integrity);
            }
            if (init.keepalive !== void 0) {
              request2.keepalive = Boolean(init.keepalive);
            }
            if (init.method !== void 0) {
              let method = init.method;
              if (!isValidHTTPToken(init.method)) {
                throw TypeError(`'${init.method}' is not a valid HTTP method.`);
              }
              if (forbiddenMethods.indexOf(method.toUpperCase()) !== -1) {
                throw TypeError(`'${init.method}' HTTP method is unsupported.`);
              }
              method = normalizeMethod(init.method);
              request2.method = method;
            }
            if (init.signal !== void 0) {
              signal = init.signal;
            }
            this[kState] = request2;
            const ac = new AbortController();
            this[kSignal] = ac.signal;
            this[kSignal][kRealm] = this[kRealm];
            if (signal != null) {
              if (!signal || typeof signal.aborted !== "boolean" || typeof signal.addEventListener !== "function") {
                throw new TypeError("Failed to construct 'Request': member signal is not of type AbortSignal.");
              }
              if (signal.aborted) {
                ac.abort();
              } else {
                const abort = /* @__PURE__ */ __name(() => ac.abort(), "abort");
                signal.addEventListener("abort", abort, { once: true });
                requestFinalizer.register(this, { signal, abort });
              }
            }
            this[kHeaders] = new Headers();
            this[kHeaders][kHeadersList] = request2.headersList;
            this[kHeaders][kGuard] = "request";
            this[kHeaders][kRealm] = this[kRealm];
            if (mode === "no-cors") {
              if (!corsSafeListedMethods.includes(request2.method)) {
                throw new TypeError(`'${request2.method} is unsupported in no-cors mode.`);
              }
              this[kHeaders][kGuard] = "request-no-cors";
            }
            if (Object.keys(init).length !== 0) {
              let headers = new Headers(this[kHeaders]);
              if (init.headers !== void 0) {
                headers = init.headers;
              }
              this[kHeaders][kHeadersList].clear();
              if (headers.constructor.name === "Headers") {
                for (const [key, val] of headers) {
                  this[kHeaders].append(key, val);
                }
              } else {
                fillHeaders(this[kHeaders], headers);
              }
            }
            const inputBody = input instanceof Request ? input[kState].body : null;
            if ((init.body !== void 0 && init.body != null || inputBody != null) && (request2.method === "GET" || request2.method === "HEAD")) {
              throw new TypeError("Request with GET/HEAD method cannot have body.");
            }
            let initBody = null;
            if (init.body !== void 0 && init.body != null) {
              const [extractedBody, contentType] = extractBody(init.body, request2.keepalive);
              initBody = extractedBody;
              if (contentType && !this[kHeaders].has("content-type")) {
                this[kHeaders].append("content-type", contentType);
              }
            }
            const inputOrInitBody = initBody != null ? initBody : inputBody;
            if (inputOrInitBody != null && inputOrInitBody.source == null) {
              if (request2.mode !== "same-origin" && request2.mode !== "cors") {
                throw new TypeError('If request is made from ReadableStream, mode should be "same-origin" or "cors"');
              }
              request2.useCORSPreflightFlag = true;
            }
            let finalBody = inputOrInitBody;
            if (initBody == null && inputBody != null) {
              if (util2.isDisturbed(inputBody.stream) || inputBody.stream.locked) {
                throw new TypeError("Cannot construct a Request with a Request object that has already been used.");
              }
              if (!TransformStream) {
                TransformStream = require("stream/web").TransformStream;
              }
              const identityTransform = new TransformStream();
              inputBody.stream.pipeThrough(identityTransform);
              finalBody = {
                source: inputBody.source,
                length: inputBody.length,
                stream: identityTransform.readable
              };
            }
            this[kState].body = finalBody;
          }
          get [Symbol.toStringTag]() {
            return this.constructor.name;
          }
          get method() {
            if (!(this instanceof Request)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].method;
          }
          get url() {
            if (!(this instanceof Request)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].url.toString();
          }
          get headers() {
            if (!(this instanceof Request)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kHeaders];
          }
          get destination() {
            if (!(this instanceof Request)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].destination;
          }
          get referrer() {
            if (!(this instanceof Request)) {
              throw new TypeError("Illegal invocation");
            }
            if (this[kState].referrer === "no-referrer") {
              return "";
            }
            if (this[kState].referrer === "client") {
              return "about:client";
            }
            return this[kState].referrer.toString();
          }
          get referrerPolicy() {
            if (!(this instanceof Request)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].referrerPolicy;
          }
          get mode() {
            if (!(this instanceof Request)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].mode;
          }
          get credentials() {
            return this[kState].credentials;
          }
          get cache() {
            if (!(this instanceof Request)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].cache;
          }
          get redirect() {
            if (!(this instanceof Request)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].redirect;
          }
          get integrity() {
            if (!(this instanceof Request)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].integrity;
          }
          get keepalive() {
            if (!(this instanceof Request)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].keepalive;
          }
          get isReloadNavigation() {
            if (!(this instanceof Request)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].reloadNavigation;
          }
          get isHistoryNavigation() {
            if (!(this instanceof Request)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kState].historyNavigation;
          }
          get signal() {
            if (!(this instanceof Request)) {
              throw new TypeError("Illegal invocation");
            }
            return this[kSignal];
          }
          clone() {
            var _a22;
            if (!(this instanceof Request)) {
              throw new TypeError("Illegal invocation");
            }
            if (this.bodyUsed || ((_a22 = this.body) == null ? void 0 : _a22.locked)) {
              throw new TypeError("unusable");
            }
            const clonedRequest = cloneRequest(this[kState]);
            const clonedRequestObject = new Request(kInit);
            clonedRequestObject[kState] = clonedRequest;
            clonedRequestObject[kRealm] = this[kRealm];
            clonedRequestObject[kHeaders] = new Headers();
            clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList;
            clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];
            clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];
            const ac = new AbortController();
            if (this.signal.aborted) {
              ac.abort();
            } else {
              this.signal.addEventListener("abort", function() {
                ac.abort();
              }, { once: true });
            }
            clonedRequestObject[kSignal] = ac.signal;
            return clonedRequestObject;
          }
        };
        __name(Request, "Request");
        mixinBody(Request);
        function makeRequest(init) {
          const request2 = {
            method: "GET",
            localURLsOnly: false,
            unsafeRequest: false,
            body: null,
            client: null,
            reservedClient: null,
            replacesClientId: "",
            window: "client",
            keepalive: false,
            serviceWorkers: "all",
            initiator: "",
            destination: "",
            priority: null,
            origin: "client",
            policyContainer: "client",
            referrer: "client",
            referrerPolicy: "",
            mode: "no-cors",
            useCORSPreflightFlag: false,
            credentials: "same-origin",
            useCredentials: false,
            cache: "default",
            redirect: "follow",
            integrity: "",
            cryptoGraphicsNonceMetadata: "",
            parserMetadata: "",
            reloadNavigation: false,
            historyNavigation: false,
            userActivation: false,
            taintedOrigin: false,
            redirectCount: 0,
            responseTainting: "basic",
            preventNoCacheCacheControlHeaderModification: false,
            done: false,
            timingAllowFailed: false,
            ...init,
            headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList()
          };
          request2.url = request2.urlList[0];
          return request2;
        }
        __name(makeRequest, "makeRequest");
        function cloneRequest(request2) {
          const newRequest = makeRequest({ ...request2, body: null });
          if (request2.body != null) {
            newRequest.body = cloneBody(request2.body);
          }
          return newRequest;
        }
        __name(cloneRequest, "cloneRequest");
        Object.defineProperties(Request.prototype, {
          method: kEnumerableProperty,
          url: kEnumerableProperty,
          headers: kEnumerableProperty,
          redirect: kEnumerableProperty,
          clone: kEnumerableProperty,
          signal: kEnumerableProperty
        });
        webidl.converters.Request = webidl.interfaceConverter(Request);
        webidl.converters.RequestInfo = function(V) {
          if (typeof V === "string") {
            return webidl.converters.USVString(V);
          }
          if (V instanceof Request) {
            return webidl.converters.Request(V);
          }
          return webidl.converters.USVString(V);
        };
        webidl.converters.AbortSignal = webidl.interfaceConverter(AbortSignal);
        webidl.converters.RequestInit = webidl.dictionaryConverter([
          {
            key: "method",
            converter: webidl.converters.ByteString
          },
          {
            key: "headers",
            converter: webidl.converters.HeadersInit
          },
          {
            key: "body",
            converter: webidl.nullableConverter(webidl.converters.BodyInit)
          },
          {
            key: "referrer",
            converter: webidl.converters.USVString
          },
          {
            key: "referrerPolicy",
            converter: webidl.converters.DOMString,
            allowedValues: [
              "",
              "no-referrer",
              "no-referrer-when-downgrade",
              "same-origin",
              "origin",
              "strict-origin",
              "origin-when-cross-origin",
              "strict-origin-when-cross-origin",
              "unsafe-url"
            ]
          },
          {
            key: "mode",
            converter: webidl.converters.DOMString,
            allowedValues: [
              "same-origin",
              "cors",
              "no-cors",
              "navigate",
              "websocket"
            ]
          },
          {
            key: "credentials",
            converter: webidl.converters.DOMString,
            allowedValues: [
              "omit",
              "same-origin",
              "include"
            ]
          },
          {
            key: "cache",
            converter: webidl.converters.DOMString,
            allowedValues: [
              "default",
              "no-store",
              "reload",
              "no-cache",
              "force-cache",
              "only-if-cached"
            ]
          },
          {
            key: "redirect",
            converter: webidl.converters.DOMString,
            allowedValues: [
              "follow",
              "error",
              "manual"
            ]
          },
          {
            key: "integrity",
            converter: webidl.converters.DOMString
          },
          {
            key: "keepalive",
            converter: webidl.converters.boolean
          },
          {
            key: "signal",
            converter: webidl.nullableConverter(webidl.converters.AbortSignal)
          },
          {
            key: "window",
            converter: webidl.converters.any
          }
        ]);
        module2.exports = { Request, makeRequest };
      }
    });
    var require_dataURL = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/fetch/dataURL.js"(exports2, module2) {
        var assert = require("assert");
        var { atob: atob2 } = require("buffer");
        var encoder = new TextEncoder();
        function dataURLProcessor(dataURL) {
          assert(dataURL.protocol === "data:");
          let input = URLSerializer(dataURL, true);
          input = input.slice(5);
          const position = { position: 0 };
          let mimeType = collectASequenceOfCodePoints((char) => char !== ",", input, position);
          const mimeTypeLength = mimeType.length;
          mimeType = mimeType.replace(/^(\u0020)+|(\u0020)+$/g, "");
          if (position.position >= input.length) {
            return "failure";
          }
          position.position++;
          const encodedBody = input.slice(mimeTypeLength + 1);
          let body = stringPercentDecode(encodedBody);
          if (/;(\u0020){0,}base64$/i.test(mimeType)) {
            const stringBody = decodeURIComponent(new TextDecoder("utf-8").decode(body));
            body = forgivingBase64(stringBody);
            if (body === "failure") {
              return "failure";
            }
            mimeType = mimeType.slice(0, -6);
            mimeType = mimeType.replace(/(\u0020)+$/, "");
            mimeType = mimeType.slice(0, -1);
          }
          if (mimeType.startsWith(";")) {
            mimeType = "text/plain" + mimeType;
          }
          let mimeTypeRecord = parseMIMEType(mimeType);
          if (mimeTypeRecord === "failure") {
            mimeTypeRecord = parseMIMEType("text/plain;charset=US-ASCII");
          }
          return { mimeType: mimeTypeRecord, body };
        }
        __name(dataURLProcessor, "dataURLProcessor");
        function URLSerializer(url, excludeFragment = false) {
          let output = url.protocol;
          if (url.host.length > 0) {
            output += "//";
            if (url.username.length > 0 || url.password.length > 0) {
              output += url.username;
              if (url.password.length > 0) {
                output += ":" + url.password;
              }
              output += "@";
            }
            output += decodeURIComponent(url.host);
            if (url.port.length > 0) {
              output += ":" + url.port;
            }
          }
          if (url.host.length === 0 && url.pathname.length > 1 && url.href.slice(url.protocol.length + 1)[0] === ".") {
            output += "/.";
          }
          output += url.pathname;
          if (url.search.length > 0) {
            output += url.search;
          }
          if (excludeFragment === false && url.hash.length > 0) {
            output += url.hash;
          }
          return output;
        }
        __name(URLSerializer, "URLSerializer");
        function collectASequenceOfCodePoints(condition, input, position) {
          let result = "";
          while (position.position < input.length && condition(input[position.position])) {
            result += input[position.position];
            position.position++;
          }
          return result;
        }
        __name(collectASequenceOfCodePoints, "collectASequenceOfCodePoints");
        function stringPercentDecode(input) {
          const bytes = encoder.encode(input);
          return percentDecode(bytes);
        }
        __name(stringPercentDecode, "stringPercentDecode");
        function percentDecode(input) {
          const output = [];
          for (let i = 0; i < input.length; i++) {
            const byte = input[i];
            if (byte !== 37) {
              output.push(byte);
            } else if (byte === 37 && !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))) {
              output.push(37);
            } else {
              const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2]);
              const bytePoint = Number.parseInt(nextTwoBytes, 16);
              output.push(bytePoint);
              i += 2;
            }
          }
          return Uint8Array.of(...output);
        }
        __name(percentDecode, "percentDecode");
        function parseMIMEType(input) {
          input = input.trim();
          const position = { position: 0 };
          const type = collectASequenceOfCodePoints((char) => char !== "/", input, position);
          if (type.length === 0 || !/^[!#$%&'*+-.^_|~A-z0-9]+$/.test(type)) {
            return "failure";
          }
          if (position.position > input.length) {
            return "failure";
          }
          position.position++;
          let subtype = collectASequenceOfCodePoints((char) => char !== ";", input, position);
          subtype = subtype.trim();
          if (subtype.length === 0 || !/^[!#$%&'*+-.^_|~A-z0-9]+$/.test(subtype)) {
            return "failure";
          }
          const mimeType = {
            type: type.toLowerCase(),
            subtype: subtype.toLowerCase(),
            parameters: /* @__PURE__ */ new Map()
          };
          while (position.position < input.length) {
            position.position++;
            collectASequenceOfCodePoints((char) => /(\u000A|\u000D|\u0009|\u0020)/.test(char), input, position);
            let parameterName = collectASequenceOfCodePoints((char) => char !== ";" && char !== "=", input, position);
            parameterName = parameterName.toLowerCase();
            if (position.position < input.length) {
              if (input[position.position] === ";") {
                continue;
              }
              position.position++;
            }
            if (position.position > input.length) {
              break;
            }
            let parameterValue = null;
            if (input[position.position] === '"') {
              parameterValue = collectAnHTTPQuotedString(input, position);
              collectASequenceOfCodePoints((char) => char !== ";", input, position);
            } else {
              parameterValue = collectASequenceOfCodePoints((char) => char !== ";", input, position);
              parameterValue = parameterValue.trim();
              if (parameterValue.length === 0) {
                continue;
              }
            }
            if (parameterName.length !== 0 && /^[!#$%&'*+-.^_|~A-z0-9]+$/.test(parameterName) && !/^(\u0009|\x{0020}-\x{007E}|\x{0080}-\x{00FF})+$/.test(parameterValue) && !mimeType.parameters.has(parameterName)) {
              mimeType.parameters.set(parameterName, parameterValue);
            }
          }
          return mimeType;
        }
        __name(parseMIMEType, "parseMIMEType");
        function forgivingBase64(data) {
          data = data.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, "");
          if (data.length % 4 === 0) {
            data = data.replace(/=?=$/, "");
          }
          if (data.length % 4 === 1) {
            return "failure";
          }
          if (/[^+/0-9A-Za-z]/.test(data)) {
            return "failure";
          }
          const binary = atob2(data);
          const bytes = new Uint8Array(binary.length);
          for (let byte = 0; byte < binary.length; byte++) {
            bytes[byte] = binary.charCodeAt(byte);
          }
          return bytes;
        }
        __name(forgivingBase64, "forgivingBase64");
        function collectAnHTTPQuotedString(input, position, extractValue) {
          const positionStart = position.position;
          let value = "";
          assert(input[position.position] === '"');
          position.position++;
          while (true) {
            value += collectASequenceOfCodePoints((char) => char !== '"' && char !== "\\", input, position);
            if (position.position >= input.length) {
              break;
            }
            const quoteOrBackslash = input[position.position];
            position.position++;
            if (quoteOrBackslash === "\\") {
              if (position.position >= input.length) {
                value += "\\";
                break;
              }
              value += input[position.position];
              position.position++;
            } else {
              assert(quoteOrBackslash === '"');
              break;
            }
          }
          if (extractValue) {
            return value;
          }
          return input.slice(positionStart, position.position);
        }
        __name(collectAnHTTPQuotedString, "collectAnHTTPQuotedString");
        module2.exports = {
          dataURLProcessor,
          URLSerializer,
          collectASequenceOfCodePoints,
          stringPercentDecode,
          parseMIMEType,
          collectAnHTTPQuotedString
        };
      }
    });
    var require_fetch = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/lib/fetch/index.js"(exports2, module2) {
        "use strict";
        var {
          Response,
          makeNetworkError,
          makeAppropriateNetworkError,
          filterResponse,
          makeResponse
        } = require_response();
        var { Headers } = require_headers();
        var { Request, makeRequest } = require_request2();
        var zlib = require("zlib");
        var {
          matchRequestIntegrity,
          makePolicyContainer,
          clonePolicyContainer,
          requestBadPort,
          TAOCheck,
          appendRequestOriginHeader,
          responseLocationURL,
          requestCurrentURL,
          setRequestReferrerPolicyOnRedirect,
          tryUpgradeRequestToAPotentiallyTrustworthyURL,
          createOpaqueTimingInfo,
          appendFetchMetadata,
          corsCheck,
          crossOriginResourcePolicyCheck,
          determineRequestsReferrer,
          coarsenedSharedCurrentTime,
          createDeferredPromise,
          isBlobLike,
          sameOrigin,
          isCancelled,
          isAborted
        } = require_util3();
        var { kState, kHeaders, kGuard, kRealm } = require_symbols2();
        var assert = require("assert");
        var { safelyExtractBody, extractBody } = require_body();
        var {
          redirectStatus,
          nullBodyStatus,
          safeMethods,
          requestBodyHeader,
          subresource,
          DOMException
        } = require_constants();
        var { kHeadersList } = require_symbols();
        var EE = require("events");
        var { Readable, pipeline } = require("stream");
        var { isErrored, isReadable } = require_util2();
        var { dataURLProcessor } = require_dataURL();
        var { TransformStream } = require("stream/web");
        var resolveObjectURL;
        var ReadableStream;
        var nodeVersion = process.versions.node.split(".");
        var nodeMajor = Number(nodeVersion[0]);
        var nodeMinor = Number(nodeVersion[1]);
        var Fetch = class extends EE {
          constructor(dispatcher) {
            super();
            this.dispatcher = dispatcher;
            this.connection = null;
            this.dump = false;
            this.state = "ongoing";
          }
          terminate(reason) {
            var _a22;
            if (this.state !== "ongoing") {
              return;
            }
            this.state = "terminated";
            (_a22 = this.connection) == null ? void 0 : _a22.destroy(reason);
            this.emit("terminated", reason);
          }
          abort() {
            var _a22;
            if (this.state !== "ongoing") {
              return;
            }
            const reason = new DOMException("The operation was aborted.", "AbortError");
            this.state = "aborted";
            (_a22 = this.connection) == null ? void 0 : _a22.destroy(reason);
            this.emit("terminated", reason);
          }
        };
        __name(Fetch, "Fetch");
        async function fetch2(input, init = {}) {
          var _a22;
          if (arguments.length < 1) {
            throw new TypeError(`Failed to execute 'fetch' on 'Window': 1 argument required, but only ${arguments.length} present.`);
          }
          const p = createDeferredPromise();
          let requestObject;
          try {
            requestObject = new Request(input, init);
          } catch (e) {
            p.reject(e);
            return p.promise;
          }
          const request2 = requestObject[kState];
          if (requestObject.signal.aborted) {
            abortFetch(p, request2, null);
            return p.promise;
          }
          const globalObject = request2.client.globalObject;
          if (((_a22 = globalObject == null ? void 0 : globalObject.constructor) == null ? void 0 : _a22.name) === "ServiceWorkerGlobalScope") {
            request2.serviceWorkers = "none";
          }
          let responseObject = null;
          const relevantRealm = null;
          let locallyAborted = false;
          let controller = null;
          requestObject.signal.addEventListener("abort", () => {
            locallyAborted = true;
            abortFetch(p, request2, responseObject);
            if (controller != null) {
              controller.abort();
            }
          }, { once: true });
          const handleFetchDone = /* @__PURE__ */ __name((response) => finalizeAndReportTiming(response, "fetch"), "handleFetchDone");
          const processResponse = /* @__PURE__ */ __name((response) => {
            if (locallyAborted) {
              return;
            }
            if (response.aborted) {
              abortFetch(p, request2, responseObject);
              return;
            }
            if (response.type === "error") {
              p.reject(Object.assign(new TypeError("fetch failed"), { cause: response.error }));
              return;
            }
            responseObject = new Response();
            responseObject[kState] = response;
            responseObject[kRealm] = relevantRealm;
            responseObject[kHeaders][kHeadersList] = response.headersList;
            responseObject[kHeaders][kGuard] = "immutable";
            responseObject[kHeaders][kRealm] = relevantRealm;
            p.resolve(responseObject);
          }, "processResponse");
          controller = fetching({
            request: request2,
            processResponseEndOfBody: handleFetchDone,
            processResponse,
            dispatcher: this
          });
          return p.promise;
        }
        __name(fetch2, "fetch");
        function finalizeAndReportTiming(response, initiatorType = "other") {
          var _a22;
          if (response.type === "error" && response.aborted) {
            return;
          }
          if (!((_a22 = response.urlList) == null ? void 0 : _a22.length)) {
            return;
          }
          const originalURL = response.urlList[0];
          let timingInfo = response.timingInfo;
          let cacheState = response.cacheState;
          if (!/^https?:/.test(originalURL.protocol)) {
            return;
          }
          if (timingInfo === null) {
            return;
          }
          if (!timingInfo.timingAllowPassed) {
            timingInfo = createOpaqueTimingInfo({
              startTime: timingInfo.startTime
            });
            cacheState = "";
          }
          response.timingInfo.endTime = coarsenedSharedCurrentTime();
          response.timingInfo = timingInfo;
          markResourceTiming(timingInfo, originalURL, initiatorType, globalThis, cacheState);
        }
        __name(finalizeAndReportTiming, "finalizeAndReportTiming");
        function markResourceTiming(timingInfo, originalURL, initiatorType, globalThis2, cacheState) {
          if (nodeMajor >= 18 && nodeMinor >= 2) {
            performance.markResourceTiming(timingInfo, originalURL, initiatorType, globalThis2, cacheState);
          }
        }
        __name(markResourceTiming, "markResourceTiming");
        function abortFetch(p, request2, responseObject) {
          var _a22, _b2;
          const error2 = new DOMException("The operation was aborted.", "AbortError");
          p.reject(error2);
          if (request2.body != null && isReadable((_a22 = request2.body) == null ? void 0 : _a22.stream)) {
            request2.body.stream.cancel(error2).catch((err) => {
              if (err.code === "ERR_INVALID_STATE") {
                return;
              }
              throw err;
            });
          }
          if (responseObject == null) {
            return;
          }
          const response = responseObject[kState];
          if (response.body != null && isReadable((_b2 = response.body) == null ? void 0 : _b2.stream)) {
            response.body.stream.cancel(error2).catch((err) => {
              if (err.code === "ERR_INVALID_STATE") {
                return;
              }
              throw err;
            });
          }
        }
        __name(abortFetch, "abortFetch");
        function fetching({
          request: request2,
          processRequestBodyChunkLength,
          processRequestEndOfBody,
          processResponse,
          processResponseEndOfBody,
          processResponseConsumeBody,
          useParallelQueue = false,
          dispatcher
        }) {
          var _a22, _b2, _c2, _d2;
          let taskDestination = null;
          let crossOriginIsolatedCapability = false;
          if (request2.client != null) {
            taskDestination = request2.client.globalObject;
            crossOriginIsolatedCapability = request2.client.crossOriginIsolatedCapability;
          }
          const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability);
          const timingInfo = createOpaqueTimingInfo({
            startTime: currenTime
          });
          const fetchParams = {
            controller: new Fetch(dispatcher),
            request: request2,
            timingInfo,
            processRequestBodyChunkLength,
            processRequestEndOfBody,
            processResponse,
            processResponseConsumeBody,
            processResponseEndOfBody,
            taskDestination,
            crossOriginIsolatedCapability
          };
          assert(!request2.body || request2.body.stream);
          if (request2.window === "client") {
            request2.window = ((_c2 = (_b2 = (_a22 = request2.client) == null ? void 0 : _a22.globalObject) == null ? void 0 : _b2.constructor) == null ? void 0 : _c2.name) === "Window" ? request2.client : "no-window";
          }
          if (request2.origin === "client") {
            request2.origin = (_d2 = request2.client) == null ? void 0 : _d2.origin;
          }
          if (request2.policyContainer === "client") {
            if (request2.client != null) {
              request2.policyContainer = clonePolicyContainer(request2.client.policyContainer);
            } else {
              request2.policyContainer = makePolicyContainer();
            }
          }
          if (!request2.headersList.has("accept")) {
            const value = "*/*";
            request2.headersList.append("accept", value);
          }
          if (!request2.headersList.has("accept-language")) {
            request2.headersList.append("accept-language", "*");
          }
          if (request2.priority === null) {
          }
          if (subresource.includes(request2.destination)) {
          }
          mainFetch(fetchParams).catch((err) => {
            fetchParams.controller.terminate(err);
          });
          return fetchParams.controller;
        }
        __name(fetching, "fetching");
        async function mainFetch(fetchParams, recursive = false) {
          const request2 = fetchParams.request;
          let response = null;
          if (request2.localURLsOnly && !/^(about|blob|data):/.test(requestCurrentURL(request2).protocol)) {
            response = makeNetworkError("local URLs only");
          }
          tryUpgradeRequestToAPotentiallyTrustworthyURL(request2);
          if (requestBadPort(request2) === "blocked") {
            response = makeNetworkError("bad port");
          }
          if (request2.referrerPolicy === "") {
            request2.referrerPolicy = request2.policyContainer.referrerPolicy;
          }
          if (request2.referrer !== "no-referrer") {
            request2.referrer = determineRequestsReferrer(request2);
          }
          if (response === null) {
            response = await (async () => {
              const currentURL = requestCurrentURL(request2);
              if (sameOrigin(currentURL, request2.url) && request2.responseTainting === "basic" || currentURL.protocol === "data:" || (request2.mode === "navigate" || request2.mode === "websocket")) {
                request2.responseTainting = "basic";
                return await schemeFetch(fetchParams);
              }
              if (request2.mode === "same-origin") {
                return makeNetworkError('request mode cannot be "same-origin"');
              }
              if (request2.mode === "no-cors") {
                if (request2.redirect !== "follow") {
                  return makeNetworkError('redirect mode cannot be "follow" for "no-cors" request');
                }
                request2.responseTainting = "opaque";
                return await schemeFetch(fetchParams);
              }
              if (!/^https?:/.test(requestCurrentURL(request2).protocol)) {
                return makeNetworkError("URL scheme must be a HTTP(S) scheme");
              }
              request2.responseTainting = "cors";
              return await httpFetch(fetchParams);
            })();
          }
          if (recursive) {
            return response;
          }
          if (response.status !== 0 && !response.internalResponse) {
            if (request2.responseTainting === "cors") {
            }
            if (request2.responseTainting === "basic") {
              response = filterResponse(response, "basic");
            } else if (request2.responseTainting === "cors") {
              response = filterResponse(response, "cors");
            } else if (request2.responseTainting === "opaque") {
              response = filterResponse(response, "opaque");
            } else {
              assert(false);
            }
          }
          let internalResponse = response.status === 0 ? response : response.internalResponse;
          if (internalResponse.urlList.length === 0) {
            internalResponse.urlList.push(...request2.urlList);
          }
          if (!request2.timingAllowFailed) {
            response.timingAllowPassed = true;
          }
          if (response.type === "opaque" && internalResponse.status === 206 && internalResponse.rangeRequested && !request2.headers.has("range")) {
            response = internalResponse = makeNetworkError();
          }
          if (response.status !== 0 && (request2.method === "HEAD" || request2.method === "CONNECT" || nullBodyStatus.includes(internalResponse.status))) {
            internalResponse.body = null;
            fetchParams.controller.dump = true;
          }
          if (request2.integrity) {
            const processBodyError = /* @__PURE__ */ __name((reason) => fetchFinale(fetchParams, makeNetworkError(reason)), "processBodyError");
            if (request2.responseTainting === "opaque" || response.body == null) {
              processBodyError(response.error);
              return;
            }
            const processBody = /* @__PURE__ */ __name((bytes) => {
              if (!matchRequestIntegrity(request2, bytes)) {
                processBodyError("integrity mismatch");
                return;
              }
              response.body = safelyExtractBody(bytes)[0];
              fetchFinale(fetchParams, response);
            }, "processBody");
            try {
              processBody(await response.arrayBuffer());
            } catch (err) {
              processBodyError(err);
            }
          } else {
            fetchFinale(fetchParams, response);
          }
        }
        __name(mainFetch, "mainFetch");
        async function schemeFetch(fetchParams) {
          const { request: request2 } = fetchParams;
          const {
            protocol: scheme,
            pathname: path7
          } = requestCurrentURL(request2);
          switch (scheme) {
            case "about:": {
              if (path7 === "blank") {
                const resp = makeResponse({
                  statusText: "OK",
                  headersList: [
                    ["content-type", "text/html;charset=utf-8"]
                  ]
                });
                resp.urlList = [new URL("about:blank")];
                return resp;
              }
              return makeNetworkError("invalid path called");
            }
            case "blob:": {
              resolveObjectURL = resolveObjectURL || require("buffer").resolveObjectURL;
              const currentURL = requestCurrentURL(request2);
              if (currentURL.search.length !== 0) {
                return makeNetworkError("NetworkError when attempting to fetch resource.");
              }
              const blob = resolveObjectURL(currentURL.toString());
              if (request2.method !== "GET" || !isBlobLike(blob)) {
                return makeNetworkError("invalid method");
              }
              const response = makeResponse({ statusText: "OK", urlList: [currentURL] });
              response.headersList.set("content-length", `${blob.size}`);
              response.headersList.set("content-type", blob.type);
              response.body = extractBody(blob)[0];
              return response;
            }
            case "data:": {
              const currentURL = requestCurrentURL(request2);
              const dataURLStruct = dataURLProcessor(currentURL);
              if (dataURLStruct === "failure") {
                return makeNetworkError("failed to fetch the data URL");
              }
              const { mimeType } = dataURLStruct;
              let contentType = `${mimeType.type}/${mimeType.subtype}`;
              const contentTypeParams = [];
              if (mimeType.parameters.size > 0) {
                contentType += ";";
              }
              for (const [key, value] of mimeType.parameters) {
                if (value.length > 0) {
                  contentTypeParams.push(`${key}=${value}`);
                } else {
                  contentTypeParams.push(key);
                }
              }
              contentType += contentTypeParams.join(",");
              return makeResponse({
                statusText: "OK",
                headersList: [
                  ["content-type", contentType]
                ],
                body: extractBody(dataURLStruct.body)[0]
              });
            }
            case "file:": {
              return makeNetworkError("not implemented... yet...");
            }
            case "http:":
            case "https:": {
              return await httpFetch(fetchParams).catch((err) => makeNetworkError(err));
            }
            default: {
              return makeNetworkError("unknown scheme");
            }
          }
        }
        __name(schemeFetch, "schemeFetch");
        function finalizeResponse(fetchParams, response) {
          fetchParams.request.done = true;
          if (fetchParams.processResponseDone != null) {
            queueMicrotask(() => fetchParams.processResponseDone(response));
          }
        }
        __name(finalizeResponse, "finalizeResponse");
        async function fetchFinale(fetchParams, response) {
          if (response.type === "error") {
            response.urlList = [fetchParams.request.urlList[0]];
            response.timingInfo = createOpaqueTimingInfo({
              startTime: fetchParams.timingInfo.startTime
            });
          }
          const processResponseEndOfBody = /* @__PURE__ */ __name(() => {
            fetchParams.request.done = true;
            if (fetchParams.processResponseEndOfBody != null) {
              queueMicrotask(() => fetchParams.processResponseEndOfBody(response));
            }
          }, "processResponseEndOfBody");
          if (fetchParams.processResponse != null) {
            queueMicrotask(() => fetchParams.processResponse(response));
          }
          if (response.body == null) {
            processResponseEndOfBody();
          } else {
            const identityTransformAlgorithm = /* @__PURE__ */ __name((chunk, controller) => {
              controller.enqueue(chunk);
            }, "identityTransformAlgorithm");
            const transformStream = new TransformStream({
              start() {
              },
              transform: identityTransformAlgorithm,
              flush: processResponseEndOfBody
            });
            response.body = { stream: response.body.stream.pipeThrough(transformStream) };
          }
          if (fetchParams.processResponseConsumeBody != null) {
            const processBody = /* @__PURE__ */ __name((nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes), "processBody");
            const processBodyError = /* @__PURE__ */ __name((failure) => fetchParams.processResponseConsumeBody(response, failure), "processBodyError");
            if (response.body == null) {
              queueMicrotask(() => processBody(null));
            } else {
              try {
                processBody(await response.body.stream.arrayBuffer());
              } catch (err) {
                processBodyError(err);
              }
            }
          }
        }
        __name(fetchFinale, "fetchFinale");
        async function httpFetch(fetchParams) {
          const request2 = fetchParams.request;
          let response = null;
          let actualResponse = null;
          const timingInfo = fetchParams.timingInfo;
          if (request2.serviceWorkers === "all") {
          }
          if (response === null) {
            if (request2.redirect === "follow") {
              request2.serviceWorkers = "none";
            }
            actualResponse = response = await httpNetworkOrCacheFetch(fetchParams);
            if (request2.responseTainting === "cors" && corsCheck(request2, response) === "failure") {
              return makeNetworkError("cors failure");
            }
            if (TAOCheck(request2, response) === "failure") {
              request2.timingAllowFailed = true;
            }
          }
          if ((request2.responseTainting === "opaque" || response.type === "opaque") && crossOriginResourcePolicyCheck(request2.origin, request2.client, request2.destination, actualResponse) === "blocked") {
            return makeNetworkError("blocked");
          }
          if (redirectStatus.includes(actualResponse.status)) {
            fetchParams.controller.connection.destroy();
            if (request2.redirect === "error") {
              response = makeNetworkError("unexpected redirect");
            } else if (request2.redirect === "manual") {
              response = actualResponse;
            } else if (request2.redirect === "follow") {
              response = await httpRedirectFetch(fetchParams, response);
            } else {
              assert(false);
            }
          }
          response.timingInfo = timingInfo;
          return response;
        }
        __name(httpFetch, "httpFetch");
        async function httpRedirectFetch(fetchParams, response) {
          const request2 = fetchParams.request;
          const actualResponse = response.internalResponse ? response.internalResponse : response;
          let locationURL;
          try {
            locationURL = responseLocationURL(actualResponse, requestCurrentURL(request2).hash);
            if (locationURL == null) {
              return response;
            }
          } catch (err) {
            return makeNetworkError(err);
          }
          if (!/^https?:/.test(locationURL.protocol)) {
            return makeNetworkError("URL scheme must be a HTTP(S) scheme");
          }
          if (request2.redirectCount === 20) {
            return makeNetworkError("redirect count exceeded");
          }
          request2.redirectCount += 1;
          if (request2.mode === "cors" && (locationURL.username || locationURL.password) && !sameOrigin(request2, locationURL)) {
            return makeNetworkError('cross origin not allowed for request mode "cors"');
          }
          if (request2.responseTainting === "cors" && (locationURL.username || locationURL.password)) {
            return makeNetworkError('URL cannot contain credentials for request mode "cors"');
          }
          if (actualResponse.status !== 303 && request2.body != null && request2.body.source == null) {
            return makeNetworkError();
          }
          if ([301, 302].includes(actualResponse.status) && request2.method === "POST" || actualResponse.status === 303 && !["GET", "HEAD"].includes(request2.method)) {
            request2.method = "GET";
            request2.body = null;
            for (const headerName of requestBodyHeader) {
              request2.headersList.delete(headerName);
            }
          }
          if (request2.body != null) {
            assert(request2.body.source);
            request2.body = safelyExtractBody(request2.body.source)[0];
          }
          const timingInfo = fetchParams.timingInfo;
          timingInfo.redirectEndTime = timingInfo.postRedirectStartTime = coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability);
          if (timingInfo.redirectStartTime === 0) {
            timingInfo.redirectStartTime = timingInfo.startTime;
          }
          request2.urlList.push(locationURL);
          setRequestReferrerPolicyOnRedirect(request2, actualResponse);
          return mainFetch(fetchParams, true);
        }
        __name(httpRedirectFetch, "httpRedirectFetch");
        async function httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch = false, isNewConnectionFetch = false) {
          const request2 = fetchParams.request;
          let httpFetchParams = null;
          let httpRequest = null;
          let response = null;
          const httpCache = null;
          const revalidatingFlag = false;
          if (request2.window === "no-window" && request2.redirect === "error") {
            httpFetchParams = fetchParams;
            httpRequest = request2;
          } else {
            httpRequest = makeRequest(request2);
            httpFetchParams = { ...fetchParams };
            httpFetchParams.request = httpRequest;
          }
          const includeCredentials = request2.credentials === "include" || request2.credentials === "same-origin" && request2.responseTainting === "basic";
          const contentLength = httpRequest.body ? httpRequest.body.length : null;
          let contentLengthHeaderValue = null;
          if (httpRequest.body == null && ["POST", "PUT"].includes(httpRequest.method)) {
            contentLengthHeaderValue = "0";
          }
          if (contentLength != null) {
            contentLengthHeaderValue = String(contentLength);
          }
          if (contentLengthHeaderValue != null) {
            httpRequest.headersList.append("content-length", contentLengthHeaderValue);
          }
          if (contentLength != null && httpRequest.keepalive) {
          }
          if (httpRequest.referrer instanceof URL) {
            httpRequest.headersList.append("referer", httpRequest.referrer.href);
          }
          appendRequestOriginHeader(httpRequest);
          appendFetchMetadata(httpRequest);
          if (!httpRequest.headersList.has("user-agent")) {
            httpRequest.headersList.append("user-agent", "undici");
          }
          if (httpRequest.cache === "default" && (httpRequest.headersList.has("if-modified-since") || httpRequest.headersList.has("if-none-match") || httpRequest.headersList.has("if-unmodified-since") || httpRequest.headersList.has("if-match") || httpRequest.headersList.has("if-range"))) {
            httpRequest.cache = "no-store";
          }
          if (httpRequest.cache === "no-cache" && !httpRequest.preventNoCacheCacheControlHeaderModification && !httpRequest.headersList.has("cache-control")) {
            httpRequest.headersList.append("cache-control", "max-age=0");
          }
          if (httpRequest.cache === "no-store" || httpRequest.cache === "reload") {
            if (!httpRequest.headersList.has("pragma")) {
              httpRequest.headersList.append("pragma", "no-cache");
            }
            if (!httpRequest.headersList.has("cache-control")) {
              httpRequest.headersList.append("cache-control", "no-cache");
            }
          }
          if (httpRequest.headersList.has("range")) {
            httpRequest.headersList.append("accept-encoding", "identity");
          }
          if (!httpRequest.headersList.has("accept-encoding")) {
            if (/^https:/.test(requestCurrentURL(httpRequest).protocol)) {
              httpRequest.headersList.append("accept-encoding", "br, gzip, deflate");
            } else {
              httpRequest.headersList.append("accept-encoding", "gzip, deflate");
            }
          }
          if (includeCredentials) {
          }
          if (httpCache == null) {
            httpRequest.cache = "no-store";
          }
          if (httpRequest.mode !== "no-store" && httpRequest.mode !== "reload") {
          }
          if (response == null) {
            if (httpRequest.mode === "only-if-cached") {
              return makeNetworkError("only if cached");
            }
            const forwardResponse = await httpNetworkFetch(httpFetchParams, includeCredentials, isNewConnectionFetch);
            if (!safeMethods.includes(httpRequest.method) && forwardResponse.status >= 200 && forwardResponse.status <= 399) {
            }
            if (revalidatingFlag && forwardResponse.status === 304) {
            }
            if (response == null) {
              response = forwardResponse;
            }
          }
          response.urlList = [...httpRequest.urlList];
          if (httpRequest.headersList.has("range")) {
            response.rangeRequested = true;
          }
          response.requestIncludesCredentials = includeCredentials;
          if (response.status === 407) {
            if (request2.window === "no-window") {
              return makeNetworkError();
            }
            if (isCancelled(fetchParams)) {
              return makeAppropriateNetworkError(fetchParams);
            }
            return makeNetworkError("proxy authentication required");
          }
          if (response.status === 421 && !isNewConnectionFetch && (request2.body == null || request2.body.source != null)) {
            if (isCancelled(fetchParams)) {
              return makeAppropriateNetworkError(fetchParams);
            }
            fetchParams.controller.connection.destroy();
            response = await httpNetworkOrCacheFetch(fetchParams, isAuthenticationFetch, true);
          }
          if (isAuthenticationFetch) {
          }
          return response;
        }
        __name(httpNetworkOrCacheFetch, "httpNetworkOrCacheFetch");
        async function httpNetworkFetch(fetchParams, includeCredentials = false, forceNewConnection = false) {
          assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed);
          fetchParams.controller.connection = {
            abort: null,
            destroyed: false,
            destroy(err) {
              var _a22;
              if (!this.destroyed) {
                this.destroyed = true;
                (_a22 = this.abort) == null ? void 0 : _a22.call(this, err != null ? err : new DOMException("The operation was aborted.", "AbortError"));
              }
            }
          };
          const request2 = fetchParams.request;
          let response = null;
          const timingInfo = fetchParams.timingInfo;
          const httpCache = null;
          if (httpCache == null) {
            request2.cache = "no-store";
          }
          const newConnection = forceNewConnection ? "yes" : "no";
          if (request2.mode === "websocket") {
          } else {
          }
          let requestBody = null;
          if (request2.body == null && fetchParams.processRequestEndOfBody) {
            queueMicrotask(() => fetchParams.processRequestEndOfBody());
          } else if (request2.body != null) {
            const processBodyChunk = /* @__PURE__ */ __name(async function* (bytes) {
              var _a22;
              if (isCancelled(fetchParams)) {
                return;
              }
              yield bytes;
              (_a22 = fetchParams.processRequestBodyChunkLength) == null ? void 0 : _a22.call(fetchParams, bytes.byteLength);
            }, "processBodyChunk");
            const processEndOfBody = /* @__PURE__ */ __name(() => {
              if (isCancelled(fetchParams)) {
                return;
              }
              if (fetchParams.processRequestEndOfBody) {
                fetchParams.processRequestEndOfBody();
              }
            }, "processEndOfBody");
            const processBodyError = /* @__PURE__ */ __name((e) => {
              if (isCancelled(fetchParams)) {
                return;
              }
              if (e.name === "AbortError") {
                fetchParams.controller.abort();
              } else {
                fetchParams.controller.terminate(e);
              }
            }, "processBodyError");
            requestBody = async function* () {
              try {
                for await (const bytes of request2.body.stream) {
                  yield* processBodyChunk(bytes);
                }
                processEndOfBody();
              } catch (err) {
                processBodyError(err);
              }
            }();
          }
          try {
            const { body, status, statusText, headersList } = await dispatch({ body: requestBody });
            const iterator = body[Symbol.asyncIterator]();
            fetchParams.controller.next = () => iterator.next();
            response = makeResponse({ status, statusText, headersList });
          } catch (err) {
            if (err.name === "AbortError") {
              fetchParams.controller.connection.destroy();
              return makeAppropriateNetworkError(fetchParams);
            }
            return makeNetworkError(err);
          }
          const pullAlgorithm = /* @__PURE__ */ __name(() => {
            fetchParams.controller.resume();
          }, "pullAlgorithm");
          const cancelAlgorithm = /* @__PURE__ */ __name(() => {
            fetchParams.controller.abort();
          }, "cancelAlgorithm");
          if (!ReadableStream) {
            ReadableStream = require("stream/web").ReadableStream;
          }
          const stream2 = new ReadableStream({
            async start(controller) {
              fetchParams.controller.controller = controller;
            },
            async pull(controller) {
              await pullAlgorithm(controller);
            },
            async cancel(reason) {
              await cancelAlgorithm(reason);
            }
          }, { highWaterMark: 0 });
          response.body = { stream: stream2 };
          fetchParams.controller.on("terminated", onAborted);
          fetchParams.controller.resume = async () => {
            var _a22;
            while (true) {
              let bytes;
              try {
                const { done, value } = await fetchParams.controller.next();
                if (isAborted(fetchParams)) {
                  break;
                }
                bytes = done ? void 0 : value;
              } catch (err) {
                if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {
                  bytes = void 0;
                } else {
                  bytes = err;
                }
              }
              if (bytes === void 0) {
                try {
                  fetchParams.controller.controller.close();
                } catch (err) {
                  if (!/Controller is already closed/.test(err)) {
                    throw err;
                  }
                }
                finalizeResponse(fetchParams, response);
                return;
              }
              timingInfo.decodedBodySize += (_a22 = bytes == null ? void 0 : bytes.byteLength) != null ? _a22 : 0;
              if (bytes instanceof Error) {
                fetchParams.controller.terminate(bytes);
                return;
              }
              fetchParams.controller.controller.enqueue(new Uint8Array(bytes));
              if (isErrored(stream2)) {
                fetchParams.controller.terminate();
                return;
              }
              if (!fetchParams.controller.controller.desiredSize) {
                return;
              }
            }
          };
          function onAborted(reason) {
            if (isAborted(fetchParams)) {
              response.aborted = true;
              if (isReadable(stream2)) {
                fetchParams.controller.controller.error(new DOMException("The operation was aborted.", "AbortError"));
              }
            } else {
              if (isReadable(stream2)) {
                fetchParams.controller.controller.error(new TypeError("terminated", {
                  cause: reason instanceof Error ? reason : void 0
                }));
              }
            }
            fetchParams.controller.connection.destroy();
          }
          __name(onAborted, "onAborted");
          return response;
          async function dispatch({ body }) {
            const url = requestCurrentURL(request2);
            return new Promise((resolve, reject) => fetchParams.controller.dispatcher.dispatch({
              path: url.pathname + url.search,
              origin: url.origin,
              method: request2.method,
              body: fetchParams.controller.dispatcher.isMockActive ? request2.body && request2.body.source : body,
              headers: [...request2.headersList].flat(),
              maxRedirections: 0,
              bodyTimeout: 3e5,
              headersTimeout: 3e5
            }, {
              body: null,
              abort: null,
              onConnect(abort) {
                const { connection } = fetchParams.controller;
                if (connection.destroyed) {
                  abort(new DOMException("The operation was aborted.", "AbortError"));
                } else {
                  fetchParams.controller.on("terminated", abort);
                  this.abort = connection.abort = abort;
                }
              },
              onHeaders(status, headersList, resume, statusText) {
                if (status < 200) {
                  return;
                }
                let codings = [];
                const headers = new Headers();
                for (let n = 0; n < headersList.length; n += 2) {
                  const key = headersList[n + 0].toString();
                  const val = headersList[n + 1].toString();
                  if (key.toLowerCase() === "content-encoding") {
                    codings = val.split(",").map((x) => x.trim());
                  }
                  headers.append(key, val);
                }
                this.body = new Readable({ read: resume });
                const decoders = [];
                if (request2.method !== "HEAD" && request2.method !== "CONNECT" && !nullBodyStatus.includes(status)) {
                  for (const coding of codings) {
                    if (/(x-)?gzip/.test(coding)) {
                      decoders.push(zlib.createGunzip());
                    } else if (/(x-)?deflate/.test(coding)) {
                      decoders.push(zlib.createInflate());
                    } else if (coding === "br") {
                      decoders.push(zlib.createBrotliDecompress());
                    } else {
                      decoders.length = 0;
                      break;
                    }
                  }
                }
                resolve({
                  status,
                  statusText,
                  headersList: headers[kHeadersList],
                  body: decoders.length ? pipeline(this.body, ...decoders, () => {
                  }) : this.body.on("error", () => {
                  })
                });
                return true;
              },
              onData(chunk) {
                if (fetchParams.controller.dump) {
                  return;
                }
                const bytes = chunk;
                timingInfo.encodedBodySize += bytes.byteLength;
                return this.body.push(bytes);
              },
              onComplete() {
                if (this.abort) {
                  fetchParams.controller.off("terminated", this.abort);
                }
                fetchParams.controller.ended = true;
                this.body.push(null);
              },
              onError(error2) {
                var _a22;
                if (this.abort) {
                  fetchParams.controller.off("terminated", this.abort);
                }
                (_a22 = this.body) == null ? void 0 : _a22.destroy(error2);
                fetchParams.controller.terminate(error2);
                reject(error2);
              }
            }));
          }
          __name(dispatch, "dispatch");
        }
        __name(httpNetworkFetch, "httpNetworkFetch");
        module2.exports = fetch2;
      }
    });
    var require_undici = __commonJS({
      "../../node_modules/.pnpm/undici@5.7.0/node_modules/undici/index.js"(exports2, module2) {
        "use strict";
        var Client = require_client();
        var Dispatcher = require_dispatcher();
        var errors = require_errors();
        var Pool = require_pool();
        var BalancedPool = require_balanced_pool();
        var Agent = require_agent();
        var util2 = require_util2();
        var { InvalidArgumentError } = errors;
        var api = require_api();
        var buildConnector = require_connect();
        var MockClient = require_mock_client();
        var MockAgent = require_mock_agent();
        var MockPool = require_mock_pool();
        var mockErrors = require_mock_errors();
        var ProxyAgent = require_proxy_agent();
        var { getGlobalDispatcher, setGlobalDispatcher } = require_global();
        var nodeVersion = process.versions.node.split(".");
        var nodeMajor = Number(nodeVersion[0]);
        var nodeMinor = Number(nodeVersion[1]);
        Object.assign(Dispatcher.prototype, api);
        module2.exports.Dispatcher = Dispatcher;
        module2.exports.Client = Client;
        module2.exports.Pool = Pool;
        module2.exports.BalancedPool = BalancedPool;
        module2.exports.Agent = Agent;
        module2.exports.ProxyAgent = ProxyAgent;
        module2.exports.buildConnector = buildConnector;
        module2.exports.errors = errors;
        function makeDispatcher(fn) {
          return (url, opts, handler) => {
            if (typeof opts === "function") {
              handler = opts;
              opts = null;
            }
            if (!url || typeof url !== "string" && typeof url !== "object" && !(url instanceof URL)) {
              throw new InvalidArgumentError("invalid url");
            }
            if (opts != null && typeof opts !== "object") {
              throw new InvalidArgumentError("invalid opts");
            }
            if (opts && opts.path != null) {
              if (typeof opts.path !== "string") {
                throw new InvalidArgumentError("invalid opts.path");
              }
              url = new URL(opts.path, util2.parseOrigin(url));
            } else {
              if (!opts) {
                opts = typeof url === "object" ? url : {};
              }
              url = util2.parseURL(url);
            }
            const { agent, dispatcher = getGlobalDispatcher() } = opts;
            if (agent) {
              throw new InvalidArgumentError("unsupported opts.agent. Did you mean opts.client?");
            }
            return fn.call(dispatcher, {
              ...opts,
              origin: url.origin,
              path: url.search ? `${url.pathname}${url.search}` : url.pathname,
              method: opts.method || (opts.body ? "PUT" : "GET")
            }, handler);
          };
        }
        __name(makeDispatcher, "makeDispatcher");
        module2.exports.setGlobalDispatcher = setGlobalDispatcher;
        module2.exports.getGlobalDispatcher = getGlobalDispatcher;
        if (nodeMajor > 16 || nodeMajor === 16 && nodeMinor >= 8) {
          let fetchImpl = null;
          module2.exports.fetch = /* @__PURE__ */ __name(async function fetch2(resource) {
            if (!fetchImpl) {
              fetchImpl = require_fetch();
            }
            const dispatcher = arguments[1] && arguments[1].dispatcher || getGlobalDispatcher();
            return fetchImpl.apply(dispatcher, arguments);
          }, "fetch");
          module2.exports.Headers = require_headers().Headers;
          module2.exports.Response = require_response().Response;
          module2.exports.Request = require_request2().Request;
          module2.exports.FormData = require_formdata().FormData;
          module2.exports.File = require_file().File;
        }
        module2.exports.request = makeDispatcher(api.request);
        module2.exports.stream = makeDispatcher(api.stream);
        module2.exports.pipeline = makeDispatcher(api.pipeline);
        module2.exports.connect = makeDispatcher(api.connect);
        module2.exports.upgrade = makeDispatcher(api.upgrade);
        module2.exports.MockClient = MockClient;
        module2.exports.MockPool = MockPool;
        module2.exports.MockAgent = MockAgent;
        module2.exports.mockErrors = mockErrors;
      }
    });
    var require_main2 = __commonJS({
      "../../node_modules/.pnpm/dotenv@16.0.1/node_modules/dotenv/lib/main.js"(exports2, module2) {
        var fs10 = require("fs");
        var path7 = require("path");
        var os3 = require("os");
        var LINE = /(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/mg;
        function parse2(src) {
          const obj = {};
          let lines = src.toString();
          lines = lines.replace(/\r\n?/mg, "\n");
          let match;
          while ((match = LINE.exec(lines)) != null) {
            const key = match[1];
            let value = match[2] || "";
            value = value.trim();
            const maybeQuote = value[0];
            value = value.replace(/^(['"`])([\s\S]*)\1$/mg, "$2");
            if (maybeQuote === '"') {
              value = value.replace(/\\n/g, "\n");
              value = value.replace(/\\r/g, "\r");
            }
            obj[key] = value;
          }
          return obj;
        }
        __name(parse2, "parse");
        function _log(message) {
          console.log(`[dotenv][DEBUG] ${message}`);
        }
        __name(_log, "_log");
        function _resolveHome(envPath) {
          return envPath[0] === "~" ? path7.join(os3.homedir(), envPath.slice(1)) : envPath;
        }
        __name(_resolveHome, "_resolveHome");
        function config2(options) {
          let dotenvPath = path7.resolve(process.cwd(), ".env");
          let encoding = "utf8";
          const debug12 = Boolean(options && options.debug);
          const override = Boolean(options && options.override);
          if (options) {
            if (options.path != null) {
              dotenvPath = _resolveHome(options.path);
            }
            if (options.encoding != null) {
              encoding = options.encoding;
            }
          }
          try {
            const parsed = DotenvModule.parse(fs10.readFileSync(dotenvPath, { encoding }));
            Object.keys(parsed).forEach(function(key) {
              if (!Object.prototype.hasOwnProperty.call(process.env, key)) {
                process.env[key] = parsed[key];
              } else {
                if (override === true) {
                  process.env[key] = parsed[key];
                }
                if (debug12) {
                  if (override === true) {
                    _log(`"${key}" is already defined in \`process.env\` and WAS overwritten`);
                  } else {
                    _log(`"${key}" is already defined in \`process.env\` and was NOT overwritten`);
                  }
                }
              }
            });
            return { parsed };
          } catch (e) {
            if (debug12) {
              _log(`Failed to load ${dotenvPath} ${e.message}`);
            }
            return { error: e };
          }
        }
        __name(config2, "config");
        var DotenvModule = {
          config: config2,
          parse: parse2
        };
        module2.exports.config = DotenvModule.config;
        module2.exports.parse = DotenvModule.parse;
        module2.exports = DotenvModule;
      }
    });
    var require_arg = __commonJS({
      "../../node_modules/.pnpm/arg@5.0.2/node_modules/arg/index.js"(exports2, module2) {
        var flagSymbol = Symbol("arg flag");
        var ArgError = class extends Error {
          constructor(msg, code) {
            super(msg);
            this.name = "ArgError";
            this.code = code;
            Object.setPrototypeOf(this, ArgError.prototype);
          }
        };
        __name(ArgError, "ArgError");
        function arg2(opts, {
          argv = process.argv.slice(2),
          permissive = false,
          stopAtPositional = false
        } = {}) {
          if (!opts) {
            throw new ArgError("argument specification object is required", "ARG_CONFIG_NO_SPEC");
          }
          const result = { _: [] };
          const aliases = {};
          const handlers = {};
          for (const key of Object.keys(opts)) {
            if (!key) {
              throw new ArgError("argument key cannot be an empty string", "ARG_CONFIG_EMPTY_KEY");
            }
            if (key[0] !== "-") {
              throw new ArgError(`argument key must start with '-' but found: '${key}'`, "ARG_CONFIG_NONOPT_KEY");
            }
            if (key.length === 1) {
              throw new ArgError(`argument key must have a name; singular '-' keys are not allowed: ${key}`, "ARG_CONFIG_NONAME_KEY");
            }
            if (typeof opts[key] === "string") {
              aliases[key] = opts[key];
              continue;
            }
            let type = opts[key];
            let isFlag = false;
            if (Array.isArray(type) && type.length === 1 && typeof type[0] === "function") {
              const [fn] = type;
              type = /* @__PURE__ */ __name((value, name, prev = []) => {
                prev.push(fn(value, name, prev[prev.length - 1]));
                return prev;
              }, "type");
              isFlag = fn === Boolean || fn[flagSymbol] === true;
            } else if (typeof type === "function") {
              isFlag = type === Boolean || type[flagSymbol] === true;
            } else {
              throw new ArgError(`type missing or not a function or valid array type: ${key}`, "ARG_CONFIG_VAD_TYPE");
            }
            if (key[1] !== "-" && key.length > 2) {
              throw new ArgError(`short argument keys (with a single hyphen) must have only one character: ${key}`, "ARG_CONFIG_SHORTOPT_TOOLONG");
            }
            handlers[key] = [type, isFlag];
          }
          for (let i = 0, len = argv.length; i < len; i++) {
            const wholeArg = argv[i];
            if (stopAtPositional && result._.length > 0) {
              result._ = result._.concat(argv.slice(i));
              break;
            }
            if (wholeArg === "--") {
              result._ = result._.concat(argv.slice(i + 1));
              break;
            }
            if (wholeArg.length > 1 && wholeArg[0] === "-") {
              const separatedArguments = wholeArg[1] === "-" || wholeArg.length === 2 ? [wholeArg] : wholeArg.slice(1).split("").map((a) => `-${a}`);
              for (let j = 0; j < separatedArguments.length; j++) {
                const arg3 = separatedArguments[j];
                const [originalArgName, argStr] = arg3[1] === "-" ? arg3.split(/=(.*)/, 2) : [arg3, void 0];
                let argName = originalArgName;
                while (argName in aliases) {
                  argName = aliases[argName];
                }
                if (!(argName in handlers)) {
                  if (permissive) {
                    result._.push(arg3);
                    continue;
                  } else {
                    throw new ArgError(`unknown or unexpected option: ${originalArgName}`, "ARG_UNKNOWN_OPTION");
                  }
                }
                const [type, isFlag] = handlers[argName];
                if (!isFlag && j + 1 < separatedArguments.length) {
                  throw new ArgError(`option requires argument (but was followed by another short argument): ${originalArgName}`, "ARG_MISSING_REQUIRED_SHORTARG");
                }
                if (isFlag) {
                  result[argName] = type(true, argName, result[argName]);
                } else if (argStr === void 0) {
                  if (argv.length < i + 2 || argv[i + 1].length > 1 && argv[i + 1][0] === "-" && !(argv[i + 1].match(/^-?\d*(\.(?=\d))?\d*$/) && (type === Number || typeof BigInt !== "undefined" && type === BigInt))) {
                    const extended = originalArgName === argName ? "" : ` (alias for ${argName})`;
                    throw new ArgError(`option requires argument: ${originalArgName}${extended}`, "ARG_MISSING_REQUIRED_LONGARG");
                  }
                  result[argName] = type(argv[i + 1], argName, result[argName]);
                  ++i;
                } else {
                  result[argName] = type(argStr, argName, result[argName]);
                }
              }
            } else {
              result._.push(wholeArg);
            }
          }
          return result;
        }
        __name(arg2, "arg");
        arg2.flag = (fn) => {
          fn[flagSymbol] = true;
          return fn;
        };
        arg2.COUNT = arg2.flag((v, name, existingCount) => (existingCount || 0) + 1);
        arg2.ArgError = ArgError;
        module2.exports = arg2;
      }
    });
    var require_min_indent = __commonJS({
      "../../node_modules/.pnpm/min-indent@1.0.1/node_modules/min-indent/index.js"(exports2, module2) {
        "use strict";
        module2.exports = (string) => {
          const match = string.match(/^[ \t]*(?=\S)/gm);
          if (!match) {
            return 0;
          }
          return match.reduce((r, a) => Math.min(r, a.length), Infinity);
        };
      }
    });
    var require_strip_indent = __commonJS({
      "../../node_modules/.pnpm/strip-indent@3.0.0/node_modules/strip-indent/index.js"(exports2, module2) {
        "use strict";
        var minIndent = require_min_indent();
        module2.exports = (string) => {
          const indent4 = minIndent(string);
          if (indent4 === 0) {
            return string;
          }
          const regex = new RegExp(`^[ \\t]{${indent4}}`, "gm");
          return string.replace(regex, "");
        };
      }
    });
    var require_dist = __commonJS({
      "../../node_modules/.pnpm/sql-template-tag@4.0.0/node_modules/sql-template-tag/dist/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.sqltag = exports2.empty = exports2.raw = exports2.join = exports2.Sql = void 0;
        var util_1 = require("util");
        var Sql2 = class {
          constructor(rawStrings, rawValues) {
            let valuesLength = rawValues.length;
            let stringsLength = rawStrings.length;
            if (stringsLength === 0) {
              throw new TypeError("Expected at least 1 string");
            }
            if (stringsLength - 1 !== valuesLength) {
              throw new TypeError(`Expected ${stringsLength} strings to have ${stringsLength - 1} values`);
            }
            for (const child of rawValues) {
              if (child instanceof Sql2) {
                valuesLength += child.values.length - 1;
                stringsLength += child.strings.length - 2;
              }
            }
            this.values = new Array(valuesLength);
            this.strings = new Array(stringsLength);
            this.strings[0] = rawStrings[0];
            let index = 1;
            let position = 0;
            while (index < rawStrings.length) {
              const child = rawValues[index - 1];
              const rawString = rawStrings[index++];
              if (child instanceof Sql2) {
                this.strings[position] += child.strings[0];
                let childIndex = 0;
                while (childIndex < child.values.length) {
                  this.values[position++] = child.values[childIndex++];
                  this.strings[position] = child.strings[childIndex];
                }
                this.strings[position] += rawString;
              } else {
                this.values[position++] = child;
                this.strings[position] = rawString;
              }
            }
          }
          get text() {
            return this.strings.reduce((text, part, index) => `${text}$${index}${part}`);
          }
          get sql() {
            return this.strings.join("?");
          }
          [util_1.inspect.custom]() {
            return {
              text: this.text,
              sql: this.sql,
              values: this.values
            };
          }
        };
        __name(Sql2, "Sql");
        exports2.Sql = Sql2;
        Object.defineProperty(Sql2.prototype, "sql", { enumerable: true });
        Object.defineProperty(Sql2.prototype, "text", { enumerable: true });
        function join2(values, separator = ",") {
          if (values.length === 0) {
            throw new TypeError("Expected `join([])` to be called with an array of multiple elements, but got an empty array");
          }
          return new Sql2(["", ...Array(values.length - 1).fill(separator), ""], values);
        }
        __name(join2, "join");
        exports2.join = join2;
        function raw2(value) {
          return new Sql2([value], []);
        }
        __name(raw2, "raw");
        exports2.raw = raw2;
        exports2.empty = raw2("");
        function sqltag3(strings, ...values) {
          return new Sql2(strings, values);
        }
        __name(sqltag3, "sqltag");
        exports2.sqltag = sqltag3;
        exports2.default = sqltag3;
      }
    });
    var require_pluralize = __commonJS({
      "../../node_modules/.pnpm/pluralize@8.0.0/node_modules/pluralize/pluralize.js"(exports2, module2) {
        (function(root, pluralize2) {
          if (typeof require === "function" && typeof exports2 === "object" && typeof module2 === "object") {
            module2.exports = pluralize2();
          } else if (typeof define === "function" && false) {
            define(function() {
              return pluralize2();
            });
          } else {
            root.pluralize = pluralize2();
          }
        })(exports2, function() {
          var pluralRules = [];
          var singularRules = [];
          var uncountables = {};
          var irregularPlurals = {};
          var irregularSingles = {};
          function sanitizeRule(rule) {
            if (typeof rule === "string") {
              return new RegExp("^" + rule + "$", "i");
            }
            return rule;
          }
          __name(sanitizeRule, "sanitizeRule");
          function restoreCase(word, token) {
            if (word === token)
              return token;
            if (word === word.toLowerCase())
              return token.toLowerCase();
            if (word === word.toUpperCase())
              return token.toUpperCase();
            if (word[0] === word[0].toUpperCase()) {
              return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();
            }
            return token.toLowerCase();
          }
          __name(restoreCase, "restoreCase");
          function interpolate(str, args) {
            return str.replace(/\$(\d{1,2})/g, function(match, index) {
              return args[index] || "";
            });
          }
          __name(interpolate, "interpolate");
          function replace(word, rule) {
            return word.replace(rule[0], function(match, index) {
              var result = interpolate(rule[1], arguments);
              if (match === "") {
                return restoreCase(word[index - 1], result);
              }
              return restoreCase(match, result);
            });
          }
          __name(replace, "replace");
          function sanitizeWord(token, word, rules) {
            if (!token.length || uncountables.hasOwnProperty(token)) {
              return word;
            }
            var len = rules.length;
            while (len--) {
              var rule = rules[len];
              if (rule[0].test(word))
                return replace(word, rule);
            }
            return word;
          }
          __name(sanitizeWord, "sanitizeWord");
          function replaceWord(replaceMap, keepMap, rules) {
            return function(word) {
              var token = word.toLowerCase();
              if (keepMap.hasOwnProperty(token)) {
                return restoreCase(word, token);
              }
              if (replaceMap.hasOwnProperty(token)) {
                return restoreCase(word, replaceMap[token]);
              }
              return sanitizeWord(token, word, rules);
            };
          }
          __name(replaceWord, "replaceWord");
          function checkWord(replaceMap, keepMap, rules, bool) {
            return function(word) {
              var token = word.toLowerCase();
              if (keepMap.hasOwnProperty(token))
                return true;
              if (replaceMap.hasOwnProperty(token))
                return false;
              return sanitizeWord(token, token, rules) === token;
            };
          }
          __name(checkWord, "checkWord");
          function pluralize2(word, count2, inclusive) {
            var pluralized = count2 === 1 ? pluralize2.singular(word) : pluralize2.plural(word);
            return (inclusive ? count2 + " " : "") + pluralized;
          }
          __name(pluralize2, "pluralize");
          pluralize2.plural = replaceWord(irregularSingles, irregularPlurals, pluralRules);
          pluralize2.isPlural = checkWord(irregularSingles, irregularPlurals, pluralRules);
          pluralize2.singular = replaceWord(irregularPlurals, irregularSingles, singularRules);
          pluralize2.isSingular = checkWord(irregularPlurals, irregularSingles, singularRules);
          pluralize2.addPluralRule = function(rule, replacement) {
            pluralRules.push([sanitizeRule(rule), replacement]);
          };
          pluralize2.addSingularRule = function(rule, replacement) {
            singularRules.push([sanitizeRule(rule), replacement]);
          };
          pluralize2.addUncountableRule = function(word) {
            if (typeof word === "string") {
              uncountables[word.toLowerCase()] = true;
              return;
            }
            pluralize2.addPluralRule(word, "$0");
            pluralize2.addSingularRule(word, "$0");
          };
          pluralize2.addIrregularRule = function(single, plural) {
            plural = plural.toLowerCase();
            single = single.toLowerCase();
            irregularSingles[single] = plural;
            irregularPlurals[plural] = single;
          };
          [
            ["I", "we"],
            ["me", "us"],
            ["he", "they"],
            ["she", "they"],
            ["them", "them"],
            ["myself", "ourselves"],
            ["yourself", "yourselves"],
            ["itself", "themselves"],
            ["herself", "themselves"],
            ["himself", "themselves"],
            ["themself", "themselves"],
            ["is", "are"],
            ["was", "were"],
            ["has", "have"],
            ["this", "these"],
            ["that", "those"],
            ["echo", "echoes"],
            ["dingo", "dingoes"],
            ["volcano", "volcanoes"],
            ["tornado", "tornadoes"],
            ["torpedo", "torpedoes"],
            ["genus", "genera"],
            ["viscus", "viscera"],
            ["stigma", "stigmata"],
            ["stoma", "stomata"],
            ["dogma", "dogmata"],
            ["lemma", "lemmata"],
            ["schema", "schemata"],
            ["anathema", "anathemata"],
            ["ox", "oxen"],
            ["axe", "axes"],
            ["die", "dice"],
            ["yes", "yeses"],
            ["foot", "feet"],
            ["eave", "eaves"],
            ["goose", "geese"],
            ["tooth", "teeth"],
            ["quiz", "quizzes"],
            ["human", "humans"],
            ["proof", "proofs"],
            ["carve", "carves"],
            ["valve", "valves"],
            ["looey", "looies"],
            ["thief", "thieves"],
            ["groove", "grooves"],
            ["pickaxe", "pickaxes"],
            ["passerby", "passersby"]
          ].forEach(function(rule) {
            return pluralize2.addIrregularRule(rule[0], rule[1]);
          });
          [
            [/s?$/i, "s"],
            [/[^\u0000-\u007F]$/i, "$0"],
            [/([^aeiou]ese)$/i, "$1"],
            [/(ax|test)is$/i, "$1es"],
            [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, "$1es"],
            [/(e[mn]u)s?$/i, "$1s"],
            [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, "$1"],
            [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, "$1i"],
            [/(alumn|alg|vertebr)(?:a|ae)$/i, "$1ae"],
            [/(seraph|cherub)(?:im)?$/i, "$1im"],
            [/(her|at|gr)o$/i, "$1oes"],
            [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, "$1a"],
            [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, "$1a"],
            [/sis$/i, "ses"],
            [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, "$1$2ves"],
            [/([^aeiouy]|qu)y$/i, "$1ies"],
            [/([^ch][ieo][ln])ey$/i, "$1ies"],
            [/(x|ch|ss|sh|zz)$/i, "$1es"],
            [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, "$1ices"],
            [/\b((?:tit)?m|l)(?:ice|ouse)$/i, "$1ice"],
            [/(pe)(?:rson|ople)$/i, "$1ople"],
            [/(child)(?:ren)?$/i, "$1ren"],
            [/eaux$/i, "$0"],
            [/m[ae]n$/i, "men"],
            ["thou", "you"]
          ].forEach(function(rule) {
            return pluralize2.addPluralRule(rule[0], rule[1]);
          });
          [
            [/s$/i, ""],
            [/(ss)$/i, "$1"],
            [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\w]|^)li)ves$/i, "$1fe"],
            [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, "$1f"],
            [/ies$/i, "y"],
            [/\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, "$1ie"],
            [/\b(mon|smil)ies$/i, "$1ey"],
            [/\b((?:tit)?m|l)ice$/i, "$1ouse"],
            [/(seraph|cherub)im$/i, "$1"],
            [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, "$1"],
            [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, "$1sis"],
            [/(movie|twelve|abuse|e[mn]u)s$/i, "$1"],
            [/(test)(?:is|es)$/i, "$1is"],
            [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, "$1us"],
            [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, "$1um"],
            [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, "$1on"],
            [/(alumn|alg|vertebr)ae$/i, "$1a"],
            [/(cod|mur|sil|vert|ind)ices$/i, "$1ex"],
            [/(matr|append)ices$/i, "$1ix"],
            [/(pe)(rson|ople)$/i, "$1rson"],
            [/(child)ren$/i, "$1"],
            [/(eau)x?$/i, "$1"],
            [/men$/i, "man"]
          ].forEach(function(rule) {
            return pluralize2.addSingularRule(rule[0], rule[1]);
          });
          [
            "adulthood",
            "advice",
            "agenda",
            "aid",
            "aircraft",
            "alcohol",
            "ammo",
            "analytics",
            "anime",
            "athletics",
            "audio",
            "bison",
            "blood",
            "bream",
            "buffalo",
            "butter",
            "carp",
            "cash",
            "chassis",
            "chess",
            "clothing",
            "cod",
            "commerce",
            "cooperation",
            "corps",
            "debris",
            "diabetes",
            "digestion",
            "elk",
            "energy",
            "equipment",
            "excretion",
            "expertise",
            "firmware",
            "flounder",
            "fun",
            "gallows",
            "garbage",
            "graffiti",
            "hardware",
            "headquarters",
            "health",
            "herpes",
            "highjinks",
            "homework",
            "housework",
            "information",
            "jeans",
            "justice",
            "kudos",
            "labour",
            "literature",
            "machinery",
            "mackerel",
            "mail",
            "media",
            "mews",
            "moose",
            "music",
            "mud",
            "manga",
            "news",
            "only",
            "personnel",
            "pike",
            "plankton",
            "pliers",
            "police",
            "pollution",
            "premises",
            "rain",
            "research",
            "rice",
            "salmon",
            "scissors",
            "series",
            "sewage",
            "shambles",
            "shrimp",
            "software",
            "species",
            "staff",
            "swine",
            "tennis",
            "traffic",
            "transportation",
            "trout",
            "tuna",
            "wealth",
            "welfare",
            "whiting",
            "wildebeest",
            "wildlife",
            "you",
            /pok[eé]mon$/i,
            /[^aeiou]ese$/i,
            /deer$/i,
            /fish$/i,
            /measles$/i,
            /o[iu]s$/i,
            /pox$/i,
            /sheep$/i
          ].forEach(pluralize2.addUncountableRule);
          return pluralize2;
        });
      }
    });
    var require_is_regexp = __commonJS({
      "../../node_modules/.pnpm/is-regexp@2.1.0/node_modules/is-regexp/index.js"(exports2, module2) {
        "use strict";
        module2.exports = (input) => Object.prototype.toString.call(input) === "[object RegExp]";
      }
    });
    var require_is_obj = __commonJS({
      "../../node_modules/.pnpm/is-obj@2.0.0/node_modules/is-obj/index.js"(exports2, module2) {
        "use strict";
        module2.exports = (value) => {
          const type = typeof value;
          return value !== null && (type === "object" || type === "function");
        };
      }
    });
    var require_lib = __commonJS({
      "../../node_modules/.pnpm/get-own-enumerable-property-symbols@3.0.2/node_modules/get-own-enumerable-property-symbols/lib/index.js"(exports2) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", { value: true });
        exports2.default = (object) => Object.getOwnPropertySymbols(object).filter((keySymbol) => Object.prototype.propertyIsEnumerable.call(object, keySymbol));
      }
    });
    var require_package2 = __commonJS({
      "package.json"(exports2, module2) {
        module2.exports = {
          name: "@prisma/client",
          version: "4.1.0",
          description: "Prisma Client is an auto-generated, type-safe and modern JavaScript/TypeScript ORM for Node.js that's tailored to your data. Supports MySQL, PostgreSQL, MariaDB, SQLite databases.",
          keywords: [
            "orm",
            "prisma2",
            "prisma",
            "client",
            "query",
            "database",
            "sql",
            "postgres",
            "postgresql",
            "mysql",
            "sqlite",
            "mariadb",
            "mssql",
            "typescript",
            "query-builder"
          ],
          main: "index.js",
          browser: "index-browser.js",
          types: "index.d.ts",
          license: "Apache-2.0",
          engines: {
            node: ">=14.17"
          },
          homepage: "https://www.prisma.io",
          repository: {
            type: "git",
            url: "https://github.com/prisma/prisma.git",
            directory: "packages/client"
          },
          author: "Tim Suchanek <suchanek@prisma.io>",
          bugs: "https://github.com/prisma/prisma/issues",
          scripts: {
            dev: "DEV=true node -r esbuild-register helpers/build.ts",
            build: "node -r esbuild-register helpers/build.ts",
            test: "jest --verbose",
            "test:functional": "node -r esbuild-register helpers/functional-test/run-tests.ts",
            "test:functional:code": "node -r esbuild-register helpers/functional-test/run-tests.ts --no-types",
            "test:functional:types": "node -r esbuild-register helpers/functional-test/run-tests.ts --types-only",
            "test-notypes": "jest --verbose --testPathIgnorePatterns src/__tests__/types/types.test.ts",
            generate: "node scripts/postinstall.js",
            postinstall: "node scripts/postinstall.js",
            prepublishOnly: "pnpm run build",
            "new-test": "NODE_OPTIONS='-r ts-node/register' yo ./helpers/generator-test/index.ts"
          },
          files: [
            "README.md",
            "runtime",
            "scripts",
            "generator-build",
            "edge.js",
            "edge.d.ts",
            "index.js",
            "index.d.ts",
            "index-browser.js"
          ],
          devDependencies: {
            "@faker-js/faker": "7.3.0",
            "@jest/test-sequencer": "28.1.1",
            "@microsoft/api-extractor": "7.25.2",
            "@opentelemetry/api": "1.1.0",
            "@opentelemetry/context-async-hooks": "^1.4.0",
            "@opentelemetry/instrumentation": "^0.30.0",
            "@opentelemetry/resources": "^1.4.0",
            "@opentelemetry/sdk-trace-base": "1.4.0",
            "@opentelemetry/semantic-conventions": "^1.4.0",
            "@prisma/debug": "workspace:4.1.0",
            "@prisma/engine-core": "workspace:4.1.0",
            "@prisma/engines": "workspace:4.1.0",
            "@prisma/fetch-engine": "workspace:4.1.0",
            "@prisma/generator-helper": "workspace:4.1.0",
            "@prisma/get-platform": "workspace:4.1.0",
            "@prisma/instrumentation": "workspace:4.1.0",
            "@prisma/internals": "workspace:4.1.0",
            "@prisma/migrate": "workspace:4.1.0",
            "@swc-node/register": "1.5.1",
            "@swc/core": "1.2.204",
            "@swc/jest": "0.2.21",
            "@timsuchanek/copy": "1.4.5",
            "@types/debug": "4.1.7",
            "@types/jest": "28.1.5",
            "@types/js-levenshtein": "1.1.1",
            "@types/mssql": "8.0.3",
            "@types/node": "12.20.55",
            "@types/pg": "8.6.5",
            "@types/yeoman-generator": "^5.2.10",
            arg: "5.0.2",
            benchmark: "2.1.4",
            chalk: "4.1.2",
            cuid: "2.1.8",
            "decimal.js": "10.3.1",
            esbuild: "0.14.47",
            execa: "5.1.1",
            "expect-type": "0.13.0",
            "flat-map-polyfill": "0.3.8",
            "fs-extra": "10.1.0",
            "fs-monkey": "1.0.3",
            "get-own-enumerable-property-symbols": "3.0.2",
            globby: "11.1.0",
            "indent-string": "4.0.0",
            "is-obj": "2.0.0",
            "is-regexp": "2.1.0",
            jest: "28.1.2",
            "jest-junit": "14.0.0",
            "js-levenshtein": "1.1.6",
            klona: "2.0.5",
            "lz-string": "1.4.4",
            "make-dir": "3.1.0",
            mariadb: "3.0.0",
            mssql: "8.1.2",
            pg: "8.7.3",
            "pkg-up": "3.1.0",
            pluralize: "8.0.0",
            "replace-string": "3.1.0",
            resolve: "1.22.1",
            rimraf: "3.0.2",
            "sort-keys": "4.2.0",
            "source-map-support": "0.5.21",
            "sql-template-tag": "4.0.0",
            "stacktrace-parser": "0.1.10",
            "strip-ansi": "6.0.1",
            "strip-indent": "3.0.0",
            "ts-jest": "28.0.5",
            "ts-node": "10.8.1",
            tsd: "0.21.0",
            typescript: "4.7.4",
            "yeoman-generator": "^5.6.1",
            yo: "^4.3.0"
          },
          peerDependencies: {
            prisma: "*"
          },
          peerDependenciesMeta: {
            prisma: {
              optional: true
            }
          },
          dependencies: {
            "@prisma/engines-version": "4.1.0-48.8d8414deb360336e4698a65aa45a1fbaf1ce13d8"
          },
          sideEffects: false
        };
      }
    });
    var runtime_exports = {};
    __export(runtime_exports, {
      DMMF: () => DMMF,
      DMMFClass: () => DMMFHelper,
      Decimal: () => decimal_default,
      Engine: () => Engine,
      MetricsClient: () => MetricsClient,
      NotFoundError: () => NotFoundError2,
      PrismaClientInitializationError: () => PrismaClientInitializationError,
      PrismaClientKnownRequestError: () => PrismaClientKnownRequestError,
      PrismaClientRustPanicError: () => PrismaClientRustPanicError,
      PrismaClientUnknownRequestError: () => PrismaClientUnknownRequestError,
      PrismaClientValidationError: () => PrismaClientValidationError,
      Sql: () => import_sql_template_tag.Sql,
      decompressFromBase64: () => decompressFromBase642,
      empty: () => import_sql_template_tag.empty,
      findSync: () => findSync,
      getPrismaClient: () => getPrismaClient,
      join: () => import_sql_template_tag.join,
      makeDocument: () => makeDocument,
      objectEnumValues: () => objectEnumValues,
      raw: () => import_sql_template_tag.raw,
      sqltag: () => import_sql_template_tag.sqltag,
      transformDocument: () => transformDocument,
      unpack: () => unpack,
      warnEnvConflicts: () => warnEnvConflicts
    });
    module.exports = __toCommonJS(runtime_exports);
    var lzString = __toESM(require_lz_string());
    var MetricsClient = class {
      constructor(engine) {
        this._engine = engine;
      }
      prometheus(options) {
        return this._engine.metrics({ format: "prometheus", ...options });
      }
      json(options) {
        return this._engine.metrics({ format: "json", ...options });
      }
    };
    __name(MetricsClient, "MetricsClient");
    function applyMixins(derivedCtor, constructors) {
      var _a22;
      for (const baseCtor of constructors) {
        for (const name of Object.getOwnPropertyNames(baseCtor.prototype)) {
          Object.defineProperty(derivedCtor.prototype, name, (_a22 = Object.getOwnPropertyDescriptor(baseCtor.prototype, name)) != null ? _a22 : /* @__PURE__ */ Object.create(null));
        }
      }
    }
    __name(applyMixins, "applyMixins");
    var import_chalk = __toESM(require_source());
    var EXP_LIMIT = 9e15;
    var MAX_DIGITS = 1e9;
    var NUMERALS = "0123456789abcdef";
    var LN10 = "2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058";
    var PI = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789";
    var DEFAULTS = {
      precision: 20,
      rounding: 4,
      modulo: 1,
      toExpNeg: -7,
      toExpPos: 21,
      minE: -EXP_LIMIT,
      maxE: EXP_LIMIT,
      crypto: false
    };
    var inexact;
    var quadrant;
    var external = true;
    var decimalError = "[DecimalError] ";
    var invalidArgument = decimalError + "Invalid argument: ";
    var precisionLimitExceeded = decimalError + "Precision limit exceeded";
    var cryptoUnavailable = decimalError + "crypto unavailable";
    var tag = "[object Decimal]";
    var mathfloor = Math.floor;
    var mathpow = Math.pow;
    var isBinary = /^0b([01]+(\.[01]*)?|\.[01]+)(p[+-]?\d+)?$/i;
    var isHex = /^0x([0-9a-f]+(\.[0-9a-f]*)?|\.[0-9a-f]+)(p[+-]?\d+)?$/i;
    var isOctal = /^0o([0-7]+(\.[0-7]*)?|\.[0-7]+)(p[+-]?\d+)?$/i;
    var isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
    var BASE = 1e7;
    var LOG_BASE = 7;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var LN10_PRECISION = LN10.length - 1;
    var PI_PRECISION = PI.length - 1;
    var P = { toStringTag: tag };
    P.absoluteValue = P.abs = function() {
      var x = new this.constructor(this);
      if (x.s < 0)
        x.s = 1;
      return finalise(x);
    };
    P.ceil = function() {
      return finalise(new this.constructor(this), this.e + 1, 2);
    };
    P.clampedTo = P.clamp = function(min2, max2) {
      var k, x = this, Ctor = x.constructor;
      min2 = new Ctor(min2);
      max2 = new Ctor(max2);
      if (!min2.s || !max2.s)
        return new Ctor(NaN);
      if (min2.gt(max2))
        throw Error(invalidArgument + max2);
      k = x.cmp(min2);
      return k < 0 ? min2 : x.cmp(max2) > 0 ? max2 : new Ctor(x);
    };
    P.comparedTo = P.cmp = function(y) {
      var i, j, xdL, ydL, x = this, xd = x.d, yd = (y = new x.constructor(y)).d, xs = x.s, ys = y.s;
      if (!xd || !yd) {
        return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;
      }
      if (!xd[0] || !yd[0])
        return xd[0] ? xs : yd[0] ? -ys : 0;
      if (xs !== ys)
        return xs;
      if (x.e !== y.e)
        return x.e > y.e ^ xs < 0 ? 1 : -1;
      xdL = xd.length;
      ydL = yd.length;
      for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
        if (xd[i] !== yd[i])
          return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;
      }
      return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;
    };
    P.cosine = P.cos = function() {
      var pr, rm, x = this, Ctor = x.constructor;
      if (!x.d)
        return new Ctor(NaN);
      if (!x.d[0])
        return new Ctor(1);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
      Ctor.rounding = 1;
      x = cosine(Ctor, toLessThanHalfPi(Ctor, x));
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);
    };
    P.cubeRoot = P.cbrt = function() {
      var e, m, n, r, rep, s, sd, t, t3, t3plusx, x = this, Ctor = x.constructor;
      if (!x.isFinite() || x.isZero())
        return new Ctor(x);
      external = false;
      s = x.s * mathpow(x.s * x, 1 / 3);
      if (!s || Math.abs(s) == 1 / 0) {
        n = digitsToString(x.d);
        e = x.e;
        if (s = (e - n.length + 1) % 3)
          n += s == 1 || s == -2 ? "0" : "00";
        s = mathpow(n, 1 / 3);
        e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));
        if (s == 1 / 0) {
          n = "5e" + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf("e") + 1) + e;
        }
        r = new Ctor(n);
        r.s = x.s;
      } else {
        r = new Ctor(s.toString());
      }
      sd = (e = Ctor.precision) + 3;
      for (; ; ) {
        t = r;
        t3 = t.times(t).times(t);
        t3plusx = t3.plus(x);
        r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);
        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
          n = n.slice(sd - 3, sd + 1);
          if (n == "9999" || !rep && n == "4999") {
            if (!rep) {
              finalise(t, e + 1, 0);
              if (t.times(t).times(t).eq(x)) {
                r = t;
                break;
              }
            }
            sd += 4;
            rep = 1;
          } else {
            if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
              finalise(r, e + 1, 1);
              m = !r.times(r).times(r).eq(x);
            }
            break;
          }
        }
      }
      external = true;
      return finalise(r, e, Ctor.rounding, m);
    };
    P.decimalPlaces = P.dp = function() {
      var w, d = this.d, n = NaN;
      if (d) {
        w = d.length - 1;
        n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;
        w = d[w];
        if (w)
          for (; w % 10 == 0; w /= 10)
            n--;
        if (n < 0)
          n = 0;
      }
      return n;
    };
    P.dividedBy = P.div = function(y) {
      return divide(this, new this.constructor(y));
    };
    P.dividedToIntegerBy = P.divToInt = function(y) {
      var x = this, Ctor = x.constructor;
      return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);
    };
    P.equals = P.eq = function(y) {
      return this.cmp(y) === 0;
    };
    P.floor = function() {
      return finalise(new this.constructor(this), this.e + 1, 3);
    };
    P.greaterThan = P.gt = function(y) {
      return this.cmp(y) > 0;
    };
    P.greaterThanOrEqualTo = P.gte = function(y) {
      var k = this.cmp(y);
      return k == 1 || k === 0;
    };
    P.hyperbolicCosine = P.cosh = function() {
      var k, n, pr, rm, len, x = this, Ctor = x.constructor, one = new Ctor(1);
      if (!x.isFinite())
        return new Ctor(x.s ? 1 / 0 : NaN);
      if (x.isZero())
        return one;
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
      Ctor.rounding = 1;
      len = x.d.length;
      if (len < 32) {
        k = Math.ceil(len / 3);
        n = (1 / tinyPow(4, k)).toString();
      } else {
        k = 16;
        n = "2.3283064365386962890625e-10";
      }
      x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);
      var cosh2_x, i = k, d8 = new Ctor(8);
      for (; i--; ) {
        cosh2_x = x.times(x);
        x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));
      }
      return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);
    };
    P.hyperbolicSine = P.sinh = function() {
      var k, pr, rm, len, x = this, Ctor = x.constructor;
      if (!x.isFinite() || x.isZero())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;
      Ctor.rounding = 1;
      len = x.d.length;
      if (len < 3) {
        x = taylorSeries(Ctor, 2, x, x, true);
      } else {
        k = 1.4 * Math.sqrt(len);
        k = k > 16 ? 16 : k | 0;
        x = x.times(1 / tinyPow(5, k));
        x = taylorSeries(Ctor, 2, x, x, true);
        var sinh2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
        for (; k--; ) {
          sinh2_x = x.times(x);
          x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));
        }
      }
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return finalise(x, pr, rm, true);
    };
    P.hyperbolicTangent = P.tanh = function() {
      var pr, rm, x = this, Ctor = x.constructor;
      if (!x.isFinite())
        return new Ctor(x.s);
      if (x.isZero())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + 7;
      Ctor.rounding = 1;
      return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);
    };
    P.inverseCosine = P.acos = function() {
      var halfPi, x = this, Ctor = x.constructor, k = x.abs().cmp(1), pr = Ctor.precision, rm = Ctor.rounding;
      if (k !== -1) {
        return k === 0 ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0) : new Ctor(NaN);
      }
      if (x.isZero())
        return getPi(Ctor, pr + 4, rm).times(0.5);
      Ctor.precision = pr + 6;
      Ctor.rounding = 1;
      x = x.asin();
      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return halfPi.minus(x);
    };
    P.inverseHyperbolicCosine = P.acosh = function() {
      var pr, rm, x = this, Ctor = x.constructor;
      if (x.lte(1))
        return new Ctor(x.eq(1) ? 0 : NaN);
      if (!x.isFinite())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;
      Ctor.rounding = 1;
      external = false;
      x = x.times(x).minus(1).sqrt().plus(x);
      external = true;
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return x.ln();
    };
    P.inverseHyperbolicSine = P.asinh = function() {
      var pr, rm, x = this, Ctor = x.constructor;
      if (!x.isFinite() || x.isZero())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;
      Ctor.rounding = 1;
      external = false;
      x = x.times(x).plus(1).sqrt().plus(x);
      external = true;
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return x.ln();
    };
    P.inverseHyperbolicTangent = P.atanh = function() {
      var pr, rm, wpr, xsd, x = this, Ctor = x.constructor;
      if (!x.isFinite())
        return new Ctor(NaN);
      if (x.e >= 0)
        return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      xsd = x.sd();
      if (Math.max(xsd, pr) < 2 * -x.e - 1)
        return finalise(new Ctor(x), pr, rm, true);
      Ctor.precision = wpr = xsd - x.e;
      x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);
      Ctor.precision = pr + 4;
      Ctor.rounding = 1;
      x = x.ln();
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return x.times(0.5);
    };
    P.inverseSine = P.asin = function() {
      var halfPi, k, pr, rm, x = this, Ctor = x.constructor;
      if (x.isZero())
        return new Ctor(x);
      k = x.abs().cmp(1);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      if (k !== -1) {
        if (k === 0) {
          halfPi = getPi(Ctor, pr + 4, rm).times(0.5);
          halfPi.s = x.s;
          return halfPi;
        }
        return new Ctor(NaN);
      }
      Ctor.precision = pr + 6;
      Ctor.rounding = 1;
      x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return x.times(2);
    };
    P.inverseTangent = P.atan = function() {
      var i, j, k, n, px, t, r, wpr, x2, x = this, Ctor = x.constructor, pr = Ctor.precision, rm = Ctor.rounding;
      if (!x.isFinite()) {
        if (!x.s)
          return new Ctor(NaN);
        if (pr + 4 <= PI_PRECISION) {
          r = getPi(Ctor, pr + 4, rm).times(0.5);
          r.s = x.s;
          return r;
        }
      } else if (x.isZero()) {
        return new Ctor(x);
      } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {
        r = getPi(Ctor, pr + 4, rm).times(0.25);
        r.s = x.s;
        return r;
      }
      Ctor.precision = wpr = pr + 10;
      Ctor.rounding = 1;
      k = Math.min(28, wpr / LOG_BASE + 2 | 0);
      for (i = k; i; --i)
        x = x.div(x.times(x).plus(1).sqrt().plus(1));
      external = false;
      j = Math.ceil(wpr / LOG_BASE);
      n = 1;
      x2 = x.times(x);
      r = new Ctor(x);
      px = x;
      for (; i !== -1; ) {
        px = px.times(x2);
        t = r.minus(px.div(n += 2));
        px = px.times(x2);
        r = t.plus(px.div(n += 2));
        if (r.d[j] !== void 0)
          for (i = j; r.d[i] === t.d[i] && i--; )
            ;
      }
      if (k)
        r = r.times(2 << k - 1);
      external = true;
      return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);
    };
    P.isFinite = function() {
      return !!this.d;
    };
    P.isInteger = P.isInt = function() {
      return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;
    };
    P.isNaN = function() {
      return !this.s;
    };
    P.isNegative = P.isNeg = function() {
      return this.s < 0;
    };
    P.isPositive = P.isPos = function() {
      return this.s > 0;
    };
    P.isZero = function() {
      return !!this.d && this.d[0] === 0;
    };
    P.lessThan = P.lt = function(y) {
      return this.cmp(y) < 0;
    };
    P.lessThanOrEqualTo = P.lte = function(y) {
      return this.cmp(y) < 1;
    };
    P.logarithm = P.log = function(base) {
      var isBase10, d, denominator, k, inf, num, sd, r, arg2 = this, Ctor = arg2.constructor, pr = Ctor.precision, rm = Ctor.rounding, guard = 5;
      if (base == null) {
        base = new Ctor(10);
        isBase10 = true;
      } else {
        base = new Ctor(base);
        d = base.d;
        if (base.s < 0 || !d || !d[0] || base.eq(1))
          return new Ctor(NaN);
        isBase10 = base.eq(10);
      }
      d = arg2.d;
      if (arg2.s < 0 || !d || !d[0] || arg2.eq(1)) {
        return new Ctor(d && !d[0] ? -1 / 0 : arg2.s != 1 ? NaN : d ? 0 : 1 / 0);
      }
      if (isBase10) {
        if (d.length > 1) {
          inf = true;
        } else {
          for (k = d[0]; k % 10 === 0; )
            k /= 10;
          inf = k !== 1;
        }
      }
      external = false;
      sd = pr + guard;
      num = naturalLogarithm(arg2, sd);
      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
      r = divide(num, denominator, sd, 1);
      if (checkRoundingDigits(r.d, k = pr, rm)) {
        do {
          sd += 10;
          num = naturalLogarithm(arg2, sd);
          denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);
          r = divide(num, denominator, sd, 1);
          if (!inf) {
            if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {
              r = finalise(r, pr + 1, 0);
            }
            break;
          }
        } while (checkRoundingDigits(r.d, k += 10, rm));
      }
      external = true;
      return finalise(r, pr, rm);
    };
    P.minus = P.sub = function(y) {
      var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd, x = this, Ctor = x.constructor;
      y = new Ctor(y);
      if (!x.d || !y.d) {
        if (!x.s || !y.s)
          y = new Ctor(NaN);
        else if (x.d)
          y.s = -y.s;
        else
          y = new Ctor(y.d || x.s !== y.s ? x : NaN);
        return y;
      }
      if (x.s != y.s) {
        y.s = -y.s;
        return x.plus(y);
      }
      xd = x.d;
      yd = y.d;
      pr = Ctor.precision;
      rm = Ctor.rounding;
      if (!xd[0] || !yd[0]) {
        if (yd[0])
          y.s = -y.s;
        else if (xd[0])
          y = new Ctor(x);
        else
          return new Ctor(rm === 3 ? -0 : 0);
        return external ? finalise(y, pr, rm) : y;
      }
      e = mathfloor(y.e / LOG_BASE);
      xe = mathfloor(x.e / LOG_BASE);
      xd = xd.slice();
      k = xe - e;
      if (k) {
        xLTy = k < 0;
        if (xLTy) {
          d = xd;
          k = -k;
          len = yd.length;
        } else {
          d = yd;
          e = xe;
          len = xd.length;
        }
        i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
        if (k > i) {
          k = i;
          d.length = 1;
        }
        d.reverse();
        for (i = k; i--; )
          d.push(0);
        d.reverse();
      } else {
        i = xd.length;
        len = yd.length;
        xLTy = i < len;
        if (xLTy)
          len = i;
        for (i = 0; i < len; i++) {
          if (xd[i] != yd[i]) {
            xLTy = xd[i] < yd[i];
            break;
          }
        }
        k = 0;
      }
      if (xLTy) {
        d = xd;
        xd = yd;
        yd = d;
        y.s = -y.s;
      }
      len = xd.length;
      for (i = yd.length - len; i > 0; --i)
        xd[len++] = 0;
      for (i = yd.length; i > k; ) {
        if (xd[--i] < yd[i]) {
          for (j = i; j && xd[--j] === 0; )
            xd[j] = BASE - 1;
          --xd[j];
          xd[i] += BASE;
        }
        xd[i] -= yd[i];
      }
      for (; xd[--len] === 0; )
        xd.pop();
      for (; xd[0] === 0; xd.shift())
        --e;
      if (!xd[0])
        return new Ctor(rm === 3 ? -0 : 0);
      y.d = xd;
      y.e = getBase10Exponent(xd, e);
      return external ? finalise(y, pr, rm) : y;
    };
    P.modulo = P.mod = function(y) {
      var q, x = this, Ctor = x.constructor;
      y = new Ctor(y);
      if (!x.d || !y.s || y.d && !y.d[0])
        return new Ctor(NaN);
      if (!y.d || x.d && !x.d[0]) {
        return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);
      }
      external = false;
      if (Ctor.modulo == 9) {
        q = divide(x, y.abs(), 0, 3, 1);
        q.s *= y.s;
      } else {
        q = divide(x, y, 0, Ctor.modulo, 1);
      }
      q = q.times(y);
      external = true;
      return x.minus(q);
    };
    P.naturalExponential = P.exp = function() {
      return naturalExponential(this);
    };
    P.naturalLogarithm = P.ln = function() {
      return naturalLogarithm(this);
    };
    P.negated = P.neg = function() {
      var x = new this.constructor(this);
      x.s = -x.s;
      return finalise(x);
    };
    P.plus = P.add = function(y) {
      var carry, d, e, i, k, len, pr, rm, xd, yd, x = this, Ctor = x.constructor;
      y = new Ctor(y);
      if (!x.d || !y.d) {
        if (!x.s || !y.s)
          y = new Ctor(NaN);
        else if (!x.d)
          y = new Ctor(y.d || x.s === y.s ? x : NaN);
        return y;
      }
      if (x.s != y.s) {
        y.s = -y.s;
        return x.minus(y);
      }
      xd = x.d;
      yd = y.d;
      pr = Ctor.precision;
      rm = Ctor.rounding;
      if (!xd[0] || !yd[0]) {
        if (!yd[0])
          y = new Ctor(x);
        return external ? finalise(y, pr, rm) : y;
      }
      k = mathfloor(x.e / LOG_BASE);
      e = mathfloor(y.e / LOG_BASE);
      xd = xd.slice();
      i = k - e;
      if (i) {
        if (i < 0) {
          d = xd;
          i = -i;
          len = yd.length;
        } else {
          d = yd;
          e = k;
          len = xd.length;
        }
        k = Math.ceil(pr / LOG_BASE);
        len = k > len ? k + 1 : len + 1;
        if (i > len) {
          i = len;
          d.length = 1;
        }
        d.reverse();
        for (; i--; )
          d.push(0);
        d.reverse();
      }
      len = xd.length;
      i = yd.length;
      if (len - i < 0) {
        i = len;
        d = yd;
        yd = xd;
        xd = d;
      }
      for (carry = 0; i; ) {
        carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
        xd[i] %= BASE;
      }
      if (carry) {
        xd.unshift(carry);
        ++e;
      }
      for (len = xd.length; xd[--len] == 0; )
        xd.pop();
      y.d = xd;
      y.e = getBase10Exponent(xd, e);
      return external ? finalise(y, pr, rm) : y;
    };
    P.precision = P.sd = function(z) {
      var k, x = this;
      if (z !== void 0 && z !== !!z && z !== 1 && z !== 0)
        throw Error(invalidArgument + z);
      if (x.d) {
        k = getPrecision(x.d);
        if (z && x.e + 1 > k)
          k = x.e + 1;
      } else {
        k = NaN;
      }
      return k;
    };
    P.round = function() {
      var x = this, Ctor = x.constructor;
      return finalise(new Ctor(x), x.e + 1, Ctor.rounding);
    };
    P.sine = P.sin = function() {
      var pr, rm, x = this, Ctor = x.constructor;
      if (!x.isFinite())
        return new Ctor(NaN);
      if (x.isZero())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;
      Ctor.rounding = 1;
      x = sine(Ctor, toLessThanHalfPi(Ctor, x));
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);
    };
    P.squareRoot = P.sqrt = function() {
      var m, n, sd, r, rep, t, x = this, d = x.d, e = x.e, s = x.s, Ctor = x.constructor;
      if (s !== 1 || !d || !d[0]) {
        return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);
      }
      external = false;
      s = Math.sqrt(+x);
      if (s == 0 || s == 1 / 0) {
        n = digitsToString(d);
        if ((n.length + e) % 2 == 0)
          n += "0";
        s = Math.sqrt(n);
        e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);
        if (s == 1 / 0) {
          n = "5e" + e;
        } else {
          n = s.toExponential();
          n = n.slice(0, n.indexOf("e") + 1) + e;
        }
        r = new Ctor(n);
      } else {
        r = new Ctor(s.toString());
      }
      sd = (e = Ctor.precision) + 3;
      for (; ; ) {
        t = r;
        r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);
        if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {
          n = n.slice(sd - 3, sd + 1);
          if (n == "9999" || !rep && n == "4999") {
            if (!rep) {
              finalise(t, e + 1, 0);
              if (t.times(t).eq(x)) {
                r = t;
                break;
              }
            }
            sd += 4;
            rep = 1;
          } else {
            if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
              finalise(r, e + 1, 1);
              m = !r.times(r).eq(x);
            }
            break;
          }
        }
      }
      external = true;
      return finalise(r, e, Ctor.rounding, m);
    };
    P.tangent = P.tan = function() {
      var pr, rm, x = this, Ctor = x.constructor;
      if (!x.isFinite())
        return new Ctor(NaN);
      if (x.isZero())
        return new Ctor(x);
      pr = Ctor.precision;
      rm = Ctor.rounding;
      Ctor.precision = pr + 10;
      Ctor.rounding = 1;
      x = x.sin();
      x.s = 1;
      x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);
      Ctor.precision = pr;
      Ctor.rounding = rm;
      return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);
    };
    P.times = P.mul = function(y) {
      var carry, e, i, k, r, rL, t, xdL, ydL, x = this, Ctor = x.constructor, xd = x.d, yd = (y = new Ctor(y)).d;
      y.s *= x.s;
      if (!xd || !xd[0] || !yd || !yd[0]) {
        return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd ? NaN : !xd || !yd ? y.s / 0 : y.s * 0);
      }
      e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);
      xdL = xd.length;
      ydL = yd.length;
      if (xdL < ydL) {
        r = xd;
        xd = yd;
        yd = r;
        rL = xdL;
        xdL = ydL;
        ydL = rL;
      }
      r = [];
      rL = xdL + ydL;
      for (i = rL; i--; )
        r.push(0);
      for (i = ydL; --i >= 0; ) {
        carry = 0;
        for (k = xdL + i; k > i; ) {
          t = r[k] + yd[i] * xd[k - i - 1] + carry;
          r[k--] = t % BASE | 0;
          carry = t / BASE | 0;
        }
        r[k] = (r[k] + carry) % BASE | 0;
      }
      for (; !r[--rL]; )
        r.pop();
      if (carry)
        ++e;
      else
        r.shift();
      y.d = r;
      y.e = getBase10Exponent(r, e);
      return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;
    };
    P.toBinary = function(sd, rm) {
      return toStringBinary(this, 2, sd, rm);
    };
    P.toDecimalPlaces = P.toDP = function(dp, rm) {
      var x = this, Ctor = x.constructor;
      x = new Ctor(x);
      if (dp === void 0)
        return x;
      checkInt32(dp, 0, MAX_DIGITS);
      if (rm === void 0)
        rm = Ctor.rounding;
      else
        checkInt32(rm, 0, 8);
      return finalise(x, dp + x.e + 1, rm);
    };
    P.toExponential = function(dp, rm) {
      var str, x = this, Ctor = x.constructor;
      if (dp === void 0) {
        str = finiteToString(x, true);
      } else {
        checkInt32(dp, 0, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
        x = finalise(new Ctor(x), dp + 1, rm);
        str = finiteToString(x, true, dp + 1);
      }
      return x.isNeg() && !x.isZero() ? "-" + str : str;
    };
    P.toFixed = function(dp, rm) {
      var str, y, x = this, Ctor = x.constructor;
      if (dp === void 0) {
        str = finiteToString(x);
      } else {
        checkInt32(dp, 0, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
        y = finalise(new Ctor(x), dp + x.e + 1, rm);
        str = finiteToString(y, false, dp + y.e + 1);
      }
      return x.isNeg() && !x.isZero() ? "-" + str : str;
    };
    P.toFraction = function(maxD) {
      var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r, x = this, xd = x.d, Ctor = x.constructor;
      if (!xd)
        return new Ctor(x);
      n1 = d0 = new Ctor(1);
      d1 = n0 = new Ctor(0);
      d = new Ctor(d1);
      e = d.e = getPrecision(xd) - x.e - 1;
      k = e % LOG_BASE;
      d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);
      if (maxD == null) {
        maxD = e > 0 ? d : n1;
      } else {
        n = new Ctor(maxD);
        if (!n.isInt() || n.lt(n1))
          throw Error(invalidArgument + n);
        maxD = n.gt(d) ? e > 0 ? d : n1 : n;
      }
      external = false;
      n = new Ctor(digitsToString(xd));
      pr = Ctor.precision;
      Ctor.precision = e = xd.length * LOG_BASE * 2;
      for (; ; ) {
        q = divide(n, d, 0, 1, 1);
        d2 = d0.plus(q.times(d1));
        if (d2.cmp(maxD) == 1)
          break;
        d0 = d1;
        d1 = d2;
        d2 = n1;
        n1 = n0.plus(q.times(d2));
        n0 = d2;
        d2 = d;
        d = n.minus(q.times(d2));
        n = d2;
      }
      d2 = divide(maxD.minus(d0), d1, 0, 1, 1);
      n0 = n0.plus(d2.times(n1));
      d0 = d0.plus(d2.times(d1));
      n0.s = n1.s = x.s;
      r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];
      Ctor.precision = pr;
      external = true;
      return r;
    };
    P.toHexadecimal = P.toHex = function(sd, rm) {
      return toStringBinary(this, 16, sd, rm);
    };
    P.toNearest = function(y, rm) {
      var x = this, Ctor = x.constructor;
      x = new Ctor(x);
      if (y == null) {
        if (!x.d)
          return x;
        y = new Ctor(1);
        rm = Ctor.rounding;
      } else {
        y = new Ctor(y);
        if (rm === void 0) {
          rm = Ctor.rounding;
        } else {
          checkInt32(rm, 0, 8);
        }
        if (!x.d)
          return y.s ? x : y;
        if (!y.d) {
          if (y.s)
            y.s = x.s;
          return y;
        }
      }
      if (y.d[0]) {
        external = false;
        x = divide(x, y, 0, rm, 1).times(y);
        external = true;
        finalise(x);
      } else {
        y.s = x.s;
        x = y;
      }
      return x;
    };
    P.toNumber = function() {
      return +this;
    };
    P.toOctal = function(sd, rm) {
      return toStringBinary(this, 8, sd, rm);
    };
    P.toPower = P.pow = function(y) {
      var e, k, pr, r, rm, s, x = this, Ctor = x.constructor, yn = +(y = new Ctor(y));
      if (!x.d || !y.d || !x.d[0] || !y.d[0])
        return new Ctor(mathpow(+x, yn));
      x = new Ctor(x);
      if (x.eq(1))
        return x;
      pr = Ctor.precision;
      rm = Ctor.rounding;
      if (y.eq(1))
        return finalise(x, pr, rm);
      e = mathfloor(y.e / LOG_BASE);
      if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
        r = intPow(Ctor, x, k, pr);
        return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);
      }
      s = x.s;
      if (s < 0) {
        if (e < y.d.length - 1)
          return new Ctor(NaN);
        if ((y.d[e] & 1) == 0)
          s = 1;
        if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {
          x.s = s;
          return x;
        }
      }
      k = mathpow(+x, yn);
      e = k == 0 || !isFinite(k) ? mathfloor(yn * (Math.log("0." + digitsToString(x.d)) / Math.LN10 + x.e + 1)) : new Ctor(k + "").e;
      if (e > Ctor.maxE + 1 || e < Ctor.minE - 1)
        return new Ctor(e > 0 ? s / 0 : 0);
      external = false;
      Ctor.rounding = x.s = 1;
      k = Math.min(12, (e + "").length);
      r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);
      if (r.d) {
        r = finalise(r, pr + 5, 1);
        if (checkRoundingDigits(r.d, pr, rm)) {
          e = pr + 10;
          r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);
          if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {
            r = finalise(r, pr + 1, 0);
          }
        }
      }
      r.s = s;
      external = true;
      Ctor.rounding = rm;
      return finalise(r, pr, rm);
    };
    P.toPrecision = function(sd, rm) {
      var str, x = this, Ctor = x.constructor;
      if (sd === void 0) {
        str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
      } else {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
        x = finalise(new Ctor(x), sd, rm);
        str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);
      }
      return x.isNeg() && !x.isZero() ? "-" + str : str;
    };
    P.toSignificantDigits = P.toSD = function(sd, rm) {
      var x = this, Ctor = x.constructor;
      if (sd === void 0) {
        sd = Ctor.precision;
        rm = Ctor.rounding;
      } else {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
      }
      return finalise(new Ctor(x), sd, rm);
    };
    P.toString = function() {
      var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
      return x.isNeg() && !x.isZero() ? "-" + str : str;
    };
    P.truncated = P.trunc = function() {
      return finalise(new this.constructor(this), this.e + 1, 1);
    };
    P.valueOf = P.toJSON = function() {
      var x = this, Ctor = x.constructor, str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);
      return x.isNeg() ? "-" + str : str;
    };
    function digitsToString(d) {
      var i, k, ws, indexOfLastWord = d.length - 1, str = "", w = d[0];
      if (indexOfLastWord > 0) {
        str += w;
        for (i = 1; i < indexOfLastWord; i++) {
          ws = d[i] + "";
          k = LOG_BASE - ws.length;
          if (k)
            str += getZeroString(k);
          str += ws;
        }
        w = d[i];
        ws = w + "";
        k = LOG_BASE - ws.length;
        if (k)
          str += getZeroString(k);
      } else if (w === 0) {
        return "0";
      }
      for (; w % 10 === 0; )
        w /= 10;
      return str + w;
    }
    __name(digitsToString, "digitsToString");
    function checkInt32(i, min2, max2) {
      if (i !== ~~i || i < min2 || i > max2) {
        throw Error(invalidArgument + i);
      }
    }
    __name(checkInt32, "checkInt32");
    function checkRoundingDigits(d, i, rm, repeating) {
      var di, k, r, rd;
      for (k = d[0]; k >= 10; k /= 10)
        --i;
      if (--i < 0) {
        i += LOG_BASE;
        di = 0;
      } else {
        di = Math.ceil((i + 1) / LOG_BASE);
        i %= LOG_BASE;
      }
      k = mathpow(10, LOG_BASE - i);
      rd = d[di] % k | 0;
      if (repeating == null) {
        if (i < 3) {
          if (i == 0)
            rd = rd / 100 | 0;
          else if (i == 1)
            rd = rd / 10 | 0;
          r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 5e4 || rd == 0;
        } else {
          r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 || (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;
        }
      } else {
        if (i < 4) {
          if (i == 0)
            rd = rd / 1e3 | 0;
          else if (i == 1)
            rd = rd / 100 | 0;
          else if (i == 2)
            rd = rd / 10 | 0;
          r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;
        } else {
          r = ((repeating || rm < 4) && rd + 1 == k || !repeating && rm > 3 && rd + 1 == k / 2) && (d[di + 1] / k / 1e3 | 0) == mathpow(10, i - 3) - 1;
        }
      }
      return r;
    }
    __name(checkRoundingDigits, "checkRoundingDigits");
    function convertBase(str, baseIn, baseOut) {
      var j, arr = [0], arrL, i = 0, strL = str.length;
      for (; i < strL; ) {
        for (arrL = arr.length; arrL--; )
          arr[arrL] *= baseIn;
        arr[0] += NUMERALS.indexOf(str.charAt(i++));
        for (j = 0; j < arr.length; j++) {
          if (arr[j] > baseOut - 1) {
            if (arr[j + 1] === void 0)
              arr[j + 1] = 0;
            arr[j + 1] += arr[j] / baseOut | 0;
            arr[j] %= baseOut;
          }
        }
      }
      return arr.reverse();
    }
    __name(convertBase, "convertBase");
    function cosine(Ctor, x) {
      var k, len, y;
      if (x.isZero())
        return x;
      len = x.d.length;
      if (len < 32) {
        k = Math.ceil(len / 3);
        y = (1 / tinyPow(4, k)).toString();
      } else {
        k = 16;
        y = "2.3283064365386962890625e-10";
      }
      Ctor.precision += k;
      x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));
      for (var i = k; i--; ) {
        var cos2x = x.times(x);
        x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);
      }
      Ctor.precision -= k;
      return x;
    }
    __name(cosine, "cosine");
    var divide = function() {
      function multiplyInteger(x, k, base) {
        var temp, carry = 0, i = x.length;
        for (x = x.slice(); i--; ) {
          temp = x[i] * k + carry;
          x[i] = temp % base | 0;
          carry = temp / base | 0;
        }
        if (carry)
          x.unshift(carry);
        return x;
      }
      __name(multiplyInteger, "multiplyInteger");
      function compare(a, b, aL, bL) {
        var i, r;
        if (aL != bL) {
          r = aL > bL ? 1 : -1;
        } else {
          for (i = r = 0; i < aL; i++) {
            if (a[i] != b[i]) {
              r = a[i] > b[i] ? 1 : -1;
              break;
            }
          }
        }
        return r;
      }
      __name(compare, "compare");
      function subtract(a, b, aL, base) {
        var i = 0;
        for (; aL--; ) {
          a[aL] -= i;
          i = a[aL] < b[aL] ? 1 : 0;
          a[aL] = i * base + a[aL] - b[aL];
        }
        for (; !a[0] && a.length > 1; )
          a.shift();
      }
      __name(subtract, "subtract");
      return function(x, y, pr, rm, dp, base) {
        var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz, Ctor = x.constructor, sign2 = x.s == y.s ? 1 : -1, xd = x.d, yd = y.d;
        if (!xd || !xd[0] || !yd || !yd[0]) {
          return new Ctor(!x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN : xd && xd[0] == 0 || !yd ? sign2 * 0 : sign2 / 0);
        }
        if (base) {
          logBase = 1;
          e = x.e - y.e;
        } else {
          base = BASE;
          logBase = LOG_BASE;
          e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);
        }
        yL = yd.length;
        xL = xd.length;
        q = new Ctor(sign2);
        qd = q.d = [];
        for (i = 0; yd[i] == (xd[i] || 0); i++)
          ;
        if (yd[i] > (xd[i] || 0))
          e--;
        if (pr == null) {
          sd = pr = Ctor.precision;
          rm = Ctor.rounding;
        } else if (dp) {
          sd = pr + (x.e - y.e) + 1;
        } else {
          sd = pr;
        }
        if (sd < 0) {
          qd.push(1);
          more = true;
        } else {
          sd = sd / logBase + 2 | 0;
          i = 0;
          if (yL == 1) {
            k = 0;
            yd = yd[0];
            sd++;
            for (; (i < xL || k) && sd--; i++) {
              t = k * base + (xd[i] || 0);
              qd[i] = t / yd | 0;
              k = t % yd | 0;
            }
            more = k || i < xL;
          } else {
            k = base / (yd[0] + 1) | 0;
            if (k > 1) {
              yd = multiplyInteger(yd, k, base);
              xd = multiplyInteger(xd, k, base);
              yL = yd.length;
              xL = xd.length;
            }
            xi = yL;
            rem = xd.slice(0, yL);
            remL = rem.length;
            for (; remL < yL; )
              rem[remL++] = 0;
            yz = yd.slice();
            yz.unshift(0);
            yd0 = yd[0];
            if (yd[1] >= base / 2)
              ++yd0;
            do {
              k = 0;
              cmp = compare(yd, rem, yL, remL);
              if (cmp < 0) {
                rem0 = rem[0];
                if (yL != remL)
                  rem0 = rem0 * base + (rem[1] || 0);
                k = rem0 / yd0 | 0;
                if (k > 1) {
                  if (k >= base)
                    k = base - 1;
                  prod = multiplyInteger(yd, k, base);
                  prodL = prod.length;
                  remL = rem.length;
                  cmp = compare(prod, rem, prodL, remL);
                  if (cmp == 1) {
                    k--;
                    subtract(prod, yL < prodL ? yz : yd, prodL, base);
                  }
                } else {
                  if (k == 0)
                    cmp = k = 1;
                  prod = yd.slice();
                }
                prodL = prod.length;
                if (prodL < remL)
                  prod.unshift(0);
                subtract(rem, prod, remL, base);
                if (cmp == -1) {
                  remL = rem.length;
                  cmp = compare(yd, rem, yL, remL);
                  if (cmp < 1) {
                    k++;
                    subtract(rem, yL < remL ? yz : yd, remL, base);
                  }
                }
                remL = rem.length;
              } else if (cmp === 0) {
                k++;
                rem = [0];
              }
              qd[i++] = k;
              if (cmp && rem[0]) {
                rem[remL++] = xd[xi] || 0;
              } else {
                rem = [xd[xi]];
                remL = 1;
              }
            } while ((xi++ < xL || rem[0] !== void 0) && sd--);
            more = rem[0] !== void 0;
          }
          if (!qd[0])
            qd.shift();
        }
        if (logBase == 1) {
          q.e = e;
          inexact = more;
        } else {
          for (i = 1, k = qd[0]; k >= 10; k /= 10)
            i++;
          q.e = i + e * logBase - 1;
          finalise(q, dp ? pr + q.e + 1 : pr, rm, more);
        }
        return q;
      };
    }();
    function finalise(x, sd, rm, isTruncated) {
      var digits, i, j, k, rd, roundUp, w, xd, xdi, Ctor = x.constructor;
      out:
        if (sd != null) {
          xd = x.d;
          if (!xd)
            return x;
          for (digits = 1, k = xd[0]; k >= 10; k /= 10)
            digits++;
          i = sd - digits;
          if (i < 0) {
            i += LOG_BASE;
            j = sd;
            w = xd[xdi = 0];
            rd = w / mathpow(10, digits - j - 1) % 10 | 0;
          } else {
            xdi = Math.ceil((i + 1) / LOG_BASE);
            k = xd.length;
            if (xdi >= k) {
              if (isTruncated) {
                for (; k++ <= xdi; )
                  xd.push(0);
                w = rd = 0;
                digits = 1;
                i %= LOG_BASE;
                j = i - LOG_BASE + 1;
              } else {
                break out;
              }
            } else {
              w = k = xd[xdi];
              for (digits = 1; k >= 10; k /= 10)
                digits++;
              i %= LOG_BASE;
              j = i - LOG_BASE + digits;
              rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;
            }
          }
          isTruncated = isTruncated || sd < 0 || xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));
          roundUp = rm < 4 ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 && (i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
          if (sd < 1 || !xd[0]) {
            xd.length = 0;
            if (roundUp) {
              sd -= x.e + 1;
              xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
              x.e = -sd || 0;
            } else {
              xd[0] = x.e = 0;
            }
            return x;
          }
          if (i == 0) {
            xd.length = xdi;
            k = 1;
            xdi--;
          } else {
            xd.length = xdi + 1;
            k = mathpow(10, LOG_BASE - i);
            xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;
          }
          if (roundUp) {
            for (; ; ) {
              if (xdi == 0) {
                for (i = 1, j = xd[0]; j >= 10; j /= 10)
                  i++;
                j = xd[0] += k;
                for (k = 1; j >= 10; j /= 10)
                  k++;
                if (i != k) {
                  x.e++;
                  if (xd[0] == BASE)
                    xd[0] = 1;
                }
                break;
              } else {
                xd[xdi] += k;
                if (xd[xdi] != BASE)
                  break;
                xd[xdi--] = 0;
                k = 1;
              }
            }
          }
          for (i = xd.length; xd[--i] === 0; )
            xd.pop();
        }
      if (external) {
        if (x.e > Ctor.maxE) {
          x.d = null;
          x.e = NaN;
        } else if (x.e < Ctor.minE) {
          x.e = 0;
          x.d = [0];
        }
      }
      return x;
    }
    __name(finalise, "finalise");
    function finiteToString(x, isExp, sd) {
      if (!x.isFinite())
        return nonFiniteToString(x);
      var k, e = x.e, str = digitsToString(x.d), len = str.length;
      if (isExp) {
        if (sd && (k = sd - len) > 0) {
          str = str.charAt(0) + "." + str.slice(1) + getZeroString(k);
        } else if (len > 1) {
          str = str.charAt(0) + "." + str.slice(1);
        }
        str = str + (x.e < 0 ? "e" : "e+") + x.e;
      } else if (e < 0) {
        str = "0." + getZeroString(-e - 1) + str;
        if (sd && (k = sd - len) > 0)
          str += getZeroString(k);
      } else if (e >= len) {
        str += getZeroString(e + 1 - len);
        if (sd && (k = sd - e - 1) > 0)
          str = str + "." + getZeroString(k);
      } else {
        if ((k = e + 1) < len)
          str = str.slice(0, k) + "." + str.slice(k);
        if (sd && (k = sd - len) > 0) {
          if (e + 1 === len)
            str += ".";
          str += getZeroString(k);
        }
      }
      return str;
    }
    __name(finiteToString, "finiteToString");
    function getBase10Exponent(digits, e) {
      var w = digits[0];
      for (e *= LOG_BASE; w >= 10; w /= 10)
        e++;
      return e;
    }
    __name(getBase10Exponent, "getBase10Exponent");
    function getLn10(Ctor, sd, pr) {
      if (sd > LN10_PRECISION) {
        external = true;
        if (pr)
          Ctor.precision = pr;
        throw Error(precisionLimitExceeded);
      }
      return finalise(new Ctor(LN10), sd, 1, true);
    }
    __name(getLn10, "getLn10");
    function getPi(Ctor, sd, rm) {
      if (sd > PI_PRECISION)
        throw Error(precisionLimitExceeded);
      return finalise(new Ctor(PI), sd, rm, true);
    }
    __name(getPi, "getPi");
    function getPrecision(digits) {
      var w = digits.length - 1, len = w * LOG_BASE + 1;
      w = digits[w];
      if (w) {
        for (; w % 10 == 0; w /= 10)
          len--;
        for (w = digits[0]; w >= 10; w /= 10)
          len++;
      }
      return len;
    }
    __name(getPrecision, "getPrecision");
    function getZeroString(k) {
      var zs = "";
      for (; k--; )
        zs += "0";
      return zs;
    }
    __name(getZeroString, "getZeroString");
    function intPow(Ctor, x, n, pr) {
      var isTruncated, r = new Ctor(1), k = Math.ceil(pr / LOG_BASE + 4);
      external = false;
      for (; ; ) {
        if (n % 2) {
          r = r.times(x);
          if (truncate(r.d, k))
            isTruncated = true;
        }
        n = mathfloor(n / 2);
        if (n === 0) {
          n = r.d.length - 1;
          if (isTruncated && r.d[n] === 0)
            ++r.d[n];
          break;
        }
        x = x.times(x);
        truncate(x.d, k);
      }
      external = true;
      return r;
    }
    __name(intPow, "intPow");
    function isOdd(n) {
      return n.d[n.d.length - 1] & 1;
    }
    __name(isOdd, "isOdd");
    function maxOrMin(Ctor, args, ltgt) {
      var y, x = new Ctor(args[0]), i = 0;
      for (; ++i < args.length; ) {
        y = new Ctor(args[i]);
        if (!y.s) {
          x = y;
          break;
        } else if (x[ltgt](y)) {
          x = y;
        }
      }
      return x;
    }
    __name(maxOrMin, "maxOrMin");
    function naturalExponential(x, sd) {
      var denominator, guard, j, pow2, sum3, t, wpr, rep = 0, i = 0, k = 0, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;
      if (!x.d || !x.d[0] || x.e > 17) {
        return new Ctor(x.d ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0 : x.s ? x.s < 0 ? 0 : x : 0 / 0);
      }
      if (sd == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd;
      }
      t = new Ctor(0.03125);
      while (x.e > -2) {
        x = x.times(t);
        k += 5;
      }
      guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;
      wpr += guard;
      denominator = pow2 = sum3 = new Ctor(1);
      Ctor.precision = wpr;
      for (; ; ) {
        pow2 = finalise(pow2.times(x), wpr, 1);
        denominator = denominator.times(++i);
        t = sum3.plus(divide(pow2, denominator, wpr, 1));
        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum3.d).slice(0, wpr)) {
          j = k;
          while (j--)
            sum3 = finalise(sum3.times(sum3), wpr, 1);
          if (sd == null) {
            if (rep < 3 && checkRoundingDigits(sum3.d, wpr - guard, rm, rep)) {
              Ctor.precision = wpr += 10;
              denominator = pow2 = t = new Ctor(1);
              i = 0;
              rep++;
            } else {
              return finalise(sum3, Ctor.precision = pr, rm, external = true);
            }
          } else {
            Ctor.precision = pr;
            return sum3;
          }
        }
        sum3 = t;
      }
    }
    __name(naturalExponential, "naturalExponential");
    function naturalLogarithm(y, sd) {
      var c, c0, denominator, e, numerator, rep, sum3, t, wpr, x1, x2, n = 1, guard = 10, x = y, xd = x.d, Ctor = x.constructor, rm = Ctor.rounding, pr = Ctor.precision;
      if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {
        return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);
      }
      if (sd == null) {
        external = false;
        wpr = pr;
      } else {
        wpr = sd;
      }
      Ctor.precision = wpr += guard;
      c = digitsToString(xd);
      c0 = c.charAt(0);
      if (Math.abs(e = x.e) < 15e14) {
        while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {
          x = x.times(y);
          c = digitsToString(x.d);
          c0 = c.charAt(0);
          n++;
        }
        e = x.e;
        if (c0 > 1) {
          x = new Ctor("0." + c);
          e++;
        } else {
          x = new Ctor(c0 + "." + c.slice(1));
        }
      } else {
        t = getLn10(Ctor, wpr + 2, pr).times(e + "");
        x = naturalLogarithm(new Ctor(c0 + "." + c.slice(1)), wpr - guard).plus(t);
        Ctor.precision = pr;
        return sd == null ? finalise(x, pr, rm, external = true) : x;
      }
      x1 = x;
      sum3 = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);
      x2 = finalise(x.times(x), wpr, 1);
      denominator = 3;
      for (; ; ) {
        numerator = finalise(numerator.times(x2), wpr, 1);
        t = sum3.plus(divide(numerator, new Ctor(denominator), wpr, 1));
        if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum3.d).slice(0, wpr)) {
          sum3 = sum3.times(2);
          if (e !== 0)
            sum3 = sum3.plus(getLn10(Ctor, wpr + 2, pr).times(e + ""));
          sum3 = divide(sum3, new Ctor(n), wpr, 1);
          if (sd == null) {
            if (checkRoundingDigits(sum3.d, wpr - guard, rm, rep)) {
              Ctor.precision = wpr += guard;
              t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);
              x2 = finalise(x.times(x), wpr, 1);
              denominator = rep = 1;
            } else {
              return finalise(sum3, Ctor.precision = pr, rm, external = true);
            }
          } else {
            Ctor.precision = pr;
            return sum3;
          }
        }
        sum3 = t;
        denominator += 2;
      }
    }
    __name(naturalLogarithm, "naturalLogarithm");
    function nonFiniteToString(x) {
      return String(x.s * x.s / 0);
    }
    __name(nonFiniteToString, "nonFiniteToString");
    function parseDecimal(x, str) {
      var e, i, len;
      if ((e = str.indexOf(".")) > -1)
        str = str.replace(".", "");
      if ((i = str.search(/e/i)) > 0) {
        if (e < 0)
          e = i;
        e += +str.slice(i + 1);
        str = str.substring(0, i);
      } else if (e < 0) {
        e = str.length;
      }
      for (i = 0; str.charCodeAt(i) === 48; i++)
        ;
      for (len = str.length; str.charCodeAt(len - 1) === 48; --len)
        ;
      str = str.slice(i, len);
      if (str) {
        len -= i;
        x.e = e = e - i - 1;
        x.d = [];
        i = (e + 1) % LOG_BASE;
        if (e < 0)
          i += LOG_BASE;
        if (i < len) {
          if (i)
            x.d.push(+str.slice(0, i));
          for (len -= LOG_BASE; i < len; )
            x.d.push(+str.slice(i, i += LOG_BASE));
          str = str.slice(i);
          i = LOG_BASE - str.length;
        } else {
          i -= len;
        }
        for (; i--; )
          str += "0";
        x.d.push(+str);
        if (external) {
          if (x.e > x.constructor.maxE) {
            x.d = null;
            x.e = NaN;
          } else if (x.e < x.constructor.minE) {
            x.e = 0;
            x.d = [0];
          }
        }
      } else {
        x.e = 0;
        x.d = [0];
      }
      return x;
    }
    __name(parseDecimal, "parseDecimal");
    function parseOther(x, str) {
      var base, Ctor, divisor, i, isFloat, len, p, xd, xe;
      if (str.indexOf("_") > -1) {
        str = str.replace(/(\d)_(?=\d)/g, "$1");
        if (isDecimal.test(str))
          return parseDecimal(x, str);
      } else if (str === "Infinity" || str === "NaN") {
        if (!+str)
          x.s = NaN;
        x.e = NaN;
        x.d = null;
        return x;
      }
      if (isHex.test(str)) {
        base = 16;
        str = str.toLowerCase();
      } else if (isBinary.test(str)) {
        base = 2;
      } else if (isOctal.test(str)) {
        base = 8;
      } else {
        throw Error(invalidArgument + str);
      }
      i = str.search(/p/i);
      if (i > 0) {
        p = +str.slice(i + 1);
        str = str.substring(2, i);
      } else {
        str = str.slice(2);
      }
      i = str.indexOf(".");
      isFloat = i >= 0;
      Ctor = x.constructor;
      if (isFloat) {
        str = str.replace(".", "");
        len = str.length;
        i = len - i;
        divisor = intPow(Ctor, new Ctor(base), i, i * 2);
      }
      xd = convertBase(str, base, BASE);
      xe = xd.length - 1;
      for (i = xe; xd[i] === 0; --i)
        xd.pop();
      if (i < 0)
        return new Ctor(x.s * 0);
      x.e = getBase10Exponent(xd, xe);
      x.d = xd;
      external = false;
      if (isFloat)
        x = divide(x, divisor, len * 4);
      if (p)
        x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));
      external = true;
      return x;
    }
    __name(parseOther, "parseOther");
    function sine(Ctor, x) {
      var k, len = x.d.length;
      if (len < 3) {
        return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);
      }
      k = 1.4 * Math.sqrt(len);
      k = k > 16 ? 16 : k | 0;
      x = x.times(1 / tinyPow(5, k));
      x = taylorSeries(Ctor, 2, x, x);
      var sin2_x, d5 = new Ctor(5), d16 = new Ctor(16), d20 = new Ctor(20);
      for (; k--; ) {
        sin2_x = x.times(x);
        x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));
      }
      return x;
    }
    __name(sine, "sine");
    function taylorSeries(Ctor, n, x, y, isHyperbolic) {
      var j, t, u, x2, i = 1, pr = Ctor.precision, k = Math.ceil(pr / LOG_BASE);
      external = false;
      x2 = x.times(x);
      u = new Ctor(y);
      for (; ; ) {
        t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);
        u = isHyperbolic ? y.plus(t) : y.minus(t);
        y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);
        t = u.plus(y);
        if (t.d[k] !== void 0) {
          for (j = k; t.d[j] === u.d[j] && j--; )
            ;
          if (j == -1)
            break;
        }
        j = u;
        u = y;
        y = t;
        t = j;
        i++;
      }
      external = true;
      t.d.length = k + 1;
      return t;
    }
    __name(taylorSeries, "taylorSeries");
    function tinyPow(b, e) {
      var n = b;
      while (--e)
        n *= b;
      return n;
    }
    __name(tinyPow, "tinyPow");
    function toLessThanHalfPi(Ctor, x) {
      var t, isNeg = x.s < 0, pi = getPi(Ctor, Ctor.precision, 1), halfPi = pi.times(0.5);
      x = x.abs();
      if (x.lte(halfPi)) {
        quadrant = isNeg ? 4 : 1;
        return x;
      }
      t = x.divToInt(pi);
      if (t.isZero()) {
        quadrant = isNeg ? 3 : 2;
      } else {
        x = x.minus(t.times(pi));
        if (x.lte(halfPi)) {
          quadrant = isOdd(t) ? isNeg ? 2 : 3 : isNeg ? 4 : 1;
          return x;
        }
        quadrant = isOdd(t) ? isNeg ? 1 : 4 : isNeg ? 3 : 2;
      }
      return x.minus(pi).abs();
    }
    __name(toLessThanHalfPi, "toLessThanHalfPi");
    function toStringBinary(x, baseOut, sd, rm) {
      var base, e, i, k, len, roundUp, str, xd, y, Ctor = x.constructor, isExp = sd !== void 0;
      if (isExp) {
        checkInt32(sd, 1, MAX_DIGITS);
        if (rm === void 0)
          rm = Ctor.rounding;
        else
          checkInt32(rm, 0, 8);
      } else {
        sd = Ctor.precision;
        rm = Ctor.rounding;
      }
      if (!x.isFinite()) {
        str = nonFiniteToString(x);
      } else {
        str = finiteToString(x);
        i = str.indexOf(".");
        if (isExp) {
          base = 2;
          if (baseOut == 16) {
            sd = sd * 4 - 3;
          } else if (baseOut == 8) {
            sd = sd * 3 - 2;
          }
        } else {
          base = baseOut;
        }
        if (i >= 0) {
          str = str.replace(".", "");
          y = new Ctor(1);
          y.e = str.length - i;
          y.d = convertBase(finiteToString(y), 10, base);
          y.e = y.d.length;
        }
        xd = convertBase(str, 10, base);
        e = len = xd.length;
        for (; xd[--len] == 0; )
          xd.pop();
        if (!xd[0]) {
          str = isExp ? "0p+0" : "0";
        } else {
          if (i < 0) {
            e--;
          } else {
            x = new Ctor(x);
            x.d = xd;
            x.e = e;
            x = divide(x, y, sd, rm, 0, base);
            xd = x.d;
            e = x.e;
            roundUp = inexact;
          }
          i = xd[sd];
          k = base / 2;
          roundUp = roundUp || xd[sd + 1] !== void 0;
          roundUp = rm < 4 ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2)) : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 || rm === (x.s < 0 ? 8 : 7));
          xd.length = sd;
          if (roundUp) {
            for (; ++xd[--sd] > base - 1; ) {
              xd[sd] = 0;
              if (!sd) {
                ++e;
                xd.unshift(1);
              }
            }
          }
          for (len = xd.length; !xd[len - 1]; --len)
            ;
          for (i = 0, str = ""; i < len; i++)
            str += NUMERALS.charAt(xd[i]);
          if (isExp) {
            if (len > 1) {
              if (baseOut == 16 || baseOut == 8) {
                i = baseOut == 16 ? 4 : 3;
                for (--len; len % i; len++)
                  str += "0";
                xd = convertBase(str, base, baseOut);
                for (len = xd.length; !xd[len - 1]; --len)
                  ;
                for (i = 1, str = "1."; i < len; i++)
                  str += NUMERALS.charAt(xd[i]);
              } else {
                str = str.charAt(0) + "." + str.slice(1);
              }
            }
            str = str + (e < 0 ? "p" : "p+") + e;
          } else if (e < 0) {
            for (; ++e; )
              str = "0" + str;
            str = "0." + str;
          } else {
            if (++e > len)
              for (e -= len; e--; )
                str += "0";
            else if (e < len)
              str = str.slice(0, e) + "." + str.slice(e);
          }
        }
        str = (baseOut == 16 ? "0x" : baseOut == 2 ? "0b" : baseOut == 8 ? "0o" : "") + str;
      }
      return x.s < 0 ? "-" + str : str;
    }
    __name(toStringBinary, "toStringBinary");
    function truncate(arr, len) {
      if (arr.length > len) {
        arr.length = len;
        return true;
      }
    }
    __name(truncate, "truncate");
    function abs(x) {
      return new this(x).abs();
    }
    __name(abs, "abs");
    function acos(x) {
      return new this(x).acos();
    }
    __name(acos, "acos");
    function acosh(x) {
      return new this(x).acosh();
    }
    __name(acosh, "acosh");
    function add(x, y) {
      return new this(x).plus(y);
    }
    __name(add, "add");
    function asin(x) {
      return new this(x).asin();
    }
    __name(asin, "asin");
    function asinh(x) {
      return new this(x).asinh();
    }
    __name(asinh, "asinh");
    function atan(x) {
      return new this(x).atan();
    }
    __name(atan, "atan");
    function atanh(x) {
      return new this(x).atanh();
    }
    __name(atanh, "atanh");
    function atan2(y, x) {
      y = new this(y);
      x = new this(x);
      var r, pr = this.precision, rm = this.rounding, wpr = pr + 4;
      if (!y.s || !x.s) {
        r = new this(NaN);
      } else if (!y.d && !x.d) {
        r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);
        r.s = y.s;
      } else if (!x.d || y.isZero()) {
        r = x.s < 0 ? getPi(this, pr, rm) : new this(0);
        r.s = y.s;
      } else if (!y.d || x.isZero()) {
        r = getPi(this, wpr, 1).times(0.5);
        r.s = y.s;
      } else if (x.s < 0) {
        this.precision = wpr;
        this.rounding = 1;
        r = this.atan(divide(y, x, wpr, 1));
        x = getPi(this, wpr, 1);
        this.precision = pr;
        this.rounding = rm;
        r = y.s < 0 ? r.minus(x) : r.plus(x);
      } else {
        r = this.atan(divide(y, x, wpr, 1));
      }
      return r;
    }
    __name(atan2, "atan2");
    function cbrt(x) {
      return new this(x).cbrt();
    }
    __name(cbrt, "cbrt");
    function ceil(x) {
      return finalise(x = new this(x), x.e + 1, 2);
    }
    __name(ceil, "ceil");
    function clamp(x, min2, max2) {
      return new this(x).clamp(min2, max2);
    }
    __name(clamp, "clamp");
    function config(obj) {
      if (!obj || typeof obj !== "object")
        throw Error(decimalError + "Object expected");
      var i, p, v, useDefaults = obj.defaults === true, ps = [
        "precision",
        1,
        MAX_DIGITS,
        "rounding",
        0,
        8,
        "toExpNeg",
        -EXP_LIMIT,
        0,
        "toExpPos",
        0,
        EXP_LIMIT,
        "maxE",
        0,
        EXP_LIMIT,
        "minE",
        -EXP_LIMIT,
        0,
        "modulo",
        0,
        9
      ];
      for (i = 0; i < ps.length; i += 3) {
        if (p = ps[i], useDefaults)
          this[p] = DEFAULTS[p];
        if ((v = obj[p]) !== void 0) {
          if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2])
            this[p] = v;
          else
            throw Error(invalidArgument + p + ": " + v);
        }
      }
      if (p = "crypto", useDefaults)
        this[p] = DEFAULTS[p];
      if ((v = obj[p]) !== void 0) {
        if (v === true || v === false || v === 0 || v === 1) {
          if (v) {
            if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
              this[p] = true;
            } else {
              throw Error(cryptoUnavailable);
            }
          } else {
            this[p] = false;
          }
        } else {
          throw Error(invalidArgument + p + ": " + v);
        }
      }
      return this;
    }
    __name(config, "config");
    function cos(x) {
      return new this(x).cos();
    }
    __name(cos, "cos");
    function cosh(x) {
      return new this(x).cosh();
    }
    __name(cosh, "cosh");
    function clone(obj) {
      var i, p, ps;
      function Decimal2(v) {
        var e, i2, t, x = this;
        if (!(x instanceof Decimal2))
          return new Decimal2(v);
        x.constructor = Decimal2;
        if (isDecimalInstance(v)) {
          x.s = v.s;
          if (external) {
            if (!v.d || v.e > Decimal2.maxE) {
              x.e = NaN;
              x.d = null;
            } else if (v.e < Decimal2.minE) {
              x.e = 0;
              x.d = [0];
            } else {
              x.e = v.e;
              x.d = v.d.slice();
            }
          } else {
            x.e = v.e;
            x.d = v.d ? v.d.slice() : v.d;
          }
          return;
        }
        t = typeof v;
        if (t === "number") {
          if (v === 0) {
            x.s = 1 / v < 0 ? -1 : 1;
            x.e = 0;
            x.d = [0];
            return;
          }
          if (v < 0) {
            v = -v;
            x.s = -1;
          } else {
            x.s = 1;
          }
          if (v === ~~v && v < 1e7) {
            for (e = 0, i2 = v; i2 >= 10; i2 /= 10)
              e++;
            if (external) {
              if (e > Decimal2.maxE) {
                x.e = NaN;
                x.d = null;
              } else if (e < Decimal2.minE) {
                x.e = 0;
                x.d = [0];
              } else {
                x.e = e;
                x.d = [v];
              }
            } else {
              x.e = e;
              x.d = [v];
            }
            return;
          } else if (v * 0 !== 0) {
            if (!v)
              x.s = NaN;
            x.e = NaN;
            x.d = null;
            return;
          }
          return parseDecimal(x, v.toString());
        } else if (t !== "string") {
          throw Error(invalidArgument + v);
        }
        if ((i2 = v.charCodeAt(0)) === 45) {
          v = v.slice(1);
          x.s = -1;
        } else {
          if (i2 === 43)
            v = v.slice(1);
          x.s = 1;
        }
        return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
      }
      __name(Decimal2, "Decimal");
      Decimal2.prototype = P;
      Decimal2.ROUND_UP = 0;
      Decimal2.ROUND_DOWN = 1;
      Decimal2.ROUND_CEIL = 2;
      Decimal2.ROUND_FLOOR = 3;
      Decimal2.ROUND_HALF_UP = 4;
      Decimal2.ROUND_HALF_DOWN = 5;
      Decimal2.ROUND_HALF_EVEN = 6;
      Decimal2.ROUND_HALF_CEIL = 7;
      Decimal2.ROUND_HALF_FLOOR = 8;
      Decimal2.EUCLID = 9;
      Decimal2.config = Decimal2.set = config;
      Decimal2.clone = clone;
      Decimal2.isDecimal = isDecimalInstance;
      Decimal2.abs = abs;
      Decimal2.acos = acos;
      Decimal2.acosh = acosh;
      Decimal2.add = add;
      Decimal2.asin = asin;
      Decimal2.asinh = asinh;
      Decimal2.atan = atan;
      Decimal2.atanh = atanh;
      Decimal2.atan2 = atan2;
      Decimal2.cbrt = cbrt;
      Decimal2.ceil = ceil;
      Decimal2.clamp = clamp;
      Decimal2.cos = cos;
      Decimal2.cosh = cosh;
      Decimal2.div = div;
      Decimal2.exp = exp;
      Decimal2.floor = floor;
      Decimal2.hypot = hypot;
      Decimal2.ln = ln;
      Decimal2.log = log;
      Decimal2.log10 = log10;
      Decimal2.log2 = log2;
      Decimal2.max = max;
      Decimal2.min = min;
      Decimal2.mod = mod;
      Decimal2.mul = mul;
      Decimal2.pow = pow;
      Decimal2.random = random;
      Decimal2.round = round;
      Decimal2.sign = sign;
      Decimal2.sin = sin;
      Decimal2.sinh = sinh;
      Decimal2.sqrt = sqrt;
      Decimal2.sub = sub;
      Decimal2.sum = sum;
      Decimal2.tan = tan;
      Decimal2.tanh = tanh;
      Decimal2.trunc = trunc;
      if (obj === void 0)
        obj = {};
      if (obj) {
        if (obj.defaults !== true) {
          ps = ["precision", "rounding", "toExpNeg", "toExpPos", "maxE", "minE", "modulo", "crypto"];
          for (i = 0; i < ps.length; )
            if (!obj.hasOwnProperty(p = ps[i++]))
              obj[p] = this[p];
        }
      }
      Decimal2.config(obj);
      return Decimal2;
    }
    __name(clone, "clone");
    function div(x, y) {
      return new this(x).div(y);
    }
    __name(div, "div");
    function exp(x) {
      return new this(x).exp();
    }
    __name(exp, "exp");
    function floor(x) {
      return finalise(x = new this(x), x.e + 1, 3);
    }
    __name(floor, "floor");
    function hypot() {
      var i, n, t = new this(0);
      external = false;
      for (i = 0; i < arguments.length; ) {
        n = new this(arguments[i++]);
        if (!n.d) {
          if (n.s) {
            external = true;
            return new this(1 / 0);
          }
          t = n;
        } else if (t.d) {
          t = t.plus(n.times(n));
        }
      }
      external = true;
      return t.sqrt();
    }
    __name(hypot, "hypot");
    function isDecimalInstance(obj) {
      return obj instanceof Decimal || obj && obj.toStringTag === tag || false;
    }
    __name(isDecimalInstance, "isDecimalInstance");
    function ln(x) {
      return new this(x).ln();
    }
    __name(ln, "ln");
    function log(x, y) {
      return new this(x).log(y);
    }
    __name(log, "log");
    function log2(x) {
      return new this(x).log(2);
    }
    __name(log2, "log2");
    function log10(x) {
      return new this(x).log(10);
    }
    __name(log10, "log10");
    function max() {
      return maxOrMin(this, arguments, "lt");
    }
    __name(max, "max");
    function min() {
      return maxOrMin(this, arguments, "gt");
    }
    __name(min, "min");
    function mod(x, y) {
      return new this(x).mod(y);
    }
    __name(mod, "mod");
    function mul(x, y) {
      return new this(x).mul(y);
    }
    __name(mul, "mul");
    function pow(x, y) {
      return new this(x).pow(y);
    }
    __name(pow, "pow");
    function random(sd) {
      var d, e, k, n, i = 0, r = new this(1), rd = [];
      if (sd === void 0)
        sd = this.precision;
      else
        checkInt32(sd, 1, MAX_DIGITS);
      k = Math.ceil(sd / LOG_BASE);
      if (!this.crypto) {
        for (; i < k; )
          rd[i++] = Math.random() * 1e7 | 0;
      } else if (crypto.getRandomValues) {
        d = crypto.getRandomValues(new Uint32Array(k));
        for (; i < k; ) {
          n = d[i];
          if (n >= 429e7) {
            d[i] = crypto.getRandomValues(new Uint32Array(1))[0];
          } else {
            rd[i++] = n % 1e7;
          }
        }
      } else if (crypto.randomBytes) {
        d = crypto.randomBytes(k *= 4);
        for (; i < k; ) {
          n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 127) << 24);
          if (n >= 214e7) {
            crypto.randomBytes(4).copy(d, i);
          } else {
            rd.push(n % 1e7);
            i += 4;
          }
        }
        i = k / 4;
      } else {
        throw Error(cryptoUnavailable);
      }
      k = rd[--i];
      sd %= LOG_BASE;
      if (k && sd) {
        n = mathpow(10, LOG_BASE - sd);
        rd[i] = (k / n | 0) * n;
      }
      for (; rd[i] === 0; i--)
        rd.pop();
      if (i < 0) {
        e = 0;
        rd = [0];
      } else {
        e = -1;
        for (; rd[0] === 0; e -= LOG_BASE)
          rd.shift();
        for (k = 1, n = rd[0]; n >= 10; n /= 10)
          k++;
        if (k < LOG_BASE)
          e -= LOG_BASE - k;
      }
      r.e = e;
      r.d = rd;
      return r;
    }
    __name(random, "random");
    function round(x) {
      return finalise(x = new this(x), x.e + 1, this.rounding);
    }
    __name(round, "round");
    function sign(x) {
      x = new this(x);
      return x.d ? x.d[0] ? x.s : 0 * x.s : x.s || NaN;
    }
    __name(sign, "sign");
    function sin(x) {
      return new this(x).sin();
    }
    __name(sin, "sin");
    function sinh(x) {
      return new this(x).sinh();
    }
    __name(sinh, "sinh");
    function sqrt(x) {
      return new this(x).sqrt();
    }
    __name(sqrt, "sqrt");
    function sub(x, y) {
      return new this(x).sub(y);
    }
    __name(sub, "sub");
    function sum() {
      var i = 0, args = arguments, x = new this(args[i]);
      external = false;
      for (; x.s && ++i < args.length; )
        x = x.plus(args[i]);
      external = true;
      return finalise(x, this.precision, this.rounding);
    }
    __name(sum, "sum");
    function tan(x) {
      return new this(x).tan();
    }
    __name(tan, "tan");
    function tanh(x) {
      return new this(x).tanh();
    }
    __name(tanh, "tanh");
    function trunc(x) {
      return finalise(x = new this(x), x.e + 1, 1);
    }
    __name(trunc, "trunc");
    P[Symbol.for("nodejs.util.inspect.custom")] = P.toString;
    P[Symbol.toStringTag] = "Decimal";
    var Decimal = P.constructor = clone(DEFAULTS);
    LN10 = new Decimal(LN10);
    PI = new Decimal(PI);
    var decimal_default = Decimal;
    var import_indent_string = __toESM(require_indent_string());
    var import_js_levenshtein = __toESM(require_js_levenshtein());
    var objectEnumNames = ["JsonNullValueInput", "NullableJsonNullValueInput", "JsonNullValueFilter"];
    var secret = Symbol();
    var representations = /* @__PURE__ */ new WeakMap();
    var ObjectEnumValue = class {
      constructor(arg2) {
        if (arg2 === secret) {
          representations.set(this, `Prisma.${this._getName()}`);
        } else {
          representations.set(this, `new Prisma.${this._getNamespace()}.${this._getName()}()`);
        }
      }
      _getName() {
        return this.constructor.name;
      }
      toString() {
        return representations.get(this);
      }
    };
    __name(ObjectEnumValue, "ObjectEnumValue");
    var NullTypesEnumValue = class extends ObjectEnumValue {
      _getNamespace() {
        return "NullTypes";
      }
    };
    __name(NullTypesEnumValue, "NullTypesEnumValue");
    var DbNull = class extends NullTypesEnumValue {
    };
    __name(DbNull, "DbNull");
    var JsonNull = class extends NullTypesEnumValue {
    };
    __name(JsonNull, "JsonNull");
    var AnyNull = class extends NullTypesEnumValue {
    };
    __name(AnyNull, "AnyNull");
    var objectEnumValues = {
      classes: {
        DbNull,
        JsonNull,
        AnyNull
      },
      instances: {
        DbNull: new DbNull(secret),
        JsonNull: new JsonNull(secret),
        AnyNull: new AnyNull(secret)
      }
    };
    function isDecimalJsLike(value) {
      if (Decimal.isDecimal(value)) {
        return true;
      }
      return value !== null && typeof value === "object" && typeof value.s === "number" && typeof value.e === "number" && Array.isArray(value.d);
    }
    __name(isDecimalJsLike, "isDecimalJsLike");
    function stringifyDecimalJsLike(value) {
      if (Decimal.isDecimal(value)) {
        return String(value);
      }
      const tmpDecimal = new Decimal(0);
      tmpDecimal.d = value.d;
      tmpDecimal.e = value.e;
      tmpDecimal.s = value.s;
      return String(tmpDecimal);
    }
    __name(stringifyDecimalJsLike, "stringifyDecimalJsLike");
    var keyBy = /* @__PURE__ */ __name((collection, prop) => {
      const acc = {};
      for (const obj of collection) {
        const key = obj[prop];
        acc[key] = obj;
      }
      return acc;
    }, "keyBy");
    var ScalarTypeTable = {
      String: true,
      Int: true,
      Float: true,
      Boolean: true,
      Long: true,
      DateTime: true,
      ID: true,
      UUID: true,
      Json: true,
      Bytes: true,
      Decimal: true,
      BigInt: true
    };
    var JSTypeToGraphQLType = {
      string: "String",
      boolean: "Boolean",
      object: "Json",
      symbol: "Symbol"
    };
    function stringifyGraphQLType(type) {
      if (typeof type === "string") {
        return type;
      }
      return type.name;
    }
    __name(stringifyGraphQLType, "stringifyGraphQLType");
    function wrapWithList(str, isList) {
      if (isList) {
        return `List<${str}>`;
      }
      return str;
    }
    __name(wrapWithList, "wrapWithList");
    var RFC_3339_REGEX = /^(\d{4}-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])T([01][0-9]|2[0-3]):([0-5][0-9]):([0-5][0-9]|60))(\.\d{1,})?(([Z])|([+|-]([01][0-9]|2[0-3]):[0-5][0-9]))$/;
    var UUID_REGEX = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    function getGraphQLType(value, inputType) {
      const potentialType = inputType == null ? void 0 : inputType.type;
      if (value === null) {
        return "null";
      }
      if (Object.prototype.toString.call(value) === "[object BigInt]") {
        return "BigInt";
      }
      if (decimal_default.isDecimal(value)) {
        return "Decimal";
      }
      if (potentialType === "Decimal" && isDecimalJsLike(value)) {
        return "Decimal";
      }
      if (Buffer.isBuffer(value)) {
        return "Bytes";
      }
      if (isValidEnumValue(value, inputType)) {
        return potentialType.name;
      }
      if (value instanceof ObjectEnumValue) {
        return value._getName();
      }
      if (Array.isArray(value)) {
        let scalarTypes = value.reduce((acc, val) => {
          const type = getGraphQLType(val, inputType);
          if (!acc.includes(type)) {
            acc.push(type);
          }
          return acc;
        }, []);
        if (scalarTypes.includes("Float") && scalarTypes.includes("Int")) {
          scalarTypes = ["Float"];
        }
        return `List<${scalarTypes.join(" | ")}>`;
      }
      const jsType = typeof value;
      if (jsType === "number") {
        if (Math.trunc(value) === value) {
          return "Int";
        } else {
          return "Float";
        }
      }
      if (Object.prototype.toString.call(value) === "[object Date]") {
        return "DateTime";
      }
      if (jsType === "string") {
        if (UUID_REGEX.test(value)) {
          return "UUID";
        }
        const date = new Date(value);
        if (date.toString() === "Invalid Date") {
          return "String";
        }
        if (RFC_3339_REGEX.test(value)) {
          return "DateTime";
        }
      }
      return JSTypeToGraphQLType[jsType];
    }
    __name(getGraphQLType, "getGraphQLType");
    function isValidEnumValue(value, inputType) {
      const enumType = inputType == null ? void 0 : inputType.type;
      if (!isSchemaEnum(enumType)) {
        return false;
      }
      if ((inputType == null ? void 0 : inputType.namespace) === "prisma" && objectEnumNames.includes(enumType.name)) {
        const name = value == null ? void 0 : value.constructor.name;
        return typeof name === "string" && objectEnumValues.instances[name] === value && enumType.values.includes(name);
      }
      return typeof value === "string" && enumType.values.includes(value);
    }
    __name(isValidEnumValue, "isValidEnumValue");
    function getSuggestion(str, possibilities) {
      const bestMatch = possibilities.reduce((acc, curr) => {
        const distance = (0, import_js_levenshtein.default)(str, curr);
        if (distance < acc.distance) {
          return {
            distance,
            str: curr
          };
        }
        return acc;
      }, {
        distance: Math.min(Math.floor(str.length) * 1.1, ...possibilities.map((p) => p.length * 3)),
        str: null
      });
      return bestMatch.str;
    }
    __name(getSuggestion, "getSuggestion");
    function stringifyInputType(input, greenKeys = false) {
      if (typeof input === "string") {
        return input;
      }
      if (input.values) {
        return `enum ${input.name} {
${(0, import_indent_string.default)(input.values.join(", "), 2)}
}`;
      } else {
        const body = (0, import_indent_string.default)(input.fields.map((arg2) => {
          const key = `${arg2.name}`;
          const str = `${greenKeys ? import_chalk.default.green(key) : key}${arg2.isRequired ? "" : "?"}: ${import_chalk.default.white(arg2.inputTypes.map((argType) => {
            return wrapWithList(argIsInputType(argType.type) ? argType.type.name : stringifyGraphQLType(argType.type), argType.isList);
          }).join(" | "))}`;
          if (!arg2.isRequired) {
            return import_chalk.default.dim(str);
          }
          return str;
        }).join("\n"), 2);
        return `${import_chalk.default.dim("type")} ${import_chalk.default.bold.dim(input.name)} ${import_chalk.default.dim("{")}
${body}
${import_chalk.default.dim("}")}`;
      }
    }
    __name(stringifyInputType, "stringifyInputType");
    function argIsInputType(arg2) {
      if (typeof arg2 === "string") {
        return false;
      }
      return true;
    }
    __name(argIsInputType, "argIsInputType");
    function getInputTypeName(input) {
      if (typeof input === "string") {
        if (input === "Null") {
          return "null";
        }
        return input;
      }
      return input.name;
    }
    __name(getInputTypeName, "getInputTypeName");
    function getOutputTypeName(input) {
      if (typeof input === "string") {
        return input;
      }
      return input.name;
    }
    __name(getOutputTypeName, "getOutputTypeName");
    function inputTypeToJson(input, isRequired, nameOnly = false) {
      if (typeof input === "string") {
        if (input === "Null") {
          return "null";
        }
        return input;
      }
      if (input.values) {
        return input.values.join(" | ");
      }
      const inputType = input;
      const showDeepType = isRequired && inputType.fields.every((arg2) => {
        var _a22;
        return arg2.inputTypes[0].location === "inputObjectTypes" || ((_a22 = arg2.inputTypes[1]) == null ? void 0 : _a22.location) === "inputObjectTypes";
      });
      if (nameOnly) {
        return getInputTypeName(input);
      }
      return inputType.fields.reduce((acc, curr) => {
        let str = "";
        if (!showDeepType && !curr.isRequired) {
          str = curr.inputTypes.map((argType) => getInputTypeName(argType.type)).join(" | ");
        } else {
          str = curr.inputTypes.map((argInputType) => inputTypeToJson(argInputType.type, curr.isRequired, true)).join(" | ");
        }
        acc[curr.name + (curr.isRequired ? "" : "?")] = str;
        return acc;
      }, {});
    }
    __name(inputTypeToJson, "inputTypeToJson");
    function unionBy(arr1, arr2, iteratee) {
      const map = {};
      for (const element of arr1) {
        map[iteratee(element)] = element;
      }
      for (const element of arr2) {
        const key = iteratee(element);
        if (!map[key]) {
          map[key] = element;
        }
      }
      return Object.values(map);
    }
    __name(unionBy, "unionBy");
    function lowerCase(name) {
      return name.substring(0, 1).toLowerCase() + name.substring(1);
    }
    __name(lowerCase, "lowerCase");
    function isGroupByOutputName(type) {
      return type.endsWith("GroupByOutputType");
    }
    __name(isGroupByOutputName, "isGroupByOutputName");
    function isSchemaEnum(type) {
      return typeof type === "object" && type !== null && typeof type.name === "string" && Array.isArray(type.values);
    }
    __name(isSchemaEnum, "isSchemaEnum");
    var DMMFDatamodelHelper = class {
      constructor({ datamodel }) {
        this.datamodel = datamodel;
        this.datamodelEnumMap = this.getDatamodelEnumMap();
        this.modelMap = this.getModelMap();
        this.typeMap = this.getTypeMap();
        this.typeAndModelMap = this.getTypeModelMap();
      }
      getDatamodelEnumMap() {
        return keyBy(this.datamodel.enums, "name");
      }
      getModelMap() {
        return { ...keyBy(this.datamodel.models, "name") };
      }
      getTypeMap() {
        return { ...keyBy(this.datamodel.types, "name") };
      }
      getTypeModelMap() {
        return { ...this.getTypeMap(), ...this.getModelMap() };
      }
    };
    __name(DMMFDatamodelHelper, "DMMFDatamodelHelper");
    var DMMFMappingsHelper = class {
      constructor({ mappings }) {
        this.mappings = mappings;
        this.mappingsMap = this.getMappingsMap();
      }
      getMappingsMap() {
        return keyBy(this.mappings.modelOperations, "model");
      }
    };
    __name(DMMFMappingsHelper, "DMMFMappingsHelper");
    var DMMFSchemaHelper = class {
      constructor({ schema }) {
        this.outputTypeToMergedOutputType = /* @__PURE__ */ __name((outputType) => {
          return {
            ...outputType,
            fields: outputType.fields
          };
        }, "outputTypeToMergedOutputType");
        this.schema = schema;
        this.enumMap = this.getEnumMap();
        this.queryType = this.getQueryType();
        this.mutationType = this.getMutationType();
        this.outputTypes = this.getOutputTypes();
        this.outputTypeMap = this.getMergedOutputTypeMap();
        this.resolveOutputTypes();
        this.inputObjectTypes = this.schema.inputObjectTypes;
        this.inputTypeMap = this.getInputTypeMap();
        this.resolveInputTypes();
        this.resolveFieldArgumentTypes();
        this.queryType = this.outputTypeMap.Query;
        this.mutationType = this.outputTypeMap.Mutation;
        this.rootFieldMap = this.getRootFieldMap();
      }
      get [Symbol.toStringTag]() {
        return "DMMFClass";
      }
      resolveOutputTypes() {
        for (const type of this.outputTypes.model) {
          for (const field of type.fields) {
            if (typeof field.outputType.type === "string" && !ScalarTypeTable[field.outputType.type]) {
              field.outputType.type = this.outputTypeMap[field.outputType.type] || this.outputTypeMap[field.outputType.type] || this.enumMap[field.outputType.type] || field.outputType.type;
            }
          }
          type.fieldMap = keyBy(type.fields, "name");
        }
        for (const type of this.outputTypes.prisma) {
          for (const field of type.fields) {
            if (typeof field.outputType.type === "string" && !ScalarTypeTable[field.outputType.type]) {
              field.outputType.type = this.outputTypeMap[field.outputType.type] || this.outputTypeMap[field.outputType.type] || this.enumMap[field.outputType.type] || field.outputType.type;
            }
          }
          type.fieldMap = keyBy(type.fields, "name");
        }
      }
      resolveInputTypes() {
        const inputTypes = this.inputObjectTypes.prisma;
        if (this.inputObjectTypes.model) {
          inputTypes.push(...this.inputObjectTypes.model);
        }
        for (const type of inputTypes) {
          for (const field of type.fields) {
            for (const fieldInputType of field.inputTypes) {
              const fieldType = fieldInputType.type;
              if (typeof fieldType === "string" && !ScalarTypeTable[fieldType] && (this.inputTypeMap[fieldType] || this.enumMap[fieldType])) {
                fieldInputType.type = this.inputTypeMap[fieldType] || this.enumMap[fieldType] || fieldType;
              }
            }
          }
          type.fieldMap = keyBy(type.fields, "name");
        }
      }
      resolveFieldArgumentTypes() {
        for (const type of this.outputTypes.prisma) {
          for (const field of type.fields) {
            for (const arg2 of field.args) {
              for (const argInputType of arg2.inputTypes) {
                const argType = argInputType.type;
                if (typeof argType === "string" && !ScalarTypeTable[argType]) {
                  argInputType.type = this.inputTypeMap[argType] || this.enumMap[argType] || argType;
                }
              }
            }
          }
        }
        for (const type of this.outputTypes.model) {
          for (const field of type.fields) {
            for (const arg2 of field.args) {
              for (const argInputType of arg2.inputTypes) {
                const argType = argInputType.type;
                if (typeof argType === "string" && !ScalarTypeTable[argType]) {
                  argInputType.type = this.inputTypeMap[argType] || this.enumMap[argType] || argInputType.type;
                }
              }
            }
          }
        }
      }
      getQueryType() {
        return this.schema.outputObjectTypes.prisma.find((t) => t.name === "Query");
      }
      getMutationType() {
        return this.schema.outputObjectTypes.prisma.find((t) => t.name === "Mutation");
      }
      getOutputTypes() {
        return {
          model: this.schema.outputObjectTypes.model.map(this.outputTypeToMergedOutputType),
          prisma: this.schema.outputObjectTypes.prisma.map(this.outputTypeToMergedOutputType)
        };
      }
      getEnumMap() {
        return {
          ...keyBy(this.schema.enumTypes.prisma, "name"),
          ...this.schema.enumTypes.model ? keyBy(this.schema.enumTypes.model, "name") : void 0
        };
      }
      getMergedOutputTypeMap() {
        return {
          ...keyBy(this.outputTypes.model, "name"),
          ...keyBy(this.outputTypes.prisma, "name")
        };
      }
      getInputTypeMap() {
        return {
          ...this.schema.inputObjectTypes.model ? keyBy(this.schema.inputObjectTypes.model, "name") : void 0,
          ...keyBy(this.schema.inputObjectTypes.prisma, "name")
        };
      }
      getRootFieldMap() {
        return { ...keyBy(this.queryType.fields, "name"), ...keyBy(this.mutationType.fields, "name") };
      }
    };
    __name(DMMFSchemaHelper, "DMMFSchemaHelper");
    var BaseDMMFHelper = class {
      constructor(dmmf) {
        return Object.assign(this, new DMMFDatamodelHelper(dmmf), new DMMFMappingsHelper(dmmf));
      }
    };
    __name(BaseDMMFHelper, "BaseDMMFHelper");
    applyMixins(BaseDMMFHelper, [DMMFDatamodelHelper, DMMFMappingsHelper]);
    var DMMFHelper = class {
      constructor(dmmf) {
        return Object.assign(this, new BaseDMMFHelper(dmmf), new DMMFSchemaHelper(dmmf));
      }
    };
    __name(DMMFHelper, "DMMFHelper");
    applyMixins(DMMFHelper, [BaseDMMFHelper, DMMFSchemaHelper]);
    var DMMF;
    ((DMMF2) => {
      let ModelAction;
      ((ModelAction2) => {
        ModelAction2["findUnique"] = "findUnique";
        ModelAction2["findFirst"] = "findFirst";
        ModelAction2["findMany"] = "findMany";
        ModelAction2["create"] = "create";
        ModelAction2["createMany"] = "createMany";
        ModelAction2["update"] = "update";
        ModelAction2["updateMany"] = "updateMany";
        ModelAction2["upsert"] = "upsert";
        ModelAction2["delete"] = "delete";
        ModelAction2["deleteMany"] = "deleteMany";
        ModelAction2["groupBy"] = "groupBy";
        ModelAction2["count"] = "count";
        ModelAction2["aggregate"] = "aggregate";
        ModelAction2["findRaw"] = "findRaw";
        ModelAction2["aggregateRaw"] = "aggregateRaw";
      })(ModelAction = DMMF2.ModelAction || (DMMF2.ModelAction = {}));
    })(DMMF || (DMMF = {}));
    var import_debug = __toESM(require_src());
    var MAX_LOGS = 100;
    var debugArgsHistory = [];
    function debugCall(namespace) {
      const debugNamespace = (0, import_debug.default)(namespace);
      const call = Object.assign((...args) => {
        debugNamespace.log = call.log;
        if (args.length !== 0) {
          debugArgsHistory.push([namespace, ...args]);
        }
        if (debugArgsHistory.length > MAX_LOGS) {
          debugArgsHistory.shift();
        }
        return debugNamespace("", ...args);
      }, debugNamespace);
      return call;
    }
    __name(debugCall, "debugCall");
    var Debug = Object.assign(debugCall, import_debug.default);
    function getLogs(numChars = 7500) {
      const output = debugArgsHistory.map((c) => c.map((item) => {
        if (typeof item === "string") {
          return item;
        }
        return JSON.stringify(item);
      }).join(" ")).join("\n");
      if (output.length < numChars) {
        return output;
      }
      return output.slice(-numChars);
    }
    __name(getLogs, "getLogs");
    var src_default = Debug;
    var import_engines_version = __toESM(require_engines_version());
    var NODE_API_QUERY_ENGINE_URL_BASE = "libquery_engine";
    function getNodeAPIName(platform3, type) {
      const isUrl = type === "url";
      if (platform3.includes("windows")) {
        return isUrl ? `query_engine.dll.node` : `query_engine-${platform3}.dll.node`;
      } else if (platform3.includes("darwin")) {
        return isUrl ? `${NODE_API_QUERY_ENGINE_URL_BASE}.dylib.node` : `${NODE_API_QUERY_ENGINE_URL_BASE}-${platform3}.dylib.node`;
      } else {
        return isUrl ? `${NODE_API_QUERY_ENGINE_URL_BASE}.so.node` : `${NODE_API_QUERY_ENGINE_URL_BASE}-${platform3}.so.node`;
      }
    }
    __name(getNodeAPIName, "getNodeAPIName");
    var import_child_process = require("child_process");
    var import_fs = __toESM(require("fs"));
    var import_os = __toESM(require("os"));
    var import_util = require("util");
    var readFile = (0, import_util.promisify)(import_fs.default.readFile);
    var exists = (0, import_util.promisify)(import_fs.default.exists);
    async function getos() {
      const platform3 = import_os.default.platform();
      const arch2 = process.arch;
      if (platform3 === "freebsd") {
        const version = await gracefulExec(`freebsd-version`);
        if (version && version.trim().length > 0) {
          const regex = /^(\d+)\.?/;
          const match = regex.exec(version);
          if (match) {
            return {
              platform: "freebsd",
              distro: `freebsd${match[1]}`,
              arch: arch2
            };
          }
        }
      }
      if (platform3 !== "linux") {
        return {
          platform: platform3,
          arch: arch2
        };
      }
      return {
        platform: "linux",
        libssl: await getOpenSSLVersion(),
        distro: await resolveDistro(),
        arch: arch2
      };
    }
    __name(getos, "getos");
    function parseDistro(input) {
      const idRegex = /^ID="?([^"\n]*)"?$/im;
      const idLikeRegex = /^ID_LIKE="?([^"\n]*)"?$/im;
      const idMatch = idRegex.exec(input);
      const id = idMatch && idMatch[1] && idMatch[1].toLowerCase() || "";
      const idLikeMatch = idLikeRegex.exec(input);
      const idLike = idLikeMatch && idLikeMatch[1] && idLikeMatch[1].toLowerCase() || "";
      if (id === "raspbian") {
        return "arm";
      }
      if (id === "nixos") {
        return "nixos";
      }
      if (idLike.includes("centos") || idLike.includes("fedora") || idLike.includes("rhel") || id === "fedora") {
        return "rhel";
      }
      if (idLike.includes("debian") || idLike.includes("ubuntu") || id === "debian") {
        return "debian";
      }
      return;
    }
    __name(parseDistro, "parseDistro");
    async function resolveDistro() {
      const osReleaseFile = "/etc/os-release";
      const alpineReleaseFile = "/etc/alpine-release";
      if (await exists(alpineReleaseFile)) {
        return "musl";
      } else if (await exists(osReleaseFile)) {
        return parseDistro(await readFile(osReleaseFile, "utf-8"));
      } else {
        return;
      }
    }
    __name(resolveDistro, "resolveDistro");
    function parseOpenSSLVersion(input) {
      const match = /^OpenSSL\s(\d+\.\d+)\.\d+/.exec(input);
      if (match) {
        return match[1] + ".x";
      }
      return;
    }
    __name(parseOpenSSLVersion, "parseOpenSSLVersion");
    async function getOpenSSLVersion() {
      const [version, ls] = await Promise.all([
        gracefulExec(`openssl version -v`),
        gracefulExec(`
      ls -l /lib64 | grep ssl;
      ls -l /usr/lib64 | grep ssl;
    `)
      ]);
      if (version) {
        const v = parseOpenSSLVersion(version);
        if (v) {
          return v;
        }
      }
      if (ls) {
        const match = /libssl\.so\.(\d+\.\d+)\.\d+/.exec(ls);
        if (match) {
          return match[1] + ".x";
        }
      }
      return void 0;
    }
    __name(getOpenSSLVersion, "getOpenSSLVersion");
    async function gracefulExec(cmd) {
      return new Promise((resolve) => {
        try {
          (0, import_child_process.exec)(cmd, (err, stdout) => {
            resolve(String(stdout));
          });
        } catch (e) {
          resolve(void 0);
          return void 0;
        }
        return void 0;
      });
    }
    __name(gracefulExec, "gracefulExec");
    async function getPlatform() {
      const { platform: platform3, libssl, distro, arch: arch2 } = await getos();
      if (platform3 === "darwin" && arch2 === "arm64") {
        return "darwin-arm64";
      }
      if (platform3 === "darwin") {
        return "darwin";
      }
      if (platform3 === "win32") {
        return "windows";
      }
      if (platform3 === "freebsd") {
        return distro;
      }
      if (platform3 === "openbsd") {
        return "openbsd";
      }
      if (platform3 === "netbsd") {
        return "netbsd";
      }
      if (platform3 === "linux" && arch2 === "arm64") {
        return `linux-arm64-openssl-${libssl}`;
      }
      if (platform3 === "linux" && arch2 === "arm") {
        return `linux-arm-openssl-${libssl}`;
      }
      if (platform3 === "linux" && distro === "nixos") {
        return "linux-nixos";
      }
      if (platform3 === "linux" && distro === "musl") {
        return "linux-musl";
      }
      if (platform3 === "linux" && distro && libssl) {
        return distro + "-openssl-" + libssl;
      }
      if (libssl) {
        return "debian-openssl-" + libssl;
      }
      if (distro) {
        return distro + "-openssl-1.1.x";
      }
      return "debian-openssl-1.1.x";
    }
    __name(getPlatform, "getPlatform");
    var import_fs2 = __toESM(require("fs"));
    async function isNodeAPISupported() {
      const customLibraryPath = process.env.PRISMA_QUERY_ENGINE_LIBRARY;
      const customLibraryExists = customLibraryPath && import_fs2.default.existsSync(customLibraryPath);
      const os3 = await getos();
      if (!customLibraryExists && (os3.arch === "x32" || os3.arch === "ia32")) {
        throw new Error(`The default query engine type (Node-API, "library") is currently not supported for 32bit Node. Please set \`engineType = "binary"\` in the "generator" block of your "schema.prisma" file (or use the environment variables "PRISMA_CLIENT_ENGINE_TYPE=binary" and/or "PRISMA_CLI_QUERY_ENGINE_TYPE=binary".)`);
      }
    }
    __name(isNodeAPISupported, "isNodeAPISupported");
    var platforms = [
      "darwin",
      "darwin-arm64",
      "debian-openssl-1.0.x",
      "debian-openssl-1.1.x",
      "debian-openssl-3.0.x",
      "rhel-openssl-1.0.x",
      "rhel-openssl-1.1.x",
      "rhel-openssl-3.0.x",
      "linux-arm64-openssl-1.1.x",
      "linux-arm64-openssl-1.0.x",
      "linux-arm64-openssl-3.0.x",
      "linux-arm-openssl-1.1.x",
      "linux-arm-openssl-1.0.x",
      "linux-arm-openssl-3.0.x",
      "linux-musl",
      "linux-nixos",
      "windows",
      "freebsd11",
      "freebsd12",
      "freebsd13",
      "openbsd",
      "netbsd",
      "arm"
    ];
    var import_path = __toESM(require("path"));
    var import_engines_version2 = __toESM(require_engines_version());
    var debug2 = src_default("prisma:engines");
    function getEnginesPath() {
      return import_path.default.join(__dirname, "../");
    }
    __name(getEnginesPath, "getEnginesPath");
    var DEFAULT_CLI_QUERY_ENGINE_BINARY_TYPE = "libquery-engine";
    import_path.default.join(__dirname, "../query-engine-darwin");
    import_path.default.join(__dirname, "../introspection-engine-darwin");
    import_path.default.join(__dirname, "../prisma-fmt-darwin");
    import_path.default.join(__dirname, "../query-engine-darwin-arm64");
    import_path.default.join(__dirname, "../introspection-engine-darwin-arm64");
    import_path.default.join(__dirname, "../prisma-fmt-darwin-arm64");
    import_path.default.join(__dirname, "../query-engine-debian-openssl-1.0.x");
    import_path.default.join(__dirname, "../introspection-engine-debian-openssl-1.0.x");
    import_path.default.join(__dirname, "../prisma-fmt-debian-openssl-1.0.x");
    import_path.default.join(__dirname, "../query-engine-debian-openssl-1.1.x");
    import_path.default.join(__dirname, "../introspection-engine-debian-openssl-1.1.x");
    import_path.default.join(__dirname, "../prisma-fmt-debian-openssl-1.1.x");
    import_path.default.join(__dirname, "../query-engine-debian-openssl-3.0.x");
    import_path.default.join(__dirname, "../introspection-engine-debian-openssl-3.0.x");
    import_path.default.join(__dirname, "../prisma-fmt-debian-openssl-3.0.x");
    import_path.default.join(__dirname, "../query-engine-rhel-openssl-1.0.x");
    import_path.default.join(__dirname, "../introspection-engine-rhel-openssl-1.0.x");
    import_path.default.join(__dirname, "../prisma-fmt-rhel-openssl-1.0.x");
    import_path.default.join(__dirname, "../query-engine-rhel-openssl-1.1.x");
    import_path.default.join(__dirname, "../introspection-engine-rhel-openssl-1.1.x");
    import_path.default.join(__dirname, "../prisma-fmt-rhel-openssl-1.1.x");
    import_path.default.join(__dirname, "../query-engine-rhel-openssl-3.0.x");
    import_path.default.join(__dirname, "../introspection-engine-rhel-openssl-3.0.x");
    import_path.default.join(__dirname, "../prisma-fmt-rhel-openssl-3.0.x");
    import_path.default.join(__dirname, "../libquery_engine-darwin.dylib.node");
    import_path.default.join(__dirname, "../libquery_engine-darwin-arm64.dylib.node");
    import_path.default.join(__dirname, "../libquery_engine-debian-openssl-1.0.x.so.node");
    import_path.default.join(__dirname, "../libquery_engine-debian-openssl-1.1.x.so.node");
    import_path.default.join(__dirname, "../libquery_engine-debian-openssl-3.0.x.so.node");
    import_path.default.join(__dirname, "../libquery_engine-linux-arm64-openssl-1.0.x.so.node");
    import_path.default.join(__dirname, "../libquery_engine-linux-arm64-openssl-1.1.x.so.node");
    import_path.default.join(__dirname, "../libquery_engine-linux-arm64-openssl-3.0.x.so.node");
    import_path.default.join(__dirname, "../libquery_engine-linux-musl.so.node");
    import_path.default.join(__dirname, "../libquery_engine-rhel-openssl-1.0.x.so.node");
    import_path.default.join(__dirname, "../libquery_engine-rhel-openssl-1.1.x.so.node");
    import_path.default.join(__dirname, "../libquery_engine-rhel-openssl-3.0.x.so.node");
    import_path.default.join(__dirname, "../query_engine-windows.dll.node");
    var import_chalk3 = __toESM(require_source());
    var import_child_process2 = require("child_process");
    var import_events = __toESM(require("events"));
    var import_execa = __toESM(require_execa());
    var import_fs4 = __toESM(require("fs"));
    var import_net = __toESM(require("net"));
    var import_p_retry = __toESM(require_p_retry());
    var import_path2 = __toESM(require("path"));
    var import_url = require("url");
    var import_util4 = require("util");
    var Engine = class {
    };
    __name(Engine, "Engine");
    var PrismaClientInitializationError = class extends Error {
      constructor(message, clientVersion2, errorCode) {
        super(message);
        this.clientVersion = clientVersion2;
        this.errorCode = errorCode;
        Error.captureStackTrace(PrismaClientInitializationError);
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientInitializationError";
      }
    };
    __name(PrismaClientInitializationError, "PrismaClientInitializationError");
    var PrismaClientKnownRequestError = class extends Error {
      constructor(message, code, clientVersion2, meta) {
        super(message);
        this.code = code;
        this.clientVersion = clientVersion2;
        this.meta = meta;
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientKnownRequestError";
      }
    };
    __name(PrismaClientKnownRequestError, "PrismaClientKnownRequestError");
    function getMessage(log4) {
      if (typeof log4 === "string") {
        return log4;
      } else if (isRustError(log4)) {
        return getBacktraceFromRustError(log4);
      } else if (isRustLog(log4)) {
        return getBacktraceFromLog(log4);
      }
      return JSON.stringify(log4);
    }
    __name(getMessage, "getMessage");
    function getBacktraceFromLog(log4) {
      var _a22, _b2, _c2, _d2, _e, _f, _g;
      if ((_a22 = log4.fields) == null ? void 0 : _a22.message) {
        let str = (_b2 = log4.fields) == null ? void 0 : _b2.message;
        if ((_c2 = log4.fields) == null ? void 0 : _c2.file) {
          str += ` in ${log4.fields.file}`;
          if ((_d2 = log4.fields) == null ? void 0 : _d2.line) {
            str += `:${log4.fields.line}`;
          }
          if ((_e = log4.fields) == null ? void 0 : _e.column) {
            str += `:${log4.fields.column}`;
          }
        }
        if ((_f = log4.fields) == null ? void 0 : _f.reason) {
          str += `
${(_g = log4.fields) == null ? void 0 : _g.reason}`;
        }
        return str;
      }
      return "Unknown error";
    }
    __name(getBacktraceFromLog, "getBacktraceFromLog");
    function getBacktraceFromRustError(err) {
      let str = "";
      if (err.is_panic) {
        str += `PANIC`;
      }
      if (err.backtrace) {
        str += ` in ${err.backtrace}`;
      }
      if (err.message) {
        str += `
${err.message}`;
      }
      return str;
    }
    __name(getBacktraceFromRustError, "getBacktraceFromRustError");
    function isRustLog(e) {
      return e.timestamp && typeof e.level === "string" && typeof e.target === "string";
    }
    __name(isRustLog, "isRustLog");
    function isRustErrorLog(e) {
      var _a22, _b2;
      return isRustLog(e) && (e.level === "error" || ((_b2 = (_a22 = e.fields) == null ? void 0 : _a22.message) == null ? void 0 : _b2.includes("fatal error")));
    }
    __name(isRustErrorLog, "isRustErrorLog");
    function isRustError(e) {
      return typeof e.is_panic !== "undefined";
    }
    __name(isRustError, "isRustError");
    function convertLog(rustLog) {
      const isQuery = isQueryLog(rustLog.fields);
      const level = isQuery ? "query" : rustLog.level.toLowerCase();
      return {
        ...rustLog,
        level,
        timestamp: new Date(rustLog.timestamp)
      };
    }
    __name(convertLog, "convertLog");
    function isQueryLog(fields) {
      return Boolean(fields.query);
    }
    __name(isQueryLog, "isQueryLog");
    var PrismaClientRustError = class extends Error {
      constructor({ clientVersion: clientVersion2, log: log4, error: error2 }) {
        var __super = (...args) => {
          super(...args);
        };
        if (log4) {
          const backtrace = getBacktraceFromLog(log4);
          __super(backtrace != null ? backtrace : "Unknown error");
        } else if (error2) {
          const backtrace = getBacktraceFromRustError(error2);
          __super(backtrace);
        } else {
          __super(`Unknown error`);
        }
        this.clientVersion = clientVersion2;
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientRustPanicError";
      }
    };
    __name(PrismaClientRustError, "PrismaClientRustError");
    var PrismaClientRustPanicError = class extends Error {
      constructor(message, clientVersion2) {
        super(message);
        this.clientVersion = clientVersion2;
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientRustPanicError";
      }
    };
    __name(PrismaClientRustPanicError, "PrismaClientRustPanicError");
    var PrismaClientUnknownRequestError = class extends Error {
      constructor(message, clientVersion2) {
        super(message);
        this.clientVersion = clientVersion2;
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientUnknownRequestError";
      }
    };
    __name(PrismaClientUnknownRequestError, "PrismaClientUnknownRequestError");
    var import_chalk2 = __toESM(require_source());
    var import_strip_ansi = __toESM(require_strip_ansi());
    var import_fs3 = __toESM(require("fs"));
    var import_new_github_issue_url = __toESM(require_new_github_issue_url());
    var debug3 = src_default("plusX");
    function plusX(file) {
      const s = import_fs3.default.statSync(file);
      const newMode = s.mode | 64 | 8 | 1;
      if (s.mode === newMode) {
        debug3(`Execution permissions of ${file} are fine`);
        return;
      }
      const base8 = newMode.toString(8).slice(-3);
      debug3(`Have to call plusX on ${file}`);
      import_fs3.default.chmodSync(file, base8);
    }
    __name(plusX, "plusX");
    function transformPlatformToEnvValue(platform3) {
      return { fromEnvVar: null, value: platform3 };
    }
    __name(transformPlatformToEnvValue, "transformPlatformToEnvValue");
    function fixBinaryTargets(binaryTargets, platform3) {
      binaryTargets = binaryTargets || [];
      if (!binaryTargets.find((object) => object.value === "native")) {
        return [transformPlatformToEnvValue("native"), ...binaryTargets];
      }
      return [...binaryTargets, transformPlatformToEnvValue(platform3)];
    }
    __name(fixBinaryTargets, "fixBinaryTargets");
    function getGithubIssueUrl({
      title,
      user = "prisma",
      repo = "prisma",
      template = "bug_report.md",
      body
    }) {
      return (0, import_new_github_issue_url.default)({
        user,
        repo,
        template,
        title,
        body
      });
    }
    __name(getGithubIssueUrl, "getGithubIssueUrl");
    function maskQuery(query2) {
      if (!query2) {
        return "";
      }
      return query2.replace(/".*"/g, '"X"').replace(/[\s:\[]([+-]?([0-9]*[.])?[0-9]+)/g, (substr) => {
        return `${substr[0]}5`;
      });
    }
    __name(maskQuery, "maskQuery");
    function normalizeLogs(logs) {
      return logs.split("\n").map((l) => {
        return l.replace(/^\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)\s*/, "").replace(/\+\d+\s*ms$/, "");
      }).join("\n");
    }
    __name(normalizeLogs, "normalizeLogs");
    function getErrorMessageWithLink({
      version,
      platform: platform3,
      title,
      description,
      engineVersion,
      database,
      query: query2
    }) {
      var _a22, _b2;
      const gotLogs = getLogs(6e3 - ((_a22 = query2 == null ? void 0 : query2.length) != null ? _a22 : 0));
      const logs = normalizeLogs((0, import_strip_ansi.default)(gotLogs));
      const moreInfo = description ? `# Description
\`\`\`
${description}
\`\`\`` : "";
      const body = (0, import_strip_ansi.default)(`Hi Prisma Team! My Prisma Client just crashed. This is the report:
## Versions

| Name            | Version            |
|-----------------|--------------------|
| Node            | ${(_b2 = process.version) == null ? void 0 : _b2.padEnd(19)}| 
| OS              | ${platform3 == null ? void 0 : platform3.padEnd(19)}|
| Prisma Client   | ${version == null ? void 0 : version.padEnd(19)}|
| Query Engine    | ${engineVersion == null ? void 0 : engineVersion.padEnd(19)}|
| Database        | ${database == null ? void 0 : database.padEnd(19)}|

${moreInfo}

## Logs
\`\`\`
${logs}
\`\`\`

## Client Snippet
\`\`\`ts
// PLEASE FILL YOUR CODE SNIPPET HERE
\`\`\`

## Schema
\`\`\`prisma
// PLEASE ADD YOUR SCHEMA HERE IF POSSIBLE
\`\`\`

## Prisma Engine Query
\`\`\`
${query2 ? maskQuery(query2) : ""}
\`\`\`
`);
      const url = getGithubIssueUrl({ title, body });
      return `${title}

This is a non-recoverable error which probably happens when the Prisma Query Engine has a panic.

${import_chalk2.default.underline(url)}

If you want the Prisma team to look into it, please open the link above \u{1F64F}
To increase the chance of success, please post your schema and a snippet of
how you used Prisma Client in the issue. 
`;
    }
    __name(getErrorMessageWithLink, "getErrorMessageWithLink");
    function prismaGraphQLToJSError(error2, clientVersion2) {
      if (error2.user_facing_error.error_code) {
        return new PrismaClientKnownRequestError(error2.user_facing_error.message, error2.user_facing_error.error_code, clientVersion2, error2.user_facing_error.meta);
      }
      return new PrismaClientUnknownRequestError(error2.error, clientVersion2);
    }
    __name(prismaGraphQLToJSError, "prismaGraphQLToJSError");
    var _globalThis = typeof globalThis === "object" ? globalThis : global;
    var VERSION = "1.1.0";
    var re = /^(\d+)\.(\d+)\.(\d+)(-(.+))?$/;
    function _makeCompatibilityCheck(ownVersion) {
      var acceptedVersions = /* @__PURE__ */ new Set([ownVersion]);
      var rejectedVersions = /* @__PURE__ */ new Set();
      var myVersionMatch = ownVersion.match(re);
      if (!myVersionMatch) {
        return function() {
          return false;
        };
      }
      var ownVersionParsed = {
        major: +myVersionMatch[1],
        minor: +myVersionMatch[2],
        patch: +myVersionMatch[3],
        prerelease: myVersionMatch[4]
      };
      if (ownVersionParsed.prerelease != null) {
        return /* @__PURE__ */ __name(function isExactmatch(globalVersion) {
          return globalVersion === ownVersion;
        }, "isExactmatch");
      }
      function _reject(v) {
        rejectedVersions.add(v);
        return false;
      }
      __name(_reject, "_reject");
      function _accept(v) {
        acceptedVersions.add(v);
        return true;
      }
      __name(_accept, "_accept");
      return /* @__PURE__ */ __name(function isCompatible2(globalVersion) {
        if (acceptedVersions.has(globalVersion)) {
          return true;
        }
        if (rejectedVersions.has(globalVersion)) {
          return false;
        }
        var globalVersionMatch = globalVersion.match(re);
        if (!globalVersionMatch) {
          return _reject(globalVersion);
        }
        var globalVersionParsed = {
          major: +globalVersionMatch[1],
          minor: +globalVersionMatch[2],
          patch: +globalVersionMatch[3],
          prerelease: globalVersionMatch[4]
        };
        if (globalVersionParsed.prerelease != null) {
          return _reject(globalVersion);
        }
        if (ownVersionParsed.major !== globalVersionParsed.major) {
          return _reject(globalVersion);
        }
        if (ownVersionParsed.major === 0) {
          if (ownVersionParsed.minor === globalVersionParsed.minor && ownVersionParsed.patch <= globalVersionParsed.patch) {
            return _accept(globalVersion);
          }
          return _reject(globalVersion);
        }
        if (ownVersionParsed.minor <= globalVersionParsed.minor) {
          return _accept(globalVersion);
        }
        return _reject(globalVersion);
      }, "isCompatible");
    }
    __name(_makeCompatibilityCheck, "_makeCompatibilityCheck");
    var isCompatible = _makeCompatibilityCheck(VERSION);
    var major = VERSION.split(".")[0];
    var GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for("opentelemetry.js.api." + major);
    var _global = _globalThis;
    function registerGlobal(type, instance, diag3, allowOverride) {
      var _a22;
      if (allowOverride === void 0) {
        allowOverride = false;
      }
      var api = _global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a22 = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a22 !== void 0 ? _a22 : {
        version: VERSION
      };
      if (!allowOverride && api[type]) {
        var err = new Error("@opentelemetry/api: Attempted duplicate registration of API: " + type);
        diag3.error(err.stack || err.message);
        return false;
      }
      if (api.version !== VERSION) {
        var err = new Error("@opentelemetry/api: All API registration versions must match");
        diag3.error(err.stack || err.message);
        return false;
      }
      api[type] = instance;
      diag3.debug("@opentelemetry/api: Registered a global for " + type + " v" + VERSION + ".");
      return true;
    }
    __name(registerGlobal, "registerGlobal");
    function getGlobal(type) {
      var _a22, _b2;
      var globalVersion = (_a22 = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a22 === void 0 ? void 0 : _a22.version;
      if (!globalVersion || !isCompatible(globalVersion)) {
        return;
      }
      return (_b2 = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b2 === void 0 ? void 0 : _b2[type];
    }
    __name(getGlobal, "getGlobal");
    function unregisterGlobal(type, diag3) {
      diag3.debug("@opentelemetry/api: Unregistering a global for " + type + " v" + VERSION + ".");
      var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];
      if (api) {
        delete api[type];
      }
    }
    __name(unregisterGlobal, "unregisterGlobal");
    var DiagComponentLogger = function() {
      function DiagComponentLogger2(props) {
        this._namespace = props.namespace || "DiagComponentLogger";
      }
      __name(DiagComponentLogger2, "DiagComponentLogger");
      DiagComponentLogger2.prototype.debug = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return logProxy("debug", this._namespace, args);
      };
      DiagComponentLogger2.prototype.error = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return logProxy("error", this._namespace, args);
      };
      DiagComponentLogger2.prototype.info = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return logProxy("info", this._namespace, args);
      };
      DiagComponentLogger2.prototype.warn = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return logProxy("warn", this._namespace, args);
      };
      DiagComponentLogger2.prototype.verbose = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return logProxy("verbose", this._namespace, args);
      };
      return DiagComponentLogger2;
    }();
    function logProxy(funcName, namespace, args) {
      var logger2 = getGlobal("diag");
      if (!logger2) {
        return;
      }
      args.unshift(namespace);
      return logger2[funcName].apply(logger2, args);
    }
    __name(logProxy, "logProxy");
    var DiagLogLevel;
    (function(DiagLogLevel2) {
      DiagLogLevel2[DiagLogLevel2["NONE"] = 0] = "NONE";
      DiagLogLevel2[DiagLogLevel2["ERROR"] = 30] = "ERROR";
      DiagLogLevel2[DiagLogLevel2["WARN"] = 50] = "WARN";
      DiagLogLevel2[DiagLogLevel2["INFO"] = 60] = "INFO";
      DiagLogLevel2[DiagLogLevel2["DEBUG"] = 70] = "DEBUG";
      DiagLogLevel2[DiagLogLevel2["VERBOSE"] = 80] = "VERBOSE";
      DiagLogLevel2[DiagLogLevel2["ALL"] = 9999] = "ALL";
    })(DiagLogLevel || (DiagLogLevel = {}));
    function createLogLevelDiagLogger(maxLevel, logger2) {
      if (maxLevel < DiagLogLevel.NONE) {
        maxLevel = DiagLogLevel.NONE;
      } else if (maxLevel > DiagLogLevel.ALL) {
        maxLevel = DiagLogLevel.ALL;
      }
      logger2 = logger2 || {};
      function _filterFunc(funcName, theLevel) {
        var theFunc = logger2[funcName];
        if (typeof theFunc === "function" && maxLevel >= theLevel) {
          return theFunc.bind(logger2);
        }
        return function() {
        };
      }
      __name(_filterFunc, "_filterFunc");
      return {
        error: _filterFunc("error", DiagLogLevel.ERROR),
        warn: _filterFunc("warn", DiagLogLevel.WARN),
        info: _filterFunc("info", DiagLogLevel.INFO),
        debug: _filterFunc("debug", DiagLogLevel.DEBUG),
        verbose: _filterFunc("verbose", DiagLogLevel.VERBOSE)
      };
    }
    __name(createLogLevelDiagLogger, "createLogLevelDiagLogger");
    var API_NAME = "diag";
    var DiagAPI = function() {
      function DiagAPI2() {
        function _logProxy(funcName) {
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            var logger2 = getGlobal("diag");
            if (!logger2)
              return;
            return logger2[funcName].apply(logger2, args);
          };
        }
        __name(_logProxy, "_logProxy");
        var self2 = this;
        self2.setLogger = function(logger2, logLevel) {
          var _a22, _b2;
          if (logLevel === void 0) {
            logLevel = DiagLogLevel.INFO;
          }
          if (logger2 === self2) {
            var err = new Error("Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation");
            self2.error((_a22 = err.stack) !== null && _a22 !== void 0 ? _a22 : err.message);
            return false;
          }
          var oldLogger = getGlobal("diag");
          var newLogger = createLogLevelDiagLogger(logLevel, logger2);
          if (oldLogger) {
            var stack = (_b2 = new Error().stack) !== null && _b2 !== void 0 ? _b2 : "<failed to generate stacktrace>";
            oldLogger.warn("Current logger will be overwritten from " + stack);
            newLogger.warn("Current logger will overwrite one already registered from " + stack);
          }
          return registerGlobal("diag", newLogger, self2, true);
        };
        self2.disable = function() {
          unregisterGlobal(API_NAME, self2);
        };
        self2.createComponentLogger = function(options) {
          return new DiagComponentLogger(options);
        };
        self2.verbose = _logProxy("verbose");
        self2.debug = _logProxy("debug");
        self2.info = _logProxy("info");
        self2.warn = _logProxy("warn");
        self2.error = _logProxy("error");
      }
      __name(DiagAPI2, "DiagAPI");
      DiagAPI2.instance = function() {
        if (!this._instance) {
          this._instance = new DiagAPI2();
        }
        return this._instance;
      };
      return DiagAPI2;
    }();
    var BaggageImpl = function() {
      function BaggageImpl2(entries) {
        this._entries = entries ? new Map(entries) : /* @__PURE__ */ new Map();
      }
      __name(BaggageImpl2, "BaggageImpl");
      BaggageImpl2.prototype.getEntry = function(key) {
        var entry = this._entries.get(key);
        if (!entry) {
          return void 0;
        }
        return Object.assign({}, entry);
      };
      BaggageImpl2.prototype.getAllEntries = function() {
        return Array.from(this._entries.entries()).map(function(_a22) {
          var k = _a22[0], v = _a22[1];
          return [k, v];
        });
      };
      BaggageImpl2.prototype.setEntry = function(key, entry) {
        var newBaggage = new BaggageImpl2(this._entries);
        newBaggage._entries.set(key, entry);
        return newBaggage;
      };
      BaggageImpl2.prototype.removeEntry = function(key) {
        var newBaggage = new BaggageImpl2(this._entries);
        newBaggage._entries.delete(key);
        return newBaggage;
      };
      BaggageImpl2.prototype.removeEntries = function() {
        var keys2 = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          keys2[_i] = arguments[_i];
        }
        var newBaggage = new BaggageImpl2(this._entries);
        for (var _a22 = 0, keys_1 = keys2; _a22 < keys_1.length; _a22++) {
          var key = keys_1[_a22];
          newBaggage._entries.delete(key);
        }
        return newBaggage;
      };
      BaggageImpl2.prototype.clear = function() {
        return new BaggageImpl2();
      };
      return BaggageImpl2;
    }();
    var baggageEntryMetadataSymbol = Symbol("BaggageEntryMetadata");
    var diag = DiagAPI.instance();
    function createBaggage(entries) {
      if (entries === void 0) {
        entries = {};
      }
      return new BaggageImpl(new Map(Object.entries(entries)));
    }
    __name(createBaggage, "createBaggage");
    function baggageEntryMetadataFromString(str) {
      if (typeof str !== "string") {
        diag.error("Cannot create baggage metadata from unknown type: " + typeof str);
        str = "";
      }
      return {
        __TYPE__: baggageEntryMetadataSymbol,
        toString: function() {
          return str;
        }
      };
    }
    __name(baggageEntryMetadataFromString, "baggageEntryMetadataFromString");
    var consoleMap = [
      { n: "error", c: "error" },
      { n: "warn", c: "warn" },
      { n: "info", c: "info" },
      { n: "debug", c: "debug" },
      { n: "verbose", c: "trace" }
    ];
    var DiagConsoleLogger = function() {
      function DiagConsoleLogger2() {
        function _consoleFunc(funcName) {
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            if (console) {
              var theFunc = console[funcName];
              if (typeof theFunc !== "function") {
                theFunc = console.log;
              }
              if (typeof theFunc === "function") {
                return theFunc.apply(console, args);
              }
            }
          };
        }
        __name(_consoleFunc, "_consoleFunc");
        for (var i = 0; i < consoleMap.length; i++) {
          this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);
        }
      }
      __name(DiagConsoleLogger2, "DiagConsoleLogger");
      return DiagConsoleLogger2;
    }();
    var defaultTextMapGetter = {
      get: function(carrier, key) {
        if (carrier == null) {
          return void 0;
        }
        return carrier[key];
      },
      keys: function(carrier) {
        if (carrier == null) {
          return [];
        }
        return Object.keys(carrier);
      }
    };
    var defaultTextMapSetter = {
      set: function(carrier, key, value) {
        if (carrier == null) {
          return;
        }
        carrier[key] = value;
      }
    };
    function createContextKey(description) {
      return Symbol.for(description);
    }
    __name(createContextKey, "createContextKey");
    var BaseContext = function() {
      function BaseContext2(parentContext) {
        var self2 = this;
        self2._currentContext = parentContext ? new Map(parentContext) : /* @__PURE__ */ new Map();
        self2.getValue = function(key) {
          return self2._currentContext.get(key);
        };
        self2.setValue = function(key, value) {
          var context3 = new BaseContext2(self2._currentContext);
          context3._currentContext.set(key, value);
          return context3;
        };
        self2.deleteValue = function(key) {
          var context3 = new BaseContext2(self2._currentContext);
          context3._currentContext.delete(key);
          return context3;
        };
      }
      __name(BaseContext2, "BaseContext");
      return BaseContext2;
    }();
    var ROOT_CONTEXT = new BaseContext();
    var __spreadArray = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    var NoopContextManager = function() {
      function NoopContextManager2() {
      }
      __name(NoopContextManager2, "NoopContextManager");
      NoopContextManager2.prototype.active = function() {
        return ROOT_CONTEXT;
      };
      NoopContextManager2.prototype.with = function(_context, fn, thisArg) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
          args[_i - 3] = arguments[_i];
        }
        return fn.call.apply(fn, __spreadArray([thisArg], args));
      };
      NoopContextManager2.prototype.bind = function(_context, target) {
        return target;
      };
      NoopContextManager2.prototype.enable = function() {
        return this;
      };
      NoopContextManager2.prototype.disable = function() {
        return this;
      };
      return NoopContextManager2;
    }();
    var __spreadArray2 = function(to, from) {
      for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
      return to;
    };
    var API_NAME2 = "context";
    var NOOP_CONTEXT_MANAGER = new NoopContextManager();
    var ContextAPI = function() {
      function ContextAPI2() {
      }
      __name(ContextAPI2, "ContextAPI");
      ContextAPI2.getInstance = function() {
        if (!this._instance) {
          this._instance = new ContextAPI2();
        }
        return this._instance;
      };
      ContextAPI2.prototype.setGlobalContextManager = function(contextManager) {
        return registerGlobal(API_NAME2, contextManager, DiagAPI.instance());
      };
      ContextAPI2.prototype.active = function() {
        return this._getContextManager().active();
      };
      ContextAPI2.prototype.with = function(context3, fn, thisArg) {
        var _a22;
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
          args[_i - 3] = arguments[_i];
        }
        return (_a22 = this._getContextManager()).with.apply(_a22, __spreadArray2([context3, fn, thisArg], args));
      };
      ContextAPI2.prototype.bind = function(context3, target) {
        return this._getContextManager().bind(context3, target);
      };
      ContextAPI2.prototype._getContextManager = function() {
        return getGlobal(API_NAME2) || NOOP_CONTEXT_MANAGER;
      };
      ContextAPI2.prototype.disable = function() {
        this._getContextManager().disable();
        unregisterGlobal(API_NAME2, DiagAPI.instance());
      };
      return ContextAPI2;
    }();
    var TraceFlags;
    (function(TraceFlags2) {
      TraceFlags2[TraceFlags2["NONE"] = 0] = "NONE";
      TraceFlags2[TraceFlags2["SAMPLED"] = 1] = "SAMPLED";
    })(TraceFlags || (TraceFlags = {}));
    var INVALID_SPANID = "0000000000000000";
    var INVALID_TRACEID = "00000000000000000000000000000000";
    var INVALID_SPAN_CONTEXT = {
      traceId: INVALID_TRACEID,
      spanId: INVALID_SPANID,
      traceFlags: TraceFlags.NONE
    };
    var NonRecordingSpan = function() {
      function NonRecordingSpan2(_spanContext) {
        if (_spanContext === void 0) {
          _spanContext = INVALID_SPAN_CONTEXT;
        }
        this._spanContext = _spanContext;
      }
      __name(NonRecordingSpan2, "NonRecordingSpan");
      NonRecordingSpan2.prototype.spanContext = function() {
        return this._spanContext;
      };
      NonRecordingSpan2.prototype.setAttribute = function(_key, _value) {
        return this;
      };
      NonRecordingSpan2.prototype.setAttributes = function(_attributes) {
        return this;
      };
      NonRecordingSpan2.prototype.addEvent = function(_name, _attributes) {
        return this;
      };
      NonRecordingSpan2.prototype.setStatus = function(_status) {
        return this;
      };
      NonRecordingSpan2.prototype.updateName = function(_name) {
        return this;
      };
      NonRecordingSpan2.prototype.end = function(_endTime) {
      };
      NonRecordingSpan2.prototype.isRecording = function() {
        return false;
      };
      NonRecordingSpan2.prototype.recordException = function(_exception, _time) {
      };
      return NonRecordingSpan2;
    }();
    var SPAN_KEY = createContextKey("OpenTelemetry Context Key SPAN");
    function getSpan(context3) {
      return context3.getValue(SPAN_KEY) || void 0;
    }
    __name(getSpan, "getSpan");
    function setSpan(context3, span) {
      return context3.setValue(SPAN_KEY, span);
    }
    __name(setSpan, "setSpan");
    function deleteSpan(context3) {
      return context3.deleteValue(SPAN_KEY);
    }
    __name(deleteSpan, "deleteSpan");
    function setSpanContext(context3, spanContext) {
      return setSpan(context3, new NonRecordingSpan(spanContext));
    }
    __name(setSpanContext, "setSpanContext");
    function getSpanContext(context3) {
      var _a22;
      return (_a22 = getSpan(context3)) === null || _a22 === void 0 ? void 0 : _a22.spanContext();
    }
    __name(getSpanContext, "getSpanContext");
    var VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;
    var VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;
    function isValidTraceId(traceId) {
      return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;
    }
    __name(isValidTraceId, "isValidTraceId");
    function isValidSpanId(spanId) {
      return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;
    }
    __name(isValidSpanId, "isValidSpanId");
    function isSpanContextValid(spanContext) {
      return isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId);
    }
    __name(isSpanContextValid, "isSpanContextValid");
    function wrapSpanContext(spanContext) {
      return new NonRecordingSpan(spanContext);
    }
    __name(wrapSpanContext, "wrapSpanContext");
    var context = ContextAPI.getInstance();
    var NoopTracer = function() {
      function NoopTracer2() {
      }
      __name(NoopTracer2, "NoopTracer");
      NoopTracer2.prototype.startSpan = function(name, options, context3) {
        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);
        if (root) {
          return new NonRecordingSpan();
        }
        var parentFromContext = context3 && getSpanContext(context3);
        if (isSpanContext(parentFromContext) && isSpanContextValid(parentFromContext)) {
          return new NonRecordingSpan(parentFromContext);
        } else {
          return new NonRecordingSpan();
        }
      };
      NoopTracer2.prototype.startActiveSpan = function(name, arg2, arg3, arg4) {
        var opts;
        var ctx;
        var fn;
        if (arguments.length < 2) {
          return;
        } else if (arguments.length === 2) {
          fn = arg2;
        } else if (arguments.length === 3) {
          opts = arg2;
          fn = arg3;
        } else {
          opts = arg2;
          ctx = arg3;
          fn = arg4;
        }
        var parentContext = ctx !== null && ctx !== void 0 ? ctx : context.active();
        var span = this.startSpan(name, opts, parentContext);
        var contextWithSpanSet = setSpan(parentContext, span);
        return context.with(contextWithSpanSet, fn, void 0, span);
      };
      return NoopTracer2;
    }();
    function isSpanContext(spanContext) {
      return typeof spanContext === "object" && typeof spanContext["spanId"] === "string" && typeof spanContext["traceId"] === "string" && typeof spanContext["traceFlags"] === "number";
    }
    __name(isSpanContext, "isSpanContext");
    var NOOP_TRACER = new NoopTracer();
    var ProxyTracer = function() {
      function ProxyTracer2(_provider, name, version, options) {
        this._provider = _provider;
        this.name = name;
        this.version = version;
        this.options = options;
      }
      __name(ProxyTracer2, "ProxyTracer");
      ProxyTracer2.prototype.startSpan = function(name, options, context3) {
        return this._getTracer().startSpan(name, options, context3);
      };
      ProxyTracer2.prototype.startActiveSpan = function(_name, _options, _context, _fn) {
        var tracer = this._getTracer();
        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);
      };
      ProxyTracer2.prototype._getTracer = function() {
        if (this._delegate) {
          return this._delegate;
        }
        var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);
        if (!tracer) {
          return NOOP_TRACER;
        }
        this._delegate = tracer;
        return this._delegate;
      };
      return ProxyTracer2;
    }();
    var NoopTracerProvider = function() {
      function NoopTracerProvider2() {
      }
      __name(NoopTracerProvider2, "NoopTracerProvider");
      NoopTracerProvider2.prototype.getTracer = function(_name, _version, _options) {
        return new NoopTracer();
      };
      return NoopTracerProvider2;
    }();
    var NOOP_TRACER_PROVIDER = new NoopTracerProvider();
    var ProxyTracerProvider = function() {
      function ProxyTracerProvider2() {
      }
      __name(ProxyTracerProvider2, "ProxyTracerProvider");
      ProxyTracerProvider2.prototype.getTracer = function(name, version, options) {
        var _a22;
        return (_a22 = this.getDelegateTracer(name, version, options)) !== null && _a22 !== void 0 ? _a22 : new ProxyTracer(this, name, version, options);
      };
      ProxyTracerProvider2.prototype.getDelegate = function() {
        var _a22;
        return (_a22 = this._delegate) !== null && _a22 !== void 0 ? _a22 : NOOP_TRACER_PROVIDER;
      };
      ProxyTracerProvider2.prototype.setDelegate = function(delegate) {
        this._delegate = delegate;
      };
      ProxyTracerProvider2.prototype.getDelegateTracer = function(name, version, options) {
        var _a22;
        return (_a22 = this._delegate) === null || _a22 === void 0 ? void 0 : _a22.getTracer(name, version, options);
      };
      return ProxyTracerProvider2;
    }();
    var SamplingDecision;
    (function(SamplingDecision2) {
      SamplingDecision2[SamplingDecision2["NOT_RECORD"] = 0] = "NOT_RECORD";
      SamplingDecision2[SamplingDecision2["RECORD"] = 1] = "RECORD";
      SamplingDecision2[SamplingDecision2["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
    })(SamplingDecision || (SamplingDecision = {}));
    var SpanKind;
    (function(SpanKind2) {
      SpanKind2[SpanKind2["INTERNAL"] = 0] = "INTERNAL";
      SpanKind2[SpanKind2["SERVER"] = 1] = "SERVER";
      SpanKind2[SpanKind2["CLIENT"] = 2] = "CLIENT";
      SpanKind2[SpanKind2["PRODUCER"] = 3] = "PRODUCER";
      SpanKind2[SpanKind2["CONSUMER"] = 4] = "CONSUMER";
    })(SpanKind || (SpanKind = {}));
    var SpanStatusCode;
    (function(SpanStatusCode2) {
      SpanStatusCode2[SpanStatusCode2["UNSET"] = 0] = "UNSET";
      SpanStatusCode2[SpanStatusCode2["OK"] = 1] = "OK";
      SpanStatusCode2[SpanStatusCode2["ERROR"] = 2] = "ERROR";
    })(SpanStatusCode || (SpanStatusCode = {}));
    var VALID_KEY_CHAR_RANGE = "[_0-9a-z-*/]";
    var VALID_KEY = "[a-z]" + VALID_KEY_CHAR_RANGE + "{0,255}";
    var VALID_VENDOR_KEY = "[a-z0-9]" + VALID_KEY_CHAR_RANGE + "{0,240}@[a-z]" + VALID_KEY_CHAR_RANGE + "{0,13}";
    var VALID_KEY_REGEX = new RegExp("^(?:" + VALID_KEY + "|" + VALID_VENDOR_KEY + ")$");
    var VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;
    var INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;
    function validateKey(key) {
      return VALID_KEY_REGEX.test(key);
    }
    __name(validateKey, "validateKey");
    function validateValue(value) {
      return VALID_VALUE_BASE_REGEX.test(value) && !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value);
    }
    __name(validateValue, "validateValue");
    var MAX_TRACE_STATE_ITEMS = 32;
    var MAX_TRACE_STATE_LEN = 512;
    var LIST_MEMBERS_SEPARATOR = ",";
    var LIST_MEMBER_KEY_VALUE_SPLITTER = "=";
    var TraceStateImpl = function() {
      function TraceStateImpl2(rawTraceState) {
        this._internalState = /* @__PURE__ */ new Map();
        if (rawTraceState)
          this._parse(rawTraceState);
      }
      __name(TraceStateImpl2, "TraceStateImpl");
      TraceStateImpl2.prototype.set = function(key, value) {
        var traceState = this._clone();
        if (traceState._internalState.has(key)) {
          traceState._internalState.delete(key);
        }
        traceState._internalState.set(key, value);
        return traceState;
      };
      TraceStateImpl2.prototype.unset = function(key) {
        var traceState = this._clone();
        traceState._internalState.delete(key);
        return traceState;
      };
      TraceStateImpl2.prototype.get = function(key) {
        return this._internalState.get(key);
      };
      TraceStateImpl2.prototype.serialize = function() {
        var _this = this;
        return this._keys().reduce(function(agg, key) {
          agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));
          return agg;
        }, []).join(LIST_MEMBERS_SEPARATOR);
      };
      TraceStateImpl2.prototype._parse = function(rawTraceState) {
        if (rawTraceState.length > MAX_TRACE_STATE_LEN)
          return;
        this._internalState = rawTraceState.split(LIST_MEMBERS_SEPARATOR).reverse().reduce(function(agg, part) {
          var listMember = part.trim();
          var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);
          if (i !== -1) {
            var key = listMember.slice(0, i);
            var value = listMember.slice(i + 1, part.length);
            if (validateKey(key) && validateValue(value)) {
              agg.set(key, value);
            } else {
            }
          }
          return agg;
        }, /* @__PURE__ */ new Map());
        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {
          this._internalState = new Map(Array.from(this._internalState.entries()).reverse().slice(0, MAX_TRACE_STATE_ITEMS));
        }
      };
      TraceStateImpl2.prototype._keys = function() {
        return Array.from(this._internalState.keys()).reverse();
      };
      TraceStateImpl2.prototype._clone = function() {
        var traceState = new TraceStateImpl2();
        traceState._internalState = new Map(this._internalState);
        return traceState;
      };
      return TraceStateImpl2;
    }();
    var API_NAME3 = "trace";
    var TraceAPI = function() {
      function TraceAPI2() {
        this._proxyTracerProvider = new ProxyTracerProvider();
        this.wrapSpanContext = wrapSpanContext;
        this.isSpanContextValid = isSpanContextValid;
        this.deleteSpan = deleteSpan;
        this.getSpan = getSpan;
        this.getSpanContext = getSpanContext;
        this.setSpan = setSpan;
        this.setSpanContext = setSpanContext;
      }
      __name(TraceAPI2, "TraceAPI");
      TraceAPI2.getInstance = function() {
        if (!this._instance) {
          this._instance = new TraceAPI2();
        }
        return this._instance;
      };
      TraceAPI2.prototype.setGlobalTracerProvider = function(provider) {
        var success = registerGlobal(API_NAME3, this._proxyTracerProvider, DiagAPI.instance());
        if (success) {
          this._proxyTracerProvider.setDelegate(provider);
        }
        return success;
      };
      TraceAPI2.prototype.getTracerProvider = function() {
        return getGlobal(API_NAME3) || this._proxyTracerProvider;
      };
      TraceAPI2.prototype.getTracer = function(name, version) {
        return this.getTracerProvider().getTracer(name, version);
      };
      TraceAPI2.prototype.disable = function() {
        unregisterGlobal(API_NAME3, DiagAPI.instance());
        this._proxyTracerProvider = new ProxyTracerProvider();
      };
      return TraceAPI2;
    }();
    var NoopTextMapPropagator = function() {
      function NoopTextMapPropagator2() {
      }
      __name(NoopTextMapPropagator2, "NoopTextMapPropagator");
      NoopTextMapPropagator2.prototype.inject = function(_context, _carrier) {
      };
      NoopTextMapPropagator2.prototype.extract = function(context3, _carrier) {
        return context3;
      };
      NoopTextMapPropagator2.prototype.fields = function() {
        return [];
      };
      return NoopTextMapPropagator2;
    }();
    var BAGGAGE_KEY = createContextKey("OpenTelemetry Baggage Key");
    function getBaggage(context3) {
      return context3.getValue(BAGGAGE_KEY) || void 0;
    }
    __name(getBaggage, "getBaggage");
    function setBaggage(context3, baggage) {
      return context3.setValue(BAGGAGE_KEY, baggage);
    }
    __name(setBaggage, "setBaggage");
    function deleteBaggage(context3) {
      return context3.deleteValue(BAGGAGE_KEY);
    }
    __name(deleteBaggage, "deleteBaggage");
    var API_NAME4 = "propagation";
    var NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();
    var PropagationAPI = function() {
      function PropagationAPI2() {
        this.createBaggage = createBaggage;
        this.getBaggage = getBaggage;
        this.setBaggage = setBaggage;
        this.deleteBaggage = deleteBaggage;
      }
      __name(PropagationAPI2, "PropagationAPI");
      PropagationAPI2.getInstance = function() {
        if (!this._instance) {
          this._instance = new PropagationAPI2();
        }
        return this._instance;
      };
      PropagationAPI2.prototype.setGlobalPropagator = function(propagator) {
        return registerGlobal(API_NAME4, propagator, DiagAPI.instance());
      };
      PropagationAPI2.prototype.inject = function(context3, carrier, setter) {
        if (setter === void 0) {
          setter = defaultTextMapSetter;
        }
        return this._getGlobalPropagator().inject(context3, carrier, setter);
      };
      PropagationAPI2.prototype.extract = function(context3, carrier, getter) {
        if (getter === void 0) {
          getter = defaultTextMapGetter;
        }
        return this._getGlobalPropagator().extract(context3, carrier, getter);
      };
      PropagationAPI2.prototype.fields = function() {
        return this._getGlobalPropagator().fields();
      };
      PropagationAPI2.prototype.disable = function() {
        unregisterGlobal(API_NAME4, DiagAPI.instance());
      };
      PropagationAPI2.prototype._getGlobalPropagator = function() {
        return getGlobal(API_NAME4) || NOOP_TEXT_MAP_PROPAGATOR;
      };
      return PropagationAPI2;
    }();
    var context2 = ContextAPI.getInstance();
    var trace = TraceAPI.getInstance();
    var propagation = PropagationAPI.getInstance();
    var diag2 = DiagAPI.instance();
    var SUPPRESS_TRACING_KEY = createContextKey("OpenTelemetry SDK Context Key SUPPRESS_TRACING");
    function suppressTracing(context3) {
      return context3.setValue(SUPPRESS_TRACING_KEY, true);
    }
    __name(suppressTracing, "suppressTracing");
    function isTracingSuppressed(context3) {
      return context3.getValue(SUPPRESS_TRACING_KEY) === true;
    }
    __name(isTracingSuppressed, "isTracingSuppressed");
    var BAGGAGE_KEY_PAIR_SEPARATOR = "=";
    var BAGGAGE_PROPERTIES_SEPARATOR = ";";
    var BAGGAGE_ITEMS_SEPARATOR = ",";
    var BAGGAGE_HEADER = "baggage";
    var BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;
    var BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;
    var BAGGAGE_MAX_TOTAL_LENGTH = 8192;
    var __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error2) {
        e = { error: error2 };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    function serializeKeyPairs(keyPairs) {
      return keyPairs.reduce(function(hValue, current) {
        var value = "" + hValue + (hValue !== "" ? BAGGAGE_ITEMS_SEPARATOR : "") + current;
        return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;
      }, "");
    }
    __name(serializeKeyPairs, "serializeKeyPairs");
    function getKeyPairs(baggage) {
      return baggage.getAllEntries().map(function(_a22) {
        var _b2 = __read(_a22, 2), key = _b2[0], value = _b2[1];
        var entry = encodeURIComponent(key) + "=" + encodeURIComponent(value.value);
        if (value.metadata !== void 0) {
          entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();
        }
        return entry;
      });
    }
    __name(getKeyPairs, "getKeyPairs");
    function parsePairKeyValue(entry) {
      var valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);
      if (valueProps.length <= 0)
        return;
      var keyPairPart = valueProps.shift();
      if (!keyPairPart)
        return;
      var keyPair = keyPairPart.split(BAGGAGE_KEY_PAIR_SEPARATOR);
      if (keyPair.length !== 2)
        return;
      var key = decodeURIComponent(keyPair[0].trim());
      var value = decodeURIComponent(keyPair[1].trim());
      var metadata;
      if (valueProps.length > 0) {
        metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));
      }
      return { key, value, metadata };
    }
    __name(parsePairKeyValue, "parsePairKeyValue");
    var W3CBaggagePropagator = function() {
      function W3CBaggagePropagator2() {
      }
      __name(W3CBaggagePropagator2, "W3CBaggagePropagator");
      W3CBaggagePropagator2.prototype.inject = function(context3, carrier, setter) {
        var baggage = propagation.getBaggage(context3);
        if (!baggage || isTracingSuppressed(context3))
          return;
        var keyPairs = getKeyPairs(baggage).filter(function(pair) {
          return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;
        }).slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);
        var headerValue = serializeKeyPairs(keyPairs);
        if (headerValue.length > 0) {
          setter.set(carrier, BAGGAGE_HEADER, headerValue);
        }
      };
      W3CBaggagePropagator2.prototype.extract = function(context3, carrier, getter) {
        var headerValue = getter.get(carrier, BAGGAGE_HEADER);
        var baggageString = Array.isArray(headerValue) ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR) : headerValue;
        if (!baggageString)
          return context3;
        var baggage = {};
        if (baggageString.length === 0) {
          return context3;
        }
        var pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);
        pairs.forEach(function(entry) {
          var keyPair = parsePairKeyValue(entry);
          if (keyPair) {
            var baggageEntry = { value: keyPair.value };
            if (keyPair.metadata) {
              baggageEntry.metadata = keyPair.metadata;
            }
            baggage[keyPair.key] = baggageEntry;
          }
        });
        if (Object.entries(baggage).length === 0) {
          return context3;
        }
        return propagation.setBaggage(context3, propagation.createBaggage(baggage));
      };
      W3CBaggagePropagator2.prototype.fields = function() {
        return [BAGGAGE_HEADER];
      };
      return W3CBaggagePropagator2;
    }();
    var __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read2 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error2) {
        e = { error: error2 };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    function sanitizeAttributes(attributes) {
      var e_1, _a22;
      var out = {};
      if (typeof attributes !== "object" || attributes == null) {
        return out;
      }
      try {
        for (var _b2 = __values(Object.entries(attributes)), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
          var _d2 = __read2(_c2.value, 2), key = _d2[0], val = _d2[1];
          if (!isAttributeKey(key)) {
            diag2.warn("Invalid attribute key: " + key);
            continue;
          }
          if (!isAttributeValue(val)) {
            diag2.warn("Invalid attribute value set for key: " + key);
            continue;
          }
          if (Array.isArray(val)) {
            out[key] = val.slice();
          } else {
            out[key] = val;
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c2 && !_c2.done && (_a22 = _b2.return))
            _a22.call(_b2);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return out;
    }
    __name(sanitizeAttributes, "sanitizeAttributes");
    function isAttributeKey(key) {
      return typeof key === "string" && key.length > 0;
    }
    __name(isAttributeKey, "isAttributeKey");
    function isAttributeValue(val) {
      if (val == null) {
        return true;
      }
      if (Array.isArray(val)) {
        return isHomogeneousAttributeValueArray(val);
      }
      return isValidPrimitiveAttributeValue(val);
    }
    __name(isAttributeValue, "isAttributeValue");
    function isHomogeneousAttributeValueArray(arr) {
      var e_2, _a22;
      var type;
      try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
          var element = arr_1_1.value;
          if (element == null)
            continue;
          if (!type) {
            if (isValidPrimitiveAttributeValue(element)) {
              type = typeof element;
              continue;
            }
            return false;
          }
          if (typeof element === type) {
            continue;
          }
          return false;
        }
      } catch (e_2_1) {
        e_2 = { error: e_2_1 };
      } finally {
        try {
          if (arr_1_1 && !arr_1_1.done && (_a22 = arr_1.return))
            _a22.call(arr_1);
        } finally {
          if (e_2)
            throw e_2.error;
        }
      }
      return true;
    }
    __name(isHomogeneousAttributeValueArray, "isHomogeneousAttributeValueArray");
    function isValidPrimitiveAttributeValue(val) {
      switch (typeof val) {
        case "number":
        case "boolean":
        case "string":
          return true;
      }
      return false;
    }
    __name(isValidPrimitiveAttributeValue, "isValidPrimitiveAttributeValue");
    function loggingErrorHandler() {
      return function(ex) {
        diag2.error(stringifyException(ex));
      };
    }
    __name(loggingErrorHandler, "loggingErrorHandler");
    function stringifyException(ex) {
      if (typeof ex === "string") {
        return ex;
      } else {
        return JSON.stringify(flattenException(ex));
      }
    }
    __name(stringifyException, "stringifyException");
    function flattenException(ex) {
      var result = {};
      var current = ex;
      while (current !== null) {
        Object.getOwnPropertyNames(current).forEach(function(propertyName) {
          if (result[propertyName])
            return;
          var value = current[propertyName];
          if (value) {
            result[propertyName] = String(value);
          }
        });
        current = Object.getPrototypeOf(current);
      }
      return result;
    }
    __name(flattenException, "flattenException");
    var delegateHandler = loggingErrorHandler();
    function globalErrorHandler(ex) {
      try {
        delegateHandler(ex);
      } catch (_a22) {
      }
    }
    __name(globalErrorHandler, "globalErrorHandler");
    var os2 = __toESM(require("os"));
    var TracesSamplerValues;
    (function(TracesSamplerValues2) {
      TracesSamplerValues2["AlwaysOff"] = "always_off";
      TracesSamplerValues2["AlwaysOn"] = "always_on";
      TracesSamplerValues2["ParentBasedAlwaysOff"] = "parentbased_always_off";
      TracesSamplerValues2["ParentBasedAlwaysOn"] = "parentbased_always_on";
      TracesSamplerValues2["ParentBasedTraceIdRatio"] = "parentbased_traceidratio";
      TracesSamplerValues2["TraceIdRatio"] = "traceidratio";
    })(TracesSamplerValues || (TracesSamplerValues = {}));
    var DEFAULT_LIST_SEPARATOR = ",";
    var ENVIRONMENT_NUMBERS_KEYS = [
      "OTEL_BSP_EXPORT_TIMEOUT",
      "OTEL_BSP_MAX_EXPORT_BATCH_SIZE",
      "OTEL_BSP_MAX_QUEUE_SIZE",
      "OTEL_BSP_SCHEDULE_DELAY",
      "OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT",
      "OTEL_ATTRIBUTE_COUNT_LIMIT",
      "OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT",
      "OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT",
      "OTEL_SPAN_EVENT_COUNT_LIMIT",
      "OTEL_SPAN_LINK_COUNT_LIMIT",
      "OTEL_EXPORTER_OTLP_TIMEOUT",
      "OTEL_EXPORTER_OTLP_TRACES_TIMEOUT",
      "OTEL_EXPORTER_OTLP_METRICS_TIMEOUT",
      "OTEL_EXPORTER_JAEGER_AGENT_PORT"
    ];
    function isEnvVarANumber(key) {
      return ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1;
    }
    __name(isEnvVarANumber, "isEnvVarANumber");
    var ENVIRONMENT_LISTS_KEYS = [
      "OTEL_NO_PATCH_MODULES",
      "OTEL_PROPAGATORS"
    ];
    function isEnvVarAList(key) {
      return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;
    }
    __name(isEnvVarAList, "isEnvVarAList");
    var DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;
    var DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;
    var DEFAULT_ENVIRONMENT = {
      CONTAINER_NAME: "",
      ECS_CONTAINER_METADATA_URI_V4: "",
      ECS_CONTAINER_METADATA_URI: "",
      HOSTNAME: "",
      KUBERNETES_SERVICE_HOST: "",
      NAMESPACE: "",
      OTEL_BSP_EXPORT_TIMEOUT: 3e4,
      OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,
      OTEL_BSP_MAX_QUEUE_SIZE: 2048,
      OTEL_BSP_SCHEDULE_DELAY: 5e3,
      OTEL_EXPORTER_JAEGER_AGENT_HOST: "",
      OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,
      OTEL_EXPORTER_JAEGER_ENDPOINT: "",
      OTEL_EXPORTER_JAEGER_PASSWORD: "",
      OTEL_EXPORTER_JAEGER_USER: "",
      OTEL_EXPORTER_OTLP_ENDPOINT: "",
      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: "",
      OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: "",
      OTEL_EXPORTER_OTLP_HEADERS: "",
      OTEL_EXPORTER_OTLP_TRACES_HEADERS: "",
      OTEL_EXPORTER_OTLP_METRICS_HEADERS: "",
      OTEL_EXPORTER_OTLP_TIMEOUT: 1e4,
      OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 1e4,
      OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 1e4,
      OTEL_EXPORTER_ZIPKIN_ENDPOINT: "http://localhost:9411/api/v2/spans",
      OTEL_LOG_LEVEL: DiagLogLevel.INFO,
      OTEL_NO_PATCH_MODULES: [],
      OTEL_PROPAGATORS: ["tracecontext", "baggage"],
      OTEL_RESOURCE_ATTRIBUTES: "",
      OTEL_SERVICE_NAME: "",
      OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,
      OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,
      OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,
      OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,
      OTEL_SPAN_EVENT_COUNT_LIMIT: 128,
      OTEL_SPAN_LINK_COUNT_LIMIT: 128,
      OTEL_TRACES_EXPORTER: "none",
      OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,
      OTEL_TRACES_SAMPLER_ARG: "",
      OTEL_EXPORTER_OTLP_INSECURE: "",
      OTEL_EXPORTER_OTLP_TRACES_INSECURE: "",
      OTEL_EXPORTER_OTLP_METRICS_INSECURE: "",
      OTEL_EXPORTER_OTLP_CERTIFICATE: "",
      OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: "",
      OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: "",
      OTEL_EXPORTER_OTLP_COMPRESSION: "",
      OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: "",
      OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: "",
      OTEL_EXPORTER_OTLP_CLIENT_KEY: "",
      OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: "",
      OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: "",
      OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: "",
      OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: "",
      OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: ""
    };
    function parseNumber(name, environment, values, min2, max2) {
      if (min2 === void 0) {
        min2 = -Infinity;
      }
      if (max2 === void 0) {
        max2 = Infinity;
      }
      if (typeof values[name] !== "undefined") {
        var value = Number(values[name]);
        if (!isNaN(value)) {
          if (value < min2) {
            environment[name] = min2;
          } else if (value > max2) {
            environment[name] = max2;
          } else {
            environment[name] = value;
          }
        }
      }
    }
    __name(parseNumber, "parseNumber");
    function parseStringList(name, output, input, separator) {
      if (separator === void 0) {
        separator = DEFAULT_LIST_SEPARATOR;
      }
      var givenValue = input[name];
      if (typeof givenValue === "string") {
        output[name] = givenValue.split(separator).map(function(v) {
          return v.trim();
        });
      }
    }
    __name(parseStringList, "parseStringList");
    var logLevelMap = {
      ALL: DiagLogLevel.ALL,
      VERBOSE: DiagLogLevel.VERBOSE,
      DEBUG: DiagLogLevel.DEBUG,
      INFO: DiagLogLevel.INFO,
      WARN: DiagLogLevel.WARN,
      ERROR: DiagLogLevel.ERROR,
      NONE: DiagLogLevel.NONE
    };
    function setLogLevelFromEnv(key, environment, values) {
      var value = values[key];
      if (typeof value === "string") {
        var theLevel = logLevelMap[value.toUpperCase()];
        if (theLevel != null) {
          environment[key] = theLevel;
        }
      }
    }
    __name(setLogLevelFromEnv, "setLogLevelFromEnv");
    function parseEnvironment(values) {
      var environment = {};
      for (var env2 in DEFAULT_ENVIRONMENT) {
        var key = env2;
        switch (key) {
          case "OTEL_LOG_LEVEL":
            setLogLevelFromEnv(key, environment, values);
            break;
          default:
            if (isEnvVarANumber(key)) {
              parseNumber(key, environment, values);
            } else if (isEnvVarAList(key)) {
              parseStringList(key, environment, values);
            } else {
              var value = values[key];
              if (typeof value !== "undefined" && value !== null) {
                environment[key] = String(value);
              }
            }
        }
      }
      return environment;
    }
    __name(parseEnvironment, "parseEnvironment");
    function getEnv() {
      var processEnv = parseEnvironment(process.env);
      return Object.assign({
        HOSTNAME: os2.hostname()
      }, DEFAULT_ENVIRONMENT, processEnv);
    }
    __name(getEnv, "getEnv");
    var _globalThis2 = typeof globalThis === "object" ? globalThis : global;
    var SPAN_ID_BYTES = 8;
    var TRACE_ID_BYTES = 16;
    var RandomIdGenerator = function() {
      function RandomIdGenerator2() {
        this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);
        this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);
      }
      __name(RandomIdGenerator2, "RandomIdGenerator");
      return RandomIdGenerator2;
    }();
    var SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);
    function getIdGenerator(bytes) {
      return /* @__PURE__ */ __name(function generateId() {
        for (var i = 0; i < bytes / 4; i++) {
          SHARED_BUFFER.writeUInt32BE(Math.random() * Math.pow(2, 32) >>> 0, i * 4);
        }
        for (var i = 0; i < bytes; i++) {
          if (SHARED_BUFFER[i] > 0) {
            break;
          } else if (i === bytes - 1) {
            SHARED_BUFFER[bytes - 1] = 1;
          }
        }
        return SHARED_BUFFER.toString("hex", 0, bytes);
      }, "generateId");
    }
    __name(getIdGenerator, "getIdGenerator");
    var import_perf_hooks = require("perf_hooks");
    var otperformance = import_perf_hooks.performance;
    var VERSION2 = "1.4.0";
    var SemanticAttributes = {
      AWS_LAMBDA_INVOKED_ARN: "aws.lambda.invoked_arn",
      DB_SYSTEM: "db.system",
      DB_CONNECTION_STRING: "db.connection_string",
      DB_USER: "db.user",
      DB_JDBC_DRIVER_CLASSNAME: "db.jdbc.driver_classname",
      DB_NAME: "db.name",
      DB_STATEMENT: "db.statement",
      DB_OPERATION: "db.operation",
      DB_MSSQL_INSTANCE_NAME: "db.mssql.instance_name",
      DB_CASSANDRA_KEYSPACE: "db.cassandra.keyspace",
      DB_CASSANDRA_PAGE_SIZE: "db.cassandra.page_size",
      DB_CASSANDRA_CONSISTENCY_LEVEL: "db.cassandra.consistency_level",
      DB_CASSANDRA_TABLE: "db.cassandra.table",
      DB_CASSANDRA_IDEMPOTENCE: "db.cassandra.idempotence",
      DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT: "db.cassandra.speculative_execution_count",
      DB_CASSANDRA_COORDINATOR_ID: "db.cassandra.coordinator.id",
      DB_CASSANDRA_COORDINATOR_DC: "db.cassandra.coordinator.dc",
      DB_HBASE_NAMESPACE: "db.hbase.namespace",
      DB_REDIS_DATABASE_INDEX: "db.redis.database_index",
      DB_MONGODB_COLLECTION: "db.mongodb.collection",
      DB_SQL_TABLE: "db.sql.table",
      EXCEPTION_TYPE: "exception.type",
      EXCEPTION_MESSAGE: "exception.message",
      EXCEPTION_STACKTRACE: "exception.stacktrace",
      EXCEPTION_ESCAPED: "exception.escaped",
      FAAS_TRIGGER: "faas.trigger",
      FAAS_EXECUTION: "faas.execution",
      FAAS_DOCUMENT_COLLECTION: "faas.document.collection",
      FAAS_DOCUMENT_OPERATION: "faas.document.operation",
      FAAS_DOCUMENT_TIME: "faas.document.time",
      FAAS_DOCUMENT_NAME: "faas.document.name",
      FAAS_TIME: "faas.time",
      FAAS_CRON: "faas.cron",
      FAAS_COLDSTART: "faas.coldstart",
      FAAS_INVOKED_NAME: "faas.invoked_name",
      FAAS_INVOKED_PROVIDER: "faas.invoked_provider",
      FAAS_INVOKED_REGION: "faas.invoked_region",
      NET_TRANSPORT: "net.transport",
      NET_PEER_IP: "net.peer.ip",
      NET_PEER_PORT: "net.peer.port",
      NET_PEER_NAME: "net.peer.name",
      NET_HOST_IP: "net.host.ip",
      NET_HOST_PORT: "net.host.port",
      NET_HOST_NAME: "net.host.name",
      NET_HOST_CONNECTION_TYPE: "net.host.connection.type",
      NET_HOST_CONNECTION_SUBTYPE: "net.host.connection.subtype",
      NET_HOST_CARRIER_NAME: "net.host.carrier.name",
      NET_HOST_CARRIER_MCC: "net.host.carrier.mcc",
      NET_HOST_CARRIER_MNC: "net.host.carrier.mnc",
      NET_HOST_CARRIER_ICC: "net.host.carrier.icc",
      PEER_SERVICE: "peer.service",
      ENDUSER_ID: "enduser.id",
      ENDUSER_ROLE: "enduser.role",
      ENDUSER_SCOPE: "enduser.scope",
      THREAD_ID: "thread.id",
      THREAD_NAME: "thread.name",
      CODE_FUNCTION: "code.function",
      CODE_NAMESPACE: "code.namespace",
      CODE_FILEPATH: "code.filepath",
      CODE_LINENO: "code.lineno",
      HTTP_METHOD: "http.method",
      HTTP_URL: "http.url",
      HTTP_TARGET: "http.target",
      HTTP_HOST: "http.host",
      HTTP_SCHEME: "http.scheme",
      HTTP_STATUS_CODE: "http.status_code",
      HTTP_FLAVOR: "http.flavor",
      HTTP_USER_AGENT: "http.user_agent",
      HTTP_REQUEST_CONTENT_LENGTH: "http.request_content_length",
      HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED: "http.request_content_length_uncompressed",
      HTTP_RESPONSE_CONTENT_LENGTH: "http.response_content_length",
      HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED: "http.response_content_length_uncompressed",
      HTTP_SERVER_NAME: "http.server_name",
      HTTP_ROUTE: "http.route",
      HTTP_CLIENT_IP: "http.client_ip",
      AWS_DYNAMODB_TABLE_NAMES: "aws.dynamodb.table_names",
      AWS_DYNAMODB_CONSUMED_CAPACITY: "aws.dynamodb.consumed_capacity",
      AWS_DYNAMODB_ITEM_COLLECTION_METRICS: "aws.dynamodb.item_collection_metrics",
      AWS_DYNAMODB_PROVISIONED_READ_CAPACITY: "aws.dynamodb.provisioned_read_capacity",
      AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY: "aws.dynamodb.provisioned_write_capacity",
      AWS_DYNAMODB_CONSISTENT_READ: "aws.dynamodb.consistent_read",
      AWS_DYNAMODB_PROJECTION: "aws.dynamodb.projection",
      AWS_DYNAMODB_LIMIT: "aws.dynamodb.limit",
      AWS_DYNAMODB_ATTRIBUTES_TO_GET: "aws.dynamodb.attributes_to_get",
      AWS_DYNAMODB_INDEX_NAME: "aws.dynamodb.index_name",
      AWS_DYNAMODB_SELECT: "aws.dynamodb.select",
      AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES: "aws.dynamodb.global_secondary_indexes",
      AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES: "aws.dynamodb.local_secondary_indexes",
      AWS_DYNAMODB_EXCLUSIVE_START_TABLE: "aws.dynamodb.exclusive_start_table",
      AWS_DYNAMODB_TABLE_COUNT: "aws.dynamodb.table_count",
      AWS_DYNAMODB_SCAN_FORWARD: "aws.dynamodb.scan_forward",
      AWS_DYNAMODB_SEGMENT: "aws.dynamodb.segment",
      AWS_DYNAMODB_TOTAL_SEGMENTS: "aws.dynamodb.total_segments",
      AWS_DYNAMODB_COUNT: "aws.dynamodb.count",
      AWS_DYNAMODB_SCANNED_COUNT: "aws.dynamodb.scanned_count",
      AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS: "aws.dynamodb.attribute_definitions",
      AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES: "aws.dynamodb.global_secondary_index_updates",
      MESSAGING_SYSTEM: "messaging.system",
      MESSAGING_DESTINATION: "messaging.destination",
      MESSAGING_DESTINATION_KIND: "messaging.destination_kind",
      MESSAGING_TEMP_DESTINATION: "messaging.temp_destination",
      MESSAGING_PROTOCOL: "messaging.protocol",
      MESSAGING_PROTOCOL_VERSION: "messaging.protocol_version",
      MESSAGING_URL: "messaging.url",
      MESSAGING_MESSAGE_ID: "messaging.message_id",
      MESSAGING_CONVERSATION_ID: "messaging.conversation_id",
      MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES: "messaging.message_payload_size_bytes",
      MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES: "messaging.message_payload_compressed_size_bytes",
      MESSAGING_OPERATION: "messaging.operation",
      MESSAGING_CONSUMER_ID: "messaging.consumer_id",
      MESSAGING_RABBITMQ_ROUTING_KEY: "messaging.rabbitmq.routing_key",
      MESSAGING_KAFKA_MESSAGE_KEY: "messaging.kafka.message_key",
      MESSAGING_KAFKA_CONSUMER_GROUP: "messaging.kafka.consumer_group",
      MESSAGING_KAFKA_CLIENT_ID: "messaging.kafka.client_id",
      MESSAGING_KAFKA_PARTITION: "messaging.kafka.partition",
      MESSAGING_KAFKA_TOMBSTONE: "messaging.kafka.tombstone",
      RPC_SYSTEM: "rpc.system",
      RPC_SERVICE: "rpc.service",
      RPC_METHOD: "rpc.method",
      RPC_GRPC_STATUS_CODE: "rpc.grpc.status_code",
      RPC_JSONRPC_VERSION: "rpc.jsonrpc.version",
      RPC_JSONRPC_REQUEST_ID: "rpc.jsonrpc.request_id",
      RPC_JSONRPC_ERROR_CODE: "rpc.jsonrpc.error_code",
      RPC_JSONRPC_ERROR_MESSAGE: "rpc.jsonrpc.error_message",
      MESSAGE_TYPE: "message.type",
      MESSAGE_ID: "message.id",
      MESSAGE_COMPRESSED_SIZE: "message.compressed_size",
      MESSAGE_UNCOMPRESSED_SIZE: "message.uncompressed_size"
    };
    var SemanticResourceAttributes = {
      CLOUD_PROVIDER: "cloud.provider",
      CLOUD_ACCOUNT_ID: "cloud.account.id",
      CLOUD_REGION: "cloud.region",
      CLOUD_AVAILABILITY_ZONE: "cloud.availability_zone",
      CLOUD_PLATFORM: "cloud.platform",
      AWS_ECS_CONTAINER_ARN: "aws.ecs.container.arn",
      AWS_ECS_CLUSTER_ARN: "aws.ecs.cluster.arn",
      AWS_ECS_LAUNCHTYPE: "aws.ecs.launchtype",
      AWS_ECS_TASK_ARN: "aws.ecs.task.arn",
      AWS_ECS_TASK_FAMILY: "aws.ecs.task.family",
      AWS_ECS_TASK_REVISION: "aws.ecs.task.revision",
      AWS_EKS_CLUSTER_ARN: "aws.eks.cluster.arn",
      AWS_LOG_GROUP_NAMES: "aws.log.group.names",
      AWS_LOG_GROUP_ARNS: "aws.log.group.arns",
      AWS_LOG_STREAM_NAMES: "aws.log.stream.names",
      AWS_LOG_STREAM_ARNS: "aws.log.stream.arns",
      CONTAINER_NAME: "container.name",
      CONTAINER_ID: "container.id",
      CONTAINER_RUNTIME: "container.runtime",
      CONTAINER_IMAGE_NAME: "container.image.name",
      CONTAINER_IMAGE_TAG: "container.image.tag",
      DEPLOYMENT_ENVIRONMENT: "deployment.environment",
      DEVICE_ID: "device.id",
      DEVICE_MODEL_IDENTIFIER: "device.model.identifier",
      DEVICE_MODEL_NAME: "device.model.name",
      FAAS_NAME: "faas.name",
      FAAS_ID: "faas.id",
      FAAS_VERSION: "faas.version",
      FAAS_INSTANCE: "faas.instance",
      FAAS_MAX_MEMORY: "faas.max_memory",
      HOST_ID: "host.id",
      HOST_NAME: "host.name",
      HOST_TYPE: "host.type",
      HOST_ARCH: "host.arch",
      HOST_IMAGE_NAME: "host.image.name",
      HOST_IMAGE_ID: "host.image.id",
      HOST_IMAGE_VERSION: "host.image.version",
      K8S_CLUSTER_NAME: "k8s.cluster.name",
      K8S_NODE_NAME: "k8s.node.name",
      K8S_NODE_UID: "k8s.node.uid",
      K8S_NAMESPACE_NAME: "k8s.namespace.name",
      K8S_POD_UID: "k8s.pod.uid",
      K8S_POD_NAME: "k8s.pod.name",
      K8S_CONTAINER_NAME: "k8s.container.name",
      K8S_REPLICASET_UID: "k8s.replicaset.uid",
      K8S_REPLICASET_NAME: "k8s.replicaset.name",
      K8S_DEPLOYMENT_UID: "k8s.deployment.uid",
      K8S_DEPLOYMENT_NAME: "k8s.deployment.name",
      K8S_STATEFULSET_UID: "k8s.statefulset.uid",
      K8S_STATEFULSET_NAME: "k8s.statefulset.name",
      K8S_DAEMONSET_UID: "k8s.daemonset.uid",
      K8S_DAEMONSET_NAME: "k8s.daemonset.name",
      K8S_JOB_UID: "k8s.job.uid",
      K8S_JOB_NAME: "k8s.job.name",
      K8S_CRONJOB_UID: "k8s.cronjob.uid",
      K8S_CRONJOB_NAME: "k8s.cronjob.name",
      OS_TYPE: "os.type",
      OS_DESCRIPTION: "os.description",
      OS_NAME: "os.name",
      OS_VERSION: "os.version",
      PROCESS_PID: "process.pid",
      PROCESS_EXECUTABLE_NAME: "process.executable.name",
      PROCESS_EXECUTABLE_PATH: "process.executable.path",
      PROCESS_COMMAND: "process.command",
      PROCESS_COMMAND_LINE: "process.command_line",
      PROCESS_COMMAND_ARGS: "process.command_args",
      PROCESS_OWNER: "process.owner",
      PROCESS_RUNTIME_NAME: "process.runtime.name",
      PROCESS_RUNTIME_VERSION: "process.runtime.version",
      PROCESS_RUNTIME_DESCRIPTION: "process.runtime.description",
      SERVICE_NAME: "service.name",
      SERVICE_NAMESPACE: "service.namespace",
      SERVICE_INSTANCE_ID: "service.instance.id",
      SERVICE_VERSION: "service.version",
      TELEMETRY_SDK_NAME: "telemetry.sdk.name",
      TELEMETRY_SDK_LANGUAGE: "telemetry.sdk.language",
      TELEMETRY_SDK_VERSION: "telemetry.sdk.version",
      TELEMETRY_AUTO_VERSION: "telemetry.auto.version",
      WEBENGINE_NAME: "webengine.name",
      WEBENGINE_VERSION: "webengine.version",
      WEBENGINE_DESCRIPTION: "webengine.description"
    };
    var TelemetrySdkLanguageValues = {
      CPP: "cpp",
      DOTNET: "dotnet",
      ERLANG: "erlang",
      GO: "go",
      JAVA: "java",
      NODEJS: "nodejs",
      PHP: "php",
      PYTHON: "python",
      RUBY: "ruby",
      WEBJS: "webjs"
    };
    var _a;
    var SDK_INFO = (_a = {}, _a[SemanticResourceAttributes.TELEMETRY_SDK_NAME] = "opentelemetry", _a[SemanticResourceAttributes.PROCESS_RUNTIME_NAME] = "node", _a[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = TelemetrySdkLanguageValues.NODEJS, _a[SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = VERSION2, _a);
    function unrefTimer(timer) {
      timer.unref();
    }
    __name(unrefTimer, "unrefTimer");
    var NANOSECOND_DIGITS = 9;
    var SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);
    function numberToHrtime(epochMillis) {
      var epochSeconds = epochMillis / 1e3;
      var seconds = Math.trunc(epochSeconds);
      var nanos = Number((epochSeconds - seconds).toFixed(NANOSECOND_DIGITS)) * SECOND_TO_NANOSECONDS;
      return [seconds, nanos];
    }
    __name(numberToHrtime, "numberToHrtime");
    function getTimeOrigin() {
      var timeOrigin = otperformance.timeOrigin;
      if (typeof timeOrigin !== "number") {
        var perf = otperformance;
        timeOrigin = perf.timing && perf.timing.fetchStart;
      }
      return timeOrigin;
    }
    __name(getTimeOrigin, "getTimeOrigin");
    function hrTime(performanceNow) {
      var timeOrigin = numberToHrtime(getTimeOrigin());
      var now = numberToHrtime(typeof performanceNow === "number" ? performanceNow : otperformance.now());
      var seconds = timeOrigin[0] + now[0];
      var nanos = timeOrigin[1] + now[1];
      if (nanos > SECOND_TO_NANOSECONDS) {
        nanos -= SECOND_TO_NANOSECONDS;
        seconds += 1;
      }
      return [seconds, nanos];
    }
    __name(hrTime, "hrTime");
    function timeInputToHrTime(time) {
      if (isTimeInputHrTime(time)) {
        return time;
      } else if (typeof time === "number") {
        if (time < getTimeOrigin()) {
          return hrTime(time);
        } else {
          return numberToHrtime(time);
        }
      } else if (time instanceof Date) {
        return numberToHrtime(time.getTime());
      } else {
        throw TypeError("Invalid input type");
      }
    }
    __name(timeInputToHrTime, "timeInputToHrTime");
    function hrTimeDuration(startTime, endTime) {
      var seconds = endTime[0] - startTime[0];
      var nanos = endTime[1] - startTime[1];
      if (nanos < 0) {
        seconds -= 1;
        nanos += SECOND_TO_NANOSECONDS;
      }
      return [seconds, nanos];
    }
    __name(hrTimeDuration, "hrTimeDuration");
    function hrTimeToMicroseconds(time) {
      return Math.round(time[0] * 1e6 + time[1] / 1e3);
    }
    __name(hrTimeToMicroseconds, "hrTimeToMicroseconds");
    function isTimeInputHrTime(value) {
      return Array.isArray(value) && value.length === 2 && typeof value[0] === "number" && typeof value[1] === "number";
    }
    __name(isTimeInputHrTime, "isTimeInputHrTime");
    function isTimeInput(value) {
      return isTimeInputHrTime(value) || typeof value === "number" || value instanceof Date;
    }
    __name(isTimeInput, "isTimeInput");
    var ExportResultCode;
    (function(ExportResultCode2) {
      ExportResultCode2[ExportResultCode2["SUCCESS"] = 0] = "SUCCESS";
      ExportResultCode2[ExportResultCode2["FAILED"] = 1] = "FAILED";
    })(ExportResultCode || (ExportResultCode = {}));
    var __values2 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var CompositePropagator = function() {
      function CompositePropagator2(config2) {
        if (config2 === void 0) {
          config2 = {};
        }
        var _a22;
        this._propagators = (_a22 = config2.propagators) !== null && _a22 !== void 0 ? _a22 : [];
        this._fields = Array.from(new Set(this._propagators.map(function(p) {
          return typeof p.fields === "function" ? p.fields() : [];
        }).reduce(function(x, y) {
          return x.concat(y);
        }, [])));
      }
      __name(CompositePropagator2, "CompositePropagator");
      CompositePropagator2.prototype.inject = function(context3, carrier, setter) {
        var e_1, _a22;
        try {
          for (var _b2 = __values2(this._propagators), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var propagator = _c2.value;
            try {
              propagator.inject(context3, carrier, setter);
            } catch (err) {
              diag2.warn("Failed to inject with " + propagator.constructor.name + ". Err: " + err.message);
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a22 = _b2.return))
              _a22.call(_b2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      };
      CompositePropagator2.prototype.extract = function(context3, carrier, getter) {
        return this._propagators.reduce(function(ctx, propagator) {
          try {
            return propagator.extract(ctx, carrier, getter);
          } catch (err) {
            diag2.warn("Failed to inject with " + propagator.constructor.name + ". Err: " + err.message);
          }
          return ctx;
        }, context3);
      };
      CompositePropagator2.prototype.fields = function() {
        return this._fields.slice();
      };
      return CompositePropagator2;
    }();
    var VALID_KEY_CHAR_RANGE2 = "[_0-9a-z-*/]";
    var VALID_KEY2 = "[a-z]" + VALID_KEY_CHAR_RANGE2 + "{0,255}";
    var VALID_VENDOR_KEY2 = "[a-z0-9]" + VALID_KEY_CHAR_RANGE2 + "{0,240}@[a-z]" + VALID_KEY_CHAR_RANGE2 + "{0,13}";
    var VALID_KEY_REGEX2 = new RegExp("^(?:" + VALID_KEY2 + "|" + VALID_VENDOR_KEY2 + ")$");
    var VALID_VALUE_BASE_REGEX2 = /^[ -~]{0,255}[!-~]$/;
    var INVALID_VALUE_COMMA_EQUAL_REGEX2 = /,|=/;
    function validateKey2(key) {
      return VALID_KEY_REGEX2.test(key);
    }
    __name(validateKey2, "validateKey");
    function validateValue2(value) {
      return VALID_VALUE_BASE_REGEX2.test(value) && !INVALID_VALUE_COMMA_EQUAL_REGEX2.test(value);
    }
    __name(validateValue2, "validateValue");
    var MAX_TRACE_STATE_ITEMS2 = 32;
    var MAX_TRACE_STATE_LEN2 = 512;
    var LIST_MEMBERS_SEPARATOR2 = ",";
    var LIST_MEMBER_KEY_VALUE_SPLITTER2 = "=";
    var TraceState = function() {
      function TraceState2(rawTraceState) {
        this._internalState = /* @__PURE__ */ new Map();
        if (rawTraceState)
          this._parse(rawTraceState);
      }
      __name(TraceState2, "TraceState");
      TraceState2.prototype.set = function(key, value) {
        var traceState = this._clone();
        if (traceState._internalState.has(key)) {
          traceState._internalState.delete(key);
        }
        traceState._internalState.set(key, value);
        return traceState;
      };
      TraceState2.prototype.unset = function(key) {
        var traceState = this._clone();
        traceState._internalState.delete(key);
        return traceState;
      };
      TraceState2.prototype.get = function(key) {
        return this._internalState.get(key);
      };
      TraceState2.prototype.serialize = function() {
        var _this = this;
        return this._keys().reduce(function(agg, key) {
          agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER2 + _this.get(key));
          return agg;
        }, []).join(LIST_MEMBERS_SEPARATOR2);
      };
      TraceState2.prototype._parse = function(rawTraceState) {
        if (rawTraceState.length > MAX_TRACE_STATE_LEN2)
          return;
        this._internalState = rawTraceState.split(LIST_MEMBERS_SEPARATOR2).reverse().reduce(function(agg, part) {
          var listMember = part.trim();
          var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER2);
          if (i !== -1) {
            var key = listMember.slice(0, i);
            var value = listMember.slice(i + 1, part.length);
            if (validateKey2(key) && validateValue2(value)) {
              agg.set(key, value);
            } else {
            }
          }
          return agg;
        }, /* @__PURE__ */ new Map());
        if (this._internalState.size > MAX_TRACE_STATE_ITEMS2) {
          this._internalState = new Map(Array.from(this._internalState.entries()).reverse().slice(0, MAX_TRACE_STATE_ITEMS2));
        }
      };
      TraceState2.prototype._keys = function() {
        return Array.from(this._internalState.keys()).reverse();
      };
      TraceState2.prototype._clone = function() {
        var traceState = new TraceState2();
        traceState._internalState = new Map(this._internalState);
        return traceState;
      };
      return TraceState2;
    }();
    var TRACE_PARENT_HEADER = "traceparent";
    var TRACE_STATE_HEADER = "tracestate";
    var VERSION3 = "00";
    var VERSION_PART = "(?!ff)[\\da-f]{2}";
    var TRACE_ID_PART = "(?![0]{32})[\\da-f]{32}";
    var PARENT_ID_PART = "(?![0]{16})[\\da-f]{16}";
    var FLAGS_PART = "[\\da-f]{2}";
    var TRACE_PARENT_REGEX = new RegExp("^\\s?(" + VERSION_PART + ")-(" + TRACE_ID_PART + ")-(" + PARENT_ID_PART + ")-(" + FLAGS_PART + ")(-.*)?\\s?$");
    function parseTraceParent(traceParent) {
      var match = TRACE_PARENT_REGEX.exec(traceParent);
      if (!match)
        return null;
      if (match[1] === "00" && match[5])
        return null;
      return {
        traceId: match[2],
        spanId: match[3],
        traceFlags: parseInt(match[4], 16)
      };
    }
    __name(parseTraceParent, "parseTraceParent");
    var W3CTraceContextPropagator = function() {
      function W3CTraceContextPropagator2() {
      }
      __name(W3CTraceContextPropagator2, "W3CTraceContextPropagator");
      W3CTraceContextPropagator2.prototype.inject = function(context3, carrier, setter) {
        var spanContext = trace.getSpanContext(context3);
        if (!spanContext || isTracingSuppressed(context3) || !isSpanContextValid(spanContext))
          return;
        var traceParent = VERSION3 + "-" + spanContext.traceId + "-" + spanContext.spanId + "-0" + Number(spanContext.traceFlags || TraceFlags.NONE).toString(16);
        setter.set(carrier, TRACE_PARENT_HEADER, traceParent);
        if (spanContext.traceState) {
          setter.set(carrier, TRACE_STATE_HEADER, spanContext.traceState.serialize());
        }
      };
      W3CTraceContextPropagator2.prototype.extract = function(context3, carrier, getter) {
        var traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);
        if (!traceParentHeader)
          return context3;
        var traceParent = Array.isArray(traceParentHeader) ? traceParentHeader[0] : traceParentHeader;
        if (typeof traceParent !== "string")
          return context3;
        var spanContext = parseTraceParent(traceParent);
        if (!spanContext)
          return context3;
        spanContext.isRemote = true;
        var traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);
        if (traceStateHeader) {
          var state = Array.isArray(traceStateHeader) ? traceStateHeader.join(",") : traceStateHeader;
          spanContext.traceState = new TraceState(typeof state === "string" ? state : void 0);
        }
        return trace.setSpanContext(context3, spanContext);
      };
      W3CTraceContextPropagator2.prototype.fields = function() {
        return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];
      };
      return W3CTraceContextPropagator2;
    }();
    var RPC_METADATA_KEY = createContextKey("OpenTelemetry SDK Context Key RPC_METADATA");
    var RPCType;
    (function(RPCType2) {
      RPCType2["HTTP"] = "http";
    })(RPCType || (RPCType = {}));
    var AlwaysOffSampler = function() {
      function AlwaysOffSampler2() {
      }
      __name(AlwaysOffSampler2, "AlwaysOffSampler");
      AlwaysOffSampler2.prototype.shouldSample = function() {
        return {
          decision: SamplingDecision.NOT_RECORD
        };
      };
      AlwaysOffSampler2.prototype.toString = function() {
        return "AlwaysOffSampler";
      };
      return AlwaysOffSampler2;
    }();
    var AlwaysOnSampler = function() {
      function AlwaysOnSampler2() {
      }
      __name(AlwaysOnSampler2, "AlwaysOnSampler");
      AlwaysOnSampler2.prototype.shouldSample = function() {
        return {
          decision: SamplingDecision.RECORD_AND_SAMPLED
        };
      };
      AlwaysOnSampler2.prototype.toString = function() {
        return "AlwaysOnSampler";
      };
      return AlwaysOnSampler2;
    }();
    var ParentBasedSampler = function() {
      function ParentBasedSampler2(config2) {
        var _a22, _b2, _c2, _d2;
        this._root = config2.root;
        if (!this._root) {
          globalErrorHandler(new Error("ParentBasedSampler must have a root sampler configured"));
          this._root = new AlwaysOnSampler();
        }
        this._remoteParentSampled = (_a22 = config2.remoteParentSampled) !== null && _a22 !== void 0 ? _a22 : new AlwaysOnSampler();
        this._remoteParentNotSampled = (_b2 = config2.remoteParentNotSampled) !== null && _b2 !== void 0 ? _b2 : new AlwaysOffSampler();
        this._localParentSampled = (_c2 = config2.localParentSampled) !== null && _c2 !== void 0 ? _c2 : new AlwaysOnSampler();
        this._localParentNotSampled = (_d2 = config2.localParentNotSampled) !== null && _d2 !== void 0 ? _d2 : new AlwaysOffSampler();
      }
      __name(ParentBasedSampler2, "ParentBasedSampler");
      ParentBasedSampler2.prototype.shouldSample = function(context3, traceId, spanName, spanKind, attributes, links) {
        var parentContext = trace.getSpanContext(context3);
        if (!parentContext || !isSpanContextValid(parentContext)) {
          return this._root.shouldSample(context3, traceId, spanName, spanKind, attributes, links);
        }
        if (parentContext.isRemote) {
          if (parentContext.traceFlags & TraceFlags.SAMPLED) {
            return this._remoteParentSampled.shouldSample(context3, traceId, spanName, spanKind, attributes, links);
          }
          return this._remoteParentNotSampled.shouldSample(context3, traceId, spanName, spanKind, attributes, links);
        }
        if (parentContext.traceFlags & TraceFlags.SAMPLED) {
          return this._localParentSampled.shouldSample(context3, traceId, spanName, spanKind, attributes, links);
        }
        return this._localParentNotSampled.shouldSample(context3, traceId, spanName, spanKind, attributes, links);
      };
      ParentBasedSampler2.prototype.toString = function() {
        return "ParentBased{root=" + this._root.toString() + ", remoteParentSampled=" + this._remoteParentSampled.toString() + ", remoteParentNotSampled=" + this._remoteParentNotSampled.toString() + ", localParentSampled=" + this._localParentSampled.toString() + ", localParentNotSampled=" + this._localParentNotSampled.toString() + "}";
      };
      return ParentBasedSampler2;
    }();
    var TraceIdRatioBasedSampler = function() {
      function TraceIdRatioBasedSampler2(_ratio) {
        if (_ratio === void 0) {
          _ratio = 0;
        }
        this._ratio = _ratio;
        this._ratio = this._normalize(_ratio);
        this._upperBound = Math.floor(this._ratio * 4294967295);
      }
      __name(TraceIdRatioBasedSampler2, "TraceIdRatioBasedSampler");
      TraceIdRatioBasedSampler2.prototype.shouldSample = function(context3, traceId) {
        return {
          decision: isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD
        };
      };
      TraceIdRatioBasedSampler2.prototype.toString = function() {
        return "TraceIdRatioBased{" + this._ratio + "}";
      };
      TraceIdRatioBasedSampler2.prototype._normalize = function(ratio) {
        if (typeof ratio !== "number" || isNaN(ratio))
          return 0;
        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;
      };
      TraceIdRatioBasedSampler2.prototype._accumulate = function(traceId) {
        var accumulation = 0;
        for (var i = 0; i < traceId.length / 8; i++) {
          var pos = i * 8;
          var part = parseInt(traceId.slice(pos, pos + 8), 16);
          accumulation = (accumulation ^ part) >>> 0;
        }
        return accumulation;
      };
      return TraceIdRatioBasedSampler2;
    }();
    var objectTag = "[object Object]";
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    var objectCtorString = funcToString.call(Object);
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var symToStringTag = Symbol ? Symbol.toStringTag : void 0;
    var nativeObjectToString = objectProto.toString;
    function overArg(func, transform) {
      return function(arg2) {
        return func(transform(arg2));
      };
    }
    __name(overArg, "overArg");
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) === objectCtorString;
    }
    __name(isPlainObject, "isPlainObject");
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    __name(isObjectLike, "isObjectLike");
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    __name(baseGetTag, "baseGetTag");
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag2 = value[symToStringTag];
      var unmasked = false;
      try {
        value[symToStringTag] = void 0;
        unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag2;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    __name(getRawTag, "getRawTag");
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    __name(objectToString, "objectToString");
    var MAX_LEVEL = 20;
    function merge() {
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      var result = args.shift();
      var objects = /* @__PURE__ */ new WeakMap();
      while (args.length > 0) {
        result = mergeTwoObjects(result, args.shift(), 0, objects);
      }
      return result;
    }
    __name(merge, "merge");
    function takeValue(value) {
      if (isArray(value)) {
        return value.slice();
      }
      return value;
    }
    __name(takeValue, "takeValue");
    function mergeTwoObjects(one, two, level, objects) {
      if (level === void 0) {
        level = 0;
      }
      var result;
      if (level > MAX_LEVEL) {
        return void 0;
      }
      level++;
      if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {
        result = takeValue(two);
      } else if (isArray(one)) {
        result = one.slice();
        if (isArray(two)) {
          for (var i = 0, j = two.length; i < j; i++) {
            result.push(takeValue(two[i]));
          }
        } else if (isObject(two)) {
          var keys2 = Object.keys(two);
          for (var i = 0, j = keys2.length; i < j; i++) {
            var key = keys2[i];
            result[key] = takeValue(two[key]);
          }
        }
      } else if (isObject(one)) {
        if (isObject(two)) {
          if (!shouldMerge(one, two)) {
            return two;
          }
          result = Object.assign({}, one);
          var keys2 = Object.keys(two);
          for (var i = 0, j = keys2.length; i < j; i++) {
            var key = keys2[i];
            var twoValue = two[key];
            if (isPrimitive(twoValue)) {
              if (typeof twoValue === "undefined") {
                delete result[key];
              } else {
                result[key] = twoValue;
              }
            } else {
              var obj1 = result[key];
              var obj2 = twoValue;
              if (wasObjectReferenced(one, key, objects) || wasObjectReferenced(two, key, objects)) {
                delete result[key];
              } else {
                if (isObject(obj1) && isObject(obj2)) {
                  var arr1 = objects.get(obj1) || [];
                  var arr2 = objects.get(obj2) || [];
                  arr1.push({ obj: one, key });
                  arr2.push({ obj: two, key });
                  objects.set(obj1, arr1);
                  objects.set(obj2, arr2);
                }
                result[key] = mergeTwoObjects(result[key], twoValue, level, objects);
              }
            }
          }
        } else {
          result = two;
        }
      }
      return result;
    }
    __name(mergeTwoObjects, "mergeTwoObjects");
    function wasObjectReferenced(obj, key, objects) {
      var arr = objects.get(obj[key]) || [];
      for (var i = 0, j = arr.length; i < j; i++) {
        var info2 = arr[i];
        if (info2.key === key && info2.obj === obj) {
          return true;
        }
      }
      return false;
    }
    __name(wasObjectReferenced, "wasObjectReferenced");
    function isArray(value) {
      return Array.isArray(value);
    }
    __name(isArray, "isArray");
    function isFunction(value) {
      return typeof value === "function";
    }
    __name(isFunction, "isFunction");
    function isObject(value) {
      return !isPrimitive(value) && !isArray(value) && !isFunction(value) && typeof value === "object";
    }
    __name(isObject, "isObject");
    function isPrimitive(value) {
      return typeof value === "string" || typeof value === "number" || typeof value === "boolean" || typeof value === "undefined" || value instanceof Date || value instanceof RegExp || value === null;
    }
    __name(isPrimitive, "isPrimitive");
    function shouldMerge(one, two) {
      if (!isPlainObject(one) || !isPlainObject(two)) {
        return false;
      }
      return true;
    }
    __name(shouldMerge, "shouldMerge");
    var Deferred = function() {
      function Deferred2() {
        var _this = this;
        this._promise = new Promise(function(resolve, reject) {
          _this._resolve = resolve;
          _this._reject = reject;
        });
      }
      __name(Deferred2, "Deferred");
      Object.defineProperty(Deferred2.prototype, "promise", {
        get: function() {
          return this._promise;
        },
        enumerable: false,
        configurable: true
      });
      Deferred2.prototype.resolve = function(val) {
        this._resolve(val);
      };
      Deferred2.prototype.reject = function(err) {
        this._reject(err);
      };
      return Deferred2;
    }();
    var __read3 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error2) {
        e = { error: error2 };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray3 = function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    var BindOnceFuture = function() {
      function BindOnceFuture2(_callback, _that) {
        this._callback = _callback;
        this._that = _that;
        this._isCalled = false;
        this._deferred = new Deferred();
      }
      __name(BindOnceFuture2, "BindOnceFuture");
      Object.defineProperty(BindOnceFuture2.prototype, "isCalled", {
        get: function() {
          return this._isCalled;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(BindOnceFuture2.prototype, "promise", {
        get: function() {
          return this._deferred.promise;
        },
        enumerable: false,
        configurable: true
      });
      BindOnceFuture2.prototype.call = function() {
        var _a22;
        var _this = this;
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        if (!this._isCalled) {
          this._isCalled = true;
          try {
            Promise.resolve((_a22 = this._callback).call.apply(_a22, __spreadArray3([this._that], __read3(args), false))).then(function(val) {
              return _this._deferred.resolve(val);
            }, function(err) {
              return _this._deferred.reject(err);
            });
          } catch (err) {
            this._deferred.reject(err);
          }
        }
        return this._deferred.promise;
      };
      return BindOnceFuture2;
    }();
    var ExceptionEventName = "exception";
    var __values3 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read4 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error2) {
        e = { error: error2 };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var Span = function() {
      function Span2(parentTracer, context3, spanName, spanContext, kind, parentSpanId, links, startTime) {
        if (links === void 0) {
          links = [];
        }
        if (startTime === void 0) {
          startTime = hrTime();
        }
        this.attributes = {};
        this.links = [];
        this.events = [];
        this.status = {
          code: SpanStatusCode.UNSET
        };
        this.endTime = [0, 0];
        this._ended = false;
        this._duration = [-1, -1];
        this.name = spanName;
        this._spanContext = spanContext;
        this.parentSpanId = parentSpanId;
        this.kind = kind;
        this.links = links;
        this.startTime = timeInputToHrTime(startTime);
        this.resource = parentTracer.resource;
        this.instrumentationLibrary = parentTracer.instrumentationLibrary;
        this._spanLimits = parentTracer.getSpanLimits();
        this._spanProcessor = parentTracer.getActiveSpanProcessor();
        this._spanProcessor.onStart(this, context3);
        this._attributeValueLengthLimit = this._spanLimits.attributeValueLengthLimit || 0;
      }
      __name(Span2, "Span");
      Span2.prototype.spanContext = function() {
        return this._spanContext;
      };
      Span2.prototype.setAttribute = function(key, value) {
        if (value == null || this._isSpanEnded())
          return this;
        if (key.length === 0) {
          diag2.warn("Invalid attribute key: " + key);
          return this;
        }
        if (!isAttributeValue(value)) {
          diag2.warn("Invalid attribute value set for key: " + key);
          return this;
        }
        if (Object.keys(this.attributes).length >= this._spanLimits.attributeCountLimit && !Object.prototype.hasOwnProperty.call(this.attributes, key)) {
          return this;
        }
        this.attributes[key] = this._truncateToSize(value);
        return this;
      };
      Span2.prototype.setAttributes = function(attributes) {
        var e_1, _a22;
        try {
          for (var _b2 = __values3(Object.entries(attributes)), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var _d2 = __read4(_c2.value, 2), k = _d2[0], v = _d2[1];
            this.setAttribute(k, v);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a22 = _b2.return))
              _a22.call(_b2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return this;
      };
      Span2.prototype.addEvent = function(name, attributesOrStartTime, startTime) {
        if (this._isSpanEnded())
          return this;
        if (this._spanLimits.eventCountLimit === 0) {
          diag2.warn("No events allowed.");
          return this;
        }
        if (this.events.length >= this._spanLimits.eventCountLimit) {
          diag2.warn("Dropping extra events.");
          this.events.shift();
        }
        if (isTimeInput(attributesOrStartTime)) {
          if (typeof startTime === "undefined") {
            startTime = attributesOrStartTime;
          }
          attributesOrStartTime = void 0;
        }
        if (typeof startTime === "undefined") {
          startTime = hrTime();
        }
        var attributes = sanitizeAttributes(attributesOrStartTime);
        this.events.push({
          name,
          attributes,
          time: timeInputToHrTime(startTime)
        });
        return this;
      };
      Span2.prototype.setStatus = function(status) {
        if (this._isSpanEnded())
          return this;
        this.status = status;
        return this;
      };
      Span2.prototype.updateName = function(name) {
        if (this._isSpanEnded())
          return this;
        this.name = name;
        return this;
      };
      Span2.prototype.end = function(endTime) {
        if (endTime === void 0) {
          endTime = hrTime();
        }
        if (this._isSpanEnded()) {
          diag2.error("You can only call end() on a span once.");
          return;
        }
        this._ended = true;
        this.endTime = timeInputToHrTime(endTime);
        this._duration = hrTimeDuration(this.startTime, this.endTime);
        if (this._duration[0] < 0) {
          diag2.warn("Inconsistent start and end time, startTime > endTime", this.startTime, this.endTime);
        }
        this._spanProcessor.onEnd(this);
      };
      Span2.prototype.isRecording = function() {
        return this._ended === false;
      };
      Span2.prototype.recordException = function(exception, time) {
        if (time === void 0) {
          time = hrTime();
        }
        var attributes = {};
        if (typeof exception === "string") {
          attributes[SemanticAttributes.EXCEPTION_MESSAGE] = exception;
        } else if (exception) {
          if (exception.code) {
            attributes[SemanticAttributes.EXCEPTION_TYPE] = exception.code.toString();
          } else if (exception.name) {
            attributes[SemanticAttributes.EXCEPTION_TYPE] = exception.name;
          }
          if (exception.message) {
            attributes[SemanticAttributes.EXCEPTION_MESSAGE] = exception.message;
          }
          if (exception.stack) {
            attributes[SemanticAttributes.EXCEPTION_STACKTRACE] = exception.stack;
          }
        }
        if (attributes[SemanticAttributes.EXCEPTION_TYPE] || attributes[SemanticAttributes.EXCEPTION_MESSAGE]) {
          this.addEvent(ExceptionEventName, attributes, time);
        } else {
          diag2.warn("Failed to record an exception " + exception);
        }
      };
      Object.defineProperty(Span2.prototype, "duration", {
        get: function() {
          return this._duration;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Span2.prototype, "ended", {
        get: function() {
          return this._ended;
        },
        enumerable: false,
        configurable: true
      });
      Span2.prototype._isSpanEnded = function() {
        if (this._ended) {
          diag2.warn("Can not execute the operation on ended Span {traceId: " + this._spanContext.traceId + ", spanId: " + this._spanContext.spanId + "}");
        }
        return this._ended;
      };
      Span2.prototype._truncateToLimitUtil = function(value, limit) {
        if (value.length <= limit) {
          return value;
        }
        return value.substr(0, limit);
      };
      Span2.prototype._truncateToSize = function(value) {
        var _this = this;
        var limit = this._attributeValueLengthLimit;
        if (limit <= 0) {
          diag2.warn("Attribute value limit must be positive, got " + limit);
          return value;
        }
        if (typeof value === "string") {
          return this._truncateToLimitUtil(value, limit);
        }
        if (Array.isArray(value)) {
          return value.map(function(val) {
            return typeof val === "string" ? _this._truncateToLimitUtil(val, limit) : val;
          });
        }
        return value;
      };
      return Span2;
    }();
    var env = getEnv();
    var FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;
    var DEFAULT_RATIO = 1;
    var DEFAULT_CONFIG = {
      sampler: buildSamplerFromEnv(env),
      forceFlushTimeoutMillis: 3e4,
      generalLimits: {
        attributeValueLengthLimit: getEnv().OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,
        attributeCountLimit: getEnv().OTEL_ATTRIBUTE_COUNT_LIMIT
      },
      spanLimits: {
        attributeValueLengthLimit: getEnv().OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,
        attributeCountLimit: getEnv().OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,
        linkCountLimit: getEnv().OTEL_SPAN_LINK_COUNT_LIMIT,
        eventCountLimit: getEnv().OTEL_SPAN_EVENT_COUNT_LIMIT
      }
    };
    function buildSamplerFromEnv(environment) {
      if (environment === void 0) {
        environment = getEnv();
      }
      switch (environment.OTEL_TRACES_SAMPLER) {
        case TracesSamplerValues.AlwaysOn:
          return new AlwaysOnSampler();
        case TracesSamplerValues.AlwaysOff:
          return new AlwaysOffSampler();
        case TracesSamplerValues.ParentBasedAlwaysOn:
          return new ParentBasedSampler({
            root: new AlwaysOnSampler()
          });
        case TracesSamplerValues.ParentBasedAlwaysOff:
          return new ParentBasedSampler({
            root: new AlwaysOffSampler()
          });
        case TracesSamplerValues.TraceIdRatio:
          return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));
        case TracesSamplerValues.ParentBasedTraceIdRatio:
          return new ParentBasedSampler({
            root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment))
          });
        default:
          diag2.error('OTEL_TRACES_SAMPLER value "' + environment.OTEL_TRACES_SAMPLER + " invalid, defaulting to " + FALLBACK_OTEL_TRACES_SAMPLER + '".');
          return new AlwaysOnSampler();
      }
    }
    __name(buildSamplerFromEnv, "buildSamplerFromEnv");
    function getSamplerProbabilityFromEnv(environment) {
      if (environment.OTEL_TRACES_SAMPLER_ARG === void 0 || environment.OTEL_TRACES_SAMPLER_ARG === "") {
        diag2.error("OTEL_TRACES_SAMPLER_ARG is blank, defaulting to " + DEFAULT_RATIO + ".");
        return DEFAULT_RATIO;
      }
      var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);
      if (isNaN(probability)) {
        diag2.error("OTEL_TRACES_SAMPLER_ARG=" + environment.OTEL_TRACES_SAMPLER_ARG + " was given, but it is invalid, defaulting to " + DEFAULT_RATIO + ".");
        return DEFAULT_RATIO;
      }
      if (probability < 0 || probability > 1) {
        diag2.error("OTEL_TRACES_SAMPLER_ARG=" + environment.OTEL_TRACES_SAMPLER_ARG + " was given, but it is out of range ([0..1]), defaulting to " + DEFAULT_RATIO + ".");
        return DEFAULT_RATIO;
      }
      return probability;
    }
    __name(getSamplerProbabilityFromEnv, "getSamplerProbabilityFromEnv");
    function mergeConfig(userConfig) {
      var perInstanceDefaults = {
        sampler: buildSamplerFromEnv()
      };
      var target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);
      target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});
      target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});
      return target;
    }
    __name(mergeConfig, "mergeConfig");
    function reconfigureLimits(userConfig) {
      var _a22, _b2;
      var spanLimits = Object.assign({}, userConfig.spanLimits);
      if (spanLimits.attributeCountLimit == null && ((_a22 = userConfig.generalLimits) === null || _a22 === void 0 ? void 0 : _a22.attributeCountLimit) != null) {
        spanLimits.attributeCountLimit = userConfig.generalLimits.attributeCountLimit;
      }
      if (spanLimits.attributeValueLengthLimit == null && ((_b2 = userConfig.generalLimits) === null || _b2 === void 0 ? void 0 : _b2.attributeValueLengthLimit) != null) {
        spanLimits.attributeValueLengthLimit = userConfig.generalLimits.attributeValueLengthLimit;
      }
      return Object.assign({}, userConfig, { spanLimits });
    }
    __name(reconfigureLimits, "reconfigureLimits");
    var Tracer = function() {
      function Tracer3(instrumentationLibrary, config2, _tracerProvider) {
        this._tracerProvider = _tracerProvider;
        var localConfig = mergeConfig(config2);
        this._sampler = localConfig.sampler;
        this._generalLimits = localConfig.generalLimits;
        this._spanLimits = localConfig.spanLimits;
        this._idGenerator = config2.idGenerator || new RandomIdGenerator();
        this.resource = _tracerProvider.resource;
        this.instrumentationLibrary = instrumentationLibrary;
      }
      __name(Tracer3, "Tracer");
      Tracer3.prototype.startSpan = function(name, options, context3) {
        var _a22, _b2;
        if (options === void 0) {
          options = {};
        }
        if (context3 === void 0) {
          context3 = context2.active();
        }
        if (isTracingSuppressed(context3)) {
          diag2.debug("Instrumentation suppressed, returning Noop Span");
          return trace.wrapSpanContext(INVALID_SPAN_CONTEXT);
        }
        if (options.root) {
          context3 = trace.deleteSpan(context3);
        }
        var parentSpanContext = trace.getSpanContext(context3);
        var spanId = this._idGenerator.generateSpanId();
        var traceId;
        var traceState;
        var parentSpanId;
        if (!parentSpanContext || !trace.isSpanContextValid(parentSpanContext)) {
          traceId = this._idGenerator.generateTraceId();
        } else {
          traceId = parentSpanContext.traceId;
          traceState = parentSpanContext.traceState;
          parentSpanId = parentSpanContext.spanId;
        }
        var spanKind = (_a22 = options.kind) !== null && _a22 !== void 0 ? _a22 : SpanKind.INTERNAL;
        var links = ((_b2 = options.links) !== null && _b2 !== void 0 ? _b2 : []).map(function(link) {
          return {
            context: link.context,
            attributes: sanitizeAttributes(link.attributes)
          };
        });
        var attributes = sanitizeAttributes(options.attributes);
        var samplingResult = this._sampler.shouldSample(context3, traceId, name, spanKind, attributes, links);
        var traceFlags = samplingResult.decision === SamplingDecision.RECORD_AND_SAMPLED ? TraceFlags.SAMPLED : TraceFlags.NONE;
        var spanContext = { traceId, spanId, traceFlags, traceState };
        if (samplingResult.decision === SamplingDecision.NOT_RECORD) {
          diag2.debug("Recording is off, propagating context in a non-recording span");
          return trace.wrapSpanContext(spanContext);
        }
        var span = new Span(this, context3, name, spanContext, spanKind, parentSpanId, links, options.startTime);
        var initAttributes = sanitizeAttributes(Object.assign(attributes, samplingResult.attributes));
        span.setAttributes(initAttributes);
        return span;
      };
      Tracer3.prototype.startActiveSpan = function(name, arg2, arg3, arg4) {
        var opts;
        var ctx;
        var fn;
        if (arguments.length < 2) {
          return;
        } else if (arguments.length === 2) {
          fn = arg2;
        } else if (arguments.length === 3) {
          opts = arg2;
          fn = arg3;
        } else {
          opts = arg2;
          ctx = arg3;
          fn = arg4;
        }
        var parentContext = ctx !== null && ctx !== void 0 ? ctx : context2.active();
        var span = this.startSpan(name, opts, parentContext);
        var contextWithSpanSet = trace.setSpan(parentContext, span);
        return context2.with(contextWithSpanSet, fn, void 0, span);
      };
      Tracer3.prototype.getGeneralLimits = function() {
        return this._generalLimits;
      };
      Tracer3.prototype.getSpanLimits = function() {
        return this._spanLimits;
      };
      Tracer3.prototype.getActiveSpanProcessor = function() {
        return this._tracerProvider.getActiveSpanProcessor();
      };
      return Tracer3;
    }();
    function defaultServiceName() {
      return "unknown_service:" + process.argv0;
    }
    __name(defaultServiceName, "defaultServiceName");
    var import_os2 = require("os");
    var __awaiter = function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve) {
          resolve(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      __name(verb, "verb");
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
      __name(step, "step");
    };
    var HostDetector = function() {
      function HostDetector2() {
      }
      __name(HostDetector2, "HostDetector");
      HostDetector2.prototype.detect = function(_config) {
        return __awaiter(this, void 0, void 0, function() {
          var attributes;
          var _a22;
          return __generator(this, function(_b2) {
            attributes = (_a22 = {}, _a22[SemanticResourceAttributes.HOST_NAME] = (0, import_os2.hostname)(), _a22[SemanticResourceAttributes.HOST_ARCH] = this._normalizeArch((0, import_os2.arch)()), _a22);
            return [2, new Resource(attributes)];
          });
        });
      };
      HostDetector2.prototype._normalizeArch = function(nodeArchString) {
        switch (nodeArchString) {
          case "arm":
            return "arm32";
          case "ppc":
            return "ppc32";
          case "x64":
            return "amd64";
          default:
            return nodeArchString;
        }
      };
      return HostDetector2;
    }();
    var hostDetector = new HostDetector();
    var import_os3 = require("os");
    var __awaiter2 = function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve) {
          resolve(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator2 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      __name(verb, "verb");
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
      __name(step, "step");
    };
    var OSDetector = function() {
      function OSDetector2() {
      }
      __name(OSDetector2, "OSDetector");
      OSDetector2.prototype.detect = function(_config) {
        return __awaiter2(this, void 0, void 0, function() {
          var attributes;
          var _a22;
          return __generator2(this, function(_b2) {
            attributes = (_a22 = {}, _a22[SemanticResourceAttributes.OS_TYPE] = this._normalizeType((0, import_os3.platform)()), _a22[SemanticResourceAttributes.OS_VERSION] = (0, import_os3.release)(), _a22);
            return [2, new Resource(attributes)];
          });
        });
      };
      OSDetector2.prototype._normalizeType = function(nodePlatform) {
        switch (nodePlatform) {
          case "sunos":
            return "solaris";
          case "win32":
            return "windows";
          default:
            return nodePlatform;
        }
      };
      return OSDetector2;
    }();
    var osDetector = new OSDetector();
    var Resource = function() {
      function Resource2(attributes) {
        this.attributes = attributes;
      }
      __name(Resource2, "Resource");
      Resource2.empty = function() {
        return Resource2.EMPTY;
      };
      Resource2.default = function() {
        var _a22;
        return new Resource2((_a22 = {}, _a22[SemanticResourceAttributes.SERVICE_NAME] = defaultServiceName(), _a22[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_LANGUAGE], _a22[SemanticResourceAttributes.TELEMETRY_SDK_NAME] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_NAME], _a22[SemanticResourceAttributes.TELEMETRY_SDK_VERSION] = SDK_INFO[SemanticResourceAttributes.TELEMETRY_SDK_VERSION], _a22));
      };
      Resource2.prototype.merge = function(other) {
        if (!other || !Object.keys(other.attributes).length)
          return this;
        var mergedAttributes = Object.assign({}, this.attributes, other.attributes);
        return new Resource2(mergedAttributes);
      };
      Resource2.EMPTY = new Resource2({});
      return Resource2;
    }();
    var __assign = function() {
      __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    var __awaiter3 = function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve) {
          resolve(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator3 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      __name(verb, "verb");
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
      __name(step, "step");
    };
    var BrowserDetector = function() {
      function BrowserDetector2() {
      }
      __name(BrowserDetector2, "BrowserDetector");
      BrowserDetector2.prototype.detect = function(config2) {
        return __awaiter3(this, void 0, void 0, function() {
          var isBrowser, browserResource;
          var _a22;
          return __generator3(this, function(_b2) {
            isBrowser = typeof navigator !== "undefined";
            if (!isBrowser) {
              return [2, Resource.empty()];
            }
            browserResource = (_a22 = {}, _a22[SemanticResourceAttributes.PROCESS_RUNTIME_NAME] = "browser", _a22[SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION] = "Web Browser", _a22[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] = navigator.userAgent, _a22);
            return [2, this._getResourceAttributes(browserResource, config2)];
          });
        });
      };
      BrowserDetector2.prototype._getResourceAttributes = function(browserResource, _config) {
        if (browserResource[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] === "") {
          diag2.debug("BrowserDetector failed: Unable to find required browser resources. ");
          return Resource.empty();
        } else {
          return new Resource(__assign({}, browserResource));
        }
      };
      return BrowserDetector2;
    }();
    var browserDetector = new BrowserDetector();
    var __awaiter4 = function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve) {
          resolve(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator4 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      __name(verb, "verb");
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
      __name(step, "step");
    };
    var __values4 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var __read5 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error2) {
        e = { error: error2 };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var EnvDetector = function() {
      function EnvDetector2() {
        this._MAX_LENGTH = 255;
        this._COMMA_SEPARATOR = ",";
        this._LABEL_KEY_VALUE_SPLITTER = "=";
        this._ERROR_MESSAGE_INVALID_CHARS = "should be a ASCII string with a length greater than 0 and not exceed " + this._MAX_LENGTH + " characters.";
        this._ERROR_MESSAGE_INVALID_VALUE = "should be a ASCII string with a length not exceed " + this._MAX_LENGTH + " characters.";
      }
      __name(EnvDetector2, "EnvDetector");
      EnvDetector2.prototype.detect = function(_config) {
        return __awaiter4(this, void 0, void 0, function() {
          var attributes, env2, rawAttributes, serviceName, parsedAttributes;
          return __generator4(this, function(_a22) {
            attributes = {};
            env2 = getEnv();
            rawAttributes = env2.OTEL_RESOURCE_ATTRIBUTES;
            serviceName = env2.OTEL_SERVICE_NAME;
            if (rawAttributes) {
              try {
                parsedAttributes = this._parseResourceAttributes(rawAttributes);
                Object.assign(attributes, parsedAttributes);
              } catch (e) {
                diag2.debug("EnvDetector failed: " + e.message);
              }
            }
            if (serviceName) {
              attributes[SemanticResourceAttributes.SERVICE_NAME] = serviceName;
            }
            return [2, new Resource(attributes)];
          });
        });
      };
      EnvDetector2.prototype._parseResourceAttributes = function(rawEnvAttributes) {
        var e_1, _a22;
        if (!rawEnvAttributes)
          return {};
        var attributes = {};
        var rawAttributes = rawEnvAttributes.split(this._COMMA_SEPARATOR, -1);
        try {
          for (var rawAttributes_1 = __values4(rawAttributes), rawAttributes_1_1 = rawAttributes_1.next(); !rawAttributes_1_1.done; rawAttributes_1_1 = rawAttributes_1.next()) {
            var rawAttribute = rawAttributes_1_1.value;
            var keyValuePair = rawAttribute.split(this._LABEL_KEY_VALUE_SPLITTER, -1);
            if (keyValuePair.length !== 2) {
              continue;
            }
            var _b2 = __read5(keyValuePair, 2), key = _b2[0], value = _b2[1];
            key = key.trim();
            value = value.trim().split('^"|"$').join("");
            if (!this._isValidAndNotEmpty(key)) {
              throw new Error("Attribute key " + this._ERROR_MESSAGE_INVALID_CHARS);
            }
            if (!this._isValid(value)) {
              throw new Error("Attribute value " + this._ERROR_MESSAGE_INVALID_VALUE);
            }
            attributes[key] = value;
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (rawAttributes_1_1 && !rawAttributes_1_1.done && (_a22 = rawAttributes_1.return))
              _a22.call(rawAttributes_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return attributes;
      };
      EnvDetector2.prototype._isValid = function(name) {
        return name.length <= this._MAX_LENGTH && this._isPrintableString(name);
      };
      EnvDetector2.prototype._isPrintableString = function(str) {
        for (var i = 0; i < str.length; i++) {
          var ch = str.charAt(i);
          if (ch <= " " || ch >= "~") {
            return false;
          }
        }
        return true;
      };
      EnvDetector2.prototype._isValidAndNotEmpty = function(str) {
        return str.length > 0 && this._isValid(str);
      };
      return EnvDetector2;
    }();
    var envDetector = new EnvDetector();
    var __assign2 = function() {
      __assign2 = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
    var __awaiter5 = function(thisArg, _arguments, P3, generator) {
      function adopt(value) {
        return value instanceof P3 ? value : new P3(function(resolve) {
          resolve(value);
        });
      }
      __name(adopt, "adopt");
      return new (P3 || (P3 = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator5 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      __name(verb, "verb");
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
      __name(step, "step");
    };
    var ProcessDetector = function() {
      function ProcessDetector2() {
      }
      __name(ProcessDetector2, "ProcessDetector");
      ProcessDetector2.prototype.detect = function(config2) {
        return __awaiter5(this, void 0, void 0, function() {
          var processResource;
          var _a22;
          return __generator5(this, function(_b2) {
            if (typeof process !== "object") {
              return [2, Resource.empty()];
            }
            processResource = (_a22 = {}, _a22[SemanticResourceAttributes.PROCESS_PID] = process.pid, _a22[SemanticResourceAttributes.PROCESS_EXECUTABLE_NAME] = process.title || "", _a22[SemanticResourceAttributes.PROCESS_COMMAND] = process.argv[1] || "", _a22[SemanticResourceAttributes.PROCESS_COMMAND_LINE] = process.argv.join(" ") || "", _a22[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] = process.versions.node, _a22[SemanticResourceAttributes.PROCESS_RUNTIME_NAME] = "nodejs", _a22[SemanticResourceAttributes.PROCESS_RUNTIME_DESCRIPTION] = "Node.js", _a22);
            return [2, this._getResourceAttributes(processResource, config2)];
          });
        });
      };
      ProcessDetector2.prototype._getResourceAttributes = function(processResource, _config) {
        if (processResource[SemanticResourceAttributes.PROCESS_EXECUTABLE_NAME] === "" || processResource[SemanticResourceAttributes.PROCESS_EXECUTABLE_PATH] === "" || processResource[SemanticResourceAttributes.PROCESS_COMMAND] === "" || processResource[SemanticResourceAttributes.PROCESS_COMMAND_LINE] === "" || processResource[SemanticResourceAttributes.PROCESS_RUNTIME_VERSION] === "") {
          diag2.debug("ProcessDetector failed: Unable to find required process resources. ");
          return Resource.empty();
        } else {
          return new Resource(__assign2({}, processResource));
        }
      };
      return ProcessDetector2;
    }();
    var processDetector = new ProcessDetector();
    var __values5 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var MultiSpanProcessor = function() {
      function MultiSpanProcessor2(_spanProcessors) {
        this._spanProcessors = _spanProcessors;
      }
      __name(MultiSpanProcessor2, "MultiSpanProcessor");
      MultiSpanProcessor2.prototype.forceFlush = function() {
        var e_1, _a22;
        var promises = [];
        try {
          for (var _b2 = __values5(this._spanProcessors), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var spanProcessor = _c2.value;
            promises.push(spanProcessor.forceFlush());
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a22 = _b2.return))
              _a22.call(_b2);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return new Promise(function(resolve) {
          Promise.all(promises).then(function() {
            resolve();
          }).catch(function(error2) {
            globalErrorHandler(error2 || new Error("MultiSpanProcessor: forceFlush failed"));
            resolve();
          });
        });
      };
      MultiSpanProcessor2.prototype.onStart = function(span, context3) {
        var e_2, _a22;
        try {
          for (var _b2 = __values5(this._spanProcessors), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var spanProcessor = _c2.value;
            spanProcessor.onStart(span, context3);
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a22 = _b2.return))
              _a22.call(_b2);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      };
      MultiSpanProcessor2.prototype.onEnd = function(span) {
        var e_3, _a22;
        try {
          for (var _b2 = __values5(this._spanProcessors), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var spanProcessor = _c2.value;
            spanProcessor.onEnd(span);
          }
        } catch (e_3_1) {
          e_3 = { error: e_3_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a22 = _b2.return))
              _a22.call(_b2);
          } finally {
            if (e_3)
              throw e_3.error;
          }
        }
      };
      MultiSpanProcessor2.prototype.shutdown = function() {
        var e_4, _a22;
        var promises = [];
        try {
          for (var _b2 = __values5(this._spanProcessors), _c2 = _b2.next(); !_c2.done; _c2 = _b2.next()) {
            var spanProcessor = _c2.value;
            promises.push(spanProcessor.shutdown());
          }
        } catch (e_4_1) {
          e_4 = { error: e_4_1 };
        } finally {
          try {
            if (_c2 && !_c2.done && (_a22 = _b2.return))
              _a22.call(_b2);
          } finally {
            if (e_4)
              throw e_4.error;
          }
        }
        return new Promise(function(resolve, reject) {
          Promise.all(promises).then(function() {
            resolve();
          }, reject);
        });
      };
      return MultiSpanProcessor2;
    }();
    var NoopSpanProcessor = function() {
      function NoopSpanProcessor2() {
      }
      __name(NoopSpanProcessor2, "NoopSpanProcessor");
      NoopSpanProcessor2.prototype.onStart = function(_span, _context) {
      };
      NoopSpanProcessor2.prototype.onEnd = function(_span) {
      };
      NoopSpanProcessor2.prototype.shutdown = function() {
        return Promise.resolve();
      };
      NoopSpanProcessor2.prototype.forceFlush = function() {
        return Promise.resolve();
      };
      return NoopSpanProcessor2;
    }();
    var BatchSpanProcessorBase = function() {
      function BatchSpanProcessorBase2(_exporter, config2) {
        this._exporter = _exporter;
        this._finishedSpans = [];
        var env2 = getEnv();
        this._maxExportBatchSize = typeof (config2 === null || config2 === void 0 ? void 0 : config2.maxExportBatchSize) === "number" ? config2.maxExportBatchSize : env2.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;
        this._maxQueueSize = typeof (config2 === null || config2 === void 0 ? void 0 : config2.maxQueueSize) === "number" ? config2.maxQueueSize : env2.OTEL_BSP_MAX_QUEUE_SIZE;
        this._scheduledDelayMillis = typeof (config2 === null || config2 === void 0 ? void 0 : config2.scheduledDelayMillis) === "number" ? config2.scheduledDelayMillis : env2.OTEL_BSP_SCHEDULE_DELAY;
        this._exportTimeoutMillis = typeof (config2 === null || config2 === void 0 ? void 0 : config2.exportTimeoutMillis) === "number" ? config2.exportTimeoutMillis : env2.OTEL_BSP_EXPORT_TIMEOUT;
        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);
      }
      __name(BatchSpanProcessorBase2, "BatchSpanProcessorBase");
      BatchSpanProcessorBase2.prototype.forceFlush = function() {
        if (this._shutdownOnce.isCalled) {
          return this._shutdownOnce.promise;
        }
        return this._flushAll();
      };
      BatchSpanProcessorBase2.prototype.onStart = function(_span, _parentContext) {
      };
      BatchSpanProcessorBase2.prototype.onEnd = function(span) {
        if (this._shutdownOnce.isCalled) {
          return;
        }
        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {
          return;
        }
        this._addToBuffer(span);
      };
      BatchSpanProcessorBase2.prototype.shutdown = function() {
        return this._shutdownOnce.call();
      };
      BatchSpanProcessorBase2.prototype._shutdown = function() {
        var _this = this;
        return Promise.resolve().then(function() {
          return _this.onShutdown();
        }).then(function() {
          return _this._flushAll();
        }).then(function() {
          return _this._exporter.shutdown();
        });
      };
      BatchSpanProcessorBase2.prototype._addToBuffer = function(span) {
        if (this._finishedSpans.length >= this._maxQueueSize) {
          return;
        }
        this._finishedSpans.push(span);
        this._maybeStartTimer();
      };
      BatchSpanProcessorBase2.prototype._flushAll = function() {
        var _this = this;
        return new Promise(function(resolve, reject) {
          var promises = [];
          var count2 = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);
          for (var i = 0, j = count2; i < j; i++) {
            promises.push(_this._flushOneBatch());
          }
          Promise.all(promises).then(function() {
            resolve();
          }).catch(reject);
        });
      };
      BatchSpanProcessorBase2.prototype._flushOneBatch = function() {
        var _this = this;
        this._clearTimer();
        if (this._finishedSpans.length === 0) {
          return Promise.resolve();
        }
        return new Promise(function(resolve, reject) {
          var timer = setTimeout(function() {
            reject(new Error("Timeout"));
          }, _this._exportTimeoutMillis);
          context2.with(suppressTracing(context2.active()), function() {
            _this._exporter.export(_this._finishedSpans.splice(0, _this._maxExportBatchSize), function(result) {
              var _a22;
              clearTimeout(timer);
              if (result.code === ExportResultCode.SUCCESS) {
                resolve();
              } else {
                reject((_a22 = result.error) !== null && _a22 !== void 0 ? _a22 : new Error("BatchSpanProcessor: span export failed"));
              }
            });
          });
        });
      };
      BatchSpanProcessorBase2.prototype._maybeStartTimer = function() {
        var _this = this;
        if (this._timer !== void 0)
          return;
        this._timer = setTimeout(function() {
          _this._flushOneBatch().then(function() {
            if (_this._finishedSpans.length > 0) {
              _this._clearTimer();
              _this._maybeStartTimer();
            }
          }).catch(function(e) {
            globalErrorHandler(e);
          });
        }, this._scheduledDelayMillis);
        unrefTimer(this._timer);
      };
      BatchSpanProcessorBase2.prototype._clearTimer = function() {
        if (this._timer !== void 0) {
          clearTimeout(this._timer);
          this._timer = void 0;
        }
      };
      return BatchSpanProcessorBase2;
    }();
    var __extends = function() {
      var extendStatics = /* @__PURE__ */ __name(function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      }, "extendStatics");
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        __name(__, "__");
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var BatchSpanProcessor = function(_super) {
      __extends(BatchSpanProcessor2, _super);
      function BatchSpanProcessor2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      __name(BatchSpanProcessor2, "BatchSpanProcessor");
      BatchSpanProcessor2.prototype.onShutdown = function() {
      };
      return BatchSpanProcessor2;
    }(BatchSpanProcessorBase);
    var ForceFlushState;
    (function(ForceFlushState2) {
      ForceFlushState2[ForceFlushState2["resolved"] = 0] = "resolved";
      ForceFlushState2[ForceFlushState2["timeout"] = 1] = "timeout";
      ForceFlushState2[ForceFlushState2["error"] = 2] = "error";
      ForceFlushState2[ForceFlushState2["unresolved"] = 3] = "unresolved";
    })(ForceFlushState || (ForceFlushState = {}));
    var BasicTracerProvider = function() {
      function BasicTracerProvider2(config2) {
        if (config2 === void 0) {
          config2 = {};
        }
        var _a22;
        this._registeredSpanProcessors = [];
        this._tracers = /* @__PURE__ */ new Map();
        var mergedConfig = merge({}, DEFAULT_CONFIG, reconfigureLimits(config2));
        this.resource = (_a22 = mergedConfig.resource) !== null && _a22 !== void 0 ? _a22 : Resource.empty();
        this.resource = Resource.default().merge(this.resource);
        this._config = Object.assign({}, mergedConfig, {
          resource: this.resource
        });
        var defaultExporter = this._buildExporterFromEnv();
        if (defaultExporter !== void 0) {
          var batchProcessor = new BatchSpanProcessor(defaultExporter);
          this.activeSpanProcessor = batchProcessor;
        } else {
          this.activeSpanProcessor = new NoopSpanProcessor();
        }
      }
      __name(BasicTracerProvider2, "BasicTracerProvider");
      BasicTracerProvider2.prototype.getTracer = function(name, version, options) {
        var key = name + "@" + (version || "") + ":" + ((options === null || options === void 0 ? void 0 : options.schemaUrl) || "");
        if (!this._tracers.has(key)) {
          this._tracers.set(key, new Tracer({ name, version, schemaUrl: options === null || options === void 0 ? void 0 : options.schemaUrl }, this._config, this));
        }
        return this._tracers.get(key);
      };
      BasicTracerProvider2.prototype.addSpanProcessor = function(spanProcessor) {
        if (this._registeredSpanProcessors.length === 0) {
          this.activeSpanProcessor.shutdown().catch(function(err) {
            return diag2.error("Error while trying to shutdown current span processor", err);
          });
        }
        this._registeredSpanProcessors.push(spanProcessor);
        this.activeSpanProcessor = new MultiSpanProcessor(this._registeredSpanProcessors);
      };
      BasicTracerProvider2.prototype.getActiveSpanProcessor = function() {
        return this.activeSpanProcessor;
      };
      BasicTracerProvider2.prototype.register = function(config2) {
        if (config2 === void 0) {
          config2 = {};
        }
        trace.setGlobalTracerProvider(this);
        if (config2.propagator === void 0) {
          config2.propagator = this._buildPropagatorFromEnv();
        }
        if (config2.contextManager) {
          context2.setGlobalContextManager(config2.contextManager);
        }
        if (config2.propagator) {
          propagation.setGlobalPropagator(config2.propagator);
        }
      };
      BasicTracerProvider2.prototype.forceFlush = function() {
        var timeout = this._config.forceFlushTimeoutMillis;
        var promises = this._registeredSpanProcessors.map(function(spanProcessor) {
          return new Promise(function(resolve) {
            var state;
            var timeoutInterval = setTimeout(function() {
              resolve(new Error("Span processor did not completed within timeout period of " + timeout + " ms"));
              state = ForceFlushState.timeout;
            }, timeout);
            spanProcessor.forceFlush().then(function() {
              clearTimeout(timeoutInterval);
              if (state !== ForceFlushState.timeout) {
                state = ForceFlushState.resolved;
                resolve(state);
              }
            }).catch(function(error2) {
              clearTimeout(timeoutInterval);
              state = ForceFlushState.error;
              resolve(error2);
            });
          });
        });
        return new Promise(function(resolve, reject) {
          Promise.all(promises).then(function(results) {
            var errors = results.filter(function(result) {
              return result !== ForceFlushState.resolved;
            });
            if (errors.length > 0) {
              reject(errors);
            } else {
              resolve();
            }
          }).catch(function(error2) {
            return reject([error2]);
          });
        });
      };
      BasicTracerProvider2.prototype.shutdown = function() {
        return this.activeSpanProcessor.shutdown();
      };
      BasicTracerProvider2.prototype._getPropagator = function(name) {
        var _a22;
        return (_a22 = BasicTracerProvider2._registeredPropagators.get(name)) === null || _a22 === void 0 ? void 0 : _a22();
      };
      BasicTracerProvider2.prototype._getSpanExporter = function(name) {
        var _a22;
        return (_a22 = BasicTracerProvider2._registeredExporters.get(name)) === null || _a22 === void 0 ? void 0 : _a22();
      };
      BasicTracerProvider2.prototype._buildPropagatorFromEnv = function() {
        var _this = this;
        var uniquePropagatorNames = Array.from(new Set(getEnv().OTEL_PROPAGATORS));
        var propagators = uniquePropagatorNames.map(function(name) {
          var propagator = _this._getPropagator(name);
          if (!propagator) {
            diag2.warn('Propagator "' + name + '" requested through environment variable is unavailable.');
          }
          return propagator;
        });
        var validPropagators = propagators.reduce(function(list, item) {
          if (item) {
            list.push(item);
          }
          return list;
        }, []);
        if (validPropagators.length === 0) {
          return;
        } else if (uniquePropagatorNames.length === 1) {
          return validPropagators[0];
        } else {
          return new CompositePropagator({
            propagators: validPropagators
          });
        }
      };
      BasicTracerProvider2.prototype._buildExporterFromEnv = function() {
        var exporterName = getEnv().OTEL_TRACES_EXPORTER;
        if (exporterName === "none")
          return;
        var exporter = this._getSpanExporter(exporterName);
        if (!exporter) {
          diag2.error('Exporter "' + exporterName + '" requested through environment variable is unavailable.');
        }
        return exporter;
      };
      BasicTracerProvider2._registeredPropagators = /* @__PURE__ */ new Map([
        ["tracecontext", function() {
          return new W3CTraceContextPropagator();
        }],
        ["baggage", function() {
          return new W3CBaggagePropagator();
        }]
      ]);
      BasicTracerProvider2._registeredExporters = /* @__PURE__ */ new Map();
      return BasicTracerProvider2;
    }();
    var __values6 = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    var ConsoleSpanExporter = function() {
      function ConsoleSpanExporter2() {
      }
      __name(ConsoleSpanExporter2, "ConsoleSpanExporter");
      ConsoleSpanExporter2.prototype.export = function(spans, resultCallback) {
        return this._sendSpans(spans, resultCallback);
      };
      ConsoleSpanExporter2.prototype.shutdown = function() {
        this._sendSpans([]);
        return Promise.resolve();
      };
      ConsoleSpanExporter2.prototype._exportInfo = function(span) {
        return {
          traceId: span.spanContext().traceId,
          parentId: span.parentSpanId,
          name: span.name,
          id: span.spanContext().spanId,
          kind: span.kind,
          timestamp: hrTimeToMicroseconds(span.startTime),
          duration: hrTimeToMicroseconds(span.duration),
          attributes: span.attributes,
          status: span.status,
          events: span.events,
          links: span.links
        };
      };
      ConsoleSpanExporter2.prototype._sendSpans = function(spans, done) {
        var e_1, _a22;
        try {
          for (var spans_1 = __values6(spans), spans_1_1 = spans_1.next(); !spans_1_1.done; spans_1_1 = spans_1.next()) {
            var span = spans_1_1.value;
            console.dir(this._exportInfo(span), { depth: 3 });
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (spans_1_1 && !spans_1_1.done && (_a22 = spans_1.return))
              _a22.call(spans_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        if (done) {
          return done({ code: ExportResultCode.SUCCESS });
        }
      };
      return ConsoleSpanExporter2;
    }();
    var __read6 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error2) {
        e = { error: error2 };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    var __spreadArray4 = function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    var InMemorySpanExporter = function() {
      function InMemorySpanExporter2() {
        this._finishedSpans = [];
        this._stopped = false;
      }
      __name(InMemorySpanExporter2, "InMemorySpanExporter");
      InMemorySpanExporter2.prototype.export = function(spans, resultCallback) {
        var _a22;
        if (this._stopped)
          return resultCallback({
            code: ExportResultCode.FAILED,
            error: new Error("Exporter has been stopped")
          });
        (_a22 = this._finishedSpans).push.apply(_a22, __spreadArray4([], __read6(spans), false));
        setTimeout(function() {
          return resultCallback({ code: ExportResultCode.SUCCESS });
        }, 0);
      };
      InMemorySpanExporter2.prototype.shutdown = function() {
        this._stopped = true;
        this._finishedSpans = [];
        return Promise.resolve();
      };
      InMemorySpanExporter2.prototype.reset = function() {
        this._finishedSpans = [];
      };
      InMemorySpanExporter2.prototype.getFinishedSpans = function() {
        return this._finishedSpans;
      };
      return InMemorySpanExporter2;
    }();
    var SimpleSpanProcessor = function() {
      function SimpleSpanProcessor2(_exporter) {
        this._exporter = _exporter;
        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);
      }
      __name(SimpleSpanProcessor2, "SimpleSpanProcessor");
      SimpleSpanProcessor2.prototype.forceFlush = function() {
        return Promise.resolve();
      };
      SimpleSpanProcessor2.prototype.onStart = function(_span, _parentContext) {
      };
      SimpleSpanProcessor2.prototype.onEnd = function(span) {
        var _this = this;
        if (this._shutdownOnce.isCalled) {
          return;
        }
        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {
          return;
        }
        context2.with(suppressTracing(context2.active()), function() {
          _this._exporter.export([span], function(result) {
            var _a22;
            if (result.code !== ExportResultCode.SUCCESS) {
              globalErrorHandler((_a22 = result.error) !== null && _a22 !== void 0 ? _a22 : new Error("SimpleSpanProcessor: span export failed (status " + result + ")"));
            }
          });
        });
      };
      SimpleSpanProcessor2.prototype.shutdown = function() {
        return this._shutdownOnce.call();
      };
      SimpleSpanProcessor2.prototype._shutdown = function() {
        return this._exporter.shutdown();
      };
      return SimpleSpanProcessor2;
    }();
    function createSpan(engineSpanEvent) {
      engineSpanEvent.spans.forEach((engineSpan) => {
        const startTime = numberToHrtime2(parseInt(engineSpan.start_time, 10));
        const endTime = numberToHrtime2(parseInt(engineSpan.end_time, 10));
        const spanContext = {
          traceId: engineSpan.trace_id,
          spanId: engineSpan.span_id,
          traceFlags: TraceFlags.SAMPLED
        };
        const links = [];
        const tracer = trace.getTracer("prisma");
        const span = new Span(tracer, context2.active(), engineSpan.name, spanContext, SpanKind.INTERNAL, engineSpan.parent_span_id, links, startTime);
        if (engineSpan.attributes) {
          span.setAttributes(engineSpan.attributes);
        }
        span.end(endTime);
      });
    }
    __name(createSpan, "createSpan");
    var NANOSECOND_DIGITS2 = 9;
    var SECOND_TO_NANOSECONDS2 = Math.pow(10, NANOSECOND_DIGITS2);
    function numberToHrtime2(epochMillis) {
      const epochSeconds = epochMillis / 1e3;
      const seconds = Math.trunc(epochSeconds);
      const nanos = Number((epochSeconds - seconds).toFixed(NANOSECOND_DIGITS2)) * SECOND_TO_NANOSECONDS2;
      return [seconds, nanos];
    }
    __name(numberToHrtime2, "numberToHrtime");
    function getTracingConfig(engine) {
      const hasPreview = engine._hasPreviewFlag("tracing");
      const globalVar = global.PRISMA_INSTRUMENTATION;
      const result = {
        enabled: false
      };
      if (hasPreview && globalVar) {
        result.enabled = true;
        result.middleware = globalVar.middleware;
      }
      return result;
    }
    __name(getTracingConfig, "getTracingConfig");
    var import_indent_string2 = __toESM(require_indent_string());
    function printGeneratorConfig(config2) {
      return String(new GeneratorConfigClass(config2));
    }
    __name(printGeneratorConfig, "printGeneratorConfig");
    var GeneratorConfigClass = class {
      constructor(config2) {
        this.config = config2;
      }
      toString() {
        const { config: config2 } = this;
        const provider = config2.provider.fromEnvVar ? `env("${config2.provider.fromEnvVar}")` : config2.provider.value;
        const obj = JSON.parse(JSON.stringify({
          provider,
          binaryTargets: getOriginalBinaryTargetsValue(config2.binaryTargets)
        }));
        return `generator ${config2.name} {
${(0, import_indent_string2.default)(printDatamodelObject(obj), 2)}
}`;
      }
    };
    __name(GeneratorConfigClass, "GeneratorConfigClass");
    function getOriginalBinaryTargetsValue(binaryTargets) {
      let value;
      if (binaryTargets.length > 0) {
        const binaryTargetsFromEnvVar = binaryTargets.find((object) => object.fromEnvVar !== null);
        if (binaryTargetsFromEnvVar) {
          value = `env("${binaryTargetsFromEnvVar.fromEnvVar}")`;
        } else {
          value = binaryTargets.map((object) => object.value);
        }
      } else {
        value = void 0;
      }
      return value;
    }
    __name(getOriginalBinaryTargetsValue, "getOriginalBinaryTargetsValue");
    function printDatamodelObject(obj) {
      const maxLength = Object.keys(obj).reduce((max2, curr) => Math.max(max2, curr.length), 0);
      return Object.entries(obj).map(([key, value]) => `${key.padEnd(maxLength)} = ${niceStringify(value)}`).join("\n");
    }
    __name(printDatamodelObject, "printDatamodelObject");
    function niceStringify(value) {
      return JSON.parse(JSON.stringify(value, (_, value2) => {
        if (Array.isArray(value2)) {
          return `[${value2.map((element) => JSON.stringify(element)).join(", ")}]`;
        }
        return JSON.stringify(value2);
      }));
    }
    __name(niceStringify, "niceStringify");
    var import_stream = __toESM(require("stream"));
    var import_util3 = __toESM(require("util"));
    function byline(readStream, options) {
      return createStream(readStream, options);
    }
    __name(byline, "byline");
    function createStream(readStream, options) {
      if (readStream) {
        return createLineStream(readStream, options);
      } else {
        return new LineStream(options);
      }
    }
    __name(createStream, "createStream");
    function createLineStream(readStream, options) {
      if (!readStream) {
        throw new Error("expected readStream");
      }
      if (!readStream.readable) {
        throw new Error("readStream must be readable");
      }
      const ls = new LineStream(options);
      readStream.pipe(ls);
      return ls;
    }
    __name(createLineStream, "createLineStream");
    function LineStream(options) {
      import_stream.default.Transform.call(this, options);
      options = options || {};
      this._readableState.objectMode = true;
      this._lineBuffer = [];
      this._keepEmptyLines = options.keepEmptyLines || false;
      this._lastChunkEndedWithCR = false;
      this.on("pipe", function(src) {
        if (!this.encoding) {
          if (src instanceof import_stream.default.Readable) {
            this.encoding = src._readableState.encoding;
          }
        }
      });
    }
    __name(LineStream, "LineStream");
    import_util3.default.inherits(LineStream, import_stream.default.Transform);
    LineStream.prototype._transform = function(chunk, encoding, done) {
      encoding = encoding || "utf8";
      if (Buffer.isBuffer(chunk)) {
        if (encoding == "buffer") {
          chunk = chunk.toString();
          encoding = "utf8";
        } else {
          chunk = chunk.toString(encoding);
        }
      }
      this._chunkEncoding = encoding;
      const lines = chunk.split(/\r\n|\r|\n/g);
      if (this._lastChunkEndedWithCR && chunk[0] == "\n") {
        lines.shift();
      }
      if (this._lineBuffer.length > 0) {
        this._lineBuffer[this._lineBuffer.length - 1] += lines[0];
        lines.shift();
      }
      this._lastChunkEndedWithCR = chunk[chunk.length - 1] == "\r";
      this._lineBuffer = this._lineBuffer.concat(lines);
      this._pushBuffer(encoding, 1, done);
    };
    LineStream.prototype._pushBuffer = function(encoding, keep, done) {
      while (this._lineBuffer.length > keep) {
        const line = this._lineBuffer.shift();
        if (this._keepEmptyLines || line.length > 0) {
          if (!this.push(this._reencode(line, encoding))) {
            const self2 = this;
            setImmediate(function() {
              self2._pushBuffer(encoding, keep, done);
            });
            return;
          }
        }
      }
      done();
    };
    LineStream.prototype._flush = function(done) {
      this._pushBuffer(this._chunkEncoding, 0, done);
    };
    LineStream.prototype._reencode = function(line, chunkEncoding) {
      if (this.encoding && this.encoding != chunkEncoding) {
        return Buffer.from(line, chunkEncoding).toString(this.encoding);
      } else if (this.encoding) {
        return line;
      } else {
        return Buffer.from(line, chunkEncoding);
      }
    };
    function omit(obj, keys2) {
      return Object.keys(obj).filter((key) => !keys2.includes(key)).reduce((result, key) => {
        result[key] = obj[key];
        return result;
      }, {});
    }
    __name(omit, "omit");
    var import_get_stream = __toESM(require_get_stream());
    var undici = /* @__PURE__ */ __name(() => require_undici(), "undici");
    function assertHasPool(pool) {
      if (pool === void 0) {
        throw new Error("Connection has not been opened");
      }
    }
    __name(assertHasPool, "assertHasPool");
    var Connection = class {
      constructor() {
      }
      static async onHttpError(response, handler) {
        const _response = await response;
        if (_response.statusCode >= 400) {
          return handler(_response);
        }
        return _response;
      }
      open(url, options) {
        if (this._pool)
          return;
        this._pool = new (undici()).Pool(url, {
          connections: 1e3,
          keepAliveMaxTimeout: 6e5,
          headersTimeout: 0,
          bodyTimeout: 0,
          ...options
        });
      }
      async raw(method, endpoint, headers, body, parseResponse = true) {
        assertHasPool(this._pool);
        const response = await this._pool.request({
          path: endpoint,
          method,
          headers: {
            "Content-Type": "application/json",
            ...headers
          },
          body
        });
        const bodyString = await (0, import_get_stream.default)(response.body);
        return {
          statusCode: response.statusCode,
          headers: response.headers,
          data: parseResponse ? JSON.parse(bodyString) : bodyString
        };
      }
      post(endpoint, body, headers, parseResponse) {
        return this.raw("POST", endpoint, headers, body, parseResponse);
      }
      get(path7, headers) {
        return this.raw("GET", path7, headers);
      }
      close() {
        if (this._pool) {
          this._pool.close(() => {
          });
        }
        this._pool = void 0;
      }
    };
    __name(Connection, "Connection");
    var debug4 = src_default("prisma:engine");
    var exists2 = (0, import_util4.promisify)(import_fs4.default.exists);
    var logger = /* @__PURE__ */ __name((...args) => {
    }, "logger");
    var knownPlatforms = [...platforms, "native"];
    var engines = [];
    var socketPaths = [];
    var MAX_STARTS = process.env.PRISMA_CLIENT_NO_RETRY ? 1 : 2;
    var MAX_REQUEST_RETRIES = process.env.PRISMA_CLIENT_NO_RETRY ? 1 : 2;
    var BinaryEngine = class extends Engine {
      constructor({
        cwd,
        datamodelPath,
        prismaPath,
        generator,
        datasources,
        showColors,
        logLevel,
        logQueries,
        env: env2,
        flags,
        clientVersion: clientVersion2,
        previewFeatures,
        engineEndpoint,
        enableDebugLogs,
        allowTriggerPanic,
        dirname: dirname2,
        activeProvider
      }) {
        var _a22;
        super();
        this.startCount = 0;
        this.previewFeatures = [];
        this.stderrLogs = "";
        this.handleRequestError = /* @__PURE__ */ __name(async (error2, graceful = false) => {
          var _a23, _b2;
          debug4({ error: error2 });
          if (this.startPromise) {
            await this.startPromise;
          }
          this.throwAsyncErrorIfExists();
          if ((_a23 = this.currentRequestPromise) == null ? void 0 : _a23.isCanceled) {
            this.throwAsyncErrorIfExists();
          } else if (error2.code === "ECONNRESET" || error2.code === "ECONNREFUSED" || error2.code === "UND_ERR_CLOSED" || error2.code === "UND_ERR_SOCKET" || error2.code === "UND_ERR_DESTROYED" || error2.code === "UND_ERR_ABORTED" || error2.message.toLowerCase().includes("client is destroyed") || error2.message.toLowerCase().includes("other side closed") || error2.message.toLowerCase().includes("the client is closed")) {
            if (this.globalKillSignalReceived && !((_b2 = this.child) == null ? void 0 : _b2.connected)) {
              throw new PrismaClientUnknownRequestError(`The Node.js process already received a ${this.globalKillSignalReceived} signal, therefore the Prisma query engine exited
and your request can't be processed.
You probably have some open handle that prevents your process from exiting.
It could be an open http server or stream that didn't close yet.
We recommend using the \`wtfnode\` package to debug open handles.`, this.clientVersion);
            }
            this.throwAsyncErrorIfExists();
            if (this.startCount > MAX_STARTS) {
              for (let i = 0; i < 5; i++) {
                await new Promise((r) => setTimeout(r, 50));
                this.throwAsyncErrorIfExists(true);
              }
              throw new Error(`Query engine is trying to restart, but can't.
Please look into the logs or turn on the env var DEBUG=* to debug the constantly restarting query engine.`);
            }
          }
          if (!graceful) {
            this.throwAsyncErrorIfExists(true);
            throw error2;
          }
          return false;
        }, "handleRequestError");
        this.dirname = dirname2;
        this.env = env2;
        this.cwd = this.resolveCwd(cwd);
        this.enableDebugLogs = enableDebugLogs != null ? enableDebugLogs : false;
        this.allowTriggerPanic = allowTriggerPanic != null ? allowTriggerPanic : false;
        this.datamodelPath = datamodelPath;
        this.prismaPath = (_a22 = process.env.PRISMA_QUERY_ENGINE_BINARY) != null ? _a22 : prismaPath;
        this.generator = generator;
        this.datasources = datasources;
        this.logEmitter = new import_events.default();
        this.logEmitter.on("error", () => {
        });
        this.showColors = showColors != null ? showColors : false;
        this.logLevel = logLevel;
        this.logQueries = logQueries != null ? logQueries : false;
        this.clientVersion = clientVersion2;
        this.flags = flags != null ? flags : [];
        this.previewFeatures = previewFeatures != null ? previewFeatures : [];
        this.activeProvider = activeProvider;
        this.connection = new Connection();
        initHooks();
        const removedFlags = [
          "middlewares",
          "aggregateApi",
          "distinct",
          "aggregations",
          "insensitiveFilters",
          "atomicNumberOperations",
          "transactionApi",
          "transaction",
          "connectOrCreate",
          "uncheckedScalarInputs",
          "nativeTypes",
          "createMany",
          "groupBy",
          "referentialActions",
          "microsoftSqlServer"
        ];
        const removedFlagsUsed = this.previewFeatures.filter((e) => removedFlags.includes(e));
        if (removedFlagsUsed.length > 0 && !process.env.PRISMA_HIDE_PREVIEW_FLAG_WARNINGS) {
          console.log(`${import_chalk3.default.blueBright("info")} The preview flags \`${removedFlagsUsed.join("`, `")}\` were removed, you can now safely remove them from your schema.prisma.`);
        }
        this.previewFeatures = this.previewFeatures.filter((e) => !removedFlags.includes(e));
        this.engineEndpoint = engineEndpoint;
        if (engineEndpoint) {
          const url = new import_url.URL(engineEndpoint);
          this.port = Number(url.port);
        }
        if (this.platform) {
          if (!knownPlatforms.includes(this.platform) && !import_fs4.default.existsSync(this.platform)) {
            throw new PrismaClientInitializationError(`Unknown ${import_chalk3.default.red("PRISMA_QUERY_ENGINE_BINARY")} ${import_chalk3.default.redBright.bold(this.platform)}. Possible binaryTargets: ${import_chalk3.default.greenBright(knownPlatforms.join(", "))} or a path to the query engine binary.
You may have to run ${import_chalk3.default.greenBright("prisma generate")} for your changes to take effect.`, this.clientVersion);
          }
        } else {
          void this.getPlatform();
        }
        if (this.enableDebugLogs) {
          src_default.enable("*");
        }
        engines.push(this);
        this.checkForTooManyEngines();
      }
      setError(err) {
        var _a22;
        if (isRustError(err)) {
          this.lastRustError = err;
          this.logEmitter.emit("error", new PrismaClientRustError({
            clientVersion: this.clientVersion,
            error: err
          }));
          if (err.is_panic) {
            this.handlePanic();
          }
        } else if (isRustErrorLog(err)) {
          this.lastErrorLog = err;
          this.logEmitter.emit("error", new PrismaClientRustError({
            clientVersion: this.clientVersion,
            log: err
          }));
          if (((_a22 = err.fields) == null ? void 0 : _a22.message) === "PANIC") {
            this.handlePanic();
          }
        } else {
          this.logEmitter.emit("error", err);
        }
      }
      checkForTooManyEngines() {
        if (engines.length >= 10) {
          const runningEngines = engines.filter((e) => e.child);
          if (runningEngines.length === 10) {
            console.warn(`${import_chalk3.default.yellow("warn(prisma-client)")} There are already 10 instances of Prisma Client actively running.`);
          }
        }
      }
      resolveCwd(cwd) {
        if (cwd && import_fs4.default.existsSync(cwd) && import_fs4.default.lstatSync(cwd).isDirectory()) {
          return cwd;
        }
        return process.cwd();
      }
      on(event, listener) {
        if (event === "beforeExit") {
          this.beforeExitListener = listener;
        } else {
          this.logEmitter.on(event, listener);
        }
      }
      async emitExit() {
        if (this.beforeExitListener) {
          try {
            await this.beforeExitListener();
          } catch (e) {
            console.error(e);
          }
        }
      }
      async getPlatform() {
        if (this.platformPromise) {
          return this.platformPromise;
        }
        this.platformPromise = getPlatform();
        return this.platformPromise;
      }
      getQueryEnginePath(platform3, prefix = __dirname) {
        let queryEnginePath = import_path2.default.join(prefix, `query-engine-${platform3}`);
        if (platform3 === "windows") {
          queryEnginePath = `${queryEnginePath}.exe`;
        }
        return queryEnginePath;
      }
      handlePanic() {
        var _a22;
        if (this.child) {
          this.stopPromise = killProcessAndWait(this.child);
        }
        if ((_a22 = this.currentRequestPromise) == null ? void 0 : _a22.cancel) {
          this.currentRequestPromise.cancel();
        }
      }
      async resolvePrismaPath() {
        var _a2, _b, _c;
        const searchedLocations = [];
        let enginePath;
        if (this.prismaPath) {
          return { prismaPath: this.prismaPath, searchedLocations };
        }
        const platform = await this.getPlatform();
        if (this.platform && this.platform !== platform) {
          this.incorrectlyPinnedBinaryTarget = this.platform;
        }
        this.platform = this.platform || platform;
        if (__filename.includes("BinaryEngine")) {
          enginePath = this.getQueryEnginePath(this.platform, getEnginesPath());
          return { prismaPath: enginePath, searchedLocations };
        }
        const searchLocations = [
          eval(`require('path').join(__dirname, '../../../.prisma/client')`),
          (_c = (_b = (_a2 = this.generator) == null ? void 0 : _a2.output) == null ? void 0 : _b.value) != null ? _c : eval("__dirname"),
          import_path2.default.join(eval("__dirname"), ".."),
          import_path2.default.dirname(this.datamodelPath),
          this.cwd,
          "/tmp/prisma-engines"
        ];
        if (this.dirname) {
          searchLocations.push(this.dirname);
        }
        for (const location of searchLocations) {
          searchedLocations.push(location);
          debug4(`Search for Query Engine in ${location}`);
          enginePath = this.getQueryEnginePath(this.platform, location);
          if (import_fs4.default.existsSync(enginePath)) {
            return { prismaPath: enginePath, searchedLocations };
          }
        }
        enginePath = this.getQueryEnginePath(this.platform);
        return { prismaPath: enginePath != null ? enginePath : "", searchedLocations };
      }
      async getPrismaPath() {
        const { prismaPath, searchedLocations: searchedLocations2 } = await this.resolvePrismaPath();
        const platform3 = await this.getPlatform();
        if (!await exists2(prismaPath)) {
          const pinnedStr = this.incorrectlyPinnedBinaryTarget ? `
You incorrectly pinned it to ${import_chalk3.default.redBright.bold(`${this.incorrectlyPinnedBinaryTarget}`)}
` : "";
          let errorText = `Query engine binary for current platform "${import_chalk3.default.bold(platform3)}" could not be found.${pinnedStr}
This probably happens, because you built Prisma Client on a different platform.
(Prisma Client looked in "${import_chalk3.default.underline(prismaPath)}")

Searched Locations:

${searchedLocations2.map((f) => {
            let msg = `  ${f}`;
            if (process.env.DEBUG === "node-engine-search-locations" && import_fs4.default.existsSync(f)) {
              const dir = import_fs4.default.readdirSync(f);
              msg += dir.map((d) => `    ${d}`).join("\n");
            }
            return msg;
          }).join("\n" + (process.env.DEBUG === "node-engine-search-locations" ? "\n" : ""))}
`;
          if (this.generator) {
            if (this.generator.binaryTargets.find((object) => object.value === this.platform) || this.generator.binaryTargets.find((object) => object.value === "native")) {
              errorText += `
You already added the platform${this.generator.binaryTargets.length > 1 ? "s" : ""} ${this.generator.binaryTargets.map((t) => `"${import_chalk3.default.bold(t.value)}"`).join(", ")} to the "${import_chalk3.default.underline("generator")}" block
in the "schema.prisma" file as described in https://pris.ly/d/client-generator,
but something went wrong. That's suboptimal.

Please create an issue at https://github.com/prisma/prisma/issues/new`;
              errorText += ``;
            } else {
              errorText += `

To solve this problem, add the platform "${this.platform}" to the "${import_chalk3.default.underline("binaryTargets")}" attribute in the "${import_chalk3.default.underline("generator")}" block in the "schema.prisma" file:
${import_chalk3.default.greenBright(this.getFixedGenerator())}

Then run "${import_chalk3.default.greenBright("prisma generate")}" for your changes to take effect.
Read more about deploying Prisma Client: https://pris.ly/d/client-generator`;
            }
          } else {
            errorText += `

Read more about deploying Prisma Client: https://pris.ly/d/client-generator
`;
          }
          throw new PrismaClientInitializationError(errorText, this.clientVersion);
        }
        if (this.incorrectlyPinnedBinaryTarget) {
          console.error(`${import_chalk3.default.yellow("Warning:")} You pinned the platform ${import_chalk3.default.bold(this.incorrectlyPinnedBinaryTarget)}, but Prisma Client detects ${import_chalk3.default.bold(await this.getPlatform())}.
This means you should very likely pin the platform ${import_chalk3.default.greenBright(await this.getPlatform())} instead.
${import_chalk3.default.dim("In case we're mistaken, please report this to us \u{1F64F}.")}`);
        }
        if (process.platform !== "win32") {
          plusX(prismaPath);
        }
        return prismaPath;
      }
      getFixedGenerator() {
        const fixedGenerator = {
          ...this.generator,
          binaryTargets: fixBinaryTargets(this.generator.binaryTargets, this.platform)
        };
        return printGeneratorConfig(fixedGenerator);
      }
      printDatasources() {
        if (this.datasources) {
          return JSON.stringify(this.datasources);
        }
        return "[]";
      }
      async start() {
        if (this.stopPromise) {
          await this.stopPromise;
        }
        if (!this.startPromise) {
          this.startCount++;
          this.startPromise = this.internalStart();
        }
        await this.startPromise;
        if (!this.child && !this.engineEndpoint) {
          throw new PrismaClientUnknownRequestError(`Can't perform request, as the Engine has already been stopped`, this.clientVersion);
        }
        return this.startPromise;
      }
      getEngineEnvVars() {
        var _a22, _b2;
        const env2 = {
          PRISMA_DML_PATH: this.datamodelPath
        };
        if (this.logQueries || this.logLevel === "info") {
          if (this.logQueries) {
            env2.LOG_QUERIES = "true";
          }
        }
        if (this.datasources) {
          env2.OVERWRITE_DATASOURCES = this.printDatasources();
        }
        if (!process.env.NO_COLOR && this.showColors) {
          env2.CLICOLOR_FORCE = "1";
        }
        return {
          ...this.env,
          ...process.env,
          ...env2,
          RUST_BACKTRACE: (_a22 = process.env.RUST_BACKTRACE) != null ? _a22 : "1",
          RUST_LOG: (_b2 = process.env.RUST_LOG) != null ? _b2 : "info"
        };
      }
      internalStart() {
        return new Promise(async (resolve, reject) => {
          var _a22, _b2, _c2;
          await new Promise((r) => process.nextTick(r));
          if (this.stopPromise) {
            await this.stopPromise;
          }
          if (this.engineEndpoint) {
            try {
              this.connection.open(this.engineEndpoint);
              await (0, import_p_retry.default)(() => this.connection.get("/status"), {
                retries: 10
              });
            } catch (e) {
              return reject(e);
            }
            return resolve();
          }
          try {
            if (((_a22 = this.child) == null ? void 0 : _a22.connected) || this.child && !((_b2 = this.child) == null ? void 0 : _b2.killed)) {
              debug4(`There is a child that still runs and we want to start again`);
            }
            this.lastRustError = void 0;
            this.lastErrorLog = void 0;
            this.lastPanic = void 0;
            logger("startin & resettin");
            this.globalKillSignalReceived = void 0;
            debug4({ cwd: this.cwd });
            const prismaPath = await this.getPrismaPath();
            const additionalFlag = this.allowTriggerPanic ? ["--debug"] : [];
            const flags = [
              "--enable-raw-queries",
              "--enable-metrics",
              "--enable-open-telemetry",
              ...this.flags,
              ...additionalFlag
            ];
            this.port = await this.getFreePort();
            flags.push("--port", String(this.port));
            debug4({ flags });
            const env2 = this.getEngineEnvVars();
            this.child = (0, import_child_process2.spawn)(prismaPath, flags, {
              env: env2,
              cwd: this.cwd,
              windowsHide: true,
              stdio: ["ignore", "pipe", "pipe"]
            });
            byline(this.child.stderr).on("data", (msg) => {
              const data = String(msg);
              debug4("stderr", data);
              try {
                const json = JSON.parse(data);
                if (typeof json.is_panic !== "undefined") {
                  debug4(json);
                  this.setError(json);
                  if (this.engineStartDeferred) {
                    const err = new PrismaClientInitializationError(json.message, this.clientVersion, json.error_code);
                    this.engineStartDeferred.reject(err);
                  }
                }
              } catch (e) {
                if (!data.includes("Printing to stderr") && !data.includes("Listening on ")) {
                  this.stderrLogs += "\n" + data;
                }
              }
            });
            byline(this.child.stdout).on("data", (msg) => {
              var _a3, _b22;
              const data = String(msg);
              try {
                const json = JSON.parse(data);
                debug4("stdout", getMessage(json));
                if (this.engineStartDeferred && json.level === "INFO" && json.target === "query_engine::server" && ((_b22 = (_a3 = json.fields) == null ? void 0 : _a3.message) == null ? void 0 : _b22.startsWith("Started query engine http server"))) {
                  this.connection.open(`http://127.0.0.1:${this.port}`);
                  this.engineStartDeferred.resolve();
                  this.engineStartDeferred = void 0;
                }
                if (typeof json.is_panic === "undefined") {
                  if (json.span === true) {
                    const tracingConfig = getTracingConfig(this);
                    if (tracingConfig.enabled) {
                      createSpan(json);
                    }
                    return;
                  }
                  const log4 = convertLog(json);
                  const logIsRustErrorLog = isRustErrorLog(log4);
                  if (logIsRustErrorLog) {
                    this.setError(log4);
                  } else {
                    this.logEmitter.emit(log4.level, log4);
                  }
                } else {
                  this.setError(json);
                }
              } catch (e) {
                debug4(e, data);
              }
            });
            this.child.on("exit", (code) => {
              var _a3;
              logger("removing startPromise");
              this.startPromise = void 0;
              if (this.engineStopDeferred) {
                this.engineStopDeferred.resolve(code);
                return;
              }
              this.connection.close();
              if (code !== 0 && this.engineStartDeferred && this.startCount === 1) {
                let err;
                let msg = this.stderrLogs;
                if (this.lastRustError) {
                  msg = getMessage(this.lastRustError);
                } else if (this.lastErrorLog) {
                  msg = getMessage(this.lastErrorLog);
                }
                if (code !== null) {
                  err = new PrismaClientInitializationError(`Query engine exited with code ${code}
` + msg, this.clientVersion);
                } else if ((_a3 = this.child) == null ? void 0 : _a3.signalCode) {
                  err = new PrismaClientInitializationError(`Query engine process killed with signal ${this.child.signalCode} for unknown reason.
Make sure that the engine binary at ${prismaPath} is not corrupt.
` + msg, this.clientVersion);
                } else {
                  err = new PrismaClientInitializationError(msg, this.clientVersion);
                }
                this.engineStartDeferred.reject(err);
              }
              if (!this.child) {
                return;
              }
              if (this.lastRustError) {
                return;
              }
              if (code === 126) {
                this.setError({
                  timestamp: new Date(),
                  target: "exit",
                  level: "error",
                  fields: {
                    message: `Couldn't start query engine as it's not executable on this operating system.
You very likely have the wrong "binaryTarget" defined in the schema.prisma file.`
                  }
                });
              }
            });
            this.child.on("error", (err) => {
              this.setError({
                message: err.message,
                backtrace: "Could not start query engine",
                is_panic: false
              });
              reject(err);
            });
            this.child.on("close", (code, signal) => {
              var _a3;
              this.connection.close();
              if (code === null && signal === "SIGABRT" && this.child) {
                const error2 = new PrismaClientRustPanicError(this.getErrorMessageWithLink("Panic in Query Engine with SIGABRT signal"), this.clientVersion);
                this.logEmitter.emit("error", error2);
              } else if (code === 255 && signal === null && ((_a3 = this.lastErrorLog) == null ? void 0 : _a3.fields.message) === "PANIC" && !this.lastPanic) {
                const error2 = new PrismaClientRustPanicError(this.getErrorMessageWithLink(`${this.lastErrorLog.fields.message}: ${this.lastErrorLog.fields.reason} in ${this.lastErrorLog.fields.file}:${this.lastErrorLog.fields.line}:${this.lastErrorLog.fields.column}`), this.clientVersion);
                this.setError(error2);
              }
            });
            if (this.lastRustError) {
              return reject(new PrismaClientInitializationError(getMessage(this.lastRustError), this.clientVersion));
            }
            if (this.lastErrorLog) {
              return reject(new PrismaClientInitializationError(getMessage(this.lastErrorLog), this.clientVersion));
            }
            try {
              await new Promise((resolve2, reject2) => {
                this.engineStartDeferred = { resolve: resolve2, reject: reject2 };
              });
            } catch (err) {
              (_c2 = this.child) == null ? void 0 : _c2.kill();
              throw err;
            }
            void (async () => {
              try {
                const engineVersion = await this.version(true);
                debug4(`Client Version: ${this.clientVersion}`);
                debug4(`Engine Version: ${engineVersion}`);
                debug4(`Active provider: ${this.activeProvider}`);
              } catch (e) {
                debug4(e);
              }
            })();
            this.stopPromise = void 0;
            resolve();
          } catch (e) {
            reject(e);
          }
        });
      }
      async stop() {
        if (!this.stopPromise) {
          this.stopPromise = this._stop();
        }
        return this.stopPromise;
      }
      async _stop() {
        var _a22;
        if (this.startPromise) {
          await this.startPromise;
        }
        await new Promise((resolve) => process.nextTick(resolve));
        if (this.currentRequestPromise) {
          try {
            await this.currentRequestPromise;
          } catch (e) {
          }
        }
        this.getConfigPromise = void 0;
        let stopChildPromise;
        if (this.child) {
          debug4(`Stopping Prisma engine4`);
          if (this.startPromise) {
            debug4(`Waiting for start promise`);
            await this.startPromise;
          }
          debug4(`Done waiting for start promise`);
          stopChildPromise = new Promise((resolve, reject) => {
            this.engineStopDeferred = { resolve, reject };
          });
          this.connection.close();
          (_a22 = this.child) == null ? void 0 : _a22.kill();
          this.child = void 0;
        }
        if (stopChildPromise) {
          await stopChildPromise;
        }
        await new Promise((r) => process.nextTick(r));
        this.startPromise = void 0;
        this.engineStopDeferred = void 0;
      }
      kill(signal) {
        var _a22;
        this.getConfigPromise = void 0;
        this.globalKillSignalReceived = signal;
        (_a22 = this.child) == null ? void 0 : _a22.kill();
        this.connection.close();
      }
      getFreePort() {
        return new Promise((resolve, reject) => {
          const server = import_net.default.createServer((s) => s.end(""));
          server.unref();
          server.on("error", reject);
          server.listen(0, () => {
            const address = server.address();
            const port = typeof address === "string" ? parseInt(address.split(":").slice(-1)[0], 10) : address.port;
            server.close((e) => {
              if (e) {
                reject(e);
              }
              resolve(port);
            });
          });
        });
      }
      async getConfig() {
        if (!this.getConfigPromise) {
          this.getConfigPromise = this._getConfig();
        }
        return this.getConfigPromise;
      }
      async _getConfig() {
        const prismaPath = await this.getPrismaPath();
        const env2 = await this.getEngineEnvVars();
        const result = await (0, import_execa.default)(prismaPath, ["cli", "get-config"], {
          env: omit(env2, ["PORT"]),
          cwd: this.cwd
        });
        return JSON.parse(result.stdout);
      }
      async getDmmf() {
        if (!this.getDmmfPromise) {
          this.getDmmfPromise = this._getDmmf();
        }
        return this.getDmmfPromise;
      }
      async _getDmmf() {
        const prismaPath = await this.getPrismaPath();
        const env2 = await this.getEngineEnvVars();
        const result = await (0, import_execa.default)(prismaPath, ["--enable-raw-queries", "cli", "dmmf"], {
          env: omit(env2, ["PORT"]),
          cwd: this.cwd
        });
        return JSON.parse(result.stdout);
      }
      async version(forceRun = false) {
        if (this.versionPromise && !forceRun) {
          return this.versionPromise;
        }
        this.versionPromise = this.internalVersion();
        return this.versionPromise;
      }
      async internalVersion() {
        const prismaPath = await this.getPrismaPath();
        const result = await (0, import_execa.default)(prismaPath, ["--version"]);
        this.lastVersion = result.stdout;
        return this.lastVersion;
      }
      async request(query2, headers = {}, numTry = 1) {
        await this.start();
        this.currentRequestPromise = this.connection.post("/", stringifyQuery(query2), runtimeHeadersToHttpHeaders(headers));
        this.lastQuery = query2;
        try {
          const { data, headers: headers2 } = await this.currentRequestPromise;
          if (data.errors) {
            if (data.errors.length === 1) {
              throw prismaGraphQLToJSError(data.errors[0], this.clientVersion);
            }
            throw new PrismaClientUnknownRequestError(JSON.stringify(data.errors), this.clientVersion);
          }
          const elapsed = parseInt(headers2["x-elapsed"]) / 1e3;
          if (this.startCount > 0) {
            this.startCount = 0;
          }
          this.currentRequestPromise = void 0;
          return { data, elapsed };
        } catch (e) {
          logger("req - e", e);
          if (e instanceof PrismaClientKnownRequestError) {
            throw e;
          }
          await this.handleRequestError(e, numTry <= MAX_REQUEST_RETRIES);
          if (numTry <= MAX_REQUEST_RETRIES) {
            logger("trying a retry now");
            return this.request(query2, headers, numTry + 1);
          }
        }
        return null;
      }
      async requestBatch(queries, headers = {}, transaction = false, numTry = 1) {
        await this.start();
        const request2 = {
          batch: queries.map((query2) => ({ query: query2, variables: {} })),
          transaction
        };
        this.lastQuery = JSON.stringify(request2);
        this.currentRequestPromise = this.connection.post("/", this.lastQuery, runtimeHeadersToHttpHeaders(headers));
        return this.currentRequestPromise.then(({ data, headers: headers2 }) => {
          const elapsed = parseInt(headers2["x-elapsed"]) / 1e3;
          const { batchResult, errors } = data;
          if (Array.isArray(batchResult)) {
            return batchResult.map((result) => {
              if (result.errors) {
                throw prismaGraphQLToJSError(data.errors[0], this.clientVersion);
              }
              return {
                data: result,
                elapsed
              };
            });
          } else {
            throw prismaGraphQLToJSError(data.errors[0], this.clientVersion);
          }
        }).catch(async (e) => {
          const isError2 = await this.handleRequestError(e, numTry < 3);
          if (!isError2) {
            if (numTry <= MAX_REQUEST_RETRIES) {
              return this.requestBatch(queries, headers, transaction, numTry + 1);
            }
          }
          throw isError2;
        });
      }
      async transaction(action, headers, arg2) {
        var _a22, _b2;
        await this.start();
        if (action === "start") {
          const jsonOptions = JSON.stringify({
            max_wait: (_a22 = arg2 == null ? void 0 : arg2.maxWait) != null ? _a22 : 2e3,
            timeout: (_b2 = arg2 == null ? void 0 : arg2.timeout) != null ? _b2 : 5e3
          });
          const result = await Connection.onHttpError(this.connection.post("/transaction/start", jsonOptions, runtimeHeadersToHttpHeaders(headers)), transactionHttpErrorHandler);
          return result.data;
        } else if (action === "commit") {
          await Connection.onHttpError(this.connection.post(`/transaction/${arg2.id}/commit`), transactionHttpErrorHandler);
        } else if (action === "rollback") {
          await Connection.onHttpError(this.connection.post(`/transaction/${arg2.id}/rollback`), transactionHttpErrorHandler);
        }
        return void 0;
      }
      get hasMaxRestarts() {
        return this.startCount >= MAX_STARTS;
      }
      throwAsyncErrorIfExists(forceThrow = false) {
        var _a22, _b2;
        logger("throwAsyncErrorIfExists", this.startCount, this.hasMaxRestarts);
        if (this.lastRustError) {
          const err = new PrismaClientRustPanicError(this.getErrorMessageWithLink(getMessage(this.lastRustError)), this.clientVersion);
          if (this.lastRustError.is_panic) {
            this.lastPanic = err;
          }
          if (this.hasMaxRestarts || forceThrow) {
            throw err;
          }
        }
        if (this.lastErrorLog && isRustErrorLog(this.lastErrorLog)) {
          const err = new PrismaClientUnknownRequestError(this.getErrorMessageWithLink(getMessage(this.lastErrorLog)), this.clientVersion);
          if (((_b2 = (_a22 = this.lastErrorLog) == null ? void 0 : _a22.fields) == null ? void 0 : _b2.message) === "PANIC") {
            this.lastPanic = err;
          }
          if (this.hasMaxRestarts || forceThrow) {
            throw err;
          }
        }
      }
      getErrorMessageWithLink(title) {
        return getErrorMessageWithLink({
          platform: this.platform,
          title,
          version: this.clientVersion,
          engineVersion: this.lastVersion,
          database: this.lastActiveProvider,
          query: this.lastQuery
        });
      }
      async metrics({ format: format2, globalLabels }) {
        await this.start();
        const parseResponse = format2 === "json";
        const response = await this.connection.post(`/metrics?format=${encodeURIComponent(format2)}`, JSON.stringify(globalLabels), null, parseResponse);
        return response.data;
      }
      _hasPreviewFlag(feature) {
        var _a22;
        return !!((_a22 = this.previewFeatures) == null ? void 0 : _a22.includes(feature));
      }
    };
    __name(BinaryEngine, "BinaryEngine");
    function stringifyQuery(q) {
      return `{"variables":{},"query":${JSON.stringify(q)}}`;
    }
    __name(stringifyQuery, "stringifyQuery");
    function hookProcess(handler, exit = false) {
      process.once(handler, async () => {
        for (const engine of engines) {
          await engine.emitExit();
          engine.kill(handler);
        }
        engines.splice(0, engines.length);
        if (socketPaths.length > 0) {
          for (const socketPath of socketPaths) {
            try {
              import_fs4.default.unlinkSync(socketPath);
            } catch (e) {
            }
          }
        }
        if (exit && process.listenerCount(handler) === 0) {
          process.exit();
        }
      });
    }
    __name(hookProcess, "hookProcess");
    var hooksInitialized = false;
    function initHooks() {
      if (!hooksInitialized) {
        hookProcess("beforeExit");
        hookProcess("exit");
        hookProcess("SIGINT", true);
        hookProcess("SIGUSR2", true);
        hookProcess("SIGTERM", true);
        hooksInitialized = true;
      }
    }
    __name(initHooks, "initHooks");
    function transactionHttpErrorHandler(result) {
      throw result.data;
    }
    __name(transactionHttpErrorHandler, "transactionHttpErrorHandler");
    function runtimeHeadersToHttpHeaders(headers) {
      return Object.keys(headers).reduce((acc, runtimeHeaderKey) => {
        let httpHeaderKey = runtimeHeaderKey;
        if (runtimeHeaderKey === "transactionId") {
          httpHeaderKey = "X-transaction-id";
        }
        acc[httpHeaderKey] = headers[runtimeHeaderKey];
        return acc;
      }, {});
    }
    __name(runtimeHeadersToHttpHeaders, "runtimeHeadersToHttpHeaders");
    function killProcessAndWait(childProcess) {
      return new Promise((resolve) => {
        childProcess.once("exit", resolve);
        childProcess.kill();
      });
    }
    __name(killProcessAndWait, "killProcessAndWait");
    var import_events2 = __toESM(require("events"));
    var PrismaClientError = class extends Error {
      constructor(message, info2) {
        super(message);
        this.clientVersion = info2.clientVersion;
        this.cause = info2.cause;
      }
      get [Symbol.toStringTag]() {
        return this.name;
      }
    };
    __name(PrismaClientError, "PrismaClientError");
    var DataProxyError = class extends PrismaClientError {
      constructor(message, info2) {
        var _a22;
        super(message, info2);
        this.isRetryable = (_a22 = info2.isRetryable) != null ? _a22 : true;
      }
    };
    __name(DataProxyError, "DataProxyError");
    function setRetryable(info2, retryable) {
      return {
        ...info2,
        isRetryable: retryable
      };
    }
    __name(setRetryable, "setRetryable");
    var ForcedRetryError = class extends DataProxyError {
      constructor(info2) {
        super("This request must be retried", setRetryable(info2, true));
        this.name = "ForcedRetryError";
        this.code = "P5001";
      }
    };
    __name(ForcedRetryError, "ForcedRetryError");
    var InvalidDatasourceError = class extends DataProxyError {
      constructor(message, info2) {
        super(message, setRetryable(info2, false));
        this.name = "InvalidDatasourceError";
        this.code = "P5002";
      }
    };
    __name(InvalidDatasourceError, "InvalidDatasourceError");
    var NotImplementedYetError = class extends DataProxyError {
      constructor(message, info2) {
        super(message, setRetryable(info2, false));
        this.name = "NotImplementedYetError";
        this.code = "P5004";
      }
    };
    __name(NotImplementedYetError, "NotImplementedYetError");
    var DataProxyAPIError = class extends DataProxyError {
      constructor(message, info2) {
        super(message, info2);
        this.response = info2.response;
      }
    };
    __name(DataProxyAPIError, "DataProxyAPIError");
    var SchemaMissingError = class extends DataProxyAPIError {
      constructor(info2) {
        super("Schema needs to be uploaded", setRetryable(info2, true));
        this.name = "SchemaMissingError";
        this.code = "P5005";
      }
    };
    __name(SchemaMissingError, "SchemaMissingError");
    var BAD_REQUEST_DEFAULT_MESSAGE = "This request could not be understood by the server";
    var BadRequestError = class extends DataProxyAPIError {
      constructor(info2, message, code) {
        super(message || BAD_REQUEST_DEFAULT_MESSAGE, setRetryable(info2, false));
        this.name = "BadRequestError";
        this.code = "P5000";
        if (code)
          this.code = code;
      }
    };
    __name(BadRequestError, "BadRequestError");
    var GatewayTimeoutError = class extends DataProxyAPIError {
      constructor(info2) {
        super("Request timed out", setRetryable(info2, false));
        this.name = "GatewayTimeoutError";
        this.code = "P5009";
      }
    };
    __name(GatewayTimeoutError, "GatewayTimeoutError");
    var NotFoundError = class extends DataProxyAPIError {
      constructor(info2) {
        super("Requested resource does not exist", setRetryable(info2, false));
        this.name = "NotFoundError";
        this.code = "P5003";
      }
    };
    __name(NotFoundError, "NotFoundError");
    var SERVER_ERROR_DEFAULT_MESSAGE = "Unknown server error";
    var ServerError = class extends DataProxyAPIError {
      constructor(info2, message, logs) {
        super(message || SERVER_ERROR_DEFAULT_MESSAGE, setRetryable(info2, true));
        this.name = "ServerError";
        this.code = "P5006";
        this.logs = logs;
      }
    };
    __name(ServerError, "ServerError");
    var UnauthorizedError = class extends DataProxyAPIError {
      constructor(info2) {
        super("Unauthorized, check your connection string", setRetryable(info2, false));
        this.name = "UnauthorizedError";
        this.code = "P5007";
      }
    };
    __name(UnauthorizedError, "UnauthorizedError");
    var UsageExceededError = class extends DataProxyAPIError {
      constructor(info2) {
        super("Usage exceeded, retry again later", setRetryable(info2, true));
        this.name = "UsageExceededError";
        this.code = "P5008";
      }
    };
    __name(UsageExceededError, "UsageExceededError");
    async function responseToError(response, clientVersion2) {
      var _a22, _b2, _c2, _d2, _e;
      if (response.ok)
        return void 0;
      const info2 = { clientVersion: clientVersion2, response };
      if (response.status === 400) {
        let knownError;
        try {
          const body = await response.json();
          knownError = (_b2 = (_a22 = body == null ? void 0 : body.EngineNotStarted) == null ? void 0 : _a22.reason) == null ? void 0 : _b2.KnownEngineStartupError;
        } catch (_) {
        }
        if (knownError) {
          throw new BadRequestError(info2, knownError.msg, knownError.error_code);
        }
      }
      if (response.status === 401) {
        throw new UnauthorizedError(info2);
      }
      if (response.status === 404) {
        try {
          const body = await response.json();
          const isSchemaMissing = ((_c2 = body == null ? void 0 : body.EngineNotStarted) == null ? void 0 : _c2.reason) === "SchemaMissing";
          return isSchemaMissing ? new SchemaMissingError(info2) : new NotFoundError(info2);
        } catch (err) {
          return new NotFoundError(info2);
        }
      }
      if (response.status === 429) {
        throw new UsageExceededError(info2);
      }
      if (response.status === 504) {
        throw new GatewayTimeoutError(info2);
      }
      if (response.status >= 500) {
        let body;
        try {
          body = await response.json();
        } catch (err) {
          throw new ServerError(info2);
        }
        if (typeof ((_d2 = body == null ? void 0 : body.EngineNotStarted) == null ? void 0 : _d2.reason) === "string") {
          throw new ServerError(info2, body.EngineNotStarted.reason);
        } else if (typeof ((_e = body == null ? void 0 : body.EngineNotStarted) == null ? void 0 : _e.reason) === "object") {
          const keys2 = Object.keys(body.EngineNotStarted.reason);
          if (keys2.length > 0) {
            const reason = body.EngineNotStarted.reason;
            const content = reason[keys2[0]];
            throw new ServerError(info2, keys2[0], content.logs);
          }
        }
        throw new ServerError(info2);
      }
      if (response.status >= 400) {
        throw new BadRequestError(info2);
      }
      return void 0;
    }
    __name(responseToError, "responseToError");
    var BACKOFF_INTERVAL = 50;
    function backOff(n) {
      const baseDelay = Math.pow(2, n) * BACKOFF_INTERVAL;
      const jitter = Math.ceil(Math.random() * baseDelay) - Math.ceil(baseDelay / 2);
      const total = baseDelay + jitter;
      return new Promise((done) => setTimeout(() => done(total), total));
    }
    __name(backOff, "backOff");
    var devDependencies = {
      "@prisma/debug": "workspace:4.1.0",
      "@prisma/engines-version": "4.1.0-48.8d8414deb360336e4698a65aa45a1fbaf1ce13d8",
      "@prisma/fetch-engine": "workspace:4.1.0",
      "@prisma/get-platform": "workspace:4.1.0",
      "@swc/core": "1.2.197",
      "@swc/jest": "0.2.21",
      "@types/jest": "28.1.5",
      "@types/node": "16.11.43",
      execa: "5.1.1",
      jest: "28.1.2",
      typescript: "4.7.3"
    };
    var RequestError = class extends DataProxyError {
      constructor(message, info2) {
        super(`Cannot fetch data from service:
${message}`, setRetryable(info2, true));
        this.name = "RequestError";
        this.code = "P5010";
      }
    };
    __name(RequestError, "RequestError");
    function getJSRuntimeName() {
      if (typeof self === "undefined") {
        return "node";
      }
      return "browser";
    }
    __name(getJSRuntimeName, "getJSRuntimeName");
    async function request(url, options) {
      var _a22;
      const clientVersion2 = options.clientVersion;
      const jsRuntimeName = getJSRuntimeName();
      try {
        if (jsRuntimeName === "browser") {
          return await fetch(url, options);
        } else {
          return await nodeFetch(url, options);
        }
      } catch (e) {
        const message = (_a22 = e.message) != null ? _a22 : "Unknown error";
        throw new RequestError(message, { clientVersion: clientVersion2 });
      }
    }
    __name(request, "request");
    function buildHeaders(options) {
      return {
        ...options.headers,
        "Content-Type": "application/json"
      };
    }
    __name(buildHeaders, "buildHeaders");
    function buildOptions(options) {
      return {
        method: options.method,
        headers: buildHeaders(options)
      };
    }
    __name(buildOptions, "buildOptions");
    function buildResponse(incomingData, response) {
      return {
        json: () => JSON.parse(Buffer.concat(incomingData).toString()),
        ok: response.statusCode >= 200 && response.statusCode <= 299,
        status: response.statusCode,
        url: response.url
      };
    }
    __name(buildResponse, "buildResponse");
    async function nodeFetch(url, options = {}) {
      const https = include("https");
      const httpsOptions = buildOptions(options);
      const incomingData = [];
      const { origin } = new URL(url);
      return new Promise((resolve, reject) => {
        var _a22;
        const request2 = https.request(url, httpsOptions, (response) => {
          const { statusCode, headers: { location } } = response;
          if (statusCode >= 301 && statusCode <= 399 && location) {
            if (location.startsWith("http") === false) {
              resolve(nodeFetch(`${origin}${location}`, options));
            } else {
              resolve(nodeFetch(location, options));
            }
          }
          response.on("data", (chunk) => incomingData.push(chunk));
          response.on("end", () => resolve(buildResponse(incomingData, response)));
          response.on("error", reject);
        });
        request2.on("error", reject);
        request2.end((_a22 = options.body) != null ? _a22 : "");
      });
    }
    __name(nodeFetch, "nodeFetch");
    var include = typeof require !== "undefined" ? require : () => {
    };
    var semverRegex = /^[1-9][0-9]*\.[0-9]+\.[0-9]+$/;
    var debug5 = src_default("prisma:client:dataproxyEngine");
    async function _getClientVersion(config2) {
      var _a22, _b2, _c2;
      const engineVersion = devDependencies["@prisma/engines-version"];
      const clientVersion2 = (_a22 = config2.clientVersion) != null ? _a22 : "unknown";
      if (process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION) {
        return process.env.PRISMA_CLIENT_DATA_PROXY_CLIENT_VERSION;
      }
      const [version, suffix] = (_b2 = clientVersion2 == null ? void 0 : clientVersion2.split("-")) != null ? _b2 : [];
      if (suffix === void 0 && semverRegex.test(version)) {
        return version;
      }
      if (suffix !== void 0 || clientVersion2 === "0.0.0") {
        const [version2] = (_c2 = engineVersion.split("-")) != null ? _c2 : [];
        const [major2, minor, patch] = version2.split(".");
        const pkgURL = prismaPkgURL(`<=${major2}.${minor}.${patch}`);
        const res = await request(pkgURL, { clientVersion: clientVersion2 });
        return (await res.json())["version"];
      }
      throw new NotImplementedYetError("Only `major.minor.patch` versions are supported by Prisma Data Proxy.", {
        clientVersion: clientVersion2
      });
    }
    __name(_getClientVersion, "_getClientVersion");
    async function getClientVersion(config2) {
      const version = await _getClientVersion(config2);
      debug5("version", version);
      return version;
    }
    __name(getClientVersion, "getClientVersion");
    function prismaPkgURL(version) {
      return encodeURI(`https://unpkg.com/prisma@${version}/package.json`);
    }
    __name(prismaPkgURL, "prismaPkgURL");
    var MAX_RETRIES = 10;
    var P2 = Promise.resolve();
    var DataProxyEngine = class extends Engine {
      constructor(config2) {
        var _a22, _b2, _c2, _d2, _e;
        super();
        this.config = config2;
        this.env = { ...this.config.env, ...process.env };
        this.inlineSchema = (_a22 = config2.inlineSchema) != null ? _a22 : "";
        this.inlineDatasources = (_b2 = config2.inlineDatasources) != null ? _b2 : {};
        this.inlineSchemaHash = (_c2 = config2.inlineSchemaHash) != null ? _c2 : "";
        this.clientVersion = (_d2 = config2.clientVersion) != null ? _d2 : "unknown";
        this.logEmitter = new import_events2.default();
        this.logEmitter.on("error", () => {
        });
        const [host, apiKey] = this.extractHostAndApiKey();
        this.remoteClientVersion = P2.then(() => getClientVersion(this.config));
        this.headers = { Authorization: `Bearer ${apiKey}` };
        this.host = host;
        if ((_e = this.config.previewFeatures) == null ? void 0 : _e.includes("tracing")) {
          throw new NotImplementedYetError("Tracing is not yet supported for Data Proxy", {
            clientVersion: this.clientVersion
          });
        }
      }
      version() {
        return "unknown";
      }
      async start() {
      }
      async stop() {
      }
      on(event, listener) {
        if (event === "beforeExit") {
          throw new NotImplementedYetError("beforeExit event is not yet supported", {
            clientVersion: this.clientVersion
          });
        } else {
          this.logEmitter.on(event, listener);
        }
      }
      async url(s) {
        return `https://${this.host}/${await this.remoteClientVersion}/${this.inlineSchemaHash}/${s}`;
      }
      async getConfig() {
        return Promise.resolve({
          datasources: [
            {
              activeProvider: this.config.activeProvider
            }
          ]
        });
      }
      getDmmf() {
        throw new NotImplementedYetError("getDmmf is not yet supported", {
          clientVersion: this.clientVersion
        });
      }
      async uploadSchema() {
        const response = await request(await this.url("schema"), {
          method: "PUT",
          headers: this.headers,
          body: this.inlineSchema,
          clientVersion: this.clientVersion
        });
        const err = await responseToError(response, this.clientVersion);
        if (err) {
          this.logEmitter.emit("warn", { message: `Error while uploading schema: ${err.message}` });
          throw err;
        } else {
          this.logEmitter.emit("info", {
            message: `Schema (re)uploaded (hash: ${this.inlineSchemaHash})`
          });
        }
      }
      request(query2, headers, attempt = 0) {
        this.logEmitter.emit("query", { query: query2 });
        return this.requestInternal({ query: query2, variables: {} }, headers, attempt);
      }
      async requestBatch(queries, headers, isTransaction = false, attempt = 0) {
        this.logEmitter.emit("query", {
          query: `Batch${isTransaction ? " in transaction" : ""} (${queries.length}):
${queries.join("\n")}`
        });
        const body = {
          batch: queries.map((query2) => ({ query: query2, variables: {} })),
          transaction: isTransaction
        };
        const { batchResult } = await this.requestInternal(body, headers, attempt);
        return batchResult;
      }
      async requestInternal(body, headers, attempt) {
        var _a22;
        try {
          this.logEmitter.emit("info", {
            message: `Calling ${await this.url("graphql")} (n=${attempt})`
          });
          const response = await request(await this.url("graphql"), {
            method: "POST",
            headers: { ...headers, ...this.headers },
            body: JSON.stringify(body),
            clientVersion: this.clientVersion
          });
          const e = await responseToError(response, this.clientVersion);
          if (e instanceof SchemaMissingError) {
            await this.uploadSchema();
            throw new ForcedRetryError({
              clientVersion: this.clientVersion,
              cause: e
            });
          }
          if (e)
            throw e;
          const data = await response.json();
          if (data.errors) {
            if (data.errors.length === 1) {
              throw prismaGraphQLToJSError(data.errors[0], this.config.clientVersion);
            }
          }
          return data;
        } catch (e) {
          this.logEmitter.emit("error", {
            message: `Error while querying: ${(_a22 = e.message) != null ? _a22 : "(unknown)"}`
          });
          if (!(e instanceof DataProxyError))
            throw e;
          if (!e.isRetryable)
            throw e;
          if (attempt >= MAX_RETRIES) {
            if (e instanceof ForcedRetryError) {
              throw e.cause;
            } else {
              throw e;
            }
          }
          this.logEmitter.emit("warn", { message: "This request can be retried" });
          const delay = await backOff(attempt);
          this.logEmitter.emit("warn", { message: `Retrying after ${delay}ms` });
          return this.requestInternal(body, headers, attempt + 1);
        }
      }
      transaction() {
        throw new NotImplementedYetError("Interactive transactions are not yet supported", {
          clientVersion: this.clientVersion
        });
      }
      extractHostAndApiKey() {
        const mainDatasourceName = Object.keys(this.inlineDatasources)[0];
        const mainDatasource = this.inlineDatasources[mainDatasourceName];
        const mainDatasourceURL = mainDatasource == null ? void 0 : mainDatasource.url.value;
        const mainDatasourceEnv = mainDatasource == null ? void 0 : mainDatasource.url.fromEnvVar;
        const loadedEnvURL = this.env[mainDatasourceEnv];
        const dataProxyURL = mainDatasourceURL != null ? mainDatasourceURL : loadedEnvURL;
        let url;
        try {
          url = new URL(dataProxyURL != null ? dataProxyURL : "");
        } catch (e) {
          throw new InvalidDatasourceError("Could not parse URL of the datasource", {
            clientVersion: this.clientVersion
          });
        }
        const { protocol, host, searchParams } = url;
        if (protocol !== "prisma:") {
          throw new InvalidDatasourceError("Datasource URL must use prisma:// protocol when --data-proxy is used", {
            clientVersion: this.clientVersion
          });
        }
        const apiKey = searchParams.get("api_key");
        if (apiKey === null || apiKey.length < 1) {
          throw new InvalidDatasourceError("No valid API key found in the datasource URL", {
            clientVersion: this.clientVersion
          });
        }
        return [host, apiKey];
      }
      metrics(options) {
        throw new NotImplementedYetError("Metric are not yet supported for Data Proxy", {
          clientVersion: this.clientVersion
        });
      }
      _hasPreviewFlag(feature) {
        var _a22;
        return !!((_a22 = this.config.previewFeatures) == null ? void 0 : _a22.includes(feature));
      }
    };
    __name(DataProxyEngine, "DataProxyEngine");
    var import_chalk5 = __toESM(require_source());
    var import_events3 = __toESM(require("events"));
    var import_fs6 = __toESM(require("fs"));
    var import_chalk4 = __toESM(require_source());
    var import_fs5 = __toESM(require("fs"));
    var import_path3 = __toESM(require("path"));
    var debug6 = src_default("prisma:client:libraryEngine:loader");
    var DefaultLibraryLoader = class {
      constructor(config2) {
        this.libQueryEnginePath = null;
        this.platform = null;
        this.config = config2;
      }
      async loadLibrary() {
        if (!this.libQueryEnginePath) {
          this.libQueryEnginePath = await this.getLibQueryEnginePath();
        }
        debug6(`loadEngine using ${this.libQueryEnginePath}`);
        try {
          return eval("require")(this.libQueryEnginePath);
        } catch (e) {
          if (import_fs5.default.existsSync(this.libQueryEnginePath)) {
            if (this.libQueryEnginePath.endsWith(".node")) {
              throw new PrismaClientInitializationError(`Unable to load Node-API Library from ${import_chalk4.default.dim(this.libQueryEnginePath)}, Library may be corrupt`, this.config.clientVersion);
            } else {
              throw new PrismaClientInitializationError(`Expected an Node-API Library but received ${import_chalk4.default.dim(this.libQueryEnginePath)}`, this.config.clientVersion);
            }
          } else {
            throw new PrismaClientInitializationError(`Unable to load Node-API Library from ${import_chalk4.default.dim(this.libQueryEnginePath)}, It does not exist`, this.config.clientVersion);
          }
        }
      }
      async getLibQueryEnginePath() {
        var _a22, _b2, _c2, _d2;
        const libPath = (_a22 = process.env.PRISMA_QUERY_ENGINE_LIBRARY) != null ? _a22 : this.config.prismaPath;
        if (libPath && import_fs5.default.existsSync(libPath) && libPath.endsWith(".node")) {
          return libPath;
        }
        this.platform = (_b2 = this.platform) != null ? _b2 : await getPlatform();
        const { enginePath: enginePath2, searchedLocations: searchedLocations2 } = await this.resolveEnginePath();
        if (!import_fs5.default.existsSync(enginePath2)) {
          const incorrectPinnedPlatformErrorStr = this.platform ? `
You incorrectly pinned it to ${import_chalk4.default.redBright.bold(`${this.platform}`)}
` : "";
          let errorText = `Query engine library for current platform "${import_chalk4.default.bold(this.platform)}" could not be found.${incorrectPinnedPlatformErrorStr}
This probably happens, because you built Prisma Client on a different platform.
(Prisma Client looked in "${import_chalk4.default.underline(enginePath2)}")

Searched Locations:

${searchedLocations2.map((f) => {
            let msg = `  ${f}`;
            if (process.env.DEBUG === "node-engine-search-locations" && import_fs5.default.existsSync(f)) {
              const dir = import_fs5.default.readdirSync(f);
              msg += dir.map((d) => `    ${d}`).join("\n");
            }
            return msg;
          }).join("\n" + (process.env.DEBUG === "node-engine-search-locations" ? "\n" : ""))}
`;
          if (this.config.generator) {
            this.platform = (_c2 = this.platform) != null ? _c2 : await getPlatform();
            if (this.config.generator.binaryTargets.find((object) => object.value === this.platform) || this.config.generator.binaryTargets.find((object) => object.value === "native")) {
              errorText += `
You already added the platform${this.config.generator.binaryTargets.length > 1 ? "s" : ""} ${this.config.generator.binaryTargets.map((t) => `"${import_chalk4.default.bold(t.value)}"`).join(", ")} to the "${import_chalk4.default.underline("generator")}" block
in the "schema.prisma" file as described in https://pris.ly/d/client-generator,
but something went wrong. That's suboptimal.

Please create an issue at https://github.com/prisma/prisma/issues/new`;
              errorText += ``;
            } else {
              errorText += `

To solve this problem, add the platform "${this.platform}" to the "${import_chalk4.default.underline("binaryTargets")}" attribute in the "${import_chalk4.default.underline("generator")}" block in the "schema.prisma" file:
${import_chalk4.default.greenBright(this.getFixedGenerator())}

Then run "${import_chalk4.default.greenBright("prisma generate")}" for your changes to take effect.
Read more about deploying Prisma Client: https://pris.ly/d/client-generator`;
            }
          } else {
            errorText += `

Read more about deploying Prisma Client: https://pris.ly/d/client-generator
`;
          }
          throw new PrismaClientInitializationError(errorText, this.config.clientVersion);
        }
        this.platform = (_d2 = this.platform) != null ? _d2 : await getPlatform();
        return enginePath2;
      }
      async resolveEnginePath() {
        var _a2, _b, _c, _d;
        const searchedLocations = [];
        let enginePath;
        if (this.libQueryEnginePath) {
          return { enginePath: this.libQueryEnginePath, searchedLocations };
        }
        this.platform = (_a2 = this.platform) != null ? _a2 : await getPlatform();
        if (__filename.includes("DefaultLibraryLoader")) {
          enginePath = import_path3.default.join(getEnginesPath(), getNodeAPIName(this.platform, "fs"));
          return { enginePath, searchedLocations };
        }
        const dirname = eval("__dirname");
        const searchLocations = [
          import_path3.default.resolve(dirname, "../../../.prisma/client"),
          (_d = (_c = (_b = this.config.generator) == null ? void 0 : _b.output) == null ? void 0 : _c.value) != null ? _d : dirname,
          import_path3.default.resolve(dirname, ".."),
          import_path3.default.dirname(this.config.datamodelPath),
          this.config.cwd,
          "/tmp/prisma-engines"
        ];
        if (this.config.dirname) {
          searchLocations.push(this.config.dirname);
        }
        for (const location of searchLocations) {
          searchedLocations.push(location);
          debug6(`Searching for Query Engine Library in ${location}`);
          enginePath = import_path3.default.join(location, getNodeAPIName(this.platform, "fs"));
          if (import_fs5.default.existsSync(enginePath)) {
            return { enginePath, searchedLocations };
          }
        }
        enginePath = import_path3.default.join(__dirname, getNodeAPIName(this.platform, "fs"));
        return { enginePath: enginePath != null ? enginePath : "", searchedLocations };
      }
      getFixedGenerator() {
        const fixedGenerator = {
          ...this.config.generator,
          binaryTargets: fixBinaryTargets(this.config.generator.binaryTargets, this.platform)
        };
        return printGeneratorConfig(fixedGenerator);
      }
    };
    __name(DefaultLibraryLoader, "DefaultLibraryLoader");
    var debug7 = src_default("prisma:client:libraryEngine:exitHooks");
    var ExitHooks = class {
      constructor() {
        this.nextOwnerId = 1;
        this.ownerToIdMap = /* @__PURE__ */ new WeakMap();
        this.idToListenerMap = /* @__PURE__ */ new Map();
        this.areHooksInstalled = false;
      }
      install() {
        if (this.areHooksInstalled) {
          return;
        }
        this.installHook("beforeExit");
        this.installHook("exit");
        this.installHook("SIGINT", true);
        this.installHook("SIGUSR2", true);
        this.installHook("SIGTERM", true);
        this.areHooksInstalled = true;
      }
      setListener(owner, listener) {
        if (listener) {
          let id = this.ownerToIdMap.get(owner);
          if (!id) {
            id = this.nextOwnerId++;
            this.ownerToIdMap.set(owner, id);
          }
          this.idToListenerMap.set(id, listener);
        } else {
          const id = this.ownerToIdMap.get(owner);
          if (id !== void 0) {
            this.ownerToIdMap.delete(owner);
            this.idToListenerMap.delete(id);
          }
        }
      }
      getListener(owner) {
        const id = this.ownerToIdMap.get(owner);
        if (id === void 0) {
          return void 0;
        }
        return this.idToListenerMap.get(id);
      }
      installHook(event, shouldExit = false) {
        process.once(event, async (code) => {
          debug7(`exit event received: ${event}`);
          for (const listener of this.idToListenerMap.values()) {
            await listener();
          }
          this.idToListenerMap.clear();
          if (shouldExit && process.listenerCount(event) === 0) {
            process.exit(code);
          }
        });
      }
    };
    __name(ExitHooks, "ExitHooks");
    var debug8 = src_default("prisma:client:libraryEngine");
    function isQueryEvent(event) {
      return event["item_type"] === "query" && "query" in event;
    }
    __name(isQueryEvent, "isQueryEvent");
    function isPanicEvent(event) {
      if ("level" in event) {
        return event.level === "error" && event["message"] === "PANIC";
      } else {
        return false;
      }
    }
    __name(isPanicEvent, "isPanicEvent");
    var knownPlatforms2 = [...platforms, "native"];
    var engineInstanceCount = 0;
    var exitHooks = new ExitHooks();
    var LibraryEngine = class extends Engine {
      constructor(config2, loader = new DefaultLibraryLoader(config2)) {
        var _a22, _b2;
        super();
        this.datamodel = import_fs6.default.readFileSync(config2.datamodelPath, "utf-8");
        this.config = config2;
        this.libraryStarted = false;
        this.logQueries = (_a22 = config2.logQueries) != null ? _a22 : false;
        this.logLevel = (_b2 = config2.logLevel) != null ? _b2 : "error";
        this.libraryLoader = loader;
        this.logEmitter = new import_events3.default();
        this.logEmitter.on("error", (e) => {
        });
        this.datasourceOverrides = config2.datasources ? this.convertDatasources(config2.datasources) : {};
        if (config2.enableDebugLogs) {
          this.logLevel = "debug";
        }
        this.libraryInstantiationPromise = this.instantiateLibrary();
        exitHooks.install();
        this.checkForTooManyEngines();
      }
      get beforeExitListener() {
        return exitHooks.getListener(this);
      }
      set beforeExitListener(listener) {
        exitHooks.setListener(this, listener);
      }
      checkForTooManyEngines() {
        if (engineInstanceCount === 10) {
          console.warn(`${import_chalk5.default.yellow("warn(prisma-client)")} There are already 10 instances of Prisma Client actively running.`);
        }
      }
      async transaction(action, headers, arg2) {
        var _a22, _b2, _c2, _d2, _e;
        await this.start();
        const headerStr = JSON.stringify(headers);
        let result;
        if (action === "start") {
          const jsonOptions = JSON.stringify({
            max_wait: (_a22 = arg2 == null ? void 0 : arg2.maxWait) != null ? _a22 : 2e3,
            timeout: (_b2 = arg2 == null ? void 0 : arg2.timeout) != null ? _b2 : 5e3
          });
          result = await ((_c2 = this.engine) == null ? void 0 : _c2.startTransaction(jsonOptions, headerStr));
        } else if (action === "commit") {
          result = await ((_d2 = this.engine) == null ? void 0 : _d2.commitTransaction(arg2.id, headerStr));
        } else if (action === "rollback") {
          result = await ((_e = this.engine) == null ? void 0 : _e.rollbackTransaction(arg2.id, headerStr));
        }
        const response = this.parseEngineResponse(result);
        if (response.error_code)
          throw response;
        return response;
      }
      async instantiateLibrary() {
        debug8("internalSetup");
        if (this.libraryInstantiationPromise) {
          return this.libraryInstantiationPromise;
        }
        await isNodeAPISupported();
        this.platform = await this.getPlatform();
        await this.loadEngine();
        this.version();
      }
      async getPlatform() {
        if (this.platform)
          return this.platform;
        const platform3 = await getPlatform();
        if (!knownPlatforms2.includes(platform3)) {
          throw new PrismaClientInitializationError(`Unknown ${import_chalk5.default.red("PRISMA_QUERY_ENGINE_LIBRARY")} ${import_chalk5.default.redBright.bold(platform3)}. Possible binaryTargets: ${import_chalk5.default.greenBright(knownPlatforms2.join(", "))} or a path to the query engine library.
You may have to run ${import_chalk5.default.greenBright("prisma generate")} for your changes to take effect.`, this.config.clientVersion);
        }
        return platform3;
      }
      parseEngineResponse(response) {
        if (!response) {
          throw new PrismaClientUnknownRequestError(`Response from the Engine was empty`, this.config.clientVersion);
        }
        try {
          const config2 = JSON.parse(response);
          return config2;
        } catch (err) {
          throw new PrismaClientUnknownRequestError(`Unable to JSON.parse response from engine`, this.config.clientVersion);
        }
      }
      convertDatasources(datasources) {
        const obj = /* @__PURE__ */ Object.create(null);
        for (const { name, url } of datasources) {
          obj[name] = url;
        }
        return obj;
      }
      async loadEngine() {
        var _a22;
        if (!this.engine) {
          if (!this.QueryEngineConstructor) {
            this.library = await this.libraryLoader.loadLibrary();
            this.QueryEngineConstructor = this.library.QueryEngine;
          }
          try {
            const weakThis = new WeakRef(this);
            this.engine = new this.QueryEngineConstructor({
              datamodel: this.datamodel,
              env: process.env,
              logQueries: (_a22 = this.config.logQueries) != null ? _a22 : false,
              ignoreEnvVarErrors: false,
              datasourceOverrides: this.datasourceOverrides,
              logLevel: this.logLevel,
              configDir: this.config.cwd
            }, (log4) => {
              var _a3;
              (_a3 = weakThis.deref()) == null ? void 0 : _a3.logger(log4);
            });
            engineInstanceCount++;
          } catch (_e) {
            const e = _e;
            const error2 = this.parseInitError(e.message);
            if (typeof error2 === "string") {
              throw e;
            } else {
              throw new PrismaClientInitializationError(error2.message, this.config.clientVersion, error2.error_code);
            }
          }
        }
      }
      logger(log4) {
        var _a22;
        const event = this.parseEngineResponse(log4);
        if (!event) {
          return;
        }
        if ("span" in event) {
          const tracingConfig = getTracingConfig(this);
          if (tracingConfig.enabled) {
            createSpan(event);
          }
          return;
        }
        event.level = (_a22 = event == null ? void 0 : event.level.toLowerCase()) != null ? _a22 : "unknown";
        if (isQueryEvent(event)) {
          this.logEmitter.emit("query", {
            timestamp: new Date(),
            query: event.query,
            params: event.params,
            duration: Number(event.duration_ms),
            target: event.module_path
          });
        } else if (isPanicEvent(event)) {
          this.loggerRustPanic = new PrismaClientRustPanicError(this.getErrorMessageWithLink(`${event.message}: ${event.reason} in ${event.file}:${event.line}:${event.column}`), this.config.clientVersion);
          this.logEmitter.emit("error", this.loggerRustPanic);
        } else {
          this.logEmitter.emit(event.level, {
            timestamp: new Date(),
            message: event.message,
            target: event.module_path
          });
        }
      }
      getErrorMessageWithLink(title) {
        var _a22;
        return getErrorMessageWithLink({
          platform: this.platform,
          title,
          version: this.config.clientVersion,
          engineVersion: (_a22 = this.versionInfo) == null ? void 0 : _a22.commit,
          database: this.config.activeProvider,
          query: this.lastQuery
        });
      }
      parseInitError(str) {
        try {
          const error2 = JSON.parse(str);
          return error2;
        } catch (e) {
        }
        return str;
      }
      parseRequestError(str) {
        try {
          const error2 = JSON.parse(str);
          return error2;
        } catch (e) {
        }
        return str;
      }
      on(event, listener) {
        if (event === "beforeExit") {
          this.beforeExitListener = listener;
        } else {
          this.logEmitter.on(event, listener);
        }
      }
      async start() {
        await this.libraryInstantiationPromise;
        await this.libraryStoppingPromise;
        if (this.libraryStartingPromise) {
          debug8(`library already starting, this.libraryStarted: ${this.libraryStarted}`);
          return this.libraryStartingPromise;
        }
        if (!this.libraryStarted) {
          this.libraryStartingPromise = new Promise((resolve, reject) => {
            var _a22;
            debug8("library starting");
            (_a22 = this.engine) == null ? void 0 : _a22.connect({ enableRawQueries: true }).then(() => {
              this.libraryStarted = true;
              debug8("library started");
              resolve();
            }).catch((err) => {
              const error2 = this.parseInitError(err.message);
              if (typeof error2 === "string") {
                reject(err);
              } else {
                reject(new PrismaClientInitializationError(error2.message, this.config.clientVersion, error2.error_code));
              }
            }).finally(() => {
              this.libraryStartingPromise = void 0;
            });
          });
          return this.libraryStartingPromise;
        }
      }
      async stop() {
        await this.libraryStartingPromise;
        await this.executingQueryPromise;
        if (this.libraryStoppingPromise) {
          debug8("library is already stopping");
          return this.libraryStoppingPromise;
        }
        if (this.libraryStarted) {
          this.libraryStoppingPromise = new Promise(async (resolve, reject) => {
            var _a22;
            try {
              await new Promise((r) => setTimeout(r, 5));
              debug8("library stopping");
              await ((_a22 = this.engine) == null ? void 0 : _a22.disconnect());
              this.libraryStarted = false;
              this.libraryStoppingPromise = void 0;
              debug8("library stopped");
              resolve();
            } catch (err) {
              reject(err);
            }
          });
          return this.libraryStoppingPromise;
        }
      }
      async getConfig() {
        await this.libraryInstantiationPromise;
        return this.library.getConfig({
          datamodel: this.datamodel,
          datasourceOverrides: this.datasourceOverrides,
          ignoreEnvVarErrors: true,
          env: process.env
        });
      }
      async getDmmf() {
        await this.libraryInstantiationPromise;
        return JSON.parse(await this.library.dmmf(this.datamodel));
      }
      version() {
        var _a22, _b2, _c2;
        this.versionInfo = (_a22 = this.library) == null ? void 0 : _a22.version();
        return (_c2 = (_b2 = this.versionInfo) == null ? void 0 : _b2.version) != null ? _c2 : "unknown";
      }
      debugPanic(message) {
        var _a22;
        return (_a22 = this.library) == null ? void 0 : _a22.debugPanic(message);
      }
      async request(query2, headers = {}, numTry = 1) {
        var _a22, _b2;
        debug8(`sending request, this.libraryStarted: ${this.libraryStarted}`);
        const request2 = { query: query2, variables: {} };
        const headerStr = JSON.stringify(headers);
        const queryStr = JSON.stringify(request2);
        try {
          await this.start();
          this.executingQueryPromise = (_a22 = this.engine) == null ? void 0 : _a22.query(queryStr, headerStr, headers.transactionId);
          this.lastQuery = queryStr;
          const data = this.parseEngineResponse(await this.executingQueryPromise);
          if (data.errors) {
            if (data.errors.length === 1) {
              throw this.buildQueryError(data.errors[0]);
            }
            throw new PrismaClientUnknownRequestError(JSON.stringify(data.errors), this.config.clientVersion);
          } else if (this.loggerRustPanic) {
            throw this.loggerRustPanic;
          }
          return { data, elapsed: 0 };
        } catch (e) {
          if (e instanceof PrismaClientInitializationError) {
            throw e;
          }
          if (e.code === "GenericFailure" && ((_b2 = e.message) == null ? void 0 : _b2.startsWith("PANIC:"))) {
            throw new PrismaClientRustPanicError(this.getErrorMessageWithLink(e.message), this.config.clientVersion);
          }
          const error2 = this.parseRequestError(e.message);
          if (typeof error2 === "string") {
            throw e;
          } else {
            throw new PrismaClientUnknownRequestError(`${error2.message}
${error2.backtrace}`, this.config.clientVersion);
          }
        }
      }
      async requestBatch(queries, headers = {}, transaction = false, numTry = 1) {
        debug8("requestBatch");
        const request2 = {
          batch: queries.map((query2) => ({ query: query2, variables: {} })),
          transaction
        };
        await this.start();
        this.lastQuery = JSON.stringify(request2);
        this.executingQueryPromise = this.engine.query(this.lastQuery, JSON.stringify(headers), headers.transactionId);
        const result = await this.executingQueryPromise;
        const data = this.parseEngineResponse(result);
        if (data.errors) {
          if (data.errors.length === 1) {
            throw this.buildQueryError(data.errors[0]);
          }
          throw new PrismaClientUnknownRequestError(JSON.stringify(data.errors), this.config.clientVersion);
        }
        const { batchResult, errors } = data;
        if (Array.isArray(batchResult)) {
          return batchResult.map((result2) => {
            var _a22;
            if (result2.errors) {
              return (_a22 = this.loggerRustPanic) != null ? _a22 : this.buildQueryError(data.errors[0]);
            }
            return {
              data: result2,
              elapsed: 0
            };
          });
        } else {
          if (errors && errors.length === 1) {
            throw new Error(errors[0].error);
          }
          throw new Error(JSON.stringify(data));
        }
      }
      buildQueryError(error2) {
        if (error2.user_facing_error.is_panic) {
          return new PrismaClientRustPanicError(this.getErrorMessageWithLink(error2.user_facing_error.message), this.config.clientVersion);
        }
        return prismaGraphQLToJSError(error2, this.config.clientVersion);
      }
      async metrics(options) {
        await this.start();
        const responseString = await this.engine.metrics(JSON.stringify(options));
        if (options.format === "prometheus") {
          return responseString;
        }
        return this.parseEngineResponse(responseString);
      }
      _hasPreviewFlag(feature) {
        var _a22;
        return !!((_a22 = this.config.previewFeatures) == null ? void 0 : _a22.includes(feature));
      }
    };
    __name(LibraryEngine, "LibraryEngine");
    var import_chalk6 = __toESM(require_source());
    var import_dotenv = __toESM(require_main2());
    var import_fs7 = __toESM(require("fs"));
    var import_path4 = __toESM(require("path"));
    function dotenvExpand(config2) {
      const environment = config2.ignoreProcessEnv ? {} : process.env;
      const interpolate = /* @__PURE__ */ __name((envValue) => {
        const matches = envValue.match(/(.?\${(?:[a-zA-Z0-9_]+)?})/g) || [];
        return matches.reduce(function(newEnv, match) {
          const parts = /(.?)\${([a-zA-Z0-9_]+)?}/g.exec(match);
          if (!parts) {
            return newEnv;
          }
          const prefix = parts[1];
          let value, replacePart;
          if (prefix === "\\") {
            replacePart = parts[0];
            value = replacePart.replace("\\$", "$");
          } else {
            const key = parts[2];
            replacePart = parts[0].substring(prefix.length);
            value = Object.hasOwnProperty.call(environment, key) ? environment[key] : config2.parsed[key] || "";
            value = interpolate(value);
          }
          return newEnv.replace(replacePart, value);
        }, envValue);
      }, "interpolate");
      for (const configKey in config2.parsed) {
        const value = Object.hasOwnProperty.call(environment, configKey) ? environment[configKey] : config2.parsed[configKey];
        config2.parsed[configKey] = interpolate(value);
      }
      for (const processKey in config2.parsed) {
        environment[processKey] = config2.parsed[processKey];
      }
      return config2;
    }
    __name(dotenvExpand, "dotenvExpand");
    var debug9 = src_default("prisma:tryLoadEnv");
    function tryLoadEnvs({
      rootEnvPath,
      schemaEnvPath
    }, opts = {
      conflictCheck: "none"
    }) {
      var _a22, _b2;
      const rootEnvInfo = loadEnv(rootEnvPath);
      if (opts.conflictCheck !== "none") {
        checkForConflicts(rootEnvInfo, schemaEnvPath, opts.conflictCheck);
      }
      let schemaEnvInfo = null;
      if (!pathsEqual(rootEnvInfo == null ? void 0 : rootEnvInfo.path, schemaEnvPath)) {
        schemaEnvInfo = loadEnv(schemaEnvPath);
      }
      if (!rootEnvInfo && !schemaEnvInfo) {
        debug9("No Environment variables loaded");
      }
      if (schemaEnvInfo == null ? void 0 : schemaEnvInfo.dotenvResult.error) {
        return console.error(import_chalk6.default.redBright.bold("Schema Env Error: ") + schemaEnvInfo.dotenvResult.error);
      }
      const messages = [rootEnvInfo == null ? void 0 : rootEnvInfo.message, schemaEnvInfo == null ? void 0 : schemaEnvInfo.message].filter(Boolean);
      return {
        message: messages.join("\n"),
        parsed: {
          ...(_a22 = rootEnvInfo == null ? void 0 : rootEnvInfo.dotenvResult) == null ? void 0 : _a22.parsed,
          ...(_b2 = schemaEnvInfo == null ? void 0 : schemaEnvInfo.dotenvResult) == null ? void 0 : _b2.parsed
        }
      };
    }
    __name(tryLoadEnvs, "tryLoadEnvs");
    function checkForConflicts(rootEnvInfo, envPath, type) {
      const parsedRootEnv = rootEnvInfo == null ? void 0 : rootEnvInfo.dotenvResult.parsed;
      const areNotTheSame = !pathsEqual(rootEnvInfo == null ? void 0 : rootEnvInfo.path, envPath);
      if (parsedRootEnv && envPath && areNotTheSame && import_fs7.default.existsSync(envPath)) {
        const envConfig = import_dotenv.default.parse(import_fs7.default.readFileSync(envPath));
        const conflicts = [];
        for (const k in envConfig) {
          if (parsedRootEnv[k] === envConfig[k]) {
            conflicts.push(k);
          }
        }
        if (conflicts.length > 0) {
          const relativeRootEnvPath = import_path4.default.relative(process.cwd(), rootEnvInfo.path);
          const relativeEnvPath = import_path4.default.relative(process.cwd(), envPath);
          if (type === "error") {
            const message = `There is a conflict between env var${conflicts.length > 1 ? "s" : ""} in ${import_chalk6.default.underline(relativeRootEnvPath)} and ${import_chalk6.default.underline(relativeEnvPath)}
Conflicting env vars:
${conflicts.map((conflict) => `  ${import_chalk6.default.bold(conflict)}`).join("\n")}

We suggest to move the contents of ${import_chalk6.default.underline(relativeEnvPath)} to ${import_chalk6.default.underline(relativeRootEnvPath)} to consolidate your env vars.
`;
            throw new Error(message);
          } else if (type === "warn") {
            const message = `Conflict for env var${conflicts.length > 1 ? "s" : ""} ${conflicts.map((c) => import_chalk6.default.bold(c)).join(", ")} in ${import_chalk6.default.underline(relativeRootEnvPath)} and ${import_chalk6.default.underline(relativeEnvPath)}
Env vars from ${import_chalk6.default.underline(relativeEnvPath)} overwrite the ones from ${import_chalk6.default.underline(relativeRootEnvPath)}
      `;
            console.warn(`${import_chalk6.default.yellow("warn(prisma)")} ${message}`);
          }
        }
      }
    }
    __name(checkForConflicts, "checkForConflicts");
    function loadEnv(envPath) {
      if (exists3(envPath)) {
        debug9(`Environment variables loaded from ${envPath}`);
        return {
          dotenvResult: dotenvExpand(import_dotenv.default.config({
            path: envPath,
            debug: process.env.DOTENV_CONFIG_DEBUG ? true : void 0
          })),
          message: import_chalk6.default.dim(`Environment variables loaded from ${import_path4.default.relative(process.cwd(), envPath)}`),
          path: envPath
        };
      } else {
        debug9(`Environment variables not found at ${envPath}`);
      }
      return null;
    }
    __name(loadEnv, "loadEnv");
    function pathsEqual(path1, path22) {
      return path1 && path22 && import_path4.default.resolve(path1) === import_path4.default.resolve(path22);
    }
    __name(pathsEqual, "pathsEqual");
    function exists3(p) {
      return Boolean(p && import_fs7.default.existsSync(p));
    }
    __name(exists3, "exists");
    var DEFAULT_CLIENT_ENGINE_TYPE = "library";
    function getClientEngineType(generatorConfig) {
      const engineTypeFromEnvVar = getEngineTypeFromEnvVar();
      if (engineTypeFromEnvVar)
        return engineTypeFromEnvVar;
      if ((generatorConfig == null ? void 0 : generatorConfig.config.engineType) === "library") {
        return "library";
      } else if ((generatorConfig == null ? void 0 : generatorConfig.config.engineType) === "binary") {
        return "binary";
      } else {
        return DEFAULT_CLIENT_ENGINE_TYPE;
      }
    }
    __name(getClientEngineType, "getClientEngineType");
    function getEngineTypeFromEnvVar() {
      const engineType = process.env.PRISMA_CLIENT_ENGINE_TYPE;
      if (engineType === "library") {
        return "library";
      } else if (engineType === "binary") {
        return "binary";
      } else {
        return void 0;
      }
    }
    __name(getEngineTypeFromEnvVar, "getEngineTypeFromEnvVar");
    var import_arg = __toESM(require_arg());
    var import_strip_indent = __toESM(require_strip_indent());
    function isError(result) {
      return result instanceof Error;
    }
    __name(isError, "isError");
    var featureFlagMap = {
      transactionApi: "transaction",
      aggregateApi: "aggregations"
    };
    function mapPreviewFeatures(features) {
      if (Array.isArray(features) && features.length > 0) {
        return features.map((f) => {
          var _a22;
          return (_a22 = featureFlagMap[f]) != null ? _a22 : f;
        });
      }
      return [];
    }
    __name(mapPreviewFeatures, "mapPreviewFeatures");
    var logger_exports = {};
    __export(logger_exports, {
      error: () => error,
      info: () => info,
      log: () => log3,
      query: () => query,
      should: () => should,
      tags: () => tags,
      warn: () => warn
    });
    var import_chalk7 = __toESM(require_source());
    var tags = {
      error: import_chalk7.default.red("prisma:error"),
      warn: import_chalk7.default.yellow("prisma:warn"),
      info: import_chalk7.default.cyan("prisma:info"),
      query: import_chalk7.default.blue("prisma:query")
    };
    var should = {
      warn: !process.env.PRISMA_DISABLE_WARNINGS
    };
    function log3(...data) {
      console.log(...data);
    }
    __name(log3, "log");
    function warn(message, ...optionalParams) {
      if (should.warn) {
        console.warn(`${tags.warn} ${message}`, ...optionalParams);
      }
    }
    __name(warn, "warn");
    function info(message, ...optionalParams) {
      console.info(`${tags.info} ${message}`, ...optionalParams);
    }
    __name(info, "info");
    function error(message, ...optionalParams) {
      console.error(`${tags.error} ${message}`, ...optionalParams);
    }
    __name(error, "error");
    function query(message, ...optionalParams) {
      console.log(`${tags.query} ${message}`, ...optionalParams);
    }
    __name(query, "query");
    function assertNever(arg2, errorMessage) {
      throw new Error(errorMessage);
    }
    __name(assertNever, "assertNever");
    var alreadyWarned = /* @__PURE__ */ new Set();
    var warnOnce = /* @__PURE__ */ __name((key, message, ...args) => {
      if (!alreadyWarned.has(key)) {
        alreadyWarned.add(key);
        warn(message, ...args);
      }
    }, "warnOnce");
    var import_async_hooks = require("async_hooks");
    var import_fs8 = __toESM(require("fs"));
    var import_path5 = __toESM(require("path"));
    var sqlTemplateTag = __toESM(require_dist());
    var import_pluralize = __toESM(require_pluralize());
    function externalToInternalDmmf(document2) {
      return {
        ...document2,
        mappings: getMappings(document2.mappings, document2.datamodel)
      };
    }
    __name(externalToInternalDmmf, "externalToInternalDmmf");
    function getMappings(mappings, datamodel) {
      const modelOperations = mappings.modelOperations.filter((mapping) => {
        const model = datamodel.models.find((m) => m.name === mapping.model);
        if (!model) {
          throw new Error(`Mapping without model ${mapping.model}`);
        }
        return model.fields.some((f) => f.kind !== "object");
      }).map((mapping) => ({
        model: mapping.model,
        plural: (0, import_pluralize.default)(lowerCase(mapping.model)),
        findUnique: mapping.findUnique || mapping.findSingle,
        findFirst: mapping.findFirst,
        findMany: mapping.findMany,
        create: mapping.createOne || mapping.createSingle || mapping.create,
        createMany: mapping.createMany,
        delete: mapping.deleteOne || mapping.deleteSingle || mapping.delete,
        update: mapping.updateOne || mapping.updateSingle || mapping.update,
        deleteMany: mapping.deleteMany,
        updateMany: mapping.updateMany,
        upsert: mapping.upsertOne || mapping.upsertSingle || mapping.upsert,
        aggregate: mapping.aggregate,
        groupBy: mapping.groupBy,
        findRaw: mapping.findRaw,
        aggregateRaw: mapping.aggregateRaw
      }));
      return {
        modelOperations,
        otherOperations: mappings.otherOperations
      };
    }
    __name(getMappings, "getMappings");
    function getPrismaClientDMMF(dmmf) {
      return externalToInternalDmmf(dmmf);
    }
    __name(getPrismaClientDMMF, "getPrismaClientDMMF");
    var TransactionTracer = class {
      constructor() {
        this.children = [];
      }
      setChild(child) {
        this.children.push(child);
      }
      appendChildren(span) {
        span.setAttribute("children", JSON.stringify(this.children));
      }
    };
    __name(TransactionTracer, "TransactionTracer");
    var clientOnlyActions = {
      findUniqueOrThrow: {
        wrappedAction: DMMF.ModelAction.findUnique
      },
      findFirstOrThrow: {
        wrappedAction: DMMF.ModelAction.findFirst
      }
    };
    function getDmmfActionName(name) {
      if (isClientOnlyAction(name)) {
        return clientOnlyActions[name].wrappedAction;
      }
      return name;
    }
    __name(getDmmfActionName, "getDmmfActionName");
    function isClientOnlyAction(action) {
      return Object.prototype.hasOwnProperty.call(clientOnlyActions, action);
    }
    __name(isClientOnlyAction, "isClientOnlyAction");
    var allClientModelActions = Object.keys(DMMF.ModelAction).concat(Object.keys(clientOnlyActions));
    function createPrismaPromise(callback) {
      let promise;
      const _callback = /* @__PURE__ */ __name((txId, lock, transactionTracer) => {
        try {
          return promise != null ? promise : promise = callback(txId, lock, transactionTracer);
        } catch (error2) {
          return Promise.reject(error2);
        }
      }, "_callback");
      return {
        then(onFulfilled, onRejected, txId, transactionTracer) {
          return _callback(txId, void 0, transactionTracer).then(onFulfilled, onRejected, txId);
        },
        catch(onRejected, txId, transactionTracer) {
          return _callback(txId, void 0, transactionTracer).catch(onRejected, txId);
        },
        finally(onFinally, txId, transactionTracer) {
          return _callback(txId, void 0, transactionTracer).finally(onFinally, txId);
        },
        requestTransaction(txId, lock, transactionTracer) {
          const promise2 = _callback(txId, lock, transactionTracer);
          if (promise2.requestTransaction) {
            return promise2.requestTransaction(txId, lock, transactionTracer);
          }
          return promise2;
        },
        [Symbol.toStringTag]: "PrismaPromise"
      };
    }
    __name(createPrismaPromise, "createPrismaPromise");
    function getCallSite(errorFormat) {
      if (errorFormat === "minimal") {
        return void 0;
      }
      return new Error().stack;
    }
    __name(getCallSite, "getCallSite");
    var aggregateMap = {
      _avg: true,
      _count: true,
      _sum: true,
      _min: true,
      _max: true
    };
    function desugarUserArgs(userArgs) {
      const _userArgs = desugarCountInUserArgs(userArgs);
      const userArgsEntries = Object.entries(_userArgs);
      return userArgsEntries.reduce((aggregateArgs, [key, value]) => {
        if (aggregateMap[key] !== void 0) {
          aggregateArgs["select"][key] = { select: value };
        } else {
          aggregateArgs[key] = value;
        }
        return aggregateArgs;
      }, { select: {} });
    }
    __name(desugarUserArgs, "desugarUserArgs");
    function desugarCountInUserArgs(userArgs) {
      if (typeof userArgs["_count"] === "boolean") {
        return { ...userArgs, _count: { _all: userArgs["_count"] } };
      }
      return userArgs;
    }
    __name(desugarCountInUserArgs, "desugarCountInUserArgs");
    function createUnpacker(userArgs) {
      return (data) => {
        if (typeof userArgs["_count"] === "boolean") {
          data["_count"] = data["_count"]["_all"];
        }
        return data;
      };
    }
    __name(createUnpacker, "createUnpacker");
    function aggregate(client, userArgs, modelAction) {
      const aggregateArgs = desugarUserArgs(userArgs != null ? userArgs : {});
      const aggregateUnpacker = createUnpacker(userArgs != null ? userArgs : {});
      return modelAction({
        action: "aggregate",
        unpacker: aggregateUnpacker
      })(aggregateArgs);
    }
    __name(aggregate, "aggregate");
    function count(client, userArgs, modelAction) {
      const { select, ..._userArgs } = userArgs != null ? userArgs : {};
      if (typeof select === "object") {
        return aggregate(client, { ..._userArgs, _count: select }, (p) => modelAction({ ...p, action: "count", unpacker: (data) => {
          var _a22;
          return (_a22 = p.unpacker) == null ? void 0 : _a22.call(p, data)["_count"];
        } }));
      } else {
        return aggregate(client, { ..._userArgs, _count: { _all: true } }, (p) => modelAction({ ...p, action: "count", unpacker: (data) => {
          var _a22;
          return (_a22 = p.unpacker) == null ? void 0 : _a22.call(p, data)["_count"]["_all"];
        } }));
      }
    }
    __name(count, "count");
    function desugarUserArgs2(userArgs) {
      const _userArgs = desugarUserArgs(userArgs);
      if (Array.isArray(userArgs["by"])) {
        for (const key of userArgs["by"]) {
          if (typeof key === "string") {
            _userArgs["select"][key] = true;
          }
        }
      }
      return _userArgs;
    }
    __name(desugarUserArgs2, "desugarUserArgs");
    function createUnpacker2(userArgs) {
      return (data) => {
        if (typeof userArgs["_count"] === "boolean") {
          data.forEach((row) => {
            row["_count"] = row["_count"]["_all"];
          });
        }
        return data;
      };
    }
    __name(createUnpacker2, "createUnpacker");
    function groupBy(client, userArgs, modelAction) {
      const groupByArgs = desugarUserArgs2(userArgs != null ? userArgs : {});
      const groupByUnpacker = createUnpacker2(userArgs != null ? userArgs : {});
      return modelAction({
        action: "groupBy",
        unpacker: groupByUnpacker
      })(groupByArgs);
    }
    __name(groupBy, "groupBy");
    function applyAggregates(client, action, modelAction) {
      if (action === "aggregate")
        return (userArgs) => aggregate(client, userArgs, modelAction);
      if (action === "count")
        return (userArgs) => count(client, userArgs, modelAction);
      if (action === "groupBy")
        return (userArgs) => groupBy(client, userArgs, modelAction);
      return void 0;
    }
    __name(applyAggregates, "applyAggregates");
    var import_chalk11 = __toESM(require_source());
    var import_indent_string3 = __toESM(require_indent_string());
    var import_strip_ansi3 = __toESM(require_strip_ansi());
    function isSpecificValue(val) {
      return val instanceof Buffer || val instanceof Date || val instanceof RegExp ? true : false;
    }
    __name(isSpecificValue, "isSpecificValue");
    function cloneSpecificValue(val) {
      if (val instanceof Buffer) {
        const x = Buffer.alloc ? Buffer.alloc(val.length) : new Buffer(val.length);
        val.copy(x);
        return x;
      } else if (val instanceof Date) {
        return new Date(val.getTime());
      } else if (val instanceof RegExp) {
        return new RegExp(val);
      } else {
        throw new Error("Unexpected situation");
      }
    }
    __name(cloneSpecificValue, "cloneSpecificValue");
    function deepCloneArray(arr) {
      const clone2 = [];
      arr.forEach(function(item, index) {
        if (typeof item === "object" && item !== null) {
          if (Array.isArray(item)) {
            clone2[index] = deepCloneArray(item);
          } else if (isSpecificValue(item)) {
            clone2[index] = cloneSpecificValue(item);
          } else {
            clone2[index] = deepExtend({}, item);
          }
        } else {
          clone2[index] = item;
        }
      });
      return clone2;
    }
    __name(deepCloneArray, "deepCloneArray");
    function safeGetProperty(object, property) {
      return property === "__proto__" ? void 0 : object[property];
    }
    __name(safeGetProperty, "safeGetProperty");
    var deepExtend = /* @__PURE__ */ __name(function(target, ...args) {
      if (!target || typeof target !== "object") {
        return false;
      }
      if (args.length === 0) {
        return target;
      }
      let val, src;
      for (const obj of args) {
        if (typeof obj !== "object" || obj === null || Array.isArray(obj)) {
          continue;
        }
        for (const key of Object.keys(obj)) {
          src = safeGetProperty(target, key);
          val = safeGetProperty(obj, key);
          if (val === target) {
            continue;
          } else if (typeof val !== "object" || val === null) {
            target[key] = val;
            continue;
          } else if (Array.isArray(val)) {
            target[key] = deepCloneArray(val);
            continue;
          } else if (isSpecificValue(val)) {
            target[key] = cloneSpecificValue(val);
            continue;
          } else if (typeof src !== "object" || src === null || Array.isArray(src)) {
            target[key] = deepExtend({}, val);
            continue;
          } else {
            target[key] = deepExtend(src, val);
            continue;
          }
        }
      }
      return target;
    }, "deepExtend");
    var keys = /* @__PURE__ */ __name((ks) => Array.isArray(ks) ? ks : ks.split("."), "keys");
    var deepGet = /* @__PURE__ */ __name((o, kp) => keys(kp).reduce((o2, k) => o2 && o2[k], o), "deepGet");
    var deepSet = /* @__PURE__ */ __name((o, kp, v) => keys(kp).reduceRight((v2, k, i, ks) => Object.assign({}, deepGet(o, ks.slice(0, i)), { [k]: v2 }), v), "deepSet");
    function filterObject(obj, cb) {
      if (!obj || typeof obj !== "object" || typeof obj.hasOwnProperty !== "function") {
        return obj;
      }
      const newObj = {};
      for (const key in obj) {
        const value = obj[key];
        if (Object.hasOwnProperty.call(obj, key) && cb(key, value)) {
          newObj[key] = value;
        }
      }
      return newObj;
    }
    __name(filterObject, "filterObject");
    function flatten(array) {
      return Array.prototype.concat.apply([], array);
    }
    __name(flatten, "flatten");
    function flatMap(array, callbackFn, thisArg) {
      return flatten(array.map(callbackFn, thisArg));
    }
    __name(flatMap, "flatMap");
    var notReallyObjects = {
      "[object Date]": true,
      "[object Uint8Array]": true,
      "[object Decimal]": true
    };
    function isObject2(value) {
      if (!value) {
        return false;
      }
      return typeof value === "object" && !notReallyObjects[Object.prototype.toString.call(value)];
    }
    __name(isObject2, "isObject");
    function omit2(object, path7) {
      const result = {};
      const paths = Array.isArray(path7) ? path7 : [path7];
      for (const key in object) {
        if (Object.hasOwnProperty.call(object, key) && !paths.includes(key)) {
          result[key] = object[key];
        }
      }
      return result;
    }
    __name(omit2, "omit");
    var import_chalk8 = __toESM(require_source());
    var import_strip_ansi2 = __toESM(require_strip_ansi());
    var isRegexp = require_is_regexp();
    var isObj = require_is_obj();
    var getOwnEnumPropSymbols = require_lib().default;
    var stringifyObject = /* @__PURE__ */ __name((input, options, pad) => {
      const seen = [];
      return (/* @__PURE__ */ __name(function stringifyObject2(input2, options2 = {}, pad2 = "", path7 = []) {
        options2.indent = options2.indent || "	";
        let tokens;
        if (options2.inlineCharacterLimit === void 0) {
          tokens = {
            newLine: "\n",
            newLineOrSpace: "\n",
            pad: pad2,
            indent: pad2 + options2.indent
          };
        } else {
          tokens = {
            newLine: "@@__STRINGIFY_OBJECT_NEW_LINE__@@",
            newLineOrSpace: "@@__STRINGIFY_OBJECT_NEW_LINE_OR_SPACE__@@",
            pad: "@@__STRINGIFY_OBJECT_PAD__@@",
            indent: "@@__STRINGIFY_OBJECT_INDENT__@@"
          };
        }
        const expandWhiteSpace = /* @__PURE__ */ __name((string) => {
          if (options2.inlineCharacterLimit === void 0) {
            return string;
          }
          const oneLined = string.replace(new RegExp(tokens.newLine, "g"), "").replace(new RegExp(tokens.newLineOrSpace, "g"), " ").replace(new RegExp(tokens.pad + "|" + tokens.indent, "g"), "");
          if (oneLined.length <= options2.inlineCharacterLimit) {
            return oneLined;
          }
          return string.replace(new RegExp(tokens.newLine + "|" + tokens.newLineOrSpace, "g"), "\n").replace(new RegExp(tokens.pad, "g"), pad2).replace(new RegExp(tokens.indent, "g"), pad2 + options2.indent);
        }, "expandWhiteSpace");
        if (seen.indexOf(input2) !== -1) {
          return '"[Circular]"';
        }
        if (Buffer.isBuffer(input2)) {
          return `Buffer(${Buffer.length})`;
        }
        if (input2 === null || input2 === void 0 || typeof input2 === "number" || typeof input2 === "boolean" || typeof input2 === "function" || typeof input2 === "symbol" || input2 instanceof ObjectEnumValue || isRegexp(input2)) {
          return String(input2);
        }
        if (input2 instanceof Date) {
          return `new Date('${input2.toISOString()}')`;
        }
        if (Array.isArray(input2)) {
          if (input2.length === 0) {
            return "[]";
          }
          seen.push(input2);
          const ret = "[" + tokens.newLine + input2.map((el, i) => {
            const eol = input2.length - 1 === i ? tokens.newLine : "," + tokens.newLineOrSpace;
            let value = stringifyObject2(el, options2, pad2 + options2.indent, [...path7, i]);
            if (options2.transformValue) {
              value = options2.transformValue(input2, i, value);
            }
            return tokens.indent + value + eol;
          }).join("") + tokens.pad + "]";
          seen.pop();
          return expandWhiteSpace(ret);
        }
        if (isObj(input2)) {
          let objKeys = Object.keys(input2).concat(getOwnEnumPropSymbols(input2));
          if (options2.filter) {
            objKeys = objKeys.filter((el) => options2.filter(input2, el));
          }
          if (objKeys.length === 0) {
            return "{}";
          }
          seen.push(input2);
          const ret = "{" + tokens.newLine + objKeys.map((el, i) => {
            const eol = objKeys.length - 1 === i ? tokens.newLine : "," + tokens.newLineOrSpace;
            const isSymbol = typeof el === "symbol";
            const isClassic = !isSymbol && /^[a-z$_][a-z$_0-9]*$/i.test(el);
            const key = isSymbol || isClassic ? el : stringifyObject2(el, options2, void 0, [...path7, el]);
            let value = stringifyObject2(input2[el], options2, pad2 + options2.indent, [...path7, el]);
            if (options2.transformValue) {
              value = options2.transformValue(input2, el, value);
            }
            let line = tokens.indent + String(key) + ": " + value + eol;
            if (options2.transformLine) {
              line = options2.transformLine({
                obj: input2,
                indent: tokens.indent,
                key,
                stringifiedValue: value,
                value: input2[el],
                eol,
                originalLine: line,
                path: path7.concat(key)
              });
            }
            return line;
          }).join("") + tokens.pad + "}";
          seen.pop();
          return expandWhiteSpace(ret);
        }
        input2 = String(input2).replace(/[\r\n]/g, (x) => x === "\n" ? "\\n" : "\\r");
        if (options2.singleQuotes === false) {
          input2 = input2.replace(/"/g, '\\"');
          return `"${input2}"`;
        }
        input2 = input2.replace(/\\?'/g, "\\'");
        return `'${input2}'`;
      }, "stringifyObject"))(input, options, pad);
    }, "stringifyObject");
    var stringifyObject_default = stringifyObject;
    var DIM_TOKEN = "@@__DIM_POINTER__@@";
    function printJsonWithErrors({ ast, keyPaths, valuePaths, missingItems }) {
      let obj = ast;
      for (const { path: path7, type } of missingItems) {
        obj = deepSet(obj, path7, type);
      }
      return stringifyObject_default(obj, {
        indent: "  ",
        transformLine: ({ indent: indent4, key, value, stringifiedValue, eol, path: path7 }) => {
          const dottedPath = path7.join(".");
          const keyError = keyPaths.includes(dottedPath);
          const valueError = valuePaths.includes(dottedPath);
          const missingItem = missingItems.find((item) => item.path === dottedPath);
          let valueStr = stringifiedValue;
          if (missingItem) {
            if (typeof value === "string") {
              valueStr = valueStr.slice(1, valueStr.length - 1);
            }
            const isRequiredStr = missingItem.isRequired ? "" : "?";
            const prefix = missingItem.isRequired ? "+" : "?";
            const color = missingItem.isRequired ? import_chalk8.default.greenBright : import_chalk8.default.green;
            let output = color(prefixLines(key + isRequiredStr + ": " + valueStr + eol, indent4, prefix));
            if (!missingItem.isRequired) {
              output = import_chalk8.default.dim(output);
            }
            return output;
          } else {
            const isOnMissingItemPath = missingItems.some((item) => dottedPath.startsWith(item.path));
            const isOptional = key[key.length - 2] === "?";
            if (isOptional) {
              key = key.slice(1, key.length - 1);
            }
            if (isOptional && typeof value === "object" && value !== null) {
              valueStr = valueStr.split("\n").map((line, index, arr) => index === arr.length - 1 ? line + DIM_TOKEN : line).join("\n");
            }
            if (isOnMissingItemPath && typeof value === "string") {
              valueStr = valueStr.slice(1, valueStr.length - 1);
              if (!isOptional) {
                valueStr = import_chalk8.default.bold(valueStr);
              }
            }
            if ((typeof value !== "object" || value === null) && !valueError && !isOnMissingItemPath) {
              valueStr = import_chalk8.default.dim(valueStr);
            }
            const keyStr = keyError ? import_chalk8.default.redBright(key) : key;
            valueStr = valueError ? import_chalk8.default.redBright(valueStr) : valueStr;
            let output = indent4 + keyStr + ": " + valueStr + (isOnMissingItemPath ? eol : import_chalk8.default.dim(eol));
            if (keyError || valueError) {
              const lines = output.split("\n");
              const keyLength = String(key).length;
              const keyScribbles = keyError ? import_chalk8.default.redBright("~".repeat(keyLength)) : " ".repeat(keyLength);
              const valueLength = valueError ? getValueLength(indent4, key, value, stringifiedValue) : 0;
              const hideValueScribbles = valueError && isRenderedAsObject(value);
              const valueScribbles = valueError ? "  " + import_chalk8.default.redBright("~".repeat(valueLength)) : "";
              if (keyScribbles && keyScribbles.length > 0 && !hideValueScribbles) {
                lines.splice(1, 0, indent4 + keyScribbles + valueScribbles);
              }
              if (keyScribbles && keyScribbles.length > 0 && hideValueScribbles) {
                lines.splice(lines.length - 1, 0, indent4.slice(0, indent4.length - 2) + valueScribbles);
              }
              output = lines.join("\n");
            }
            return output;
          }
        }
      });
    }
    __name(printJsonWithErrors, "printJsonWithErrors");
    function getValueLength(indent4, key, value, stringifiedValue) {
      if (value === null) {
        return 4;
      }
      if (typeof value === "string") {
        return value.length + 2;
      }
      if (isRenderedAsObject(value)) {
        return Math.abs(getLongestLine(`${key}: ${(0, import_strip_ansi2.default)(stringifiedValue)}`) - indent4.length);
      }
      return String(value).length;
    }
    __name(getValueLength, "getValueLength");
    function isRenderedAsObject(value) {
      return typeof value === "object" && value !== null && !(value instanceof ObjectEnumValue);
    }
    __name(isRenderedAsObject, "isRenderedAsObject");
    function getLongestLine(str) {
      return str.split("\n").reduce((max2, curr) => curr.length > max2 ? curr.length : max2, 0);
    }
    __name(getLongestLine, "getLongestLine");
    function prefixLines(str, indent4, prefix) {
      return str.split("\n").map((line, index, arr) => index === 0 ? prefix + indent4.slice(1) + line : index < arr.length - 1 ? prefix + line.slice(1) : line).map((line) => {
        return (0, import_strip_ansi2.default)(line).includes(DIM_TOKEN) ? import_chalk8.default.dim(line.replace(DIM_TOKEN, "")) : line.includes("?") ? import_chalk8.default.dim(line) : line;
      }).join("\n");
    }
    __name(prefixLines, "prefixLines");
    var import_chalk10 = __toESM(require_source());
    var UNKNOWN_FUNCTION = "<unknown>";
    function parse(stackString) {
      var lines = stackString.split("\n");
      return lines.reduce(function(stack, line) {
        var parseResult = parseChrome(line) || parseWinjs(line) || parseGecko(line) || parseNode(line) || parseJSC(line);
        if (parseResult) {
          stack.push(parseResult);
        }
        return stack;
      }, []);
    }
    __name(parse, "parse");
    var chromeRe = /^\s*at (.*?) ?\(((?:file|https?|blob|chrome-extension|native|eval|webpack|<anonymous>|\/|[a-z]:\\|\\\\).*?)(?::(\d+))?(?::(\d+))?\)?\s*$/i;
    var chromeEvalRe = /\((\S*)(?::(\d+))(?::(\d+))\)/;
    function parseChrome(line) {
      var parts = chromeRe.exec(line);
      if (!parts) {
        return null;
      }
      var isNative = parts[2] && parts[2].indexOf("native") === 0;
      var isEval = parts[2] && parts[2].indexOf("eval") === 0;
      var submatch = chromeEvalRe.exec(parts[2]);
      if (isEval && submatch != null) {
        parts[2] = submatch[1];
        parts[3] = submatch[2];
        parts[4] = submatch[3];
      }
      return {
        file: !isNative ? parts[2] : null,
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: isNative ? [parts[2]] : [],
        lineNumber: parts[3] ? +parts[3] : null,
        column: parts[4] ? +parts[4] : null
      };
    }
    __name(parseChrome, "parseChrome");
    var winjsRe = /^\s*at (?:((?:\[object object\])?.+) )?\(?((?:file|ms-appx|https?|webpack|blob):.*?):(\d+)(?::(\d+))?\)?\s*$/i;
    function parseWinjs(line) {
      var parts = winjsRe.exec(line);
      if (!parts) {
        return null;
      }
      return {
        file: parts[2],
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: [],
        lineNumber: +parts[3],
        column: parts[4] ? +parts[4] : null
      };
    }
    __name(parseWinjs, "parseWinjs");
    var geckoRe = /^\s*(.*?)(?:\((.*?)\))?(?:^|@)((?:file|https?|blob|chrome|webpack|resource|\[native).*?|[^@]*bundle)(?::(\d+))?(?::(\d+))?\s*$/i;
    var geckoEvalRe = /(\S+) line (\d+)(?: > eval line \d+)* > eval/i;
    function parseGecko(line) {
      var parts = geckoRe.exec(line);
      if (!parts) {
        return null;
      }
      var isEval = parts[3] && parts[3].indexOf(" > eval") > -1;
      var submatch = geckoEvalRe.exec(parts[3]);
      if (isEval && submatch != null) {
        parts[3] = submatch[1];
        parts[4] = submatch[2];
        parts[5] = null;
      }
      return {
        file: parts[3],
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: parts[2] ? parts[2].split(",") : [],
        lineNumber: parts[4] ? +parts[4] : null,
        column: parts[5] ? +parts[5] : null
      };
    }
    __name(parseGecko, "parseGecko");
    var javaScriptCoreRe = /^\s*(?:([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i;
    function parseJSC(line) {
      var parts = javaScriptCoreRe.exec(line);
      if (!parts) {
        return null;
      }
      return {
        file: parts[3],
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: [],
        lineNumber: +parts[4],
        column: parts[5] ? +parts[5] : null
      };
    }
    __name(parseJSC, "parseJSC");
    var nodeRe = /^\s*at (?:((?:\[object object\])?[^\\/]+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i;
    function parseNode(line) {
      var parts = nodeRe.exec(line);
      if (!parts) {
        return null;
      }
      return {
        file: parts[2],
        methodName: parts[1] || UNKNOWN_FUNCTION,
        arguments: [],
        lineNumber: +parts[3],
        column: parts[4] ? +parts[4] : null
      };
    }
    __name(parseNode, "parseNode");
    var import_chalk9 = __toESM(require_source());
    var orange = import_chalk9.default.rgb(246, 145, 95);
    var darkBrightBlue = import_chalk9.default.rgb(107, 139, 140);
    var blue = import_chalk9.default.cyan;
    var brightBlue = import_chalk9.default.rgb(127, 155, 155);
    var identity = /* @__PURE__ */ __name((str) => str, "identity");
    var theme = {
      keyword: blue,
      entity: blue,
      value: brightBlue,
      punctuation: darkBrightBlue,
      directive: blue,
      function: blue,
      variable: brightBlue,
      string: import_chalk9.default.greenBright,
      boolean: orange,
      number: import_chalk9.default.cyan,
      comment: import_chalk9.default.grey
    };
    var _self = {};
    var uniqueId = 0;
    var Prism = {
      manual: _self.Prism && _self.Prism.manual,
      disableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,
      util: {
        encode: function(tokens) {
          if (tokens instanceof Token) {
            const anyTokens = tokens;
            return new Token(anyTokens.type, Prism.util.encode(anyTokens.content), anyTokens.alias);
          } else if (Array.isArray(tokens)) {
            return tokens.map(Prism.util.encode);
          } else {
            return tokens.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/\u00a0/g, " ");
          }
        },
        type: function(o) {
          return Object.prototype.toString.call(o).slice(8, -1);
        },
        objId: function(obj) {
          if (!obj["__id"]) {
            Object.defineProperty(obj, "__id", { value: ++uniqueId });
          }
          return obj["__id"];
        },
        clone: /* @__PURE__ */ __name(function deepClone(o, visited) {
          let clone2, id, type = Prism.util.type(o);
          visited = visited || {};
          switch (type) {
            case "Object":
              id = Prism.util.objId(o);
              if (visited[id]) {
                return visited[id];
              }
              clone2 = {};
              visited[id] = clone2;
              for (const key in o) {
                if (o.hasOwnProperty(key)) {
                  clone2[key] = deepClone(o[key], visited);
                }
              }
              return clone2;
            case "Array":
              id = Prism.util.objId(o);
              if (visited[id]) {
                return visited[id];
              }
              clone2 = [];
              visited[id] = clone2;
              o.forEach(function(v, i) {
                clone2[i] = deepClone(v, visited);
              });
              return clone2;
            default:
              return o;
          }
        }, "deepClone")
      },
      languages: {
        extend: function(id, redef) {
          const lang = Prism.util.clone(Prism.languages[id]);
          for (const key in redef) {
            lang[key] = redef[key];
          }
          return lang;
        },
        insertBefore: function(inside, before, insert, root) {
          root = root || Prism.languages;
          const grammar = root[inside];
          const ret = {};
          for (const token in grammar) {
            if (grammar.hasOwnProperty(token)) {
              if (token == before) {
                for (const newToken in insert) {
                  if (insert.hasOwnProperty(newToken)) {
                    ret[newToken] = insert[newToken];
                  }
                }
              }
              if (!insert.hasOwnProperty(token)) {
                ret[token] = grammar[token];
              }
            }
          }
          const old = root[inside];
          root[inside] = ret;
          Prism.languages.DFS(Prism.languages, function(key, value) {
            if (value === old && key != inside) {
              this[key] = ret;
            }
          });
          return ret;
        },
        DFS: /* @__PURE__ */ __name(function DFS(o, callback, type, visited) {
          visited = visited || {};
          const objId = Prism.util.objId;
          for (const i in o) {
            if (o.hasOwnProperty(i)) {
              callback.call(o, i, o[i], type || i);
              const property = o[i], propertyType = Prism.util.type(property);
              if (propertyType === "Object" && !visited[objId(property)]) {
                visited[objId(property)] = true;
                DFS(property, callback, null, visited);
              } else if (propertyType === "Array" && !visited[objId(property)]) {
                visited[objId(property)] = true;
                DFS(property, callback, i, visited);
              }
            }
          }
        }, "DFS")
      },
      plugins: {},
      highlight: function(text, grammar, language) {
        const env2 = {
          code: text,
          grammar,
          language
        };
        Prism.hooks.run("before-tokenize", env2);
        env2.tokens = Prism.tokenize(env2.code, env2.grammar);
        Prism.hooks.run("after-tokenize", env2);
        return Token.stringify(Prism.util.encode(env2.tokens), env2.language);
      },
      matchGrammar: function(text, strarr, grammar, index, startPos, oneshot, target) {
        for (const token in grammar) {
          if (!grammar.hasOwnProperty(token) || !grammar[token]) {
            continue;
          }
          if (token == target) {
            return;
          }
          let patterns = grammar[token];
          patterns = Prism.util.type(patterns) === "Array" ? patterns : [patterns];
          for (let j = 0; j < patterns.length; ++j) {
            let pattern = patterns[j], inside = pattern.inside, lookbehind = !!pattern.lookbehind, greedy = !!pattern.greedy, lookbehindLength = 0, alias = pattern.alias;
            if (greedy && !pattern.pattern.global) {
              const flags = pattern.pattern.toString().match(/[imuy]*$/)[0];
              pattern.pattern = RegExp(pattern.pattern.source, flags + "g");
            }
            pattern = pattern.pattern || pattern;
            for (let i = index, pos = startPos; i < strarr.length; pos += strarr[i].length, ++i) {
              let str = strarr[i];
              if (strarr.length > text.length) {
                return;
              }
              if (str instanceof Token) {
                continue;
              }
              if (greedy && i != strarr.length - 1) {
                pattern.lastIndex = pos;
                var match = pattern.exec(text);
                if (!match) {
                  break;
                }
                var from = match.index + (lookbehind ? match[1].length : 0), to = match.index + match[0].length, k = i, p = pos;
                for (let len = strarr.length; k < len && (p < to || !strarr[k].type && !strarr[k - 1].greedy); ++k) {
                  p += strarr[k].length;
                  if (from >= p) {
                    ++i;
                    pos = p;
                  }
                }
                if (strarr[i] instanceof Token) {
                  continue;
                }
                delNum = k - i;
                str = text.slice(pos, p);
                match.index -= pos;
              } else {
                pattern.lastIndex = 0;
                var match = pattern.exec(str), delNum = 1;
              }
              if (!match) {
                if (oneshot) {
                  break;
                }
                continue;
              }
              if (lookbehind) {
                lookbehindLength = match[1] ? match[1].length : 0;
              }
              var from = match.index + lookbehindLength, match = match[0].slice(lookbehindLength), to = from + match.length, before = str.slice(0, from), after = str.slice(to);
              const args = [i, delNum];
              if (before) {
                ++i;
                pos += before.length;
                args.push(before);
              }
              const wrapped = new Token(token, inside ? Prism.tokenize(match, inside) : match, alias, match, greedy);
              args.push(wrapped);
              if (after) {
                args.push(after);
              }
              Array.prototype.splice.apply(strarr, args);
              if (delNum != 1)
                Prism.matchGrammar(text, strarr, grammar, i, pos, true, token);
              if (oneshot)
                break;
            }
          }
        }
      },
      tokenize: function(text, grammar) {
        const strarr = [text];
        const rest = grammar.rest;
        if (rest) {
          for (const token in rest) {
            grammar[token] = rest[token];
          }
          delete grammar.rest;
        }
        Prism.matchGrammar(text, strarr, grammar, 0, 0, false);
        return strarr;
      },
      hooks: {
        all: {},
        add: function(name, callback) {
          const hooks = Prism.hooks.all;
          hooks[name] = hooks[name] || [];
          hooks[name].push(callback);
        },
        run: function(name, env2) {
          const callbacks = Prism.hooks.all[name];
          if (!callbacks || !callbacks.length) {
            return;
          }
          for (var i = 0, callback; callback = callbacks[i++]; ) {
            callback(env2);
          }
        }
      },
      Token
    };
    Prism.languages.clike = {
      comment: [
        {
          pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
          lookbehind: true
        },
        {
          pattern: /(^|[^\\:])\/\/.*/,
          lookbehind: true,
          greedy: true
        }
      ],
      string: {
        pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
        greedy: true
      },
      "class-name": {
        pattern: /((?:\b(?:class|interface|extends|implements|trait|instanceof|new)\s+)|(?:catch\s+\())[\w.\\]+/i,
        lookbehind: true,
        inside: {
          punctuation: /[.\\]/
        }
      },
      keyword: /\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\b/,
      boolean: /\b(?:true|false)\b/,
      function: /\w+(?=\()/,
      number: /\b0x[\da-f]+\b|(?:\b\d+\.?\d*|\B\.\d+)(?:e[+-]?\d+)?/i,
      operator: /--?|\+\+?|!=?=?|<=?|>=?|==?=?|&&?|\|\|?|\?|\*|\/|~|\^|%/,
      punctuation: /[{}[\];(),.:]/
    };
    Prism.languages.javascript = Prism.languages.extend("clike", {
      "class-name": [
        Prism.languages.clike["class-name"],
        {
          pattern: /(^|[^$\w\xA0-\uFFFF])[_$A-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\.(?:prototype|constructor))/,
          lookbehind: true
        }
      ],
      keyword: [
        {
          pattern: /((?:^|})\s*)(?:catch|finally)\b/,
          lookbehind: true
        },
        {
          pattern: /(^|[^.])\b(?:as|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
          lookbehind: true
        }
      ],
      number: /\b(?:(?:0[xX](?:[\dA-Fa-f](?:_[\dA-Fa-f])?)+|0[bB](?:[01](?:_[01])?)+|0[oO](?:[0-7](?:_[0-7])?)+)n?|(?:\d(?:_\d)?)+n|NaN|Infinity)\b|(?:\b(?:\d(?:_\d)?)+\.?(?:\d(?:_\d)?)*|\B\.(?:\d(?:_\d)?)+)(?:[Ee][+-]?(?:\d(?:_\d)?)+)?/,
      function: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
      operator: /-[-=]?|\+[+=]?|!=?=?|<<?=?|>>?>?=?|=(?:==?|>)?|&[&=]?|\|[|=]?|\*\*?=?|\/=?|~|\^=?|%=?|\?|\.{3}/
    });
    Prism.languages.javascript["class-name"][0].pattern = /(\b(?:class|interface|extends|implements|instanceof|new)\s+)[\w.\\]+/;
    Prism.languages.insertBefore("javascript", "keyword", {
      regex: {
        pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s])\s*)\/(\[(?:[^\]\\\r\n]|\\.)*]|\\.|[^/\\\[\r\n])+\/[gimyus]{0,6}(?=\s*($|[\r\n,.;})\]]))/,
        lookbehind: true,
        greedy: true
      },
      "function-variable": {
        pattern: /[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|[_$a-zA-Z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)\s*=>))/,
        alias: "function"
      },
      parameter: [
        {
          pattern: /(function(?:\s+[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*)?\s*\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\))/,
          lookbehind: true,
          inside: Prism.languages.javascript
        },
        {
          pattern: /[_$a-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*(?=\s*=>)/i,
          inside: Prism.languages.javascript
        },
        {
          pattern: /(\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*=>)/,
          lookbehind: true,
          inside: Prism.languages.javascript
        },
        {
          pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:[_$A-Za-z\xA0-\uFFFF][$\w\xA0-\uFFFF]*\s*)\(\s*)(?!\s)(?:[^()]|\([^()]*\))+?(?=\s*\)\s*\{)/,
          lookbehind: true,
          inside: Prism.languages.javascript
        }
      ],
      constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/
    });
    if (Prism.languages.markup) {
      Prism.languages.markup.tag.addInlined("script", "javascript");
    }
    Prism.languages.js = Prism.languages.javascript;
    Prism.languages.typescript = Prism.languages.extend("javascript", {
      keyword: /\b(?:abstract|as|async|await|break|case|catch|class|const|constructor|continue|debugger|declare|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|is|keyof|let|module|namespace|new|null|of|package|private|protected|public|readonly|return|require|set|static|super|switch|this|throw|try|type|typeof|var|void|while|with|yield)\b/,
      builtin: /\b(?:string|Function|any|number|boolean|Array|symbol|console|Promise|unknown|never)\b/
    });
    Prism.languages.ts = Prism.languages.typescript;
    function Token(type, content, alias, matchedStr, greedy) {
      this.type = type;
      this.content = content;
      this.alias = alias;
      this.length = (matchedStr || "").length | 0;
      this.greedy = !!greedy;
    }
    __name(Token, "Token");
    Token.stringify = function(o, language) {
      if (typeof o == "string") {
        return o;
      }
      if (Array.isArray(o)) {
        return o.map(function(element) {
          return Token.stringify(element, language);
        }).join("");
      }
      return getColorForSyntaxKind(o.type)(o.content);
    };
    function getColorForSyntaxKind(syntaxKind) {
      return theme[syntaxKind] || identity;
    }
    __name(getColorForSyntaxKind, "getColorForSyntaxKind");
    function highlightTS(str) {
      return highlight(str, Prism.languages.javascript);
    }
    __name(highlightTS, "highlightTS");
    function highlight(str, grammar) {
      const tokens = Prism.tokenize(str, grammar);
      return tokens.map((t) => Token.stringify(t)).join("");
    }
    __name(highlight, "highlight");
    var import_strip_indent2 = __toESM(require_strip_indent());
    function dedent2(str) {
      return (0, import_strip_indent2.default)(str);
    }
    __name(dedent2, "dedent");
    function renderN(n, max2) {
      const wantedLetters = String(max2).length;
      const hasLetters = String(n).length;
      if (hasLetters >= wantedLetters) {
        return String(n);
      }
      return " ".repeat(wantedLetters - hasLetters) + n;
    }
    __name(renderN, "renderN");
    function getIndent(line) {
      let spaceCount = 0;
      for (let i = 0; i < line.length; i++) {
        if (line.charAt(i) !== " ") {
          return spaceCount;
        }
        spaceCount++;
      }
      return spaceCount;
    }
    __name(getIndent, "getIndent");
    function parseStack({
      callsite,
      renderPathRelative,
      originalMethod,
      onUs,
      showColors,
      isValidationError
    }) {
      const params = {
        callsiteStr: ":",
        prevLines: "\n",
        functionName: `prisma.${originalMethod}()`,
        afterLines: "",
        indentValue: 0,
        lastErrorHeight: 20
      };
      if (!callsite || typeof window !== "undefined") {
        return params;
      }
      const stack = parse(callsite);
      const trace2 = stack.find((t) => {
        return t.file && t.file !== "<anonymous>" && !t.file.includes("@prisma") && !t.file.includes("getPrismaClient") && !t.file.startsWith("internal/") && !t.methodName.includes("new ") && !t.methodName.includes("getCallSite") && !t.methodName.includes("Proxy.") && t.methodName.split(".").length < 4;
      });
      if (process.env.NODE_ENV !== "production" && trace2 && trace2.file && trace2.lineNumber && trace2.column) {
        const lineNumber = trace2.lineNumber;
        const printedFileName = renderPathRelative ? require("path").relative(process.cwd(), trace2.file) : trace2.file;
        const start = Math.max(0, lineNumber - 4);
        const fs10 = require("fs");
        const exists4 = fs10.existsSync(trace2.file);
        if (exists4) {
          const file = fs10.readFileSync(trace2.file, "utf-8");
          const slicedFile = file.split("\n").slice(start, lineNumber).map((line) => {
            if (line.endsWith("\r")) {
              return line.slice(0, -1);
            }
            return line;
          }).join("\n");
          const lines = dedent2(slicedFile).split("\n");
          const theLine = lines[lines.length - 1];
          if (!theLine || theLine.trim() === "") {
            params.callsiteStr = ":";
          } else {
            const prismaClientRegex = /(\S+(create|createMany|updateMany|deleteMany|update|delete|findMany|findUnique|findFirst|findUniqueOrThrow|findFirstOrThrow)\()/;
            const match = prismaClientRegex.exec(theLine);
            if (!match) {
              return params;
            }
            params.functionName = `${match[1]})`;
            params.callsiteStr = ` in
${import_chalk10.default.underline(`${printedFileName}:${trace2.lineNumber}:${trace2.column}`)}`;
            const slicePoint = theLine.indexOf("{");
            const linesToHighlight = lines.map((l, i, all) => !onUs && i === all.length - 1 ? l.slice(0, slicePoint > -1 ? slicePoint : l.length - 1) : l).join("\n");
            const highlightedLines = showColors ? highlightTS(linesToHighlight).split("\n") : linesToHighlight.split("\n");
            params.prevLines = "\n" + highlightedLines.map((l, i) => import_chalk10.default.grey(renderN(i + start + 1, lineNumber + start + 1) + " ") + import_chalk10.default.reset() + l).map((l, i, arr) => i === arr.length - 1 ? `${import_chalk10.default.red.bold("\u2192")} ${import_chalk10.default.dim(l)}` : import_chalk10.default.dim("  " + l)).join("\n");
            if (!match && !isValidationError) {
              params.prevLines += "\n\n";
            }
            params.afterLines = ")";
            params.indentValue = String(lineNumber + start + 1).length + getIndent(theLine) + 1 + (match ? 2 : 0);
          }
        }
      }
      return params;
    }
    __name(parseStack, "parseStack");
    var printStack = /* @__PURE__ */ __name((args) => {
      const { callsiteStr, prevLines, functionName, afterLines, indentValue, lastErrorHeight } = parseStack(args);
      const introText = args.onUs ? import_chalk10.default.red(`Oops, an unknown error occured! This is ${import_chalk10.default.bold("on us")}, you did nothing wrong.
It occured in the ${import_chalk10.default.bold(`\`${functionName}\``)} invocation${callsiteStr}`) : import_chalk10.default.red(`Invalid ${import_chalk10.default.bold(`\`${functionName}\``)} invocation${callsiteStr}`);
      const stackStr = `
${introText}
${prevLines}${import_chalk10.default.reset()}`;
      return { indent: indentValue, stack: stackStr, afterLines, lastErrorHeight };
    }, "printStack");
    var tab = 2;
    var Document = class {
      constructor(type, children) {
        this.type = type;
        this.children = children;
        this.printFieldError = /* @__PURE__ */ __name(({ error: error2 }, missingItems, minimal) => {
          if (error2.type === "emptySelect") {
            const additional = minimal ? "" : ` Available options are listed in ${import_chalk11.default.greenBright.dim("green")}.`;
            return `The ${import_chalk11.default.redBright("`select`")} statement for type ${import_chalk11.default.bold(getOutputTypeName(error2.field.outputType.type))} must not be empty.${additional}`;
          }
          if (error2.type === "emptyInclude") {
            if (missingItems.length === 0) {
              return `${import_chalk11.default.bold(getOutputTypeName(error2.field.outputType.type))} does not have any relation and therefore can't have an ${import_chalk11.default.redBright("`include`")} statement.`;
            }
            const additional = minimal ? "" : ` Available options are listed in ${import_chalk11.default.greenBright.dim("green")}.`;
            return `The ${import_chalk11.default.redBright("`include`")} statement for type ${import_chalk11.default.bold(getOutputTypeName(error2.field.outputType.type))} must not be empty.${additional}`;
          }
          if (error2.type === "noTrueSelect") {
            return `The ${import_chalk11.default.redBright("`select`")} statement for type ${import_chalk11.default.bold(getOutputTypeName(error2.field.outputType.type))} needs ${import_chalk11.default.bold("at least one truthy value")}.`;
          }
          if (error2.type === "includeAndSelect") {
            return `Please ${import_chalk11.default.bold("either")} use ${import_chalk11.default.greenBright("`include`")} or ${import_chalk11.default.greenBright("`select`")}, but ${import_chalk11.default.redBright("not both")} at the same time.`;
          }
          if (error2.type === "invalidFieldName") {
            const statement = error2.isInclude ? "include" : "select";
            const wording = error2.isIncludeScalar ? "Invalid scalar" : "Unknown";
            const additional = minimal ? "" : error2.isInclude && missingItems.length === 0 ? `
This model has no relations, so you can't use ${import_chalk11.default.redBright("include")} with it.` : ` Available options are listed in ${import_chalk11.default.greenBright.dim("green")}.`;
            let str = `${wording} field ${import_chalk11.default.redBright(`\`${error2.providedName}\``)} for ${import_chalk11.default.bold(statement)} statement on model ${import_chalk11.default.bold.white(error2.modelName)}.${additional}`;
            if (error2.didYouMean) {
              str += ` Did you mean ${import_chalk11.default.greenBright(`\`${error2.didYouMean}\``)}?`;
            }
            if (error2.isIncludeScalar) {
              str += `
Note, that ${import_chalk11.default.bold("include")} statements only accept relation fields.`;
            }
            return str;
          }
          if (error2.type === "invalidFieldType") {
            const str = `Invalid value ${import_chalk11.default.redBright(`${stringifyObject_default(error2.providedValue)}`)} of type ${import_chalk11.default.redBright(getGraphQLType(error2.providedValue, void 0))} for field ${import_chalk11.default.bold(`${error2.fieldName}`)} on model ${import_chalk11.default.bold.white(error2.modelName)}. Expected either ${import_chalk11.default.greenBright("true")} or ${import_chalk11.default.greenBright("false")}.`;
            return str;
          }
          return void 0;
        }, "printFieldError");
        this.printArgError = /* @__PURE__ */ __name(({ error: error2, path: path7, id }, hasMissingItems, minimal) => {
          if (error2.type === "invalidName") {
            let str = `Unknown arg ${import_chalk11.default.redBright(`\`${error2.providedName}\``)} in ${import_chalk11.default.bold(path7.join("."))} for type ${import_chalk11.default.bold(error2.outputType ? error2.outputType.name : getInputTypeName(error2.originalType))}.`;
            if (error2.didYouMeanField) {
              str += `
\u2192 Did you forget to wrap it with \`${import_chalk11.default.greenBright("select")}\`? ${import_chalk11.default.dim("e.g. " + import_chalk11.default.greenBright(`{ select: { ${error2.providedName}: ${error2.providedValue} } }`))}`;
            } else if (error2.didYouMeanArg) {
              str += ` Did you mean \`${import_chalk11.default.greenBright(error2.didYouMeanArg)}\`?`;
              if (!hasMissingItems && !minimal) {
                str += ` ${import_chalk11.default.dim("Available args:")}
` + stringifyInputType(error2.originalType, true);
              }
            } else {
              if (error2.originalType.fields.length === 0) {
                str += ` The field ${import_chalk11.default.bold(error2.originalType.name)} has no arguments.`;
              } else if (!hasMissingItems && !minimal) {
                str += ` Available args:

` + stringifyInputType(error2.originalType, true);
              }
            }
            return str;
          }
          if (error2.type === "invalidType") {
            let valueStr = stringifyObject_default(error2.providedValue, { indent: "  " });
            const multilineValue = valueStr.split("\n").length > 1;
            if (multilineValue) {
              valueStr = `
${valueStr}
`;
            }
            if (error2.requiredType.bestFittingType.location === "enumTypes") {
              return `Argument ${import_chalk11.default.bold(error2.argName)}: Provided value ${import_chalk11.default.redBright(valueStr)}${multilineValue ? "" : " "}of type ${import_chalk11.default.redBright(getGraphQLType(error2.providedValue))} on ${import_chalk11.default.bold(`prisma.${this.children[0].name}`)} is not a ${import_chalk11.default.greenBright(wrapWithList(stringifyGraphQLType(error2.requiredType.bestFittingType.type), error2.requiredType.bestFittingType.isList))}.
\u2192 Possible values: ${error2.requiredType.bestFittingType.type.values.map((v) => import_chalk11.default.greenBright(`${stringifyGraphQLType(error2.requiredType.bestFittingType.type)}.${v}`)).join(", ")}`;
            }
            let typeStr = ".";
            if (isInputArgType(error2.requiredType.bestFittingType.type)) {
              typeStr = ":\n" + stringifyInputType(error2.requiredType.bestFittingType.type);
            }
            let expected = `${error2.requiredType.inputType.map((t) => import_chalk11.default.greenBright(wrapWithList(stringifyGraphQLType(t.type), error2.requiredType.bestFittingType.isList))).join(" or ")}${typeStr}`;
            const inputType = error2.requiredType.inputType.length === 2 && error2.requiredType.inputType.find((t) => isInputArgType(t.type)) || null;
            if (inputType) {
              expected += `
` + stringifyInputType(inputType.type, true);
            }
            return `Argument ${import_chalk11.default.bold(error2.argName)}: Got invalid value ${import_chalk11.default.redBright(valueStr)}${multilineValue ? "" : " "}on ${import_chalk11.default.bold(`prisma.${this.children[0].name}`)}. Provided ${import_chalk11.default.redBright(getGraphQLType(error2.providedValue))}, expected ${expected}`;
          }
          if (error2.type === "invalidNullArg") {
            const forStr = path7.length === 1 && path7[0] === error2.name ? "" : ` for ${import_chalk11.default.bold(`${path7.join(".")}`)}`;
            const undefinedTip = ` Please use ${import_chalk11.default.bold.greenBright("undefined")} instead.`;
            return `Argument ${import_chalk11.default.greenBright(error2.name)}${forStr} must not be ${import_chalk11.default.bold("null")}.${undefinedTip}`;
          }
          if (error2.type === "missingArg") {
            const forStr = path7.length === 1 && path7[0] === error2.missingName ? "" : ` for ${import_chalk11.default.bold(`${path7.join(".")}`)}`;
            return `Argument ${import_chalk11.default.greenBright(error2.missingName)}${forStr} is missing.`;
          }
          if (error2.type === "atLeastOne") {
            const additional = minimal ? "" : ` Available args are listed in ${import_chalk11.default.dim.green("green")}.`;
            return `Argument ${import_chalk11.default.bold(path7.join("."))} of type ${import_chalk11.default.bold(error2.inputType.name)} needs ${import_chalk11.default.greenBright("at least one")} argument.${additional}`;
          }
          if (error2.type === "atMostOne") {
            const additional = minimal ? "" : ` Please choose one. ${import_chalk11.default.dim("Available args:")} 
${stringifyInputType(error2.inputType, true)}`;
            return `Argument ${import_chalk11.default.bold(path7.join("."))} of type ${import_chalk11.default.bold(error2.inputType.name)} needs ${import_chalk11.default.greenBright("exactly one")} argument, but you provided ${error2.providedKeys.map((key) => import_chalk11.default.redBright(key)).join(" and ")}.${additional}`;
          }
          return void 0;
        }, "printArgError");
        this.type = type;
        this.children = children;
      }
      get [Symbol.toStringTag]() {
        return "Document";
      }
      toString() {
        return `${this.type} {
${(0, import_indent_string3.default)(this.children.map(String).join("\n"), tab)}
}`;
      }
      validate(select, isTopLevelQuery = false, originalMethod, errorFormat, validationCallsite) {
        var _a22;
        if (!select) {
          select = {};
        }
        const invalidChildren = this.children.filter((child) => child.hasInvalidChild || child.hasInvalidArg);
        if (invalidChildren.length === 0) {
          return;
        }
        const fieldErrors = [];
        const argErrors = [];
        const prefix = select && select.select ? "select" : select.include ? "include" : void 0;
        for (const child of invalidChildren) {
          const errors = child.collectErrors(prefix);
          fieldErrors.push(...errors.fieldErrors.map((e) => ({
            ...e,
            path: isTopLevelQuery ? e.path : e.path.slice(1)
          })));
          argErrors.push(...errors.argErrors.map((e) => ({
            ...e,
            path: isTopLevelQuery ? e.path : e.path.slice(1)
          })));
        }
        const topLevelQueryName = this.children[0].name;
        const queryName = isTopLevelQuery ? this.type : topLevelQueryName;
        const keyPaths = [];
        const valuePaths = [];
        const missingItems = [];
        for (const fieldError of fieldErrors) {
          const path7 = this.normalizePath(fieldError.path, select).join(".");
          if (fieldError.error.type === "invalidFieldName") {
            keyPaths.push(path7);
            const fieldType = fieldError.error.outputType;
            const { isInclude } = fieldError.error;
            fieldType.fields.filter((field) => isInclude ? field.outputType.location === "outputObjectTypes" : true).forEach((field) => {
              const splittedPath = path7.split(".");
              missingItems.push({
                path: `${splittedPath.slice(0, splittedPath.length - 1).join(".")}.${field.name}`,
                type: "true",
                isRequired: false
              });
            });
          } else if (fieldError.error.type === "includeAndSelect") {
            keyPaths.push("select");
            keyPaths.push("include");
          } else {
            valuePaths.push(path7);
          }
          if (fieldError.error.type === "emptySelect" || fieldError.error.type === "noTrueSelect" || fieldError.error.type === "emptyInclude") {
            const selectPathArray = this.normalizePath(fieldError.path, select);
            const selectPath = selectPathArray.slice(0, selectPathArray.length - 1).join(".");
            const fieldType = fieldError.error.field.outputType.type;
            (_a22 = fieldType.fields) == null ? void 0 : _a22.filter((field) => fieldError.error.type === "emptyInclude" ? field.outputType.location === "outputObjectTypes" : true).forEach((field) => {
              missingItems.push({
                path: `${selectPath}.${field.name}`,
                type: "true",
                isRequired: false
              });
            });
          }
        }
        for (const argError of argErrors) {
          const path7 = this.normalizePath(argError.path, select).join(".");
          if (argError.error.type === "invalidName") {
            keyPaths.push(path7);
          } else if (argError.error.type !== "missingArg" && argError.error.type !== "atLeastOne") {
            valuePaths.push(path7);
          } else if (argError.error.type === "missingArg") {
            const type = argError.error.missingArg.inputTypes.length === 1 ? argError.error.missingArg.inputTypes[0].type : argError.error.missingArg.inputTypes.map((t) => {
              const inputTypeName = getInputTypeName(t.type);
              if (inputTypeName === "Null") {
                return "null";
              }
              if (t.isList) {
                return inputTypeName + "[]";
              }
              return inputTypeName;
            }).join(" | ");
            missingItems.push({
              path: path7,
              type: inputTypeToJson(type, true, path7.split("where.").length === 2),
              isRequired: argError.error.missingArg.isRequired
            });
          }
        }
        const renderErrorStr = /* @__PURE__ */ __name((callsite) => {
          const hasRequiredMissingArgsErrors = argErrors.some((e) => e.error.type === "missingArg" && e.error.missingArg.isRequired);
          const hasOptionalMissingArgsErrors = Boolean(argErrors.find((e) => e.error.type === "missingArg" && !e.error.missingArg.isRequired));
          const hasMissingArgsErrors = hasOptionalMissingArgsErrors || hasRequiredMissingArgsErrors;
          let missingArgsLegend = "";
          if (hasRequiredMissingArgsErrors) {
            missingArgsLegend += `
${import_chalk11.default.dim("Note: Lines with ")}${import_chalk11.default.reset.greenBright("+")} ${import_chalk11.default.dim("are required")}`;
          }
          if (hasOptionalMissingArgsErrors) {
            if (missingArgsLegend.length === 0) {
              missingArgsLegend = "\n";
            }
            if (hasRequiredMissingArgsErrors) {
              missingArgsLegend += import_chalk11.default.dim(`, lines with ${import_chalk11.default.green("?")} are optional`);
            } else {
              missingArgsLegend += import_chalk11.default.dim(`Note: Lines with ${import_chalk11.default.green("?")} are optional`);
            }
            missingArgsLegend += import_chalk11.default.dim(".");
          }
          const relevantArgErrors = argErrors.filter((e) => e.error.type !== "missingArg" || e.error.missingArg.isRequired);
          let errorMessages = relevantArgErrors.map((e) => this.printArgError(e, hasMissingArgsErrors, errorFormat === "minimal")).join("\n");
          errorMessages += `
${fieldErrors.map((e) => this.printFieldError(e, missingItems, errorFormat === "minimal")).join("\n")}`;
          if (errorFormat === "minimal") {
            return (0, import_strip_ansi3.default)(errorMessages);
          }
          const {
            stack,
            indent: indentValue,
            afterLines
          } = printStack({
            callsite,
            originalMethod: originalMethod || queryName,
            showColors: errorFormat && errorFormat === "pretty",
            isValidationError: true
          });
          let printJsonArgs = {
            ast: isTopLevelQuery ? { [topLevelQueryName]: select } : select,
            keyPaths,
            valuePaths,
            missingItems
          };
          if (originalMethod == null ? void 0 : originalMethod.endsWith("aggregate")) {
            printJsonArgs = transformAggregatePrintJsonArgs(printJsonArgs);
          }
          const errorStr = `${stack}${(0, import_indent_string3.default)(printJsonWithErrors(printJsonArgs), indentValue).slice(indentValue)}${import_chalk11.default.dim(afterLines)}

${errorMessages}${missingArgsLegend}
`;
          if (process.env.NO_COLOR || errorFormat === "colorless") {
            return (0, import_strip_ansi3.default)(errorStr);
          }
          return errorStr;
        }, "renderErrorStr");
        const error2 = new PrismaClientValidationError(renderErrorStr(validationCallsite));
        if (process.env.NODE_ENV !== "production") {
          Object.defineProperty(error2, "render", {
            get: () => renderErrorStr,
            enumerable: false
          });
        }
        throw error2;
      }
      normalizePath(inputPath, select) {
        const path7 = inputPath.slice();
        const newPath = [];
        let key;
        let pointer = select;
        while ((key = path7.shift()) !== void 0) {
          if (!Array.isArray(pointer) && key === 0) {
            continue;
          }
          if (key === "select") {
            if (!pointer[key]) {
              pointer = pointer.include;
            } else {
              pointer = pointer[key];
            }
          } else if (pointer && pointer[key]) {
            pointer = pointer[key];
          }
          newPath.push(key);
        }
        return newPath;
      }
    };
    __name(Document, "Document");
    var PrismaClientValidationError = class extends Error {
      get [Symbol.toStringTag]() {
        return "PrismaClientValidationError";
      }
    };
    __name(PrismaClientValidationError, "PrismaClientValidationError");
    var PrismaClientConstructorValidationError = class extends Error {
      constructor(message) {
        super(message + `
Read more at https://pris.ly/d/client-constructor`);
      }
      get [Symbol.toStringTag]() {
        return "PrismaClientConstructorValidationError";
      }
    };
    __name(PrismaClientConstructorValidationError, "PrismaClientConstructorValidationError");
    var Field = class {
      constructor({ name, args, children, error: error2, schemaField }) {
        this.name = name;
        this.args = args;
        this.children = children;
        this.error = error2;
        this.schemaField = schemaField;
        this.hasInvalidChild = children ? children.some((child) => Boolean(child.error || child.hasInvalidArg || child.hasInvalidChild)) : false;
        this.hasInvalidArg = args ? args.hasInvalidArg : false;
      }
      get [Symbol.toStringTag]() {
        return "Field";
      }
      toString() {
        let str = this.name;
        if (this.error) {
          return str + " # INVALID_FIELD";
        }
        if (this.args && this.args.args && this.args.args.length > 0) {
          if (this.args.args.length === 1) {
            str += `(${this.args.toString()})`;
          } else {
            str += `(
${(0, import_indent_string3.default)(this.args.toString(), tab)}
)`;
          }
        }
        if (this.children) {
          str += ` {
${(0, import_indent_string3.default)(this.children.map(String).join("\n"), tab)}
}`;
        }
        return str;
      }
      collectErrors(prefix = "select") {
        const fieldErrors = [];
        const argErrors = [];
        if (this.error) {
          fieldErrors.push({
            path: [this.name],
            error: this.error
          });
        }
        if (this.children) {
          for (const child of this.children) {
            const errors = child.collectErrors(prefix);
            fieldErrors.push(...errors.fieldErrors.map((e) => ({
              ...e,
              path: [this.name, prefix, ...e.path]
            })));
            argErrors.push(...errors.argErrors.map((e) => ({
              ...e,
              path: [this.name, prefix, ...e.path]
            })));
          }
        }
        if (this.args) {
          argErrors.push(...this.args.collectErrors().map((e) => ({ ...e, path: [this.name, ...e.path] })));
        }
        return {
          fieldErrors,
          argErrors
        };
      }
    };
    __name(Field, "Field");
    var Args = class {
      constructor(args = []) {
        this.args = args;
        this.hasInvalidArg = args ? args.some((arg2) => Boolean(arg2.hasError)) : false;
      }
      get [Symbol.toStringTag]() {
        return "Args";
      }
      toString() {
        if (this.args.length === 0) {
          return "";
        }
        return `${this.args.map((arg2) => arg2.toString()).filter((a) => a).join("\n")}`;
      }
      collectErrors() {
        if (!this.hasInvalidArg) {
          return [];
        }
        return flatMap(this.args, (arg2) => arg2.collectErrors());
      }
    };
    __name(Args, "Args");
    function stringify(value, inputType) {
      if (Buffer.isBuffer(value)) {
        return JSON.stringify(value.toString("base64"));
      }
      if (Object.prototype.toString.call(value) === "[object BigInt]") {
        return value.toString();
      }
      if (typeof (inputType == null ? void 0 : inputType.type) === "string" && inputType.type === "Json") {
        if (value === null) {
          return "null";
        }
        if (value && value.values && value.__prismaRawParamaters__) {
          return JSON.stringify(value.values);
        }
        if ((inputType == null ? void 0 : inputType.isList) && Array.isArray(value)) {
          return JSON.stringify(value.map((o) => JSON.stringify(o)));
        }
        return JSON.stringify(JSON.stringify(value));
      }
      if (value === void 0) {
        return null;
      }
      if (value === null) {
        return "null";
      }
      if (decimal_default.isDecimal(value) || (inputType == null ? void 0 : inputType.type) === "Decimal" && isDecimalJsLike(value)) {
        return stringifyDecimalJsLike(value);
      }
      if ((inputType == null ? void 0 : inputType.location) === "enumTypes" && typeof value === "string") {
        if (Array.isArray(value)) {
          return `[${value.join(", ")}]`;
        }
        return value;
      }
      return JSON.stringify(value, null, 2);
    }
    __name(stringify, "stringify");
    var Arg2 = class {
      constructor({ key, value, isEnum = false, error: error2, schemaArg, inputType }) {
        this.inputType = inputType;
        this.key = key;
        this.value = value instanceof ObjectEnumValue ? value._getName() : value;
        this.isEnum = isEnum;
        this.error = error2;
        this.schemaArg = schemaArg;
        this.isNullable = (schemaArg == null ? void 0 : schemaArg.inputTypes.reduce((isNullable) => isNullable && schemaArg.isNullable, true)) || false;
        this.hasError = Boolean(error2) || (value instanceof Args ? value.hasInvalidArg : false) || Array.isArray(value) && value.some((v) => v instanceof Args ? v.hasInvalidArg : false);
      }
      get [Symbol.toStringTag]() {
        return "Arg";
      }
      _toString(value, key) {
        var _a22;
        if (typeof value === "undefined") {
          return void 0;
        }
        if (value instanceof Args) {
          return `${key}: {
${(0, import_indent_string3.default)(value.toString(), 2)}
}`;
        }
        if (Array.isArray(value)) {
          if (((_a22 = this.inputType) == null ? void 0 : _a22.type) === "Json") {
            return `${key}: ${stringify(value, this.inputType)}`;
          }
          const isScalar = !value.some((v) => typeof v === "object");
          return `${key}: [${isScalar ? "" : "\n"}${(0, import_indent_string3.default)(value.map((nestedValue) => {
            if (nestedValue instanceof Args) {
              return `{
${(0, import_indent_string3.default)(nestedValue.toString(), tab)}
}`;
            }
            return stringify(nestedValue, this.inputType);
          }).join(`,${isScalar ? " " : "\n"}`), isScalar ? 0 : tab)}${isScalar ? "" : "\n"}]`;
        }
        return `${key}: ${stringify(value, this.inputType)}`;
      }
      toString() {
        return this._toString(this.value, this.key);
      }
      collectErrors() {
        var _a22;
        if (!this.hasError) {
          return [];
        }
        const errors = [];
        if (this.error) {
          const id = typeof ((_a22 = this.inputType) == null ? void 0 : _a22.type) === "object" ? `${this.inputType.type.name}${this.inputType.isList ? "[]" : ""}` : void 0;
          errors.push({
            error: this.error,
            path: [this.key],
            id
          });
        }
        if (Array.isArray(this.value)) {
          errors.push(...flatMap(this.value, (val, index) => {
            if (!(val == null ? void 0 : val.collectErrors)) {
              return [];
            }
            return val.collectErrors().map((e) => {
              return { ...e, path: [this.key, index, ...e.path] };
            });
          }));
        }
        if (this.value instanceof Args) {
          errors.push(...this.value.collectErrors().map((e) => ({ ...e, path: [this.key, ...e.path] })));
        }
        return errors;
      }
    };
    __name(Arg2, "Arg");
    function makeDocument({ dmmf, rootTypeName, rootField, select }) {
      if (!select) {
        select = {};
      }
      const rootType = rootTypeName === "query" ? dmmf.queryType : dmmf.mutationType;
      const fakeRootField = {
        args: [],
        outputType: {
          isList: false,
          type: rootType,
          location: "outputObjectTypes"
        },
        name: rootTypeName
      };
      const children = selectionToFields(dmmf, { [rootField]: select }, fakeRootField, [rootTypeName]);
      return new Document(rootTypeName, children);
    }
    __name(makeDocument, "makeDocument");
    function transformDocument(document2) {
      return document2;
    }
    __name(transformDocument, "transformDocument");
    function selectionToFields(dmmf, selection, schemaField, path7) {
      const outputType = schemaField.outputType.type;
      return Object.entries(selection).reduce((acc, [name, value]) => {
        const field = outputType.fieldMap ? outputType.fieldMap[name] : outputType.fields.find((f) => f.name === name);
        if (!field) {
          acc.push(new Field({
            name,
            children: [],
            error: {
              type: "invalidFieldName",
              modelName: outputType.name,
              providedName: name,
              didYouMean: getSuggestion(name, outputType.fields.map((f) => f.name)),
              outputType
            }
          }));
          return acc;
        }
        if (typeof value !== "boolean" && field.outputType.location === "scalar" && field.name !== "executeRaw" && field.name !== "queryRaw" && field.name !== "runCommandRaw" && outputType.name !== "Query" && !name.startsWith("aggregate") && field.name !== "count") {
          acc.push(new Field({
            name,
            children: [],
            error: {
              type: "invalidFieldType",
              modelName: outputType.name,
              fieldName: name,
              providedValue: value
            }
          }));
          return acc;
        }
        if (value === false) {
          return acc;
        }
        const transformedField = {
          name: field.name,
          fields: field.args,
          constraints: {
            minNumFields: null,
            maxNumFields: null
          }
        };
        const argsWithoutIncludeAndSelect = typeof value === "object" ? omit2(value, ["include", "select"]) : void 0;
        const args = argsWithoutIncludeAndSelect ? objectToArgs(argsWithoutIncludeAndSelect, transformedField, [], typeof field === "string" ? void 0 : field.outputType.type) : void 0;
        const isRelation = field.outputType.location === "outputObjectTypes";
        if (value) {
          if (value.select && value.include) {
            acc.push(new Field({
              name,
              children: [
                new Field({
                  name: "include",
                  args: new Args(),
                  error: {
                    type: "includeAndSelect",
                    field
                  }
                })
              ]
            }));
          } else if (value.include) {
            const keys2 = Object.keys(value.include);
            if (keys2.length === 0) {
              acc.push(new Field({
                name,
                children: [
                  new Field({
                    name: "include",
                    args: new Args(),
                    error: {
                      type: "emptyInclude",
                      field
                    }
                  })
                ]
              }));
              return acc;
            }
            if (field.outputType.location === "outputObjectTypes") {
              const fieldOutputType = field.outputType.type;
              const allowedKeys = fieldOutputType.fields.filter((f) => f.outputType.location === "outputObjectTypes").map((f) => f.name);
              const invalidKeys = keys2.filter((key) => !allowedKeys.includes(key));
              if (invalidKeys.length > 0) {
                acc.push(...invalidKeys.map((invalidKey) => new Field({
                  name: invalidKey,
                  children: [
                    new Field({
                      name: invalidKey,
                      args: new Args(),
                      error: {
                        type: "invalidFieldName",
                        modelName: fieldOutputType.name,
                        outputType: fieldOutputType,
                        providedName: invalidKey,
                        didYouMean: getSuggestion(invalidKey, allowedKeys) || void 0,
                        isInclude: true,
                        isIncludeScalar: fieldOutputType.fields.some((f) => f.name === invalidKey)
                      }
                    })
                  ]
                })));
                return acc;
              }
            }
          } else if (value.select) {
            const values = Object.values(value.select);
            if (values.length === 0) {
              acc.push(new Field({
                name,
                children: [
                  new Field({
                    name: "select",
                    args: new Args(),
                    error: {
                      type: "emptySelect",
                      field
                    }
                  })
                ]
              }));
              return acc;
            }
            const truthyValues = values.filter((v) => v);
            if (truthyValues.length === 0) {
              acc.push(new Field({
                name,
                children: [
                  new Field({
                    name: "select",
                    args: new Args(),
                    error: {
                      type: "noTrueSelect",
                      field
                    }
                  })
                ]
              }));
              return acc;
            }
          }
        }
        const defaultSelection = isRelation ? getDefaultSelection(dmmf, field.outputType.type) : null;
        let select = defaultSelection;
        if (value) {
          if (value.select) {
            select = value.select;
          } else if (value.include) {
            select = deepExtend(defaultSelection, value.include);
          } else if (value.by && Array.isArray(value.by) && field.outputType.namespace === "prisma" && field.outputType.location === "outputObjectTypes" && isGroupByOutputName(field.outputType.type.name)) {
            select = byToSelect(value.by);
          }
        }
        const children = select !== false && isRelation ? selectionToFields(dmmf, select, field, [...path7, name]) : void 0;
        acc.push(new Field({ name, args, children, schemaField: field }));
        return acc;
      }, []);
    }
    __name(selectionToFields, "selectionToFields");
    function byToSelect(by) {
      const obj = /* @__PURE__ */ Object.create(null);
      for (const b of by) {
        obj[b] = true;
      }
      return obj;
    }
    __name(byToSelect, "byToSelect");
    function getDefaultSelection(dmmf, outputType) {
      const acc = /* @__PURE__ */ Object.create(null);
      for (const f of outputType.fields) {
        if (dmmf.typeMap[f.outputType.type.name] !== void 0) {
          acc[f.name] = true;
        }
        if (f.outputType.location === "scalar" || f.outputType.location === "enumTypes") {
          acc[f.name] = true;
        }
      }
      return acc;
    }
    __name(getDefaultSelection, "getDefaultSelection");
    function getInvalidTypeArg(key, value, arg2, bestFittingType) {
      const arrg = new Arg2({
        key,
        value,
        isEnum: bestFittingType.location === "enumTypes",
        inputType: bestFittingType,
        error: {
          type: "invalidType",
          providedValue: value,
          argName: key,
          requiredType: {
            inputType: arg2.inputTypes,
            bestFittingType
          }
        }
      });
      return arrg;
    }
    __name(getInvalidTypeArg, "getInvalidTypeArg");
    function hasCorrectScalarType(value, arg2, inputType) {
      const { type, isList } = inputType;
      const expectedType = wrapWithList(stringifyGraphQLType(type), isList);
      const graphQLType = getGraphQLType(value, inputType);
      if (graphQLType === expectedType) {
        return true;
      }
      if (isList && graphQLType === "List<>") {
        return true;
      }
      if (expectedType === "Json" && graphQLType !== "Symbol" && !(value instanceof ObjectEnumValue)) {
        return true;
      }
      if (graphQLType === "Int" && expectedType === "BigInt") {
        return true;
      }
      if (graphQLType === "List<Int>" && expectedType === "List<BigInt>") {
        return true;
      }
      if (graphQLType === "List<BigInt | Int>" && expectedType === "List<BigInt>") {
        return true;
      }
      if (graphQLType === "List<Int | BigInt>" && expectedType === "List<BigInt>") {
        return true;
      }
      if ((graphQLType === "Int" || graphQLType === "Float") && expectedType === "Decimal") {
        return true;
      }
      if (isValidDecimalListInput(graphQLType, value) && expectedType === "List<Decimal>") {
        return true;
      }
      if (graphQLType === "DateTime" && expectedType === "String") {
        return true;
      }
      if (graphQLType === "List<DateTime>" && expectedType === "List<String>") {
        return true;
      }
      if (graphQLType === "UUID" && expectedType === "String") {
        return true;
      }
      if (graphQLType === "List<UUID>" && expectedType === "List<String>") {
        return true;
      }
      if (graphQLType === "String" && expectedType === "ID") {
        return true;
      }
      if (graphQLType === "List<String>" && expectedType === "List<ID>") {
        return true;
      }
      if (graphQLType === "List<String>" && expectedType === "List<Json>") {
        return true;
      }
      if (expectedType === "List<String>" && (graphQLType === "List<String | UUID>" || graphQLType === "List<UUID | String>")) {
        return true;
      }
      if (graphQLType === "Int" && expectedType === "Float") {
        return true;
      }
      if (graphQLType === "List<Int>" && expectedType === "List<Float>") {
        return true;
      }
      if (graphQLType === "Int" && expectedType === "Long") {
        return true;
      }
      if (graphQLType === "List<Int>" && expectedType === "List<Long>") {
        return true;
      }
      if (graphQLType === "String" && expectedType === "Decimal" && isDecimalString(value)) {
        return true;
      }
      if (value === null) {
        return true;
      }
      return false;
    }
    __name(hasCorrectScalarType, "hasCorrectScalarType");
    var cleanObject = /* @__PURE__ */ __name((obj) => filterObject(obj, (k, v) => v !== void 0), "cleanObject");
    function isValidDecimalListInput(graphQLType, value) {
      return graphQLType === "List<Int>" || graphQLType === "List<Float>" || graphQLType === "List<String>" && value.every(isDecimalString);
    }
    __name(isValidDecimalListInput, "isValidDecimalListInput");
    function isDecimalString(value) {
      return /^\-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i.test(value);
    }
    __name(isDecimalString, "isDecimalString");
    function valueToArg(key, value, arg2) {
      let maybeArg = null;
      const argsWithErrors = [];
      for (const inputType of arg2.inputTypes) {
        maybeArg = tryInferArgs(key, value, arg2, inputType);
        if ((maybeArg == null ? void 0 : maybeArg.collectErrors().length) === 0) {
          return maybeArg;
        }
        if (maybeArg && (maybeArg == null ? void 0 : maybeArg.collectErrors())) {
          const argErrors = maybeArg == null ? void 0 : maybeArg.collectErrors();
          if (argErrors && argErrors.length > 0) {
            argsWithErrors.push({ arg: maybeArg, errors: argErrors });
          }
        }
      }
      if ((maybeArg == null ? void 0 : maybeArg.hasError) && argsWithErrors.length > 0) {
        const argsWithScores = argsWithErrors.map(({ arg: arg3, errors }) => {
          const errorScores = errors.map((e) => {
            let score = 1;
            if (e.error.type === "invalidType") {
              score = 2 * Math.exp(getDepth(e.error.providedValue)) + 1;
            }
            score += Math.log(e.path.length);
            if (e.error.type === "missingArg") {
              if (arg3.inputType && isInputArgType(arg3.inputType.type) && arg3.inputType.type.name.includes("Unchecked")) {
                score *= 2;
              }
            }
            if (e.error.type === "invalidName") {
              if (isInputArgType(e.error.originalType)) {
                if (e.error.originalType.name.includes("Unchecked")) {
                  score *= 2;
                }
              }
            }
            return score;
          });
          return {
            score: errors.length + sum2(errorScores),
            arg: arg3,
            errors
          };
        });
        argsWithScores.sort((a, b) => a.score < b.score ? -1 : 1);
        return argsWithScores[0].arg;
      }
      return maybeArg;
    }
    __name(valueToArg, "valueToArg");
    function getDepth(object) {
      let level = 1;
      if (!object || typeof object !== "object") {
        return level;
      }
      for (const key in object) {
        if (!Object.prototype.hasOwnProperty.call(object, key)) {
          continue;
        }
        if (typeof object[key] === "object") {
          const depth = getDepth(object[key]) + 1;
          level = Math.max(depth, level);
        }
      }
      return level;
    }
    __name(getDepth, "getDepth");
    function sum2(n) {
      return n.reduce((acc, curr) => acc + curr, 0);
    }
    __name(sum2, "sum");
    function tryInferArgs(key, value, arg2, inputType) {
      var _a22, _b2, _c2, _d2;
      if (typeof value === "undefined") {
        if (!arg2.isRequired) {
          return null;
        }
        return new Arg2({
          key,
          value,
          isEnum: inputType.location === "enumTypes",
          inputType,
          error: {
            type: "missingArg",
            missingName: key,
            missingArg: arg2,
            atLeastOne: false,
            atMostOne: false
          }
        });
      }
      const { isNullable, isRequired } = arg2;
      if (value === null && !isNullable && !isRequired) {
        const isAtLeastOne = isInputArgType(inputType.type) ? inputType.type.constraints.minNumFields !== null && inputType.type.constraints.minNumFields > 0 : false;
        if (!isAtLeastOne) {
          return new Arg2({
            key,
            value,
            isEnum: inputType.location === "enumTypes",
            inputType,
            error: {
              type: "invalidNullArg",
              name: key,
              invalidType: arg2.inputTypes,
              atLeastOne: false,
              atMostOne: false
            }
          });
        }
      }
      if (!inputType.isList) {
        if (isInputArgType(inputType.type)) {
          if (typeof value !== "object" || Array.isArray(value) || inputType.location === "inputObjectTypes" && !isObject2(value)) {
            return getInvalidTypeArg(key, value, arg2, inputType);
          } else {
            const val = cleanObject(value);
            let error2;
            const keys2 = Object.keys(val || {});
            const numKeys = keys2.length;
            if (numKeys === 0 && typeof inputType.type.constraints.minNumFields === "number" && inputType.type.constraints.minNumFields > 0) {
              error2 = {
                type: "atLeastOne",
                key,
                inputType: inputType.type
              };
            } else if (numKeys > 1 && typeof inputType.type.constraints.maxNumFields === "number" && inputType.type.constraints.maxNumFields < 2) {
              error2 = {
                type: "atMostOne",
                key,
                inputType: inputType.type,
                providedKeys: keys2
              };
            }
            return new Arg2({
              key,
              value: val === null ? null : objectToArgs(val, inputType.type, arg2.inputTypes),
              isEnum: inputType.location === "enumTypes",
              error: error2,
              inputType,
              schemaArg: arg2
            });
          }
        } else {
          return scalarToArg(key, value, arg2, inputType);
        }
      }
      if (!Array.isArray(value) && inputType.isList) {
        if (key !== "updateMany") {
          value = [value];
        }
      }
      if (inputType.location === "enumTypes" || inputType.location === "scalar") {
        return scalarToArg(key, value, arg2, inputType);
      }
      const argInputType = inputType.type;
      const hasAtLeastOneError = typeof ((_a22 = argInputType.constraints) == null ? void 0 : _a22.minNumFields) === "number" && ((_b2 = argInputType.constraints) == null ? void 0 : _b2.minNumFields) > 0 ? Array.isArray(value) && value.some((v) => !v || Object.keys(cleanObject(v)).length === 0) : false;
      let err = hasAtLeastOneError ? {
        inputType: argInputType,
        key,
        type: "atLeastOne"
      } : void 0;
      if (!err) {
        const hasOneOfError = typeof ((_c2 = argInputType.constraints) == null ? void 0 : _c2.maxNumFields) === "number" && ((_d2 = argInputType.constraints) == null ? void 0 : _d2.maxNumFields) < 2 ? Array.isArray(value) && value.find((v) => !v || Object.keys(cleanObject(v)).length !== 1) : false;
        if (hasOneOfError) {
          err = {
            inputType: argInputType,
            key,
            type: "atMostOne",
            providedKeys: Object.keys(hasOneOfError)
          };
        }
      }
      if (!Array.isArray(value)) {
        for (const nestedArgInputType of arg2.inputTypes) {
          const args = objectToArgs(value, nestedArgInputType.type);
          if (args.collectErrors().length === 0) {
            return new Arg2({
              key,
              value: args,
              isEnum: false,
              schemaArg: arg2,
              inputType: nestedArgInputType
            });
          }
        }
      }
      return new Arg2({
        key,
        value: value.map((v) => {
          if (inputType.isList && typeof v !== "object") {
            return v;
          }
          if (typeof v !== "object" || !value) {
            return getInvalidTypeArg(key, v, arg2, inputType);
          }
          return objectToArgs(v, argInputType);
        }),
        isEnum: false,
        inputType,
        schemaArg: arg2,
        error: err
      });
    }
    __name(tryInferArgs, "tryInferArgs");
    function isInputArgType(argType) {
      if (typeof argType === "string") {
        return false;
      }
      if (Object.hasOwnProperty.call(argType, "values")) {
        return false;
      }
      return true;
    }
    __name(isInputArgType, "isInputArgType");
    function scalarToArg(key, value, arg2, inputType) {
      if (hasCorrectScalarType(value, arg2, inputType)) {
        return new Arg2({
          key,
          value,
          isEnum: inputType.location === "enumTypes",
          schemaArg: arg2,
          inputType
        });
      }
      return getInvalidTypeArg(key, value, arg2, inputType);
    }
    __name(scalarToArg, "scalarToArg");
    function objectToArgs(initialObj, inputType, possibilities, outputType) {
      const obj = cleanObject(initialObj);
      const { fields: args, fieldMap } = inputType;
      const requiredArgs = args.map((arg2) => [arg2.name, void 0]);
      const objEntries = Object.entries(obj || {});
      const entries = unionBy(objEntries, requiredArgs, (a) => a[0]);
      const argsList = entries.reduce((acc, [argName, value]) => {
        const schemaArg = fieldMap ? fieldMap[argName] : args.find((a) => a.name === argName);
        if (!schemaArg) {
          const didYouMeanField = typeof value === "boolean" && outputType && outputType.fields.some((f) => f.name === argName) ? argName : null;
          acc.push(new Arg2({
            key: argName,
            value,
            error: {
              type: "invalidName",
              providedName: argName,
              providedValue: value,
              didYouMeanField,
              didYouMeanArg: !didYouMeanField && getSuggestion(argName, [...args.map((a) => a.name), "select"]) || void 0,
              originalType: inputType,
              possibilities,
              outputType
            }
          }));
          return acc;
        }
        const arg2 = valueToArg(argName, value, schemaArg);
        if (arg2) {
          acc.push(arg2);
        }
        return acc;
      }, []);
      if (typeof inputType.constraints.minNumFields === "number" && objEntries.length < inputType.constraints.minNumFields || argsList.find((arg2) => {
        var _a22, _b2;
        return ((_a22 = arg2.error) == null ? void 0 : _a22.type) === "missingArg" || ((_b2 = arg2.error) == null ? void 0 : _b2.type) === "atLeastOne";
      })) {
        const optionalMissingArgs = inputType.fields.filter((field) => !field.isRequired && obj && (typeof obj[field.name] === "undefined" || obj[field.name] === null));
        argsList.push(...optionalMissingArgs.map((arg2) => {
          const argInputType = arg2.inputTypes[0];
          return new Arg2({
            key: arg2.name,
            value: void 0,
            isEnum: argInputType.location === "enumTypes",
            error: {
              type: "missingArg",
              missingName: arg2.name,
              missingArg: arg2,
              atLeastOne: Boolean(inputType.constraints.minNumFields) || false,
              atMostOne: inputType.constraints.maxNumFields === 1 || false
            },
            inputType: argInputType
          });
        }));
      }
      return new Args(argsList);
    }
    __name(objectToArgs, "objectToArgs");
    function unpack({ document: document2, path: path7, data }) {
      const result = deepGet(data, path7);
      if (result === "undefined") {
        return null;
      }
      if (typeof result !== "object") {
        return result;
      }
      const field = getField(document2, path7);
      return mapScalars({ field, data: result });
    }
    __name(unpack, "unpack");
    function mapScalars({ field, data }) {
      var _a22;
      if (!data || typeof data !== "object" || !field.children || !field.schemaField) {
        return data;
      }
      const deserializers = {
        DateTime: (value) => new Date(value),
        Json: (value) => JSON.parse(value),
        Bytes: (value) => Buffer.from(value, "base64"),
        Decimal: (value) => {
          return new decimal_default(value);
        },
        BigInt: (value) => BigInt(value)
      };
      for (const child of field.children) {
        const outputType = (_a22 = child.schemaField) == null ? void 0 : _a22.outputType.type;
        if (outputType && typeof outputType === "string") {
          const deserializer = deserializers[outputType];
          if (deserializer) {
            if (Array.isArray(data)) {
              for (const entry of data) {
                if (typeof entry[child.name] !== "undefined" && entry[child.name] !== null) {
                  if (Array.isArray(entry[child.name])) {
                    entry[child.name] = entry[child.name].map(deserializer);
                  } else {
                    entry[child.name] = deserializer(entry[child.name]);
                  }
                }
              }
            } else {
              if (typeof data[child.name] !== "undefined" && data[child.name] !== null) {
                if (Array.isArray(data[child.name])) {
                  data[child.name] = data[child.name].map(deserializer);
                } else {
                  data[child.name] = deserializer(data[child.name]);
                }
              }
            }
          }
        }
        if (child.schemaField && child.schemaField.outputType.location === "outputObjectTypes") {
          if (Array.isArray(data)) {
            for (const entry of data) {
              mapScalars({ field: child, data: entry[child.name] });
            }
          } else {
            mapScalars({ field: child, data: data[child.name] });
          }
        }
      }
      return data;
    }
    __name(mapScalars, "mapScalars");
    function getField(document2, path7) {
      const todo = path7.slice();
      const firstElement = todo.shift();
      let pointer = document2.children.find((c) => c.name === firstElement);
      if (!pointer) {
        throw new Error(`Could not find field ${firstElement} in document ${document2}`);
      }
      while (todo.length > 0) {
        const key = todo.shift();
        if (!pointer.children) {
          throw new Error(`Can't get children for field ${pointer} with child ${key}`);
        }
        const child = pointer.children.find((c) => c.name === key);
        if (!child) {
          throw new Error(`Can't find child ${key} of field ${pointer}`);
        }
        pointer = child;
      }
      return pointer;
    }
    __name(getField, "getField");
    function removeSelectFromPath(path7) {
      return path7.split(".").filter((p) => p !== "select").join(".");
    }
    __name(removeSelectFromPath, "removeSelectFromPath");
    function removeSelectFromObject(obj) {
      const type = Object.prototype.toString.call(obj);
      if (type === "[object Object]") {
        const copy = {};
        for (const key in obj) {
          if (key === "select") {
            for (const subKey in obj["select"]) {
              copy[subKey] = removeSelectFromObject(obj["select"][subKey]);
            }
          } else {
            copy[key] = removeSelectFromObject(obj[key]);
          }
        }
        return copy;
      }
      return obj;
    }
    __name(removeSelectFromObject, "removeSelectFromObject");
    function transformAggregatePrintJsonArgs({
      ast,
      keyPaths,
      missingItems,
      valuePaths
    }) {
      const newKeyPaths = keyPaths.map(removeSelectFromPath);
      const newValuePaths = valuePaths.map(removeSelectFromPath);
      const newMissingItems = missingItems.map((item) => ({
        path: removeSelectFromPath(item.path),
        isRequired: item.isRequired,
        type: item.type
      }));
      const newAst = removeSelectFromObject(ast);
      return {
        ast: newAst,
        keyPaths: newKeyPaths,
        missingItems: newMissingItems,
        valuePaths: newValuePaths
      };
    }
    __name(transformAggregatePrintJsonArgs, "transformAggregatePrintJsonArgs");
    var NotFoundError2 = class extends Error {
      constructor(message) {
        super(message);
        this.name = "NotFoundError";
      }
    };
    __name(NotFoundError2, "NotFoundError");
    function getRejectOnNotFound(action, modelName, args, clientInstance) {
      let rejectOnNotFound;
      if (args && typeof args === "object" && "rejectOnNotFound" in args && args["rejectOnNotFound"] !== void 0) {
        rejectOnNotFound = args["rejectOnNotFound"];
        delete args["rejectOnNotFound"];
      } else if (typeof clientInstance === "boolean") {
        rejectOnNotFound = clientInstance;
      } else if (clientInstance && typeof clientInstance === "object" && action in clientInstance) {
        const rejectPerOperation = clientInstance[action];
        if (rejectPerOperation && typeof rejectPerOperation === "object") {
          if (modelName in rejectPerOperation) {
            return rejectPerOperation[modelName];
          }
          return void 0;
        }
        rejectOnNotFound = getRejectOnNotFound(action, modelName, args, rejectPerOperation);
      } else if (typeof clientInstance === "function") {
        rejectOnNotFound = clientInstance;
      } else {
        rejectOnNotFound = false;
      }
      return rejectOnNotFound;
    }
    __name(getRejectOnNotFound, "getRejectOnNotFound");
    var REGEX = /(findUnique|findFirst)/;
    function throwIfNotFound(data, clientMethod, typeName, rejectOnNotFound) {
      if (rejectOnNotFound && !data && REGEX.exec(clientMethod)) {
        if (typeof rejectOnNotFound === "boolean" && rejectOnNotFound) {
          throw new NotFoundError2(`No ${typeName} found`);
        } else if (typeof rejectOnNotFound === "function") {
          throw rejectOnNotFound(new NotFoundError2(`No ${typeName} found`));
        } else if (isError(rejectOnNotFound)) {
          throw rejectOnNotFound;
        }
        throw new NotFoundError2(`No ${typeName} found`);
      }
    }
    __name(throwIfNotFound, "throwIfNotFound");
    function wrapRequest(prop, dmmfModelName, requestCallback) {
      if (prop === "findFirstOrThrow" || prop === "findUniqueOrThrow") {
        return applyOrThrowWrapper(dmmfModelName, requestCallback);
      }
      assertNever(prop, "Unknown wrapper name");
    }
    __name(wrapRequest, "wrapRequest");
    function applyOrThrowWrapper(dmmfModelName, requestCallback) {
      return async (requestParams) => {
        if ("rejectOnNotFound" in requestParams.args) {
          const { stack } = printStack({
            originalMethod: requestParams.clientMethod,
            callsite: requestParams.callsite
          });
          throw new PrismaClientValidationError(`${stack}
'rejectOnNotFound' option is not supported`);
        }
        const result = await requestCallback(requestParams);
        if (result === null || result === void 0) {
          throw new NotFoundError2(`No ${dmmfModelName} found`);
        }
        return result;
      };
    }
    __name(applyOrThrowWrapper, "applyOrThrowWrapper");
    var defaultPropertyDescriptor = {
      enumerable: true,
      configurable: true,
      writable: true
    };
    function defaultProxyHandlers(ownKeys) {
      const _ownKeys = new Set(ownKeys);
      return {
        getOwnPropertyDescriptor: () => defaultPropertyDescriptor,
        has: (target, prop) => _ownKeys.has(prop),
        set: (target, prop, value) => {
          return _ownKeys.add(prop) && Reflect.set(target, prop, value);
        },
        ownKeys: () => [..._ownKeys]
      };
    }
    __name(defaultProxyHandlers, "defaultProxyHandlers");
    function getNextDataPath(fluentPropName, prevDataPath) {
      if (fluentPropName === void 0 || prevDataPath === void 0)
        return [];
      return [...prevDataPath, "select", fluentPropName];
    }
    __name(getNextDataPath, "getNextDataPath");
    function getNextUserArgs(callArgs, prevArgs, nextDataPath) {
      if (prevArgs === void 0)
        return callArgs != null ? callArgs : {};
      return deepSet(prevArgs, nextDataPath, callArgs || true);
    }
    __name(getNextUserArgs, "getNextUserArgs");
    function applyFluent(client, dmmfModelName, modelAction, fluentPropName, prevDataPath, prevUserArgs) {
      const dmmfModel = client._baseDmmf.modelMap[dmmfModelName];
      const dmmfModelFieldMap = dmmfModel.fields.reduce((acc, field) => ({ ...acc, [field.name]: field }), {});
      return (userArgs) => {
        const callsite = getCallSite(client._errorFormat);
        const nextDataPath = getNextDataPath(fluentPropName, prevDataPath);
        const nextUserArgs = getNextUserArgs(userArgs, prevUserArgs, nextDataPath);
        const prismaPromise = modelAction({ dataPath: nextDataPath, callsite })(nextUserArgs);
        const ownKeys = getOwnKeys(client, dmmfModelName);
        return new Proxy(prismaPromise, {
          get(target, prop) {
            if (!ownKeys.includes(prop))
              return target[prop];
            const dmmfModelName2 = dmmfModelFieldMap[prop].type;
            const modelArgs = [dmmfModelName2, modelAction, prop];
            const dataArgs = [nextDataPath, nextUserArgs];
            return applyFluent(client, ...modelArgs, ...dataArgs);
          },
          ...defaultProxyHandlers([...ownKeys, ...Object.getOwnPropertyNames(prismaPromise)])
        });
      };
    }
    __name(applyFluent, "applyFluent");
    function getOwnKeys(client, dmmfModelName) {
      return client._baseDmmf.modelMap[dmmfModelName].fields.filter((field) => field.kind === "object").map((field) => field.name);
    }
    __name(getOwnKeys, "getOwnKeys");
    function dmmfToJSModelName(name) {
      return name.replace(/^./, (str) => str.toLowerCase());
    }
    __name(dmmfToJSModelName, "dmmfToJSModelName");
    var fluentProps = ["findUnique", "findFirst", "create", "update", "upsert", "delete"];
    var aggregateProps = ["aggregate", "count", "groupBy"];
    function applyModel(client, dmmfModelName) {
      const jsModelName = dmmfToJSModelName(dmmfModelName);
      const ownKeys = getOwnKeys2(client, dmmfModelName);
      const baseObject = {};
      return new Proxy(baseObject, {
        get(target, prop) {
          if (prop in target || typeof prop === "symbol")
            return target[prop];
          if (!isValidActionName(client, dmmfModelName, prop))
            return void 0;
          const dmmfActionName = getDmmfActionName(prop);
          let requestFn = /* @__PURE__ */ __name((params) => client._request(params), "requestFn");
          if (isClientOnlyAction(prop)) {
            requestFn = wrapRequest(prop, dmmfModelName, requestFn);
          }
          const action = /* @__PURE__ */ __name((paramOverrides) => (userArgs) => {
            const callSite = getCallSite(client._errorFormat);
            return createPrismaPromise((txId, lock, transactionTracer) => {
              const data = { args: userArgs, dataPath: [] };
              const action2 = { action: dmmfActionName, model: dmmfModelName };
              const method = { clientMethod: `${jsModelName}.${prop}`, jsModelName };
              const tx = { runInTransaction: !!txId, transactionId: txId, lock };
              const trace2 = { callsite: callSite };
              const params = { ...data, ...action2, ...method, ...tx, ...trace2 };
              if (transactionTracer) {
                transactionTracer.setChild({ method: prop, model: dmmfModelName });
              }
              return requestFn({ ...params, ...paramOverrides });
            });
          }, "action");
          if (fluentProps.includes(dmmfActionName)) {
            return applyFluent(client, dmmfModelName, action);
          }
          if (isValidAggregateName(prop)) {
            return applyAggregates(client, prop, action);
          }
          return action({});
        },
        ...defaultProxyHandlers(ownKeys)
      });
    }
    __name(applyModel, "applyModel");
    function getOwnKeys2(client, dmmfModelName) {
      return [...Object.keys(client._baseDmmf.mappingsMap[dmmfModelName]), "count"].filter((key) => !["model", "plural"].includes(key));
    }
    __name(getOwnKeys2, "getOwnKeys");
    function isValidActionName(client, dmmfModelName, action) {
      if (isClientOnlyAction(action)) {
        return isValidActionName(client, dmmfModelName, clientOnlyActions[action].wrappedAction);
      }
      return getOwnKeys2(client, dmmfModelName).includes(action);
    }
    __name(isValidActionName, "isValidActionName");
    function isValidAggregateName(action) {
      return aggregateProps.includes(action);
    }
    __name(isValidAggregateName, "isValidAggregateName");
    function jsToDMMFModelName(name) {
      return name.replace(/^./, (str) => str.toUpperCase());
    }
    __name(jsToDMMFModelName, "jsToDMMFModelName");
    function applyModels(client) {
      const modelCache = {};
      const ownKeys = getOwnKeys3(client);
      return new Proxy(client, {
        get(target, prop) {
          if (prop in target || typeof prop === "symbol")
            return target[prop];
          const dmmfModelName = jsToDMMFModelName(prop);
          if (modelCache[dmmfModelName] !== void 0) {
            return modelCache[dmmfModelName];
          }
          if (client._baseDmmf.modelMap[dmmfModelName] !== void 0) {
            return modelCache[dmmfModelName] = applyModel(client, dmmfModelName);
          }
          if (client._baseDmmf.modelMap[prop] !== void 0) {
            return modelCache[dmmfModelName] = applyModel(client, prop);
          }
        },
        ...defaultProxyHandlers(ownKeys)
      });
    }
    __name(applyModels, "applyModels");
    function getOwnKeys3(client) {
      return [...Object.keys(client._baseDmmf.modelMap).map(dmmfToJSModelName), ...Object.keys(client)];
    }
    __name(getOwnKeys3, "getOwnKeys");
    function getLockCountPromise(knock, cb = () => {
    }) {
      let resolve;
      const lock = new Promise((res) => resolve = res);
      return {
        then(onFulfilled) {
          if (--knock === 0)
            resolve(cb());
          return onFulfilled == null ? void 0 : onFulfilled(lock);
        }
      };
    }
    __name(getLockCountPromise, "getLockCountPromise");
    function getLogLevel(log4) {
      if (typeof log4 === "string") {
        return log4;
      }
      return log4.reduce((acc, curr) => {
        const currentLevel = typeof curr === "string" ? curr : curr.level;
        if (currentLevel === "query") {
          return acc;
        }
        if (!acc) {
          return currentLevel;
        }
        if (curr === "info" || acc === "info") {
          return "info";
        }
        return currentLevel;
      }, void 0);
    }
    __name(getLogLevel, "getLogLevel");
    function mergeBy(arr1, arr2, cb) {
      const groupedArr1 = groupBy2(arr1, cb);
      const groupedArr2 = groupBy2(arr2, cb);
      const result = Object.values(groupedArr2).map((value) => value[value.length - 1]);
      const arr2Keys = Object.keys(groupedArr2);
      Object.entries(groupedArr1).forEach(([key, value]) => {
        if (!arr2Keys.includes(key)) {
          result.push(value[value.length - 1]);
        }
      });
      return result;
    }
    __name(mergeBy, "mergeBy");
    var groupBy2 = /* @__PURE__ */ __name((arr, cb) => {
      return arr.reduce((acc, curr) => {
        const key = cb(curr);
        if (!acc[key]) {
          acc[key] = [];
        }
        acc[key].push(curr);
        return acc;
      }, {});
    }, "groupBy");
    var MiddlewareHandler = class {
      constructor() {
        this._middlewares = [];
      }
      use(middleware) {
        this._middlewares.push(middleware);
      }
      get(id) {
        return this._middlewares[id];
      }
      has(id) {
        return !!this._middlewares[id];
      }
      length() {
        return this._middlewares.length;
      }
    };
    __name(MiddlewareHandler, "MiddlewareHandler");
    var Middlewares = class {
      constructor() {
        this.query = new MiddlewareHandler();
        this.engine = new MiddlewareHandler();
      }
    };
    __name(Middlewares, "Middlewares");
    var import_strip_ansi4 = __toESM(require_strip_ansi());
    var DataLoader = class {
      constructor(options) {
        this.options = options;
        this.tickActive = false;
        this.batches = {};
      }
      request(request2) {
        const hash = this.options.batchBy(request2);
        if (!hash) {
          return this.options.singleLoader(request2);
        }
        if (!this.batches[hash]) {
          this.batches[hash] = [];
          if (!this.tickActive) {
            this.tickActive = true;
            process.nextTick(() => {
              this.dispatchBatches();
              this.tickActive = false;
            });
          }
        }
        return new Promise((resolve, reject) => {
          this.batches[hash].push({
            request: request2,
            resolve,
            reject
          });
        });
      }
      dispatchBatches() {
        for (const key in this.batches) {
          const batch = this.batches[key];
          delete this.batches[key];
          if (batch.length === 1) {
            this.options.singleLoader(batch[0].request).then((result) => {
              if (result instanceof Error) {
                batch[0].reject(result);
              } else {
                batch[0].resolve(result);
              }
            }).catch((e) => {
              batch[0].reject(e);
            });
          } else {
            this.options.batchLoader(batch.map((j) => j.request)).then((results) => {
              if (results instanceof Error) {
                for (let i = 0; i < batch.length; i++) {
                  batch[i].reject(results);
                }
              } else {
                for (let i = 0; i < batch.length; i++) {
                  const value = results[i];
                  if (value instanceof Error) {
                    batch[i].reject(value);
                  } else {
                    batch[i].resolve(value);
                  }
                }
              }
            }).catch((e) => {
              for (let i = 0; i < batch.length; i++) {
                batch[i].reject(e);
              }
            });
          }
        }
      }
      get [Symbol.toStringTag]() {
        return "DataLoader";
      }
    };
    __name(DataLoader, "DataLoader");
    var debug10 = src_default("prisma:client:request_handler");
    function getRequestInfo(requests) {
      var _a22;
      const txId = requests[0].transactionId;
      const inTx = requests[0].runInTransaction;
      const headers = (_a22 = requests[0].headers) != null ? _a22 : {};
      const _inTx = typeof txId === "number" && inTx ? true : void 0;
      const _txId = typeof txId === "string" && inTx ? txId : void 0;
      if (_txId !== void 0)
        headers.transactionId = _txId;
      return { inTx: _inTx, headers };
    }
    __name(getRequestInfo, "getRequestInfo");
    var RequestHandler = class {
      constructor(client, hooks) {
        this.client = client;
        this.hooks = hooks;
        this.dataloader = new DataLoader({
          batchLoader: (requests) => {
            const info2 = getRequestInfo(requests);
            const queries = requests.map((r) => String(r.document));
            return this.client._engine.requestBatch(queries, info2.headers, info2.inTx);
          },
          singleLoader: (request2) => {
            const info2 = getRequestInfo([request2]);
            const query2 = String(request2.document);
            return this.client._engine.request(query2, info2.headers);
          },
          batchBy: (request2) => {
            if (request2.transactionId) {
              return `transaction-${request2.transactionId}`;
            }
            return batchFindUniqueBy(request2);
          }
        });
      }
      async request({
        document: document2,
        dataPath = [],
        rootField,
        typeName,
        isList,
        callsite,
        rejectOnNotFound,
        clientMethod,
        runInTransaction,
        engineHook,
        args,
        headers,
        transactionId,
        unpacker
      }) {
        if (this.hooks && this.hooks.beforeRequest) {
          const query2 = String(document2);
          this.hooks.beforeRequest({
            query: query2,
            path: dataPath,
            rootField,
            typeName,
            document: document2,
            isList,
            clientMethod,
            args
          });
        }
        try {
          let data, elapsed;
          if (engineHook) {
            const result = await engineHook({
              document: document2,
              runInTransaction
            }, (params) => this.dataloader.request(params));
            data = result.data;
            elapsed = result.elapsed;
          } else {
            const result = await this.dataloader.request({
              document: document2,
              runInTransaction,
              headers,
              transactionId
            });
            data = result == null ? void 0 : result.data;
            elapsed = result == null ? void 0 : result.elapsed;
          }
          const unpackResult = this.unpack(document2, data, dataPath, rootField, unpacker);
          throwIfNotFound(unpackResult, clientMethod, typeName, rejectOnNotFound);
          if (process.env.PRISMA_CLIENT_GET_TIME) {
            return { data: unpackResult, elapsed };
          }
          return unpackResult;
        } catch (error2) {
          this.handleRequestError({ error: error2, clientMethod, callsite });
        }
      }
      handleRequestError({ error: error2, clientMethod, callsite }) {
        debug10(error2);
        let message = error2.message;
        if (callsite) {
          const { stack } = printStack({
            callsite,
            originalMethod: clientMethod,
            onUs: error2.isPanic,
            showColors: this.client._errorFormat === "pretty"
          });
          message = `${stack}
  ${error2.message}`;
        }
        message = this.sanitizeMessage(message);
        if (error2.code) {
          throw new PrismaClientKnownRequestError(message, error2.code, this.client._clientVersion, error2.meta);
        } else if (error2.isPanic) {
          throw new PrismaClientRustPanicError(message, this.client._clientVersion);
        } else if (error2 instanceof PrismaClientUnknownRequestError) {
          throw new PrismaClientUnknownRequestError(message, this.client._clientVersion);
        } else if (error2 instanceof PrismaClientInitializationError) {
          throw new PrismaClientInitializationError(message, this.client._clientVersion);
        } else if (error2 instanceof PrismaClientRustPanicError) {
          throw new PrismaClientRustPanicError(message, this.client._clientVersion);
        }
        error2.clientVersion = this.client._clientVersion;
        throw error2;
      }
      sanitizeMessage(message) {
        if (this.client._errorFormat && this.client._errorFormat !== "pretty") {
          return (0, import_strip_ansi4.default)(message);
        }
        return message;
      }
      unpack(document2, data, path7, rootField, unpacker) {
        if (data == null ? void 0 : data.data) {
          data = data.data;
        }
        if (unpacker) {
          data[rootField] = unpacker(data[rootField]);
        }
        const getPath = [];
        if (rootField) {
          getPath.push(rootField);
        }
        getPath.push(...path7.filter((p) => p !== "select" && p !== "include"));
        return unpack({ document: document2, data, path: getPath });
      }
      get [Symbol.toStringTag]() {
        return "RequestHandler";
      }
    };
    __name(RequestHandler, "RequestHandler");
    function batchFindUniqueBy(request2) {
      var _a22;
      if (!request2.document.children[0].name.startsWith("findUnique")) {
        return void 0;
      }
      const args = (_a22 = request2.document.children[0].args) == null ? void 0 : _a22.args.map((a) => {
        if (a.value instanceof Args) {
          return `${a.key}-${a.value.args.map((a2) => a2.key).join(",")}`;
        }
        return a.key;
      }).join(",");
      const selectionSet = request2.document.children[0].children.join(",");
      return `${request2.document.children[0].name}|${args}|${selectionSet}`;
    }
    __name(batchFindUniqueBy, "batchFindUniqueBy");
    var clientVersion = require_package2().version;
    function deserializeRawResults(rows) {
      return rows.map((row) => {
        const mappedRow = {};
        for (const key of Object.keys(row)) {
          mappedRow[key] = deserializeValue(row[key]);
        }
        return mappedRow;
      });
    }
    __name(deserializeRawResults, "deserializeRawResults");
    function deserializeValue({ prisma__type: type, prisma__value: value }) {
      switch (type) {
        case "bigint":
          return BigInt(value);
        case "bytes":
          return Buffer.from(value, "base64");
        case "decimal":
          return new decimal_default(value);
        case "datetime":
        case "date":
          return new Date(value);
        case "time":
          return new Date(`1970-01-01T${value}Z`);
        case "array":
          return value.map(deserializeValue);
        default:
          return value;
      }
    }
    __name(deserializeValue, "deserializeValue");
    var mssqlPreparedStatement = /* @__PURE__ */ __name((template) => {
      return template.reduce((acc, str, idx) => `${acc}@P${idx}${str}`);
    }, "mssqlPreparedStatement");
    function getTraceParent() {
      const span = trace.getSpanContext(context2.active());
      if ((span == null ? void 0 : span.traceFlags) === 1) {
        return `00-${span.traceId}-${span.spanId}-01`;
      }
      return void 0;
    }
    __name(getTraceParent, "getTraceParent");
    function runInActiveSpan({
      name,
      callback,
      options = {},
      transactionTracer
    }) {
      const tracer = trace.getTracer("prisma");
      return tracer.startActiveSpan(name, options, context2.active(), async (span) => {
        return callback().finally(() => {
          if (transactionTracer) {
            transactionTracer.appendChildren(span);
          }
          span.end();
        });
      });
    }
    __name(runInActiveSpan, "runInActiveSpan");
    async function runInSpan({
      name,
      callback,
      options = {}
    }) {
      const tracer = trace.getTracer("prisma");
      const span = tracer.startSpan(name, options);
      try {
        return await callback();
      } finally {
        span.end();
      }
    }
    __name(runInSpan, "runInSpan");
    function serializeRawParameters(parameters) {
      try {
        return serializeRawParametersInternal(parameters, "fast");
      } catch (error2) {
        return serializeRawParametersInternal(parameters, "slow");
      }
    }
    __name(serializeRawParameters, "serializeRawParameters");
    function serializeRawParametersInternal(parameters, objectSerialization) {
      return JSON.stringify(parameters.map((parameter) => encodeParameter(parameter, objectSerialization)));
    }
    __name(serializeRawParametersInternal, "serializeRawParametersInternal");
    function encodeParameter(parameter, objectSerialization) {
      if (typeof parameter === "bigint") {
        return {
          prisma__type: "bigint",
          prisma__value: parameter.toString()
        };
      }
      if (isDate(parameter)) {
        return {
          prisma__type: "date",
          prisma__value: parameter.toJSON()
        };
      }
      if (decimal_default.isDecimal(parameter)) {
        return {
          prisma__type: "decimal",
          prisma__value: parameter.toJSON()
        };
      }
      if (Buffer.isBuffer(parameter)) {
        return {
          prisma__type: "bytes",
          prisma__value: parameter.toString("base64")
        };
      }
      if (isArrayBufferLike(parameter) || ArrayBuffer.isView(parameter)) {
        return {
          prisma__type: "bytes",
          prisma__value: Buffer.from(parameter).toString("base64")
        };
      }
      if (typeof parameter === "object" && objectSerialization === "slow") {
        return preprocessObject(parameter);
      }
      return parameter;
    }
    __name(encodeParameter, "encodeParameter");
    function isDate(value) {
      if (value instanceof Date) {
        return true;
      }
      return Object.prototype.toString.call(value) === "[object Date]" && typeof value.toJSON === "function";
    }
    __name(isDate, "isDate");
    function isArrayBufferLike(value) {
      if (value instanceof ArrayBuffer || value instanceof SharedArrayBuffer) {
        return true;
      }
      if (typeof value === "object" && value !== null) {
        return value[Symbol.toStringTag] === "ArrayBuffer" || value[Symbol.toStringTag] === "SharedArrayBuffer";
      }
      return false;
    }
    __name(isArrayBufferLike, "isArrayBufferLike");
    function preprocessObject(obj) {
      if (typeof obj !== "object" || obj === null) {
        return obj;
      }
      if (typeof obj.toJSON === "function") {
        return obj.toJSON();
      }
      if (Array.isArray(obj)) {
        return obj.map(preprocessValueInObject);
      }
      const result = {};
      for (const key of Object.keys(obj)) {
        result[key] = preprocessValueInObject(obj[key]);
      }
      return result;
    }
    __name(preprocessObject, "preprocessObject");
    function preprocessValueInObject(value) {
      if (typeof value === "bigint") {
        return value.toString();
      }
      return preprocessObject(value);
    }
    __name(preprocessValueInObject, "preprocessValueInObject");
    var import_js_levenshtein2 = __toESM(require_js_levenshtein());
    var knownProperties = ["datasources", "errorFormat", "log", "__internal", "rejectOnNotFound"];
    var errorFormats = ["pretty", "colorless", "minimal"];
    var logLevels = ["info", "query", "warn", "error"];
    var validators = {
      datasources: (options, datasourceNames) => {
        if (!options) {
          return;
        }
        if (typeof options !== "object" || Array.isArray(options)) {
          throw new PrismaClientConstructorValidationError(`Invalid value ${JSON.stringify(options)} for "datasources" provided to PrismaClient constructor`);
        }
        for (const [key, value] of Object.entries(options)) {
          if (!datasourceNames.includes(key)) {
            const didYouMean = getDidYouMean(key, datasourceNames) || `Available datasources: ${datasourceNames.join(", ")}`;
            throw new PrismaClientConstructorValidationError(`Unknown datasource ${key} provided to PrismaClient constructor.${didYouMean}`);
          }
          if (typeof value !== "object" || Array.isArray(value)) {
            throw new PrismaClientConstructorValidationError(`Invalid value ${JSON.stringify(options)} for datasource "${key}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
          }
          if (value && typeof value === "object") {
            for (const [key1, value1] of Object.entries(value)) {
              if (key1 !== "url") {
                throw new PrismaClientConstructorValidationError(`Invalid value ${JSON.stringify(options)} for datasource "${key}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
              }
              if (typeof value1 !== "string") {
                throw new PrismaClientConstructorValidationError(`Invalid value ${JSON.stringify(value1)} for datasource "${key}" provided to PrismaClient constructor.
It should have this form: { url: "CONNECTION_STRING" }`);
              }
            }
          }
        }
      },
      errorFormat: (options) => {
        if (!options) {
          return;
        }
        if (typeof options !== "string") {
          throw new PrismaClientConstructorValidationError(`Invalid value ${JSON.stringify(options)} for "errorFormat" provided to PrismaClient constructor.`);
        }
        if (!errorFormats.includes(options)) {
          const didYouMean = getDidYouMean(options, errorFormats);
          throw new PrismaClientConstructorValidationError(`Invalid errorFormat ${options} provided to PrismaClient constructor.${didYouMean}`);
        }
      },
      log: (options) => {
        if (!options) {
          return;
        }
        if (!Array.isArray(options)) {
          throw new PrismaClientConstructorValidationError(`Invalid value ${JSON.stringify(options)} for "log" provided to PrismaClient constructor.`);
        }
        function validateLogLevel(level) {
          if (typeof level === "string") {
            if (!logLevels.includes(level)) {
              const didYouMean = getDidYouMean(level, logLevels);
              throw new PrismaClientConstructorValidationError(`Invalid log level "${level}" provided to PrismaClient constructor.${didYouMean}`);
            }
          }
        }
        __name(validateLogLevel, "validateLogLevel");
        for (const option of options) {
          validateLogLevel(option);
          const logValidators = {
            level: validateLogLevel,
            emit: (value) => {
              const emits = ["stdout", "event"];
              if (!emits.includes(value)) {
                const didYouMean = getDidYouMean(value, emits);
                throw new PrismaClientConstructorValidationError(`Invalid value ${JSON.stringify(value)} for "emit" in logLevel provided to PrismaClient constructor.${didYouMean}`);
              }
            }
          };
          if (option && typeof option === "object") {
            for (const [key, value] of Object.entries(option)) {
              if (logValidators[key]) {
                logValidators[key](value);
              } else {
                throw new PrismaClientConstructorValidationError(`Invalid property ${key} for "log" provided to PrismaClient constructor`);
              }
            }
          }
        }
      },
      __internal: (value) => {
        if (!value) {
          return;
        }
        const knownKeys = ["debug", "hooks", "engine", "measurePerformance"];
        if (typeof value !== "object") {
          throw new PrismaClientConstructorValidationError(`Invalid value ${JSON.stringify(value)} for "__internal" to PrismaClient constructor`);
        }
        for (const [key] of Object.entries(value)) {
          if (!knownKeys.includes(key)) {
            const didYouMean = getDidYouMean(key, knownKeys);
            throw new PrismaClientConstructorValidationError(`Invalid property ${JSON.stringify(key)} for "__internal" provided to PrismaClient constructor.${didYouMean}`);
          }
        }
      },
      rejectOnNotFound: (value) => {
        if (!value) {
          return;
        }
        if (isError(value) || typeof value === "boolean" || typeof value === "object" || typeof value === "function") {
          return value;
        }
        throw new PrismaClientConstructorValidationError(`Invalid rejectOnNotFound expected a boolean/Error/{[modelName: Error | boolean]} but received ${JSON.stringify(value)}`);
      }
    };
    function validatePrismaClientOptions(options, datasourceNames) {
      for (const [key, value] of Object.entries(options)) {
        if (!knownProperties.includes(key)) {
          const didYouMean = getDidYouMean(key, knownProperties);
          throw new PrismaClientConstructorValidationError(`Unknown property ${key} provided to PrismaClient constructor.${didYouMean}`);
        }
        validators[key](value, datasourceNames);
      }
    }
    __name(validatePrismaClientOptions, "validatePrismaClientOptions");
    function getDidYouMean(str, options) {
      if (options.length === 0) {
        return "";
      }
      if (typeof str !== "string") {
        return "";
      }
      const alternative = getAlternative(str, options);
      if (!alternative) {
        return "";
      }
      return ` Did you mean "${alternative}"?`;
    }
    __name(getDidYouMean, "getDidYouMean");
    function getAlternative(str, options) {
      if (options.length === 0) {
        return null;
      }
      const optionsWithDistances = options.map((value) => ({
        value,
        distance: (0, import_js_levenshtein2.default)(str, value)
      }));
      optionsWithDistances.sort((a, b) => {
        return a.distance < b.distance ? -1 : 1;
      });
      const bestAlternative = optionsWithDistances[0];
      if (bestAlternative.distance < 3) {
        return bestAlternative.value;
      }
      return null;
    }
    __name(getAlternative, "getAlternative");
    var debug11 = src_default("prisma:client");
    var ALTER_RE = /^(\s*alter\s)/i;
    typeof globalThis === "object" ? globalThis.NODE_CLIENT = true : 0;
    function isReadonlyArray(arg2) {
      return Array.isArray(arg2);
    }
    __name(isReadonlyArray, "isReadonlyArray");
    function checkAlter(query2, values, invalidCall) {
      if (values.length > 0 && ALTER_RE.exec(query2)) {
        throw new Error(`Running ALTER using ${invalidCall} is not supported
Using the example below you can still execute your query with Prisma, but please note that it is vulnerable to SQL injection attacks and requires you to take care of input sanitization.

Example:
  await prisma.$executeRawUnsafe(\`ALTER USER prisma WITH PASSWORD '\${password}'\`)

More Information: https://pris.ly/d/execute-raw
`);
      }
    }
    __name(checkAlter, "checkAlter");
    var actionOperationMap = {
      findUnique: "query",
      findFirst: "query",
      findMany: "query",
      count: "query",
      create: "mutation",
      createMany: "mutation",
      update: "mutation",
      updateMany: "mutation",
      upsert: "mutation",
      delete: "mutation",
      deleteMany: "mutation",
      executeRaw: "mutation",
      queryRaw: "mutation",
      aggregate: "query",
      groupBy: "query",
      runCommandRaw: "mutation",
      findRaw: "query",
      aggregateRaw: "query"
    };
    var TX_ID = Symbol.for("prisma.client.transaction.id");
    function getPrismaClient(config2) {
      class PrismaClient2 {
        constructor(optionsArg) {
          this._middlewares = new Middlewares();
          this._transactionId = 1;
          var _a22, _b2, _c2, _d2, _e, _f, _g, _h, _i;
          if (optionsArg) {
            validatePrismaClientOptions(optionsArg, config2.datasourceNames);
          }
          this._rejectOnNotFound = optionsArg == null ? void 0 : optionsArg.rejectOnNotFound;
          this._clientVersion = (_a22 = config2.clientVersion) != null ? _a22 : clientVersion;
          this._activeProvider = config2.activeProvider;
          this._dataProxy = config2.dataProxy;
          this._clientEngineType = getClientEngineType(config2.generator);
          const envPaths = {
            rootEnvPath: config2.relativeEnvPaths.rootEnvPath && import_path5.default.resolve(config2.dirname, config2.relativeEnvPaths.rootEnvPath),
            schemaEnvPath: config2.relativeEnvPaths.schemaEnvPath && import_path5.default.resolve(config2.dirname, config2.relativeEnvPaths.schemaEnvPath)
          };
          const loadedEnv = tryLoadEnvs(envPaths, { conflictCheck: "none" });
          try {
            const options = optionsArg != null ? optionsArg : {};
            const internal = (_b2 = options.__internal) != null ? _b2 : {};
            const useDebug = internal.debug === true;
            if (useDebug) {
              src_default.enable("prisma:client");
            }
            if (internal.hooks) {
              this._hooks = internal.hooks;
            }
            let cwd = import_path5.default.resolve(config2.dirname, config2.relativePath);
            if (!import_fs8.default.existsSync(cwd)) {
              cwd = config2.dirname;
            }
            debug11("dirname", config2.dirname);
            debug11("relativePath", config2.relativePath);
            debug11("cwd", cwd);
            const thedatasources = options.datasources || {};
            const inputDatasources = Object.entries(thedatasources).filter(([_, source]) => {
              return source && source.url;
            }).map(([name, { url }]) => ({
              name,
              url
            }));
            const datasources = mergeBy([], inputDatasources, (source) => source.name);
            const engineConfig = internal.engine || {};
            if (options.errorFormat) {
              this._errorFormat = options.errorFormat;
            } else if (process.env.NODE_ENV === "production") {
              this._errorFormat = "minimal";
            } else if (process.env.NO_COLOR) {
              this._errorFormat = "colorless";
            } else {
              this._errorFormat = "colorless";
            }
            this._baseDmmf = new BaseDMMFHelper(config2.document);
            if (this._dataProxy) {
              const rawDmmf = config2.document;
              this._dmmf = new DMMFHelper(rawDmmf);
            }
            this._previewFeatures = (_d2 = (_c2 = config2.generator) == null ? void 0 : _c2.previewFeatures) != null ? _d2 : [];
            this._engineConfig = {
              cwd,
              dirname: config2.dirname,
              enableDebugLogs: useDebug,
              allowTriggerPanic: engineConfig.allowTriggerPanic,
              datamodelPath: import_path5.default.join(config2.dirname, (_e = config2.filename) != null ? _e : "schema.prisma"),
              prismaPath: (_f = engineConfig.binaryPath) != null ? _f : void 0,
              engineEndpoint: engineConfig.endpoint,
              datasources,
              generator: config2.generator,
              showColors: this._errorFormat === "pretty",
              logLevel: options.log && getLogLevel(options.log),
              logQueries: options.log && Boolean(typeof options.log === "string" ? options.log === "query" : options.log.find((o) => typeof o === "string" ? o === "query" : o.level === "query")),
              env: (_i = (_h = loadedEnv == null ? void 0 : loadedEnv.parsed) != null ? _h : (_g = config2.injectableEdgeEnv) == null ? void 0 : _g.parsed) != null ? _i : {},
              flags: [],
              clientVersion: config2.clientVersion,
              previewFeatures: mapPreviewFeatures(this._previewFeatures),
              activeProvider: config2.activeProvider,
              inlineSchema: config2.inlineSchema,
              inlineDatasources: config2.inlineDatasources,
              inlineSchemaHash: config2.inlineSchemaHash
            };
            debug11(`clientVersion: ${config2.clientVersion}`);
            debug11(`clientEngineType: ${this._clientEngineType}`);
            this._engine = this.getEngine();
            void this._getActiveProvider();
            this._fetcher = new RequestHandler(this, this._hooks);
            if (options.log) {
              for (const log4 of options.log) {
                const level = typeof log4 === "string" ? log4 : log4.emit === "stdout" ? log4.level : null;
                if (level) {
                  this.$on(level, (event) => {
                    var _a3;
                    logger_exports.log(`${(_a3 = logger_exports.tags[level]) != null ? _a3 : ""}`, event.message || event.query);
                  });
                }
              }
            }
            this._metrics = new MetricsClient(this._engine);
          } catch (e) {
            e.clientVersion = this._clientVersion;
            throw e;
          }
          return applyModels(this);
        }
        get [Symbol.toStringTag]() {
          return "PrismaClient";
        }
        getEngine() {
          if (this._dataProxy === true) {
            return new DataProxyEngine(this._engineConfig);
          } else if (this._clientEngineType === "library") {
            return new LibraryEngine(this._engineConfig);
          } else if (this._clientEngineType === "binary") {
            return new BinaryEngine(this._engineConfig);
          }
          throw new PrismaClientValidationError("Invalid client engine type, please use `library` or `binary`");
        }
        $use(arg0, arg1) {
          if (typeof arg0 === "function") {
            this._middlewares.query.use(arg0);
          } else if (arg0 === "all") {
            this._middlewares.query.use(arg1);
          } else if (arg0 === "engine") {
            this._middlewares.engine.use(arg1);
          } else {
            throw new Error(`Invalid middleware ${arg0}`);
          }
        }
        $on(eventType, callback) {
          if (eventType === "beforeExit") {
            this._engine.on("beforeExit", callback);
          } else {
            this._engine.on(eventType, (event) => {
              var _a22, _b2, _c2, _d2;
              const fields = event.fields;
              if (eventType === "query") {
                return callback({
                  timestamp: event.timestamp,
                  query: (_a22 = fields == null ? void 0 : fields.query) != null ? _a22 : event.query,
                  params: (_b2 = fields == null ? void 0 : fields.params) != null ? _b2 : event.params,
                  duration: (_c2 = fields == null ? void 0 : fields.duration_ms) != null ? _c2 : event.duration,
                  target: event.target
                });
              } else {
                return callback({
                  timestamp: event.timestamp,
                  message: (_d2 = fields == null ? void 0 : fields.message) != null ? _d2 : event.message,
                  target: event.target
                });
              }
            });
          }
        }
        $connect() {
          try {
            return this._engine.start();
          } catch (e) {
            e.clientVersion = this._clientVersion;
            throw e;
          }
        }
        async _runDisconnect() {
          await this._engine.stop();
          delete this._connectionPromise;
          this._engine = this.getEngine();
          delete this._disconnectionPromise;
          delete this._getConfigPromise;
        }
        async $disconnect() {
          try {
            await this._engine.stop();
          } catch (e) {
            e.clientVersion = this._clientVersion;
            throw e;
          } finally {
            if (!this._dataProxy) {
              this._dmmf = void 0;
            }
          }
        }
        async _getActiveProvider() {
          try {
            const configResult = await this._engine.getConfig();
            this._activeProvider = configResult.datasources[0].activeProvider;
          } catch (e) {
          }
        }
        $executeRawInternal(txId, lock, query2, ...values) {
          let queryString = "";
          let parameters = void 0;
          if (typeof query2 === "string") {
            queryString = query2;
            parameters = {
              values: serializeRawParameters(values || []),
              __prismaRawParamaters__: true
            };
            checkAlter(queryString, values, "prisma.$executeRawUnsafe(<SQL>, [...values])");
          } else if (isReadonlyArray(query2)) {
            switch (this._activeProvider) {
              case "sqlite":
              case "mysql": {
                const queryInstance = sqlTemplateTag.sqltag(query2, ...values);
                queryString = queryInstance.sql;
                parameters = {
                  values: serializeRawParameters(queryInstance.values),
                  __prismaRawParamaters__: true
                };
                break;
              }
              case "cockroachdb":
              case "postgresql": {
                const queryInstance = sqlTemplateTag.sqltag(query2, ...values);
                queryString = queryInstance.text;
                checkAlter(queryString, queryInstance.values, "prisma.$executeRaw`<SQL>`");
                parameters = {
                  values: serializeRawParameters(queryInstance.values),
                  __prismaRawParamaters__: true
                };
                break;
              }
              case "sqlserver": {
                queryString = mssqlPreparedStatement(query2);
                parameters = {
                  values: serializeRawParameters(values),
                  __prismaRawParamaters__: true
                };
                break;
              }
              default: {
                throw new Error(`The ${this._activeProvider} provider does not support $executeRaw`);
              }
            }
          } else {
            switch (this._activeProvider) {
              case "sqlite":
              case "mysql":
                queryString = query2.sql;
                break;
              case "cockroachdb":
              case "postgresql":
                queryString = query2.text;
                checkAlter(queryString, query2.values, "prisma.$executeRaw(sql`<SQL>`)");
                break;
              case "sqlserver":
                queryString = mssqlPreparedStatement(query2.strings);
                break;
              default:
                throw new Error(`The ${this._activeProvider} provider does not support $executeRaw`);
            }
            parameters = {
              values: serializeRawParameters(query2.values),
              __prismaRawParamaters__: true
            };
          }
          if (parameters == null ? void 0 : parameters.values) {
            debug11(`prisma.$executeRaw(${queryString}, ${parameters.values})`);
          } else {
            debug11(`prisma.$executeRaw(${queryString})`);
          }
          const args = { query: queryString, parameters };
          debug11(`Prisma Client call:`);
          return this._request({
            args,
            clientMethod: "$executeRaw",
            dataPath: [],
            action: "executeRaw",
            callsite: getCallSite(this._errorFormat),
            runInTransaction: !!txId,
            transactionId: txId,
            lock
          });
        }
        $executeRaw(query2, ...values) {
          return createPrismaPromise((txId, lock) => {
            if (query2.raw !== void 0 || query2.sql !== void 0) {
              return this.$executeRawInternal(txId, lock, query2, ...values);
            }
            throw new PrismaClientValidationError(`\`$executeRaw\` is a tag function, please use it like the following:
\`\`\`
const result = await prisma.$executeRaw\`UPDATE User SET cool = \${true} WHERE email = \${'user@email.com'};\`
\`\`\`

Or read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#executeraw
`);
          });
        }
        $executeRawUnsafe(query2, ...values) {
          return createPrismaPromise((txId, lock) => {
            return this.$executeRawInternal(txId, lock, query2, ...values);
          });
        }
        $runCommandRaw(command) {
          if (config2.activeProvider !== "mongodb") {
            throw new PrismaClientValidationError(`The ${config2.activeProvider} provider does not support $runCommandRaw. Use the mongodb provider.`);
          }
          return createPrismaPromise((txId, lock) => {
            return this._request({
              args: { command },
              clientMethod: "$runCommandRaw",
              dataPath: [],
              action: "runCommandRaw",
              callsite: getCallSite(this._errorFormat),
              runInTransaction: !!txId,
              transactionId: txId,
              lock
            });
          });
        }
        $queryRawInternal(txId, lock, query2, ...values) {
          let queryString = "";
          let parameters = void 0;
          if (typeof query2 === "string") {
            queryString = query2;
            parameters = {
              values: serializeRawParameters(values || []),
              __prismaRawParamaters__: true
            };
          } else if (isReadonlyArray(query2)) {
            switch (this._activeProvider) {
              case "sqlite":
              case "mysql": {
                const queryInstance = sqlTemplateTag.sqltag(query2, ...values);
                queryString = queryInstance.sql;
                parameters = {
                  values: serializeRawParameters(queryInstance.values),
                  __prismaRawParamaters__: true
                };
                break;
              }
              case "cockroachdb":
              case "postgresql": {
                const queryInstance = sqlTemplateTag.sqltag(query2, ...values);
                queryString = queryInstance.text;
                parameters = {
                  values: serializeRawParameters(queryInstance.values),
                  __prismaRawParamaters__: true
                };
                break;
              }
              case "sqlserver": {
                const queryInstance = sqlTemplateTag.sqltag(query2, ...values);
                queryString = mssqlPreparedStatement(queryInstance.strings);
                parameters = {
                  values: serializeRawParameters(queryInstance.values),
                  __prismaRawParamaters__: true
                };
                break;
              }
              default: {
                throw new Error(`The ${this._activeProvider} provider does not support $queryRaw`);
              }
            }
          } else {
            switch (this._activeProvider) {
              case "sqlite":
              case "mysql":
                queryString = query2.sql;
                break;
              case "cockroachdb":
              case "postgresql":
                queryString = query2.text;
                break;
              case "sqlserver":
                queryString = mssqlPreparedStatement(query2.strings);
                break;
              default: {
                throw new Error(`The ${this._activeProvider} provider does not support $queryRaw`);
              }
            }
            parameters = {
              values: serializeRawParameters(query2.values),
              __prismaRawParamaters__: true
            };
          }
          if (parameters == null ? void 0 : parameters.values) {
            debug11(`prisma.queryRaw(${queryString}, ${parameters.values})`);
          } else {
            debug11(`prisma.queryRaw(${queryString})`);
          }
          const args = { query: queryString, parameters };
          debug11(`Prisma Client call:`);
          return this._request({
            args,
            clientMethod: "$queryRaw",
            dataPath: [],
            action: "queryRaw",
            callsite: getCallSite(this._errorFormat),
            runInTransaction: !!txId,
            transactionId: txId,
            lock
          }).then(deserializeRawResults);
        }
        $queryRaw(query2, ...values) {
          return createPrismaPromise((txId, lock) => {
            if (query2.raw !== void 0 || query2.sql !== void 0) {
              return this.$queryRawInternal(txId, lock, query2, ...values);
            }
            throw new PrismaClientValidationError(`\`$queryRaw\` is a tag function, please use it like the following:
\`\`\`
const result = await prisma.$queryRaw\`SELECT * FROM User WHERE id = \${1} OR email = \${'user@email.com'};\`
\`\`\`

Or read our docs at https://www.prisma.io/docs/concepts/components/prisma-client/raw-database-access#queryraw
`);
          });
        }
        $queryRawUnsafe(query2, ...values) {
          return createPrismaPromise((txId, lock) => {
            return this.$queryRawInternal(txId, lock, query2, ...values);
          });
        }
        __internal_triggerPanic(fatal) {
          if (!this._engineConfig.allowTriggerPanic) {
            throw new Error(`In order to use .__internal_triggerPanic(), please enable it like so:
new PrismaClient({
  __internal: {
    engine: {
      allowTriggerPanic: true
    }
  }
})`);
          }
          const headers = fatal ? { "X-DEBUG-FATAL": "1" } : { "X-DEBUG-NON-FATAL": "1" };
          return this._request({
            action: "queryRaw",
            args: {
              query: "SELECT 1",
              parameters: void 0
            },
            clientMethod: "queryRaw",
            dataPath: [],
            runInTransaction: false,
            headers,
            callsite: getCallSite(this._errorFormat)
          });
        }
        _transactionWithArray(promises, transactionTracer) {
          const txId = this._transactionId++;
          const lock = getLockCountPromise(promises.length);
          const _requests = promises.map((request2) => {
            var _a22;
            if ((request2 == null ? void 0 : request2[Symbol.toStringTag]) !== "PrismaPromise") {
              throw new Error(`All elements of the array need to be Prisma Client promises. Hint: Please make sure you are not awaiting the Prisma client calls you intended to pass in the $transaction function.`);
            }
            return (_a22 = request2.requestTransaction) == null ? void 0 : _a22.call(request2, txId, lock, transactionTracer);
          });
          return Promise.all(_requests);
        }
        async _transactionWithCallback({
          callback,
          options,
          transactionTracer
        }) {
          const traceparent = getTraceParent();
          const headers = {
            traceparent
          };
          const info2 = await this._engine.transaction("start", headers, options);
          let result;
          try {
            result = await callback(transactionProxy(this, info2.id, transactionTracer));
            await this._engine.transaction("commit", headers, info2);
          } catch (e) {
            await this._engine.transaction("rollback", headers, info2).catch(() => {
            });
            e.clientVersion = this._clientVersion;
            throw e;
          }
          return result;
        }
        async $transaction(input, options) {
          let callback;
          const transactionTracer = new TransactionTracer();
          if (typeof input === "function" && this._hasPreviewFlag("interactiveTransactions")) {
            callback = /* @__PURE__ */ __name(() => this._transactionWithCallback({ callback: input, options, transactionTracer }), "callback");
          } else {
            callback = /* @__PURE__ */ __name(() => this._transactionWithArray(input, transactionTracer), "callback");
          }
          const tracingConfig = getTracingConfig(this._engine);
          if (tracingConfig.enabled) {
            const options2 = {
              attributes: {
                method: "transaction"
              }
            };
            const tracedCallback = /* @__PURE__ */ __name(() => runInActiveSpan({
              callback,
              name: "prisma",
              options: options2,
              transactionTracer
            }), "tracedCallback");
            return runInActiveSpan({
              callback: tracedCallback,
              name: "prisma:transaction",
              options: options2
            });
          }
          return callback();
        }
        async _request(internalParams) {
          try {
            const params = {
              args: internalParams.args,
              dataPath: internalParams.dataPath,
              runInTransaction: internalParams.runInTransaction,
              action: internalParams.action,
              model: internalParams.model
            };
            const tracingConfig = getTracingConfig(this._engine);
            let index = -1;
            const consumer = /* @__PURE__ */ __name(async (changedParams) => {
              const nextMiddleware = this._middlewares.query.get(++index);
              let middleware;
              let isEnvokingMethod = false;
              if (nextMiddleware) {
                middleware = /* @__PURE__ */ __name(() => nextMiddleware(changedParams, consumer), "middleware");
              } else {
                isEnvokingMethod = true;
                middleware = /* @__PURE__ */ __name(() => this._executeRequest({ ...internalParams, ...changedParams }), "middleware");
              }
              if (tracingConfig.enabled && tracingConfig.middleware && !isEnvokingMethod) {
                const options = {
                  attributes: {
                    method: "$use",
                    sequence: index + 1
                  }
                };
                return await runInSpan({
                  name: "prisma:middleware",
                  options,
                  callback: middleware
                });
              }
              return await middleware();
            }, "consumer");
            let callback;
            if (true) {
              callback = /* @__PURE__ */ __name(() => new import_async_hooks.AsyncResource("prisma-client-request").runInAsyncScope(() => consumer(params)), "callback");
            } else {
              callback = consumer;
            }
            if (tracingConfig.enabled && !internalParams.runInTransaction) {
              const options = {
                attributes: {
                  method: internalParams.action,
                  model: internalParams.model
                }
              };
              return await runInActiveSpan({
                callback: () => callback(params),
                name: "prisma",
                options
              });
            }
            return await callback(params);
          } catch (e) {
            e.clientVersion = this._clientVersion;
            throw e;
          }
        }
        async _executeRequest({
          args,
          clientMethod,
          jsModelName,
          dataPath,
          callsite,
          runInTransaction,
          action,
          model,
          headers,
          transactionId,
          lock,
          unpacker
        }) {
          var _a22, _b2;
          if (this._dmmf === void 0) {
            const dmmf = await this._getDmmf({ clientMethod, callsite });
            this._dmmf = new DMMFHelper(getPrismaClientDMMF(dmmf));
          }
          let rootField;
          const operation = actionOperationMap[action];
          if (action === "executeRaw" || action === "queryRaw" || action === "runCommandRaw") {
            rootField = action;
          }
          let mapping;
          if (model !== void 0) {
            mapping = (_a22 = this._dmmf) == null ? void 0 : _a22.mappingsMap[model];
            if (mapping === void 0) {
              throw new Error(`Could not find mapping for model ${model}`);
            }
            rootField = mapping[action === "count" ? "aggregate" : action];
          }
          if (operation !== "query" && operation !== "mutation") {
            throw new Error(`Invalid operation ${operation} for action ${action}`);
          }
          const field = (_b2 = this._dmmf) == null ? void 0 : _b2.rootFieldMap[rootField];
          if (field === void 0) {
            throw new Error(`Could not find rootField ${rootField} for action ${action} for model ${model} on rootType ${operation}`);
          }
          const { isList } = field.outputType;
          const typeName = getOutputTypeName(field.outputType.type);
          const rejectOnNotFound = getRejectOnNotFound(action, typeName, args, this._rejectOnNotFound);
          warnAboutRejectOnNotFound(rejectOnNotFound, jsModelName, action);
          let document2 = makeDocument({
            dmmf: this._dmmf,
            rootField,
            rootTypeName: operation,
            select: args
          });
          document2.validate(args, false, clientMethod, this._errorFormat, callsite);
          document2 = transformDocument(document2);
          if (src_default.enabled("prisma:client")) {
            const query2 = String(document2);
            debug11(`Prisma Client call:`);
            debug11(`prisma.${clientMethod}(${printJsonWithErrors({
              ast: args,
              keyPaths: [],
              valuePaths: [],
              missingItems: []
            })})`);
            debug11(`Generated request:`);
            debug11(query2 + "\n");
          }
          const tracingConfig = getTracingConfig(this._engine);
          if (tracingConfig.enabled) {
            if (!headers) {
              headers = {};
            }
            const traceparent = getTraceParent();
            if (traceparent) {
              headers.traceparent = traceparent;
            }
          }
          await lock;
          return this._fetcher.request({
            document: document2,
            clientMethod,
            typeName,
            dataPath,
            rejectOnNotFound,
            isList,
            rootField,
            callsite,
            args,
            engineHook: this._middlewares.engine.get(0),
            runInTransaction,
            headers,
            transactionId,
            unpacker
          });
        }
        async _getDmmf(params) {
          try {
            return await this._engine.getDmmf();
          } catch (error2) {
            this._fetcher.handleRequestError({ ...params, error: error2 });
          }
        }
        get $metrics() {
          if (!this._hasPreviewFlag("metrics")) {
            throw new PrismaClientValidationError("`metrics` preview feature must be enabled in order to access metrics API");
          }
          return this._metrics;
        }
        _hasPreviewFlag(feature) {
          var _a22;
          return !!((_a22 = this._engineConfig.previewFeatures) == null ? void 0 : _a22.includes(feature));
        }
      }
      __name(PrismaClient2, "PrismaClient");
      return PrismaClient2;
    }
    __name(getPrismaClient, "getPrismaClient");
    var forbidden = ["$connect", "$disconnect", "$on", "$transaction", "$use"];
    function transactionProxy(thing, txId, transactionTracer) {
      if (typeof thing !== "object")
        return thing;
      return new Proxy(thing, {
        get: (target, prop) => {
          if (forbidden.includes(prop))
            return void 0;
          if (prop === TX_ID)
            return txId;
          if (typeof target[prop] === "function") {
            return (...args) => {
              if (prop === "then")
                return target[prop](args[0], args[1], txId, transactionTracer);
              if (prop === "catch")
                return target[prop](args[0], txId, transactionTracer);
              if (prop === "finally")
                return target[prop](args[0], txId, transactionTracer);
              return transactionProxy(target[prop](...args), txId, transactionTracer);
            };
          }
          return transactionProxy(target[prop], txId, transactionTracer);
        }
      });
    }
    __name(transactionProxy, "transactionProxy");
    var rejectOnNotFoundReplacements = {
      findUnique: "findUniqueOrThrow",
      findFirst: "findFirstOrThrow"
    };
    function warnAboutRejectOnNotFound(rejectOnNotFound, model, action) {
      if (rejectOnNotFound) {
        const replacementAction = rejectOnNotFoundReplacements[action];
        const replacementCall = model ? `prisma.${model}.${replacementAction}` : `prisma.${replacementAction}`;
        const key = `rejectOnNotFound.${model != null ? model : ""}.${action}`;
        warnOnce(key, `\`rejectOnNotFound\` option is deprecated and will be removed in Prisma 5. Please use \`${replacementCall}\` method instead`);
      }
    }
    __name(warnAboutRejectOnNotFound, "warnAboutRejectOnNotFound");
    var import_fs9 = __toESM(require("fs"));
    var import_path6 = __toESM(require("path"));
    var import_util7 = require("util");
    var readdirAsync = (0, import_util7.promisify)(import_fs9.default.readdir);
    var realpathAsync = (0, import_util7.promisify)(import_fs9.default.realpath);
    var statAsync = (0, import_util7.promisify)(import_fs9.default.stat);
    var readdirSync = import_fs9.default.readdirSync;
    var realpathSync = import_fs9.default.realpathSync;
    var statSync = import_fs9.default.statSync;
    function direntToType(dirent) {
      return dirent.isFile() ? "f" : dirent.isDirectory() ? "d" : dirent.isSymbolicLink() ? "l" : void 0;
    }
    __name(direntToType, "direntToType");
    function isMatched(string, regexs) {
      for (const regex of regexs) {
        if (typeof regex === "string") {
          if (string.includes(regex)) {
            return true;
          }
        } else if (regex.exec(string)) {
          return true;
        }
      }
      return false;
    }
    __name(isMatched, "isMatched");
    function findSync(root, match, types = ["f", "d", "l"], deep = [], limit = Infinity, handler = () => true, found = [], seen = {}) {
      try {
        const realRoot = realpathSync(root);
        if (seen[realRoot]) {
          return found;
        }
        if (limit - found.length <= 0) {
          return found;
        }
        if (direntToType(statSync(realRoot)) !== "d") {
          return found;
        }
        const items = readdirSync(root, { withFileTypes: true });
        seen[realRoot] = true;
        for (const item of items) {
          const itemName = item.name;
          const itemType = direntToType(item);
          const itemPath = import_path6.default.join(root, item.name);
          if (itemType && types.includes(itemType)) {
            if (isMatched(itemPath, match)) {
              const value = handler(root, itemName, itemType);
              if (typeof value === "string") {
                found.push(value);
              } else if (value === true) {
                found.push(itemPath);
              }
            }
          }
          if (deep.includes(itemType)) {
            findSync(itemPath, match, types, deep, limit, handler, found, seen);
          }
        }
      } catch (e) {
      }
      return found;
    }
    __name(findSync, "findSync");
    function warnEnvConflicts(envPaths) {
      tryLoadEnvs(envPaths, { conflictCheck: "warn" });
    }
    __name(warnEnvConflicts, "warnEnvConflicts");
    var import_sql_template_tag = __toESM(require_dist());
    var decompressFromBase642 = lzString.decompressFromBase64;
  }
});

// node_modules/.pnpm/@prisma+client@4.1.0_prisma@4.1.0/node_modules/.prisma/client/index.js
var require_client2 = __commonJS2({
  "node_modules/.pnpm/@prisma+client@4.1.0_prisma@4.1.0/node_modules/.prisma/client/index.js"(exports2) {
    Object.defineProperty(exports2, "__esModule", { value: true });
    var {
      PrismaClientKnownRequestError: PrismaClientKnownRequestError2,
      PrismaClientUnknownRequestError: PrismaClientUnknownRequestError2,
      PrismaClientRustPanicError: PrismaClientRustPanicError2,
      PrismaClientInitializationError: PrismaClientInitializationError2,
      PrismaClientValidationError: PrismaClientValidationError2,
      NotFoundError: NotFoundError3,
      decompressFromBase64: decompressFromBase643,
      getPrismaClient: getPrismaClient2,
      sqltag: sqltag2,
      empty: empty2,
      join: join2,
      raw: raw2,
      Decimal: Decimal2,
      objectEnumValues: objectEnumValues2
    } = require_runtime();
    var Prisma = {};
    exports2.Prisma = Prisma;
    Prisma.prismaVersion = {
      client: "4.1.0",
      engine: "8d8414deb360336e4698a65aa45a1fbaf1ce13d8"
    };
    Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError2;
    Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError2;
    Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError2;
    Prisma.PrismaClientInitializationError = PrismaClientInitializationError2;
    Prisma.PrismaClientValidationError = PrismaClientValidationError2;
    Prisma.NotFoundError = NotFoundError3;
    Prisma.Decimal = Decimal2;
    Prisma.sql = sqltag2;
    Prisma.empty = empty2;
    Prisma.join = join2;
    Prisma.raw = raw2;
    Prisma.validator = () => (val) => val;
    Prisma.DbNull = objectEnumValues2.instances.DbNull;
    Prisma.JsonNull = objectEnumValues2.instances.JsonNull;
    Prisma.AnyNull = objectEnumValues2.instances.AnyNull;
    Prisma.NullTypes = {
      DbNull: objectEnumValues2.classes.DbNull,
      JsonNull: objectEnumValues2.classes.JsonNull,
      AnyNull: objectEnumValues2.classes.AnyNull
    };
    var path = require("path");
    var { findSync: findSync2 } = require_runtime();
    var fs = require("fs");
    var hasDirname = typeof __dirname !== "undefined" && __dirname !== "/";
    var regularDirname = hasDirname && fs.existsSync(path.join(__dirname, "schema.prisma")) && __dirname;
    var foundDirname = !regularDirname && findSync2(process.cwd(), [
      "node_modules/.pnpm/@prisma+client@4.1.0_prisma@4.1.0/node_modules/.prisma/client",
      ".pnpm/@prisma+client@4.1.0_prisma@4.1.0/node_modules/.prisma/client"
    ], ["d"], ["d"], 1)[0];
    var dirname2 = regularDirname || foundDirname || __dirname;
    function makeEnum(x) {
      return x;
    }
    exports2.Prisma.PostScalarFieldEnum = makeEnum({
      id: "id",
      createdAt: "createdAt",
      updatedAt: "updatedAt",
      title: "title",
      content: "content",
      authorId: "authorId",
      imageUrl: "imageUrl",
      tags: "tags"
    });
    exports2.Prisma.UserScalarFieldEnum = makeEnum({
      id: "id",
      email: "email",
      passwordHash: "passwordHash",
      name: "name",
      avatarUrl: "avatarUrl"
    });
    exports2.Prisma.SortOrder = makeEnum({
      asc: "asc",
      desc: "desc"
    });
    exports2.Prisma.ModelName = makeEnum({
      Post: "Post",
      User: "User"
    });
    var dmmfString = '{"datamodel":{"enums":[],"models":[{"name":"Post","dbName":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"Int","default":{"name":"autoincrement","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"createdAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":true,"type":"DateTime","default":{"name":"now","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"updatedAt","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"DateTime","isGenerated":false,"isUpdatedAt":true},{"name":"title","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","isGenerated":false,"isUpdatedAt":false},{"name":"content","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","isGenerated":false,"isUpdatedAt":false},{"name":"author","kind":"object","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"User","relationName":"PostToUser","relationFromFields":["authorId"],"relationToFields":["id"],"isGenerated":false,"isUpdatedAt":false},{"name":"authorId","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":true,"hasDefaultValue":false,"type":"Int","isGenerated":false,"isUpdatedAt":false},{"name":"imageUrl","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","isGenerated":false,"isUpdatedAt":false},{"name":"tags","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false},{"name":"User","dbName":null,"fields":[{"name":"id","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":true,"isReadOnly":false,"hasDefaultValue":true,"type":"Int","default":{"name":"autoincrement","args":[]},"isGenerated":false,"isUpdatedAt":false},{"name":"email","kind":"scalar","isList":false,"isRequired":true,"isUnique":true,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","isGenerated":false,"isUpdatedAt":false},{"name":"passwordHash","kind":"scalar","isList":false,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","isGenerated":false,"isUpdatedAt":false},{"name":"name","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","isGenerated":false,"isUpdatedAt":false},{"name":"posts","kind":"object","isList":true,"isRequired":true,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"Post","relationName":"PostToUser","relationFromFields":[],"relationToFields":[],"isGenerated":false,"isUpdatedAt":false},{"name":"avatarUrl","kind":"scalar","isList":false,"isRequired":false,"isUnique":false,"isId":false,"isReadOnly":false,"hasDefaultValue":false,"type":"String","isGenerated":false,"isUpdatedAt":false}],"primaryKey":null,"uniqueFields":[],"uniqueIndexes":[],"isGenerated":false}],"types":[]},"mappings":{"modelOperations":[{"model":"Post","plural":"posts","findUnique":"findUniquePost","findFirst":"findFirstPost","findMany":"findManyPost","create":"createOnePost","createMany":"createManyPost","delete":"deleteOnePost","update":"updateOnePost","deleteMany":"deleteManyPost","updateMany":"updateManyPost","upsert":"upsertOnePost","aggregate":"aggregatePost","groupBy":"groupByPost"},{"model":"User","plural":"users","findUnique":"findUniqueUser","findFirst":"findFirstUser","findMany":"findManyUser","create":"createOneUser","createMany":"createManyUser","delete":"deleteOneUser","update":"updateOneUser","deleteMany":"deleteManyUser","updateMany":"updateManyUser","upsert":"upsertOneUser","aggregate":"aggregateUser","groupBy":"groupByUser"}],"otherOperations":{"read":[],"write":["executeRaw","queryRaw"]}}}';
    var dmmf = JSON.parse(dmmfString);
    exports2.Prisma.dmmf = JSON.parse(dmmfString);
    var config2 = {
      "generator": {
        "name": "client",
        "provider": {
          "fromEnvVar": null,
          "value": "prisma-client-js"
        },
        "output": {
          "value": "/Users/ning/Desktop/ding-umi4/node_modules/.pnpm/@prisma+client@4.1.0_prisma@4.1.0/node_modules/@prisma/client",
          "fromEnvVar": null
        },
        "config": {
          "engineType": "library"
        },
        "binaryTargets": [],
        "previewFeatures": [
          "referentialIntegrity"
        ]
      },
      "relativeEnvPaths": {
        "rootEnvPath": "../../../../../../.env",
        "schemaEnvPath": "../../../../../../.env"
      },
      "relativePath": "../../../../../../prisma",
      "clientVersion": "4.1.0",
      "engineVersion": "8d8414deb360336e4698a65aa45a1fbaf1ce13d8",
      "datasourceNames": [
        "db"
      ],
      "activeProvider": "mysql",
      "dataProxy": false
    };
    config2.document = dmmf;
    config2.dirname = dirname2;
    var { warnEnvConflicts: warnEnvConflicts2 } = require_runtime();
    warnEnvConflicts2({
      rootEnvPath: config2.relativeEnvPaths.rootEnvPath && path.resolve(dirname2, config2.relativeEnvPaths.rootEnvPath),
      schemaEnvPath: config2.relativeEnvPaths.schemaEnvPath && path.resolve(dirname2, config2.relativeEnvPaths.schemaEnvPath)
    });
    var PrismaClient2 = getPrismaClient2(config2);
    exports2.PrismaClient = PrismaClient2;
    Object.assign(exports2, Prisma);
    path.join(__dirname, "libquery_engine-darwin.dylib.node");
    path.join(process.cwd(), "node_modules/.pnpm/@prisma+client@4.1.0_prisma@4.1.0/node_modules/.prisma/client/libquery_engine-darwin.dylib.node");
    path.join(__dirname, "schema.prisma");
    path.join(process.cwd(), "node_modules/.pnpm/@prisma+client@4.1.0_prisma@4.1.0/node_modules/.prisma/client/schema.prisma");
  }
});

// node_modules/.pnpm/@prisma+client@4.1.0_prisma@4.1.0/node_modules/@prisma/client/index.js
var require_client3 = __commonJS2({
  "node_modules/.pnpm/@prisma+client@4.1.0_prisma@4.1.0/node_modules/@prisma/client/index.js"(exports2, module2) {
    module2.exports = {
      ...require_client2()
    };
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/error.js
var require_error2 = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/error.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UpstashError = void 0;
    var UpstashError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "UpstashError";
      }
    };
    exports2.UpstashError = UpstashError;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/util.js
var require_util4 = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseResponse = void 0;
    function parseRecursive(obj) {
      const parsed = Array.isArray(obj) ? obj.map((o) => {
        try {
          return parseRecursive(o);
        } catch {
          return o;
        }
      }) : JSON.parse(obj);
      if (typeof parsed === "number" && parsed.toString() != obj) {
        return obj;
      }
      return parsed;
    }
    function parseResponse(result) {
      try {
        return parseRecursive(result);
      } catch {
        return result;
      }
    }
    exports2.parseResponse = parseResponse;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/command.js
var require_command2 = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/command.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Command = void 0;
    var error_js_1 = require_error2();
    var util_js_1 = require_util4();
    var defaultSerializer = (c) => typeof c === "string" ? c : JSON.stringify(c);
    var Command = class {
      constructor(command, opts) {
        Object.defineProperty(this, "command", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "serialize", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "deserialize", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.serialize = defaultSerializer;
        this.deserialize = typeof opts?.automaticDeserialization === "undefined" || opts.automaticDeserialization ? opts?.deserialize ?? util_js_1.parseResponse : (x) => x;
        this.command = command.map(this.serialize);
      }
      async exec(client) {
        const { result, error: error2 } = await client.request({
          body: this.command
        });
        if (error2) {
          throw new error_js_1.UpstashError(error2);
        }
        if (typeof result === "undefined") {
          throw new Error(`Request did not return a result`);
        }
        return this.deserialize(result);
      }
    };
    exports2.Command = Command;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/append.js
var require_append = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/append.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AppendCommand = void 0;
    var command_js_1 = require_command2();
    var AppendCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["append", ...cmd], opts);
      }
    };
    exports2.AppendCommand = AppendCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/bitcount.js
var require_bitcount = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/bitcount.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BitCountCommand = void 0;
    var command_js_1 = require_command2();
    var BitCountCommand = class extends command_js_1.Command {
      constructor([key, start, end], opts) {
        const command = ["bitcount", key];
        if (typeof start === "number") {
          command.push(start);
        }
        if (typeof end === "number") {
          command.push(end);
        }
        super(command, opts);
      }
    };
    exports2.BitCountCommand = BitCountCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/bitop.js
var require_bitop = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/bitop.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BitOpCommand = void 0;
    var command_js_1 = require_command2();
    var BitOpCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["bitop", ...cmd], opts);
      }
    };
    exports2.BitOpCommand = BitOpCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/bitpos.js
var require_bitpos = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/bitpos.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BitPosCommand = void 0;
    var command_js_1 = require_command2();
    var BitPosCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["bitpos", ...cmd], opts);
      }
    };
    exports2.BitPosCommand = BitPosCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/dbsize.js
var require_dbsize = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/dbsize.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DBSizeCommand = void 0;
    var command_js_1 = require_command2();
    var DBSizeCommand = class extends command_js_1.Command {
      constructor(opts) {
        super(["dbsize"], opts);
      }
    };
    exports2.DBSizeCommand = DBSizeCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/decr.js
var require_decr = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/decr.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DecrCommand = void 0;
    var command_js_1 = require_command2();
    var DecrCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["decr", ...cmd], opts);
      }
    };
    exports2.DecrCommand = DecrCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/decrby.js
var require_decrby = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/decrby.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DecrByCommand = void 0;
    var command_js_1 = require_command2();
    var DecrByCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["decrby", ...cmd], opts);
      }
    };
    exports2.DecrByCommand = DecrByCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/del.js
var require_del = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/del.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DelCommand = void 0;
    var command_js_1 = require_command2();
    var DelCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["del", ...cmd], opts);
      }
    };
    exports2.DelCommand = DelCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/echo.js
var require_echo = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/echo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EchoCommand = void 0;
    var command_js_1 = require_command2();
    var EchoCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["echo", ...cmd], opts);
      }
    };
    exports2.EchoCommand = EchoCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/eval.js
var require_eval = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/eval.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EvalCommand = void 0;
    var command_js_1 = require_command2();
    var EvalCommand = class extends command_js_1.Command {
      constructor([script, keys2, args], opts) {
        super(["eval", script, keys2.length, ...keys2, ...args ?? []], opts);
      }
    };
    exports2.EvalCommand = EvalCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/evalsha.js
var require_evalsha = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/evalsha.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EvalshaCommand = void 0;
    var command_js_1 = require_command2();
    var EvalshaCommand = class extends command_js_1.Command {
      constructor([sha, keys2, args], opts) {
        super(["evalsha", sha, keys2.length, ...keys2, ...args ?? []], opts);
      }
    };
    exports2.EvalshaCommand = EvalshaCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/exists.js
var require_exists = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/exists.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExistsCommand = void 0;
    var command_js_1 = require_command2();
    var ExistsCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["exists", ...cmd], opts);
      }
    };
    exports2.ExistsCommand = ExistsCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/expire.js
var require_expire = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/expire.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExpireCommand = void 0;
    var command_js_1 = require_command2();
    var ExpireCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["expire", ...cmd], opts);
      }
    };
    exports2.ExpireCommand = ExpireCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/expireat.js
var require_expireat = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/expireat.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ExpireAtCommand = void 0;
    var command_js_1 = require_command2();
    var ExpireAtCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["expireat", ...cmd], opts);
      }
    };
    exports2.ExpireAtCommand = ExpireAtCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/flushall.js
var require_flushall = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/flushall.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FlushAllCommand = void 0;
    var command_js_1 = require_command2();
    var FlushAllCommand = class extends command_js_1.Command {
      constructor(args, opts) {
        const command = ["flushall"];
        if (args && args.length > 0 && args[0].async) {
          command.push("async");
        }
        super(command, opts);
      }
    };
    exports2.FlushAllCommand = FlushAllCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/flushdb.js
var require_flushdb = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/flushdb.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.FlushDBCommand = void 0;
    var command_js_1 = require_command2();
    var FlushDBCommand = class extends command_js_1.Command {
      constructor([opts], cmdOpts) {
        const command = ["flushdb"];
        if (opts?.async) {
          command.push("async");
        }
        super(command, cmdOpts);
      }
    };
    exports2.FlushDBCommand = FlushDBCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/get.js
var require_get = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/get.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetCommand = void 0;
    var command_js_1 = require_command2();
    var GetCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["get", ...cmd], opts);
      }
    };
    exports2.GetCommand = GetCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/getbit.js
var require_getbit = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/getbit.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBitCommand = void 0;
    var command_js_1 = require_command2();
    var GetBitCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["getbit", ...cmd], opts);
      }
    };
    exports2.GetBitCommand = GetBitCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/getrange.js
var require_getrange = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/getrange.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetRangeCommand = void 0;
    var command_js_1 = require_command2();
    var GetRangeCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["getrange", ...cmd], opts);
      }
    };
    exports2.GetRangeCommand = GetRangeCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/getset.js
var require_getset = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/getset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetSetCommand = void 0;
    var command_js_1 = require_command2();
    var GetSetCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["getset", ...cmd], opts);
      }
    };
    exports2.GetSetCommand = GetSetCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hdel.js
var require_hdel = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hdel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HDelCommand = void 0;
    var command_js_1 = require_command2();
    var HDelCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["hdel", ...cmd], opts);
      }
    };
    exports2.HDelCommand = HDelCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hexists.js
var require_hexists = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hexists.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HExistsCommand = void 0;
    var command_js_1 = require_command2();
    var HExistsCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["hexists", ...cmd], opts);
      }
    };
    exports2.HExistsCommand = HExistsCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hget.js
var require_hget = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hget.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HGetCommand = void 0;
    var command_js_1 = require_command2();
    var HGetCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["hget", ...cmd], opts);
      }
    };
    exports2.HGetCommand = HGetCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hgetall.js
var require_hgetall = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hgetall.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HGetAllCommand = void 0;
    var command_js_1 = require_command2();
    function deserialize(result) {
      if (result.length === 0) {
        return null;
      }
      const obj = {};
      while (result.length >= 2) {
        const key = result.shift();
        const value = result.shift();
        try {
          obj[key] = JSON.parse(value);
        } catch {
          obj[key] = value;
        }
      }
      return obj;
    }
    var HGetAllCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["hgetall", ...cmd], {
          deserialize: (result) => deserialize(result),
          ...opts
        });
      }
    };
    exports2.HGetAllCommand = HGetAllCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hincrby.js
var require_hincrby = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hincrby.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HIncrByCommand = void 0;
    var command_js_1 = require_command2();
    var HIncrByCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["hincrby", ...cmd], opts);
      }
    };
    exports2.HIncrByCommand = HIncrByCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hincrbyfloat.js
var require_hincrbyfloat = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hincrbyfloat.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HIncrByFloatCommand = void 0;
    var command_js_1 = require_command2();
    var HIncrByFloatCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["hincrbyfloat", ...cmd], opts);
      }
    };
    exports2.HIncrByFloatCommand = HIncrByFloatCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hkeys.js
var require_hkeys = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hkeys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HKeysCommand = void 0;
    var command_js_1 = require_command2();
    var HKeysCommand = class extends command_js_1.Command {
      constructor([key], opts) {
        super(["hkeys", key], opts);
      }
    };
    exports2.HKeysCommand = HKeysCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hlen.js
var require_hlen = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hlen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HLenCommand = void 0;
    var command_js_1 = require_command2();
    var HLenCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["hlen", ...cmd], opts);
      }
    };
    exports2.HLenCommand = HLenCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hmget.js
var require_hmget = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hmget.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HMGetCommand = void 0;
    var command_js_1 = require_command2();
    function deserialize(fields, result) {
      if (result.length === 0 || result.every((field) => field === null)) {
        return null;
      }
      const obj = {};
      for (let i = 0; i < fields.length; i++) {
        try {
          obj[fields[i]] = JSON.parse(result[i]);
        } catch {
          obj[fields[i]] = result[i];
        }
      }
      return obj;
    }
    var HMGetCommand = class extends command_js_1.Command {
      constructor([key, ...fields], opts) {
        super(["hmget", key, ...fields], {
          deserialize: (result) => deserialize(fields, result),
          ...opts
        });
      }
    };
    exports2.HMGetCommand = HMGetCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hmset.js
var require_hmset = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hmset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HMSetCommand = void 0;
    var command_js_1 = require_command2();
    var HMSetCommand = class extends command_js_1.Command {
      constructor([key, kv], opts) {
        super([
          "hmset",
          key,
          ...Object.entries(kv).flatMap(([field, value]) => [field, value])
        ], opts);
      }
    };
    exports2.HMSetCommand = HMSetCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hscan.js
var require_hscan = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hscan.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HScanCommand = void 0;
    var command_js_1 = require_command2();
    var HScanCommand = class extends command_js_1.Command {
      constructor([key, cursor, cmdOpts], opts) {
        const command = ["hscan", key, cursor];
        if (cmdOpts?.match) {
          command.push("match", cmdOpts.match);
        }
        if (typeof cmdOpts?.count === "number") {
          command.push("count", cmdOpts.count);
        }
        super(command, opts);
      }
    };
    exports2.HScanCommand = HScanCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hset.js
var require_hset = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HSetCommand = void 0;
    var command_js_1 = require_command2();
    var HSetCommand = class extends command_js_1.Command {
      constructor([key, kv], opts) {
        super([
          "hset",
          key,
          ...Object.entries(kv).flatMap(([field, value]) => [field, value])
        ], opts);
      }
    };
    exports2.HSetCommand = HSetCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hsetnx.js
var require_hsetnx = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hsetnx.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HSetNXCommand = void 0;
    var command_js_1 = require_command2();
    var HSetNXCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["hsetnx", ...cmd], opts);
      }
    };
    exports2.HSetNXCommand = HSetNXCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hstrlen.js
var require_hstrlen = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hstrlen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HStrLenCommand = void 0;
    var command_js_1 = require_command2();
    var HStrLenCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["hstrlen", ...cmd], opts);
      }
    };
    exports2.HStrLenCommand = HStrLenCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hvals.js
var require_hvals = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/hvals.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HValsCommand = void 0;
    var command_js_1 = require_command2();
    var HValsCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["hvals", ...cmd], opts);
      }
    };
    exports2.HValsCommand = HValsCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/incr.js
var require_incr = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/incr.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IncrCommand = void 0;
    var command_js_1 = require_command2();
    var IncrCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["incr", ...cmd], opts);
      }
    };
    exports2.IncrCommand = IncrCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/incrby.js
var require_incrby = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/incrby.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IncrByCommand = void 0;
    var command_js_1 = require_command2();
    var IncrByCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["incrby", ...cmd], opts);
      }
    };
    exports2.IncrByCommand = IncrByCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/incrbyfloat.js
var require_incrbyfloat = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/incrbyfloat.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IncrByFloatCommand = void 0;
    var command_js_1 = require_command2();
    var IncrByFloatCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["incrbyfloat", ...cmd], opts);
      }
    };
    exports2.IncrByFloatCommand = IncrByFloatCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/keys.js
var require_keys = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/keys.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.KeysCommand = void 0;
    var command_js_1 = require_command2();
    var KeysCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["keys", ...cmd], opts);
      }
    };
    exports2.KeysCommand = KeysCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/lindex.js
var require_lindex = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/lindex.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LIndexCommand = void 0;
    var command_js_1 = require_command2();
    var LIndexCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["lindex", ...cmd], opts);
      }
    };
    exports2.LIndexCommand = LIndexCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/linsert.js
var require_linsert = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/linsert.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LInsertCommand = void 0;
    var command_js_1 = require_command2();
    var LInsertCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["linsert", ...cmd], opts);
      }
    };
    exports2.LInsertCommand = LInsertCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/llen.js
var require_llen = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/llen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LLenCommand = void 0;
    var command_js_1 = require_command2();
    var LLenCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["llen", ...cmd], opts);
      }
    };
    exports2.LLenCommand = LLenCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/lpop.js
var require_lpop = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/lpop.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LPopCommand = void 0;
    var command_js_1 = require_command2();
    var LPopCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["lpop", ...cmd], opts);
      }
    };
    exports2.LPopCommand = LPopCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/lpos.js
var require_lpos = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/lpos.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LPosCommand = void 0;
    var command_js_1 = require_command2();
    var LPosCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        const args = ["lpos", cmd[0], cmd[1]];
        if (typeof cmd[2]?.rank === "number") {
          args.push("rank", cmd[2].rank);
        }
        if (typeof cmd[2]?.count === "number") {
          args.push("count", cmd[2].count);
        }
        if (typeof cmd[2]?.maxLen === "number") {
          args.push("maxLen", cmd[2].maxLen);
        }
        super(args, opts);
      }
    };
    exports2.LPosCommand = LPosCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/lpush.js
var require_lpush = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/lpush.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LPushCommand = void 0;
    var command_js_1 = require_command2();
    var LPushCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["lpush", ...cmd], opts);
      }
    };
    exports2.LPushCommand = LPushCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/lpushx.js
var require_lpushx = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/lpushx.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LPushXCommand = void 0;
    var command_js_1 = require_command2();
    var LPushXCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["lpushx", ...cmd], opts);
      }
    };
    exports2.LPushXCommand = LPushXCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/lrange.js
var require_lrange = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/lrange.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LRangeCommand = void 0;
    var command_js_1 = require_command2();
    var LRangeCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["lrange", ...cmd], opts);
      }
    };
    exports2.LRangeCommand = LRangeCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/lrem.js
var require_lrem = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/lrem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LRemCommand = void 0;
    var command_js_1 = require_command2();
    var LRemCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["lrem", ...cmd], opts);
      }
    };
    exports2.LRemCommand = LRemCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/lset.js
var require_lset = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/lset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LSetCommand = void 0;
    var command_js_1 = require_command2();
    var LSetCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["lset", ...cmd], opts);
      }
    };
    exports2.LSetCommand = LSetCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/ltrim.js
var require_ltrim = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/ltrim.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LTrimCommand = void 0;
    var command_js_1 = require_command2();
    var LTrimCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["ltrim", ...cmd], opts);
      }
    };
    exports2.LTrimCommand = LTrimCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/mget.js
var require_mget = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/mget.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MGetCommand = void 0;
    var command_js_1 = require_command2();
    var MGetCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["mget", ...cmd], opts);
      }
    };
    exports2.MGetCommand = MGetCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/mset.js
var require_mset = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/mset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MSetCommand = void 0;
    var command_js_1 = require_command2();
    var MSetCommand = class extends command_js_1.Command {
      constructor([kv], opts) {
        super([
          "mset",
          ...Object.entries(kv).flatMap(([key, value]) => [key, value])
        ], opts);
      }
    };
    exports2.MSetCommand = MSetCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/msetnx.js
var require_msetnx = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/msetnx.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MSetNXCommand = void 0;
    var command_js_1 = require_command2();
    var MSetNXCommand = class extends command_js_1.Command {
      constructor([kv], opts) {
        super(["msetnx", ...Object.entries(kv).flatMap((_) => _)], opts);
      }
    };
    exports2.MSetNXCommand = MSetNXCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/persist.js
var require_persist = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/persist.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PersistCommand = void 0;
    var command_js_1 = require_command2();
    var PersistCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["persist", ...cmd], opts);
      }
    };
    exports2.PersistCommand = PersistCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/pexpire.js
var require_pexpire = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/pexpire.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PExpireCommand = void 0;
    var command_js_1 = require_command2();
    var PExpireCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["pexpire", ...cmd], opts);
      }
    };
    exports2.PExpireCommand = PExpireCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/pexpireat.js
var require_pexpireat = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/pexpireat.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PExpireAtCommand = void 0;
    var command_js_1 = require_command2();
    var PExpireAtCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["pexpireat", ...cmd], opts);
      }
    };
    exports2.PExpireAtCommand = PExpireAtCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/ping.js
var require_ping = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/ping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PingCommand = void 0;
    var command_js_1 = require_command2();
    var PingCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        const command = ["ping"];
        if (typeof cmd !== "undefined" && typeof cmd[0] !== "undefined") {
          command.push(cmd[0]);
        }
        super(command, opts);
      }
    };
    exports2.PingCommand = PingCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/psetex.js
var require_psetex = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/psetex.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PSetEXCommand = void 0;
    var command_js_1 = require_command2();
    var PSetEXCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["psetex", ...cmd], opts);
      }
    };
    exports2.PSetEXCommand = PSetEXCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/pttl.js
var require_pttl = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/pttl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PTtlCommand = void 0;
    var command_js_1 = require_command2();
    var PTtlCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["pttl", ...cmd], opts);
      }
    };
    exports2.PTtlCommand = PTtlCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/publish.js
var require_publish = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/publish.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PublishCommand = void 0;
    var command_js_1 = require_command2();
    var PublishCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["publish", ...cmd], opts);
      }
    };
    exports2.PublishCommand = PublishCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/randomkey.js
var require_randomkey = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/randomkey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RandomKeyCommand = void 0;
    var command_js_1 = require_command2();
    var RandomKeyCommand = class extends command_js_1.Command {
      constructor(opts) {
        super(["randomkey"], opts);
      }
    };
    exports2.RandomKeyCommand = RandomKeyCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/rename.js
var require_rename = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/rename.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RenameCommand = void 0;
    var command_js_1 = require_command2();
    var RenameCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["rename", ...cmd], opts);
      }
    };
    exports2.RenameCommand = RenameCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/renamenx.js
var require_renamenx = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/renamenx.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RenameNXCommand = void 0;
    var command_js_1 = require_command2();
    var RenameNXCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["renamenx", ...cmd], opts);
      }
    };
    exports2.RenameNXCommand = RenameNXCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/rpop.js
var require_rpop = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/rpop.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RPopCommand = void 0;
    var command_js_1 = require_command2();
    var RPopCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["rpop", ...cmd], opts);
      }
    };
    exports2.RPopCommand = RPopCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/rpush.js
var require_rpush = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/rpush.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RPushCommand = void 0;
    var command_js_1 = require_command2();
    var RPushCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["rpush", ...cmd], opts);
      }
    };
    exports2.RPushCommand = RPushCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/rpushx.js
var require_rpushx = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/rpushx.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RPushXCommand = void 0;
    var command_js_1 = require_command2();
    var RPushXCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["rpushx", ...cmd], opts);
      }
    };
    exports2.RPushXCommand = RPushXCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sadd.js
var require_sadd = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sadd.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SAddCommand = void 0;
    var command_js_1 = require_command2();
    var SAddCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["sadd", ...cmd], opts);
      }
    };
    exports2.SAddCommand = SAddCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/scan.js
var require_scan = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/scan.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ScanCommand = void 0;
    var command_js_1 = require_command2();
    var ScanCommand = class extends command_js_1.Command {
      constructor([cursor, opts], cmdOpts) {
        const command = ["scan", cursor];
        if (opts?.match) {
          command.push("match", opts.match);
        }
        if (typeof opts?.count === "number") {
          command.push("count", opts.count);
        }
        super(command, cmdOpts);
      }
    };
    exports2.ScanCommand = ScanCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/scard.js
var require_scard = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/scard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SCardCommand = void 0;
    var command_js_1 = require_command2();
    var SCardCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["scard", ...cmd], opts);
      }
    };
    exports2.SCardCommand = SCardCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/script_exists.js
var require_script_exists = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/script_exists.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ScriptExistsCommand = void 0;
    var command_js_1 = require_command2();
    var ScriptExistsCommand = class extends command_js_1.Command {
      constructor(hashes, opts) {
        super(["script", "exists", ...hashes], {
          deserialize: (result) => result,
          ...opts
        });
      }
    };
    exports2.ScriptExistsCommand = ScriptExistsCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/script_flush.js
var require_script_flush = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/script_flush.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ScriptFlushCommand = void 0;
    var command_js_1 = require_command2();
    var ScriptFlushCommand = class extends command_js_1.Command {
      constructor([opts], cmdOpts) {
        const cmd = ["script", "flush"];
        if (opts?.sync) {
          cmd.push("sync");
        } else if (opts?.async) {
          cmd.push("async");
        }
        super(cmd, cmdOpts);
      }
    };
    exports2.ScriptFlushCommand = ScriptFlushCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/script_load.js
var require_script_load = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/script_load.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ScriptLoadCommand = void 0;
    var command_js_1 = require_command2();
    var ScriptLoadCommand = class extends command_js_1.Command {
      constructor(args, opts) {
        super(["script", "load", ...args], opts);
      }
    };
    exports2.ScriptLoadCommand = ScriptLoadCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sdiff.js
var require_sdiff = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sdiff.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SDiffCommand = void 0;
    var command_js_1 = require_command2();
    var SDiffCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["sdiff", ...cmd], opts);
      }
    };
    exports2.SDiffCommand = SDiffCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sdiffstore.js
var require_sdiffstore = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sdiffstore.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SDiffStoreCommand = void 0;
    var command_js_1 = require_command2();
    var SDiffStoreCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["sdiffstore", ...cmd], opts);
      }
    };
    exports2.SDiffStoreCommand = SDiffStoreCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/set.js
var require_set = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/set.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SetCommand = void 0;
    var command_js_1 = require_command2();
    var SetCommand = class extends command_js_1.Command {
      constructor([key, value, opts], cmdOpts) {
        const command = ["set", key, value];
        if (opts) {
          if ("ex" in opts && typeof opts.ex === "number") {
            command.push("ex", opts.ex);
          } else if ("px" in opts && typeof opts.px === "number") {
            command.push("px", opts.px);
          }
          if ("nx" in opts && opts.nx) {
            command.push("nx");
          } else if ("xx" in opts && opts.xx) {
            command.push("xx");
          }
        }
        super(command, cmdOpts);
      }
    };
    exports2.SetCommand = SetCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/setbit.js
var require_setbit = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/setbit.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SetBitCommand = void 0;
    var command_js_1 = require_command2();
    var SetBitCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["setbit", ...cmd], opts);
      }
    };
    exports2.SetBitCommand = SetBitCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/setex.js
var require_setex = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/setex.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SetExCommand = void 0;
    var command_js_1 = require_command2();
    var SetExCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["setex", ...cmd], opts);
      }
    };
    exports2.SetExCommand = SetExCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/setnx.js
var require_setnx = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/setnx.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SetNxCommand = void 0;
    var command_js_1 = require_command2();
    var SetNxCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["setnx", ...cmd], opts);
      }
    };
    exports2.SetNxCommand = SetNxCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/setrange.js
var require_setrange = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/setrange.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SetRangeCommand = void 0;
    var command_js_1 = require_command2();
    var SetRangeCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["setrange", ...cmd], opts);
      }
    };
    exports2.SetRangeCommand = SetRangeCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sinter.js
var require_sinter = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sinter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SInterCommand = void 0;
    var command_js_1 = require_command2();
    var SInterCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["sinter", ...cmd], opts);
      }
    };
    exports2.SInterCommand = SInterCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sinterstore.js
var require_sinterstore = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sinterstore.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SInterStoreCommand = void 0;
    var command_js_1 = require_command2();
    var SInterStoreCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["sinterstore", ...cmd], opts);
      }
    };
    exports2.SInterStoreCommand = SInterStoreCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sismember.js
var require_sismember = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sismember.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SIsMemberCommand = void 0;
    var command_js_1 = require_command2();
    var SIsMemberCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["sismember", ...cmd], opts);
      }
    };
    exports2.SIsMemberCommand = SIsMemberCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/smembers.js
var require_smembers = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/smembers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SMembersCommand = void 0;
    var command_js_1 = require_command2();
    var SMembersCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["smembers", ...cmd], opts);
      }
    };
    exports2.SMembersCommand = SMembersCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/smove.js
var require_smove = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/smove.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SMoveCommand = void 0;
    var command_js_1 = require_command2();
    var SMoveCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["smove", ...cmd], opts);
      }
    };
    exports2.SMoveCommand = SMoveCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/spop.js
var require_spop = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/spop.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SPopCommand = void 0;
    var command_js_1 = require_command2();
    var SPopCommand = class extends command_js_1.Command {
      constructor([key, count2], opts) {
        const command = ["spop", key];
        if (typeof count2 === "number") {
          command.push(count2);
        }
        super(command, opts);
      }
    };
    exports2.SPopCommand = SPopCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/srandmember.js
var require_srandmember = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/srandmember.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SRandMemberCommand = void 0;
    var command_js_1 = require_command2();
    var SRandMemberCommand = class extends command_js_1.Command {
      constructor([key, count2], opts) {
        const command = ["srandmember", key];
        if (typeof count2 === "number") {
          command.push(count2);
        }
        super(command, opts);
      }
    };
    exports2.SRandMemberCommand = SRandMemberCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/srem.js
var require_srem = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/srem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SRemCommand = void 0;
    var command_js_1 = require_command2();
    var SRemCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["srem", ...cmd], opts);
      }
    };
    exports2.SRemCommand = SRemCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sscan.js
var require_sscan = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sscan.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SScanCommand = void 0;
    var command_js_1 = require_command2();
    var SScanCommand = class extends command_js_1.Command {
      constructor([key, cursor, opts], cmdOpts) {
        const command = ["sscan", key, cursor];
        if (opts?.match) {
          command.push("match", opts.match);
        }
        if (typeof opts?.count === "number") {
          command.push("count", opts.count);
        }
        super(command, cmdOpts);
      }
    };
    exports2.SScanCommand = SScanCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/strlen.js
var require_strlen = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/strlen.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StrLenCommand = void 0;
    var command_js_1 = require_command2();
    var StrLenCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["strlen", ...cmd], opts);
      }
    };
    exports2.StrLenCommand = StrLenCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sunion.js
var require_sunion = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sunion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SUnionCommand = void 0;
    var command_js_1 = require_command2();
    var SUnionCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["sunion", ...cmd], opts);
      }
    };
    exports2.SUnionCommand = SUnionCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sunionstore.js
var require_sunionstore = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/sunionstore.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SUnionStoreCommand = void 0;
    var command_js_1 = require_command2();
    var SUnionStoreCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["sunionstore", ...cmd], opts);
      }
    };
    exports2.SUnionStoreCommand = SUnionStoreCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/time.js
var require_time = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/time.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TimeCommand = void 0;
    var command_js_1 = require_command2();
    var TimeCommand = class extends command_js_1.Command {
      constructor(opts) {
        super(["time"], opts);
      }
    };
    exports2.TimeCommand = TimeCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/touch.js
var require_touch = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/touch.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TouchCommand = void 0;
    var command_js_1 = require_command2();
    var TouchCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["touch", ...cmd], opts);
      }
    };
    exports2.TouchCommand = TouchCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/ttl.js
var require_ttl = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/ttl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TtlCommand = void 0;
    var command_js_1 = require_command2();
    var TtlCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["ttl", ...cmd], opts);
      }
    };
    exports2.TtlCommand = TtlCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/type.js
var require_type = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/type.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TypeCommand = void 0;
    var command_js_1 = require_command2();
    var TypeCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["type", ...cmd], opts);
      }
    };
    exports2.TypeCommand = TypeCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/unlink.js
var require_unlink = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/unlink.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UnlinkCommand = void 0;
    var command_js_1 = require_command2();
    var UnlinkCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["unlink", ...cmd], opts);
      }
    };
    exports2.UnlinkCommand = UnlinkCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zadd.js
var require_zadd = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zadd.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZAddCommand = void 0;
    var command_js_1 = require_command2();
    var ZAddCommand = class extends command_js_1.Command {
      constructor([key, arg1, ...arg2], opts) {
        const command = ["zadd", key];
        if ("nx" in arg1 && arg1.nx) {
          command.push("nx");
        } else if ("xx" in arg1 && arg1.xx) {
          command.push("xx");
        }
        if ("ch" in arg1 && arg1.ch) {
          command.push("ch");
        }
        if ("incr" in arg1 && arg1.incr) {
          command.push("incr");
        }
        if ("score" in arg1 && "member" in arg1) {
          command.push(arg1.score, arg1.member);
        }
        command.push(...arg2.flatMap(({ score, member }) => [score, member]));
        super(command, opts);
      }
    };
    exports2.ZAddCommand = ZAddCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zcard.js
var require_zcard = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zcard.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZCardCommand = void 0;
    var command_js_1 = require_command2();
    var ZCardCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["zcard", ...cmd], opts);
      }
    };
    exports2.ZCardCommand = ZCardCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zcount.js
var require_zcount = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zcount.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZCountCommand = void 0;
    var command_js_1 = require_command2();
    var ZCountCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["zcount", ...cmd], opts);
      }
    };
    exports2.ZCountCommand = ZCountCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zincrby.js
var require_zincrby = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zincrby.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZIncrByCommand = void 0;
    var command_js_1 = require_command2();
    var ZIncrByCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["zincrby", ...cmd], opts);
      }
    };
    exports2.ZIncrByCommand = ZIncrByCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zinterstore.js
var require_zinterstore = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zinterstore.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZInterStoreCommand = void 0;
    var command_js_1 = require_command2();
    var ZInterStoreCommand = class extends command_js_1.Command {
      constructor([destination, numKeys, keyOrKeys, opts], cmdOpts) {
        const command = ["zinterstore", destination, numKeys];
        if (Array.isArray(keyOrKeys)) {
          command.push(...keyOrKeys);
        } else {
          command.push(keyOrKeys);
        }
        if (opts) {
          if ("weights" in opts && opts.weights) {
            command.push("weights", ...opts.weights);
          } else if ("weight" in opts && typeof opts.weight === "number") {
            command.push("weights", opts.weight);
          }
          if ("aggregate" in opts) {
            command.push("aggregate", opts.aggregate);
          }
        }
        super(command, cmdOpts);
      }
    };
    exports2.ZInterStoreCommand = ZInterStoreCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zlexcount.js
var require_zlexcount = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zlexcount.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZLexCountCommand = void 0;
    var command_js_1 = require_command2();
    var ZLexCountCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["zlexcount", ...cmd], opts);
      }
    };
    exports2.ZLexCountCommand = ZLexCountCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zpopmax.js
var require_zpopmax = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zpopmax.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZPopMaxCommand = void 0;
    var command_js_1 = require_command2();
    var ZPopMaxCommand = class extends command_js_1.Command {
      constructor([key, count2], opts) {
        const command = ["zpopmax", key];
        if (typeof count2 === "number") {
          command.push(count2);
        }
        super(command, opts);
      }
    };
    exports2.ZPopMaxCommand = ZPopMaxCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zpopmin.js
var require_zpopmin = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zpopmin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZPopMinCommand = void 0;
    var command_js_1 = require_command2();
    var ZPopMinCommand = class extends command_js_1.Command {
      constructor([key, count2], opts) {
        const command = ["zpopmin", key];
        if (typeof count2 === "number") {
          command.push(count2);
        }
        super(command, opts);
      }
    };
    exports2.ZPopMinCommand = ZPopMinCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zrange.js
var require_zrange = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zrange.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZRangeCommand = void 0;
    var command_js_1 = require_command2();
    var ZRangeCommand = class extends command_js_1.Command {
      constructor([key, min2, max2, opts], cmdOpts) {
        const command = ["zrange", key, min2, max2];
        if (opts?.byScore) {
          command.push("byscore");
        }
        if (opts?.byLex) {
          command.push("bylex");
        }
        if (opts?.rev) {
          command.push("rev");
        }
        if (typeof opts?.count !== "undefined" && typeof opts?.offset !== "undefined") {
          command.push("limit", opts.offset, opts.count);
        }
        if (opts?.withScores) {
          command.push("withscores");
        }
        super(command, cmdOpts);
      }
    };
    exports2.ZRangeCommand = ZRangeCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zrank.js
var require_zrank = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zrank.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZRankCommand = void 0;
    var command_js_1 = require_command2();
    var ZRankCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["zrank", ...cmd], opts);
      }
    };
    exports2.ZRankCommand = ZRankCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zrem.js
var require_zrem = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zrem.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZRemCommand = void 0;
    var command_js_1 = require_command2();
    var ZRemCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["zrem", ...cmd], opts);
      }
    };
    exports2.ZRemCommand = ZRemCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zremrangebylex.js
var require_zremrangebylex = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zremrangebylex.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZRemRangeByLexCommand = void 0;
    var command_js_1 = require_command2();
    var ZRemRangeByLexCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["zremrangebylex", ...cmd], opts);
      }
    };
    exports2.ZRemRangeByLexCommand = ZRemRangeByLexCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zremrangebyrank.js
var require_zremrangebyrank = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zremrangebyrank.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZRemRangeByRankCommand = void 0;
    var command_js_1 = require_command2();
    var ZRemRangeByRankCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["zremrangebyrank", ...cmd], opts);
      }
    };
    exports2.ZRemRangeByRankCommand = ZRemRangeByRankCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zremrangebyscore.js
var require_zremrangebyscore = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zremrangebyscore.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZRemRangeByScoreCommand = void 0;
    var command_js_1 = require_command2();
    var ZRemRangeByScoreCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["zremrangebyscore", ...cmd], opts);
      }
    };
    exports2.ZRemRangeByScoreCommand = ZRemRangeByScoreCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zrevrank.js
var require_zrevrank = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zrevrank.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZRevRankCommand = void 0;
    var command_js_1 = require_command2();
    var ZRevRankCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["zrevrank", ...cmd], opts);
      }
    };
    exports2.ZRevRankCommand = ZRevRankCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zscan.js
var require_zscan = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zscan.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZScanCommand = void 0;
    var command_js_1 = require_command2();
    var ZScanCommand = class extends command_js_1.Command {
      constructor([key, cursor, opts], cmdOpts) {
        const command = ["zscan", key, cursor];
        if (opts?.match) {
          command.push("match", opts.match);
        }
        if (typeof opts?.count === "number") {
          command.push("count", opts.count);
        }
        super(command, cmdOpts);
      }
    };
    exports2.ZScanCommand = ZScanCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zscore.js
var require_zscore = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zscore.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZScoreCommand = void 0;
    var command_js_1 = require_command2();
    var ZScoreCommand = class extends command_js_1.Command {
      constructor(cmd, opts) {
        super(["zscore", ...cmd], opts);
      }
    };
    exports2.ZScoreCommand = ZScoreCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zunionstore.js
var require_zunionstore = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/zunionstore.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZUnionStoreCommand = void 0;
    var command_js_1 = require_command2();
    var ZUnionStoreCommand = class extends command_js_1.Command {
      constructor([destination, numKeys, keyOrKeys, opts], cmdOpts) {
        const command = ["zunionstore", destination, numKeys];
        if (Array.isArray(keyOrKeys)) {
          command.push(...keyOrKeys);
        } else {
          command.push(keyOrKeys);
        }
        if (opts) {
          if ("weights" in opts && opts.weights) {
            command.push("weights", ...opts.weights);
          } else if ("weight" in opts && typeof opts.weight === "number") {
            command.push("weights", opts.weight);
          }
          if ("aggregate" in opts) {
            command.push("aggregate", opts.aggregate);
          }
        }
        super(command, cmdOpts);
      }
    };
    exports2.ZUnionStoreCommand = ZUnionStoreCommand;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/mod.js
var require_mod = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/commands/mod.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_append(), exports2);
    __exportStar(require_bitcount(), exports2);
    __exportStar(require_bitop(), exports2);
    __exportStar(require_bitpos(), exports2);
    __exportStar(require_command2(), exports2);
    __exportStar(require_dbsize(), exports2);
    __exportStar(require_decr(), exports2);
    __exportStar(require_decrby(), exports2);
    __exportStar(require_del(), exports2);
    __exportStar(require_echo(), exports2);
    __exportStar(require_eval(), exports2);
    __exportStar(require_evalsha(), exports2);
    __exportStar(require_exists(), exports2);
    __exportStar(require_expire(), exports2);
    __exportStar(require_expireat(), exports2);
    __exportStar(require_flushall(), exports2);
    __exportStar(require_flushdb(), exports2);
    __exportStar(require_get(), exports2);
    __exportStar(require_getbit(), exports2);
    __exportStar(require_getrange(), exports2);
    __exportStar(require_getset(), exports2);
    __exportStar(require_hdel(), exports2);
    __exportStar(require_hexists(), exports2);
    __exportStar(require_hget(), exports2);
    __exportStar(require_hgetall(), exports2);
    __exportStar(require_hincrby(), exports2);
    __exportStar(require_hincrbyfloat(), exports2);
    __exportStar(require_hkeys(), exports2);
    __exportStar(require_hlen(), exports2);
    __exportStar(require_hmget(), exports2);
    __exportStar(require_hmset(), exports2);
    __exportStar(require_hscan(), exports2);
    __exportStar(require_hset(), exports2);
    __exportStar(require_hsetnx(), exports2);
    __exportStar(require_hstrlen(), exports2);
    __exportStar(require_hvals(), exports2);
    __exportStar(require_incr(), exports2);
    __exportStar(require_incrby(), exports2);
    __exportStar(require_incrbyfloat(), exports2);
    __exportStar(require_keys(), exports2);
    __exportStar(require_lindex(), exports2);
    __exportStar(require_linsert(), exports2);
    __exportStar(require_llen(), exports2);
    __exportStar(require_lpop(), exports2);
    __exportStar(require_lpos(), exports2);
    __exportStar(require_lpush(), exports2);
    __exportStar(require_lpushx(), exports2);
    __exportStar(require_lrange(), exports2);
    __exportStar(require_lrem(), exports2);
    __exportStar(require_lset(), exports2);
    __exportStar(require_ltrim(), exports2);
    __exportStar(require_mget(), exports2);
    __exportStar(require_mset(), exports2);
    __exportStar(require_msetnx(), exports2);
    __exportStar(require_persist(), exports2);
    __exportStar(require_pexpire(), exports2);
    __exportStar(require_pexpireat(), exports2);
    __exportStar(require_ping(), exports2);
    __exportStar(require_psetex(), exports2);
    __exportStar(require_pttl(), exports2);
    __exportStar(require_publish(), exports2);
    __exportStar(require_randomkey(), exports2);
    __exportStar(require_rename(), exports2);
    __exportStar(require_renamenx(), exports2);
    __exportStar(require_rpop(), exports2);
    __exportStar(require_rpush(), exports2);
    __exportStar(require_rpushx(), exports2);
    __exportStar(require_sadd(), exports2);
    __exportStar(require_scan(), exports2);
    __exportStar(require_scard(), exports2);
    __exportStar(require_script_exists(), exports2);
    __exportStar(require_script_flush(), exports2);
    __exportStar(require_script_load(), exports2);
    __exportStar(require_sdiff(), exports2);
    __exportStar(require_sdiffstore(), exports2);
    __exportStar(require_set(), exports2);
    __exportStar(require_setbit(), exports2);
    __exportStar(require_setex(), exports2);
    __exportStar(require_setnx(), exports2);
    __exportStar(require_setrange(), exports2);
    __exportStar(require_sinter(), exports2);
    __exportStar(require_sinterstore(), exports2);
    __exportStar(require_sismember(), exports2);
    __exportStar(require_smembers(), exports2);
    __exportStar(require_smove(), exports2);
    __exportStar(require_spop(), exports2);
    __exportStar(require_srandmember(), exports2);
    __exportStar(require_srem(), exports2);
    __exportStar(require_sscan(), exports2);
    __exportStar(require_strlen(), exports2);
    __exportStar(require_sunion(), exports2);
    __exportStar(require_sunionstore(), exports2);
    __exportStar(require_time(), exports2);
    __exportStar(require_touch(), exports2);
    __exportStar(require_ttl(), exports2);
    __exportStar(require_type(), exports2);
    __exportStar(require_unlink(), exports2);
    __exportStar(require_zadd(), exports2);
    __exportStar(require_zcard(), exports2);
    __exportStar(require_zcount(), exports2);
    __exportStar(require_zincrby(), exports2);
    __exportStar(require_zinterstore(), exports2);
    __exportStar(require_zlexcount(), exports2);
    __exportStar(require_zpopmax(), exports2);
    __exportStar(require_zpopmin(), exports2);
    __exportStar(require_zrange(), exports2);
    __exportStar(require_zrank(), exports2);
    __exportStar(require_zrem(), exports2);
    __exportStar(require_zremrangebylex(), exports2);
    __exportStar(require_zremrangebyrank(), exports2);
    __exportStar(require_zremrangebyscore(), exports2);
    __exportStar(require_zrevrank(), exports2);
    __exportStar(require_zscan(), exports2);
    __exportStar(require_zscore(), exports2);
    __exportStar(require_zunionstore(), exports2);
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/pipeline.js
var require_pipeline = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/pipeline.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Pipeline = void 0;
    var mod_js_1 = require_mod();
    var error_js_1 = require_error2();
    var Pipeline = class {
      constructor(client, commandOptions) {
        Object.defineProperty(this, "client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "commands", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "commandOptions", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "exec", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: async () => {
            if (this.commands.length === 0) {
              throw new Error("Pipeline is empty");
            }
            const res = await this.client.request({
              path: ["pipeline"],
              body: Object.values(this.commands).map((c) => c.command)
            });
            return res.map(({ error: error2, result }, i) => {
              if (error2) {
                throw new error_js_1.UpstashError(`Command ${i + 1} [ ${this.commands[i].command[0]} ] failed: ${error2}`);
              }
              return this.commands[i].deserialize(result);
            });
          }
        });
        Object.defineProperty(this, "append", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.AppendCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "bitcount", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.BitCountCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "bitop", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (op, destinationKey, sourceKey, ...sourceKeys) => this.chain(new mod_js_1.BitOpCommand([op, destinationKey, sourceKey, ...sourceKeys], this.commandOptions))
        });
        Object.defineProperty(this, "bitpos", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.BitPosCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "dbsize", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: () => this.chain(new mod_js_1.DBSizeCommand(this.commandOptions))
        });
        Object.defineProperty(this, "decr", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.DecrCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "decrby", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.DecrByCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "del", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.DelCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "echo", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.EchoCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "eval", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.EvalCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "evalsha", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.EvalshaCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "exists", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ExistsCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "expire", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ExpireCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "expireat", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ExpireAtCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "flushall", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (args) => this.chain(new mod_js_1.FlushAllCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "flushdb", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.FlushDBCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "get", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.GetCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "getbit", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.GetBitCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "getrange", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.GetRangeCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "getset", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, value) => this.chain(new mod_js_1.GetSetCommand([key, value], this.commandOptions))
        });
        Object.defineProperty(this, "hdel", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.HDelCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "hexists", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.HExistsCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "hget", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.HGetCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "hgetall", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.HGetAllCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "hincrby", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.HIncrByCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "hincrbyfloat", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.HIncrByFloatCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "hkeys", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.HKeysCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "hlen", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.HLenCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "hmget", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.HMGetCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "hmset", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, kv) => this.chain(new mod_js_1.HMSetCommand([key, kv], this.commandOptions))
        });
        Object.defineProperty(this, "hscan", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.HScanCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "hset", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, kv) => this.chain(new mod_js_1.HSetCommand([key, kv], this.commandOptions))
        });
        Object.defineProperty(this, "hsetnx", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, field, value) => this.chain(new mod_js_1.HSetNXCommand([key, field, value], this.commandOptions))
        });
        Object.defineProperty(this, "hstrlen", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.HStrLenCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "hvals", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.HValsCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "incr", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.IncrCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "incrby", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.IncrByCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "incrbyfloat", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.IncrByFloatCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "keys", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.KeysCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "lindex", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.LIndexCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "linsert", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, direction, pivot, value) => this.chain(new mod_js_1.LInsertCommand([key, direction, pivot, value], this.commandOptions))
        });
        Object.defineProperty(this, "llen", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.LLenCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "lpop", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.LPopCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "lpos", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.LPosCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "lpush", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ...elements) => this.chain(new mod_js_1.LPushCommand([key, ...elements], this.commandOptions))
        });
        Object.defineProperty(this, "lpushx", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ...elements) => this.chain(new mod_js_1.LPushXCommand([key, ...elements], this.commandOptions))
        });
        Object.defineProperty(this, "lrange", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.LRangeCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "lrem", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, count2, value) => this.chain(new mod_js_1.LRemCommand([key, count2, value], this.commandOptions))
        });
        Object.defineProperty(this, "lset", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, index, value) => this.chain(new mod_js_1.LSetCommand([key, index, value], this.commandOptions))
        });
        Object.defineProperty(this, "ltrim", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.LTrimCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "mget", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.MGetCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "mset", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (kv) => this.chain(new mod_js_1.MSetCommand([kv], this.commandOptions))
        });
        Object.defineProperty(this, "msetnx", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (kv) => this.chain(new mod_js_1.MSetNXCommand([kv], this.commandOptions))
        });
        Object.defineProperty(this, "persist", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.PersistCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "pexpire", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.PExpireCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "pexpireat", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.PExpireAtCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "ping", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (args) => this.chain(new mod_js_1.PingCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "psetex", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ttl, value) => this.chain(new mod_js_1.PSetEXCommand([key, ttl, value], this.commandOptions))
        });
        Object.defineProperty(this, "pttl", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.PTtlCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "publish", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.PublishCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "randomkey", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: () => this.chain(new mod_js_1.RandomKeyCommand(this.commandOptions))
        });
        Object.defineProperty(this, "rename", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.RenameCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "renamenx", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.RenameNXCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "rpop", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.RPopCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "rpush", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ...elements) => this.chain(new mod_js_1.RPushCommand([key, ...elements], this.commandOptions))
        });
        Object.defineProperty(this, "rpushx", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ...elements) => this.chain(new mod_js_1.RPushXCommand([key, ...elements], this.commandOptions))
        });
        Object.defineProperty(this, "sadd", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ...members) => this.chain(new mod_js_1.SAddCommand([key, ...members], this.commandOptions))
        });
        Object.defineProperty(this, "scan", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ScanCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "scard", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.SCardCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "scriptExists", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ScriptExistsCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "scriptFlush", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ScriptFlushCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "scriptLoad", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ScriptLoadCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "sdiff", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.SDiffCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "sdiffstore", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.SDiffStoreCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "set", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, value, opts) => this.chain(new mod_js_1.SetCommand([key, value, opts], this.commandOptions))
        });
        Object.defineProperty(this, "setbit", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.SetBitCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "setex", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ttl, value) => this.chain(new mod_js_1.SetExCommand([key, ttl, value], this.commandOptions))
        });
        Object.defineProperty(this, "setnx", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, value) => this.chain(new mod_js_1.SetNxCommand([key, value], this.commandOptions))
        });
        Object.defineProperty(this, "setrange", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.SetRangeCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "sinter", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.SInterCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "sinterstore", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.SInterStoreCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "sismember", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, member) => this.chain(new mod_js_1.SIsMemberCommand([key, member], this.commandOptions))
        });
        Object.defineProperty(this, "smembers", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.SMembersCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "smove", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (source, destination, member) => this.chain(new mod_js_1.SMoveCommand([source, destination, member], this.commandOptions))
        });
        Object.defineProperty(this, "spop", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.SPopCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "srandmember", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.SRandMemberCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "srem", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ...members) => this.chain(new mod_js_1.SRemCommand([key, ...members], this.commandOptions))
        });
        Object.defineProperty(this, "sscan", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.SScanCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "strlen", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.StrLenCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "sunion", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.SUnionCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "sunionstore", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.SUnionStoreCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "time", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: () => this.chain(new mod_js_1.TimeCommand(this.commandOptions))
        });
        Object.defineProperty(this, "touch", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.TouchCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "ttl", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.TtlCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "type", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.TypeCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "unlink", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.UnlinkCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "zadd", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => {
            if ("score" in args[1]) {
              return this.chain(new mod_js_1.ZAddCommand([args[0], args[1], ...args.slice(2)], this.commandOptions));
            }
            return this.chain(new mod_js_1.ZAddCommand([args[0], args[1], ...args.slice(2)], this.commandOptions));
          }
        });
        Object.defineProperty(this, "zcard", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ZCardCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "zcount", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ZCountCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "zincrby", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, increment, member) => this.chain(new mod_js_1.ZIncrByCommand([key, increment, member], this.commandOptions))
        });
        Object.defineProperty(this, "zinterstore", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ZInterStoreCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "zlexcount", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ZLexCountCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "zpopmax", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ZPopMaxCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "zpopmin", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ZPopMinCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "zrange", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ZRangeCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "zrank", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, member) => this.chain(new mod_js_1.ZRankCommand([key, member], this.commandOptions))
        });
        Object.defineProperty(this, "zrem", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ...members) => this.chain(new mod_js_1.ZRemCommand([key, ...members], this.commandOptions))
        });
        Object.defineProperty(this, "zremrangebylex", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ZRemRangeByLexCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "zremrangebyrank", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ZRemRangeByRankCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "zremrangebyscore", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ZRemRangeByScoreCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "zrevrank", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, member) => this.chain(new mod_js_1.ZRevRankCommand([key, member], this.commandOptions))
        });
        Object.defineProperty(this, "zscan", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ZScanCommand(args, this.commandOptions))
        });
        Object.defineProperty(this, "zscore", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, member) => this.chain(new mod_js_1.ZScoreCommand([key, member], this.commandOptions))
        });
        Object.defineProperty(this, "zunionstore", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => this.chain(new mod_js_1.ZUnionStoreCommand(args, this.commandOptions))
        });
        this.client = client;
        this.commands = [];
        this.commandOptions = commandOptions;
      }
      chain(command) {
        this.commands.push(command);
        return this;
      }
    };
    exports2.Pipeline = Pipeline;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/redis.js
var require_redis = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/redis.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Redis = void 0;
    var mod_js_1 = require_mod();
    var pipeline_js_1 = require_pipeline();
    var Redis2 = class {
      constructor(client, opts) {
        Object.defineProperty(this, "client", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "opts", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "use", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (middleware) => {
            const makeRequest = this.client.request.bind(this.client);
            this.client.request = (req) => middleware(req, makeRequest);
          }
        });
        Object.defineProperty(this, "pipeline", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: () => new pipeline_js_1.Pipeline(this.client, this.opts)
        });
        Object.defineProperty(this, "append", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.AppendCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "bitcount", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.BitCountCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "bitop", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (op, destinationKey, sourceKey, ...sourceKeys) => new mod_js_1.BitOpCommand([op, destinationKey, sourceKey, ...sourceKeys], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "bitpos", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.BitPosCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "dbsize", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: () => new mod_js_1.DBSizeCommand(this.opts).exec(this.client)
        });
        Object.defineProperty(this, "decr", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.DecrCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "decrby", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.DecrByCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "del", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.DelCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "echo", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.EchoCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "eval", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.EvalCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "evalsha", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.EvalshaCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "exists", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ExistsCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "expire", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ExpireCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "expireat", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ExpireAtCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "flushall", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (args) => new mod_js_1.FlushAllCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "flushdb", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.FlushDBCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "get", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.GetCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "getbit", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.GetBitCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "getrange", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.GetRangeCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "getset", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, value) => new mod_js_1.GetSetCommand([key, value], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "hdel", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.HDelCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "hexists", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.HExistsCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "hget", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.HGetCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "hgetall", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.HGetAllCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "hincrby", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.HIncrByCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "hincrbyfloat", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.HIncrByFloatCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "hkeys", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.HKeysCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "hlen", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.HLenCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "hmget", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.HMGetCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "hmset", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, kv) => new mod_js_1.HMSetCommand([key, kv], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "hscan", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.HScanCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "hset", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, kv) => new mod_js_1.HSetCommand([key, kv], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "hsetnx", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, field, value) => new mod_js_1.HSetNXCommand([key, field, value], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "hstrlen", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.HStrLenCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "hvals", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.HValsCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "incr", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.IncrCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "incrby", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.IncrByCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "incrbyfloat", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.IncrByFloatCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "keys", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.KeysCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "lindex", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.LIndexCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "linsert", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, direction, pivot, value) => new mod_js_1.LInsertCommand([key, direction, pivot, value], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "llen", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.LLenCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "lpop", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.LPopCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "lpos", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.LPosCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "lpush", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ...elements) => new mod_js_1.LPushCommand([key, ...elements], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "lpushx", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ...elements) => new mod_js_1.LPushXCommand([key, ...elements], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "lrange", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.LRangeCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "lrem", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, count2, value) => new mod_js_1.LRemCommand([key, count2, value], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "lset", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, index, value) => new mod_js_1.LSetCommand([key, index, value], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "ltrim", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.LTrimCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "mget", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.MGetCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "mset", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (kv) => new mod_js_1.MSetCommand([kv], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "msetnx", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (kv) => new mod_js_1.MSetNXCommand([kv], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "persist", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.PersistCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "pexpire", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.PExpireCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "pexpireat", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.PExpireAtCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "ping", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (args) => new mod_js_1.PingCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "psetex", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ttl, value) => new mod_js_1.PSetEXCommand([key, ttl, value], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "pttl", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.PTtlCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "publish", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.PublishCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "randomkey", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: () => new mod_js_1.RandomKeyCommand().exec(this.client)
        });
        Object.defineProperty(this, "rename", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.RenameCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "renamenx", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.RenameNXCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "rpop", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.RPopCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "rpush", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ...elements) => new mod_js_1.RPushCommand([key, ...elements], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "rpushx", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ...elements) => new mod_js_1.RPushXCommand([key, ...elements], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "sadd", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ...members) => new mod_js_1.SAddCommand([key, ...members], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "scan", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ScanCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "scard", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.SCardCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "scriptExists", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ScriptExistsCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "scriptFlush", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ScriptFlushCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "scriptLoad", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ScriptLoadCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "sdiff", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.SDiffCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "sdiffstore", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.SDiffStoreCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "set", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, value, opts2) => new mod_js_1.SetCommand([key, value, opts2], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "setbit", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.SetBitCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "setex", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ttl, value) => new mod_js_1.SetExCommand([key, ttl, value], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "setnx", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, value) => new mod_js_1.SetNxCommand([key, value], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "setrange", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.SetRangeCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "sinter", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.SInterCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "sinterstore", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.SInterStoreCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "sismember", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, member) => new mod_js_1.SIsMemberCommand([key, member], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "smembers", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.SMembersCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "smove", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (source, destination, member) => new mod_js_1.SMoveCommand([source, destination, member], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "spop", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.SPopCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "srandmember", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.SRandMemberCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "srem", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ...members) => new mod_js_1.SRemCommand([key, ...members], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "sscan", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.SScanCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "strlen", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.StrLenCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "sunion", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.SUnionCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "sunionstore", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.SUnionStoreCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "time", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: () => new mod_js_1.TimeCommand().exec(this.client)
        });
        Object.defineProperty(this, "touch", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.TouchCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "ttl", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.TtlCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "type", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.TypeCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "unlink", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.UnlinkCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zadd", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => {
            if ("score" in args[1]) {
              return new mod_js_1.ZAddCommand([args[0], args[1], ...args.slice(2)], this.opts).exec(this.client);
            }
            return new mod_js_1.ZAddCommand([args[0], args[1], ...args.slice(2)], this.opts).exec(this.client);
          }
        });
        Object.defineProperty(this, "zcard", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ZCardCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zcount", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ZCountCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zincrby", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, increment, member) => new mod_js_1.ZIncrByCommand([key, increment, member], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zinterstore", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ZInterStoreCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zlexcount", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ZLexCountCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zpopmax", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ZPopMaxCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zpopmin", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ZPopMinCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zrange", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ZRangeCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zrank", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, member) => new mod_js_1.ZRankCommand([key, member], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zrem", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, ...members) => new mod_js_1.ZRemCommand([key, ...members], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zremrangebylex", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ZRemRangeByLexCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zremrangebyrank", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ZRemRangeByRankCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zremrangebyscore", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ZRemRangeByScoreCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zrevrank", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, member) => new mod_js_1.ZRevRankCommand([key, member], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zscan", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ZScanCommand(args, this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zscore", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (key, member) => new mod_js_1.ZScoreCommand([key, member], this.opts).exec(this.client)
        });
        Object.defineProperty(this, "zunionstore", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: (...args) => new mod_js_1.ZUnionStoreCommand(args, this.opts).exec(this.client)
        });
        this.client = client;
        this.opts = opts;
      }
    };
    exports2.Redis = Redis2;
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/http.js
var require_http = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/pkg/http.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpClient = void 0;
    var error_js_1 = require_error2();
    var HttpClient = class {
      constructor(config2) {
        Object.defineProperty(this, "baseUrl", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "headers", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "options", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        Object.defineProperty(this, "retry", {
          enumerable: true,
          configurable: true,
          writable: true,
          value: void 0
        });
        this.baseUrl = config2.baseUrl.replace(/\/$/, "");
        this.headers = { "Content-Type": "application/json", ...config2.headers };
        this.options = { backend: config2.options?.backend };
        if (typeof config2?.retry === "boolean" && config2?.retry === false) {
          this.retry = {
            attempts: 1,
            backoff: () => 0
          };
        } else {
          this.retry = {
            attempts: config2?.retry?.retries ?? 5,
            backoff: config2?.retry?.backoff ?? ((retryCount) => Math.exp(retryCount) * 50)
          };
        }
      }
      async request(req) {
        const requestOptions = {
          method: "POST",
          headers: this.headers,
          body: JSON.stringify(req.body),
          keepalive: true,
          backend: this.options?.backend
        };
        let res = null;
        let error2 = null;
        for (let i = 0; i <= this.retry.attempts; i++) {
          try {
            res = await fetch([this.baseUrl, ...req.path ?? []].join("/"), requestOptions);
            break;
          } catch (err) {
            error2 = err;
            await new Promise((r) => setTimeout(r, this.retry.backoff(i)));
          }
        }
        if (!res) {
          throw error2 ?? new Error("Exhausted all retries");
        }
        const body = await res.json();
        if (!res.ok) {
          throw new error_js_1.UpstashError(body.error);
        }
        return body;
      }
    };
    exports2.HttpClient = HttpClient;
  }
});

// node_modules/.pnpm/webidl-conversions@3.0.1/node_modules/webidl-conversions/lib/index.js
var require_lib2 = __commonJS2({
  "node_modules/.pnpm/webidl-conversions@3.0.1/node_modules/webidl-conversions/lib/index.js"(exports2, module2) {
    "use strict";
    var conversions = {};
    module2.exports = conversions;
    function sign2(x) {
      return x < 0 ? -1 : 1;
    }
    function evenRound(x) {
      if (x % 1 === 0.5 && (x & 1) === 0) {
        return Math.floor(x);
      } else {
        return Math.round(x);
      }
    }
    function createNumberConversion(bitLength, typeOpts) {
      if (!typeOpts.unsigned) {
        --bitLength;
      }
      const lowerBound = typeOpts.unsigned ? 0 : -Math.pow(2, bitLength);
      const upperBound = Math.pow(2, bitLength) - 1;
      const moduloVal = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength) : Math.pow(2, bitLength);
      const moduloBound = typeOpts.moduloBitLength ? Math.pow(2, typeOpts.moduloBitLength - 1) : Math.pow(2, bitLength - 1);
      return function(V, opts) {
        if (!opts)
          opts = {};
        let x = +V;
        if (opts.enforceRange) {
          if (!Number.isFinite(x)) {
            throw new TypeError("Argument is not a finite number");
          }
          x = sign2(x) * Math.floor(Math.abs(x));
          if (x < lowerBound || x > upperBound) {
            throw new TypeError("Argument is not in byte range");
          }
          return x;
        }
        if (!isNaN(x) && opts.clamp) {
          x = evenRound(x);
          if (x < lowerBound)
            x = lowerBound;
          if (x > upperBound)
            x = upperBound;
          return x;
        }
        if (!Number.isFinite(x) || x === 0) {
          return 0;
        }
        x = sign2(x) * Math.floor(Math.abs(x));
        x = x % moduloVal;
        if (!typeOpts.unsigned && x >= moduloBound) {
          return x - moduloVal;
        } else if (typeOpts.unsigned) {
          if (x < 0) {
            x += moduloVal;
          } else if (x === -0) {
            return 0;
          }
        }
        return x;
      };
    }
    conversions["void"] = function() {
      return void 0;
    };
    conversions["boolean"] = function(val) {
      return !!val;
    };
    conversions["byte"] = createNumberConversion(8, { unsigned: false });
    conversions["octet"] = createNumberConversion(8, { unsigned: true });
    conversions["short"] = createNumberConversion(16, { unsigned: false });
    conversions["unsigned short"] = createNumberConversion(16, { unsigned: true });
    conversions["long"] = createNumberConversion(32, { unsigned: false });
    conversions["unsigned long"] = createNumberConversion(32, { unsigned: true });
    conversions["long long"] = createNumberConversion(32, { unsigned: false, moduloBitLength: 64 });
    conversions["unsigned long long"] = createNumberConversion(32, { unsigned: true, moduloBitLength: 64 });
    conversions["double"] = function(V) {
      const x = +V;
      if (!Number.isFinite(x)) {
        throw new TypeError("Argument is not a finite floating-point value");
      }
      return x;
    };
    conversions["unrestricted double"] = function(V) {
      const x = +V;
      if (isNaN(x)) {
        throw new TypeError("Argument is NaN");
      }
      return x;
    };
    conversions["float"] = conversions["double"];
    conversions["unrestricted float"] = conversions["unrestricted double"];
    conversions["DOMString"] = function(V, opts) {
      if (!opts)
        opts = {};
      if (opts.treatNullAsEmptyString && V === null) {
        return "";
      }
      return String(V);
    };
    conversions["ByteString"] = function(V, opts) {
      const x = String(V);
      let c = void 0;
      for (let i = 0; (c = x.codePointAt(i)) !== void 0; ++i) {
        if (c > 255) {
          throw new TypeError("Argument is not a valid bytestring");
        }
      }
      return x;
    };
    conversions["USVString"] = function(V) {
      const S = String(V);
      const n = S.length;
      const U = [];
      for (let i = 0; i < n; ++i) {
        const c = S.charCodeAt(i);
        if (c < 55296 || c > 57343) {
          U.push(String.fromCodePoint(c));
        } else if (56320 <= c && c <= 57343) {
          U.push(String.fromCodePoint(65533));
        } else {
          if (i === n - 1) {
            U.push(String.fromCodePoint(65533));
          } else {
            const d = S.charCodeAt(i + 1);
            if (56320 <= d && d <= 57343) {
              const a = c & 1023;
              const b = d & 1023;
              U.push(String.fromCodePoint((2 << 15) + (2 << 9) * a + b));
              ++i;
            } else {
              U.push(String.fromCodePoint(65533));
            }
          }
        }
      }
      return U.join("");
    };
    conversions["Date"] = function(V, opts) {
      if (!(V instanceof Date)) {
        throw new TypeError("Argument is not a Date object");
      }
      if (isNaN(V)) {
        return void 0;
      }
      return V;
    };
    conversions["RegExp"] = function(V, opts) {
      if (!(V instanceof RegExp)) {
        V = new RegExp(V);
      }
      return V;
    };
  }
});

// node_modules/.pnpm/whatwg-url@5.0.0/node_modules/whatwg-url/lib/utils.js
var require_utils2 = __commonJS2({
  "node_modules/.pnpm/whatwg-url@5.0.0/node_modules/whatwg-url/lib/utils.js"(exports2, module2) {
    "use strict";
    module2.exports.mixin = function mixin(target, source) {
      const keys2 = Object.getOwnPropertyNames(source);
      for (let i = 0; i < keys2.length; ++i) {
        Object.defineProperty(target, keys2[i], Object.getOwnPropertyDescriptor(source, keys2[i]));
      }
    };
    module2.exports.wrapperSymbol = Symbol("wrapper");
    module2.exports.implSymbol = Symbol("impl");
    module2.exports.wrapperForImpl = function(impl) {
      return impl[module2.exports.wrapperSymbol];
    };
    module2.exports.implForWrapper = function(wrapper) {
      return wrapper[module2.exports.implSymbol];
    };
  }
});

// node_modules/.pnpm/tr46@0.0.3/node_modules/tr46/lib/mappingTable.json
var require_mappingTable = __commonJS2({
  "node_modules/.pnpm/tr46@0.0.3/node_modules/tr46/lib/mappingTable.json"(exports2, module2) {
    module2.exports = [[[0, 44], "disallowed_STD3_valid"], [[45, 46], "valid"], [[47, 47], "disallowed_STD3_valid"], [[48, 57], "valid"], [[58, 64], "disallowed_STD3_valid"], [[65, 65], "mapped", [97]], [[66, 66], "mapped", [98]], [[67, 67], "mapped", [99]], [[68, 68], "mapped", [100]], [[69, 69], "mapped", [101]], [[70, 70], "mapped", [102]], [[71, 71], "mapped", [103]], [[72, 72], "mapped", [104]], [[73, 73], "mapped", [105]], [[74, 74], "mapped", [106]], [[75, 75], "mapped", [107]], [[76, 76], "mapped", [108]], [[77, 77], "mapped", [109]], [[78, 78], "mapped", [110]], [[79, 79], "mapped", [111]], [[80, 80], "mapped", [112]], [[81, 81], "mapped", [113]], [[82, 82], "mapped", [114]], [[83, 83], "mapped", [115]], [[84, 84], "mapped", [116]], [[85, 85], "mapped", [117]], [[86, 86], "mapped", [118]], [[87, 87], "mapped", [119]], [[88, 88], "mapped", [120]], [[89, 89], "mapped", [121]], [[90, 90], "mapped", [122]], [[91, 96], "disallowed_STD3_valid"], [[97, 122], "valid"], [[123, 127], "disallowed_STD3_valid"], [[128, 159], "disallowed"], [[160, 160], "disallowed_STD3_mapped", [32]], [[161, 167], "valid", [], "NV8"], [[168, 168], "disallowed_STD3_mapped", [32, 776]], [[169, 169], "valid", [], "NV8"], [[170, 170], "mapped", [97]], [[171, 172], "valid", [], "NV8"], [[173, 173], "ignored"], [[174, 174], "valid", [], "NV8"], [[175, 175], "disallowed_STD3_mapped", [32, 772]], [[176, 177], "valid", [], "NV8"], [[178, 178], "mapped", [50]], [[179, 179], "mapped", [51]], [[180, 180], "disallowed_STD3_mapped", [32, 769]], [[181, 181], "mapped", [956]], [[182, 182], "valid", [], "NV8"], [[183, 183], "valid"], [[184, 184], "disallowed_STD3_mapped", [32, 807]], [[185, 185], "mapped", [49]], [[186, 186], "mapped", [111]], [[187, 187], "valid", [], "NV8"], [[188, 188], "mapped", [49, 8260, 52]], [[189, 189], "mapped", [49, 8260, 50]], [[190, 190], "mapped", [51, 8260, 52]], [[191, 191], "valid", [], "NV8"], [[192, 192], "mapped", [224]], [[193, 193], "mapped", [225]], [[194, 194], "mapped", [226]], [[195, 195], "mapped", [227]], [[196, 196], "mapped", [228]], [[197, 197], "mapped", [229]], [[198, 198], "mapped", [230]], [[199, 199], "mapped", [231]], [[200, 200], "mapped", [232]], [[201, 201], "mapped", [233]], [[202, 202], "mapped", [234]], [[203, 203], "mapped", [235]], [[204, 204], "mapped", [236]], [[205, 205], "mapped", [237]], [[206, 206], "mapped", [238]], [[207, 207], "mapped", [239]], [[208, 208], "mapped", [240]], [[209, 209], "mapped", [241]], [[210, 210], "mapped", [242]], [[211, 211], "mapped", [243]], [[212, 212], "mapped", [244]], [[213, 213], "mapped", [245]], [[214, 214], "mapped", [246]], [[215, 215], "valid", [], "NV8"], [[216, 216], "mapped", [248]], [[217, 217], "mapped", [249]], [[218, 218], "mapped", [250]], [[219, 219], "mapped", [251]], [[220, 220], "mapped", [252]], [[221, 221], "mapped", [253]], [[222, 222], "mapped", [254]], [[223, 223], "deviation", [115, 115]], [[224, 246], "valid"], [[247, 247], "valid", [], "NV8"], [[248, 255], "valid"], [[256, 256], "mapped", [257]], [[257, 257], "valid"], [[258, 258], "mapped", [259]], [[259, 259], "valid"], [[260, 260], "mapped", [261]], [[261, 261], "valid"], [[262, 262], "mapped", [263]], [[263, 263], "valid"], [[264, 264], "mapped", [265]], [[265, 265], "valid"], [[266, 266], "mapped", [267]], [[267, 267], "valid"], [[268, 268], "mapped", [269]], [[269, 269], "valid"], [[270, 270], "mapped", [271]], [[271, 271], "valid"], [[272, 272], "mapped", [273]], [[273, 273], "valid"], [[274, 274], "mapped", [275]], [[275, 275], "valid"], [[276, 276], "mapped", [277]], [[277, 277], "valid"], [[278, 278], "mapped", [279]], [[279, 279], "valid"], [[280, 280], "mapped", [281]], [[281, 281], "valid"], [[282, 282], "mapped", [283]], [[283, 283], "valid"], [[284, 284], "mapped", [285]], [[285, 285], "valid"], [[286, 286], "mapped", [287]], [[287, 287], "valid"], [[288, 288], "mapped", [289]], [[289, 289], "valid"], [[290, 290], "mapped", [291]], [[291, 291], "valid"], [[292, 292], "mapped", [293]], [[293, 293], "valid"], [[294, 294], "mapped", [295]], [[295, 295], "valid"], [[296, 296], "mapped", [297]], [[297, 297], "valid"], [[298, 298], "mapped", [299]], [[299, 299], "valid"], [[300, 300], "mapped", [301]], [[301, 301], "valid"], [[302, 302], "mapped", [303]], [[303, 303], "valid"], [[304, 304], "mapped", [105, 775]], [[305, 305], "valid"], [[306, 307], "mapped", [105, 106]], [[308, 308], "mapped", [309]], [[309, 309], "valid"], [[310, 310], "mapped", [311]], [[311, 312], "valid"], [[313, 313], "mapped", [314]], [[314, 314], "valid"], [[315, 315], "mapped", [316]], [[316, 316], "valid"], [[317, 317], "mapped", [318]], [[318, 318], "valid"], [[319, 320], "mapped", [108, 183]], [[321, 321], "mapped", [322]], [[322, 322], "valid"], [[323, 323], "mapped", [324]], [[324, 324], "valid"], [[325, 325], "mapped", [326]], [[326, 326], "valid"], [[327, 327], "mapped", [328]], [[328, 328], "valid"], [[329, 329], "mapped", [700, 110]], [[330, 330], "mapped", [331]], [[331, 331], "valid"], [[332, 332], "mapped", [333]], [[333, 333], "valid"], [[334, 334], "mapped", [335]], [[335, 335], "valid"], [[336, 336], "mapped", [337]], [[337, 337], "valid"], [[338, 338], "mapped", [339]], [[339, 339], "valid"], [[340, 340], "mapped", [341]], [[341, 341], "valid"], [[342, 342], "mapped", [343]], [[343, 343], "valid"], [[344, 344], "mapped", [345]], [[345, 345], "valid"], [[346, 346], "mapped", [347]], [[347, 347], "valid"], [[348, 348], "mapped", [349]], [[349, 349], "valid"], [[350, 350], "mapped", [351]], [[351, 351], "valid"], [[352, 352], "mapped", [353]], [[353, 353], "valid"], [[354, 354], "mapped", [355]], [[355, 355], "valid"], [[356, 356], "mapped", [357]], [[357, 357], "valid"], [[358, 358], "mapped", [359]], [[359, 359], "valid"], [[360, 360], "mapped", [361]], [[361, 361], "valid"], [[362, 362], "mapped", [363]], [[363, 363], "valid"], [[364, 364], "mapped", [365]], [[365, 365], "valid"], [[366, 366], "mapped", [367]], [[367, 367], "valid"], [[368, 368], "mapped", [369]], [[369, 369], "valid"], [[370, 370], "mapped", [371]], [[371, 371], "valid"], [[372, 372], "mapped", [373]], [[373, 373], "valid"], [[374, 374], "mapped", [375]], [[375, 375], "valid"], [[376, 376], "mapped", [255]], [[377, 377], "mapped", [378]], [[378, 378], "valid"], [[379, 379], "mapped", [380]], [[380, 380], "valid"], [[381, 381], "mapped", [382]], [[382, 382], "valid"], [[383, 383], "mapped", [115]], [[384, 384], "valid"], [[385, 385], "mapped", [595]], [[386, 386], "mapped", [387]], [[387, 387], "valid"], [[388, 388], "mapped", [389]], [[389, 389], "valid"], [[390, 390], "mapped", [596]], [[391, 391], "mapped", [392]], [[392, 392], "valid"], [[393, 393], "mapped", [598]], [[394, 394], "mapped", [599]], [[395, 395], "mapped", [396]], [[396, 397], "valid"], [[398, 398], "mapped", [477]], [[399, 399], "mapped", [601]], [[400, 400], "mapped", [603]], [[401, 401], "mapped", [402]], [[402, 402], "valid"], [[403, 403], "mapped", [608]], [[404, 404], "mapped", [611]], [[405, 405], "valid"], [[406, 406], "mapped", [617]], [[407, 407], "mapped", [616]], [[408, 408], "mapped", [409]], [[409, 411], "valid"], [[412, 412], "mapped", [623]], [[413, 413], "mapped", [626]], [[414, 414], "valid"], [[415, 415], "mapped", [629]], [[416, 416], "mapped", [417]], [[417, 417], "valid"], [[418, 418], "mapped", [419]], [[419, 419], "valid"], [[420, 420], "mapped", [421]], [[421, 421], "valid"], [[422, 422], "mapped", [640]], [[423, 423], "mapped", [424]], [[424, 424], "valid"], [[425, 425], "mapped", [643]], [[426, 427], "valid"], [[428, 428], "mapped", [429]], [[429, 429], "valid"], [[430, 430], "mapped", [648]], [[431, 431], "mapped", [432]], [[432, 432], "valid"], [[433, 433], "mapped", [650]], [[434, 434], "mapped", [651]], [[435, 435], "mapped", [436]], [[436, 436], "valid"], [[437, 437], "mapped", [438]], [[438, 438], "valid"], [[439, 439], "mapped", [658]], [[440, 440], "mapped", [441]], [[441, 443], "valid"], [[444, 444], "mapped", [445]], [[445, 451], "valid"], [[452, 454], "mapped", [100, 382]], [[455, 457], "mapped", [108, 106]], [[458, 460], "mapped", [110, 106]], [[461, 461], "mapped", [462]], [[462, 462], "valid"], [[463, 463], "mapped", [464]], [[464, 464], "valid"], [[465, 465], "mapped", [466]], [[466, 466], "valid"], [[467, 467], "mapped", [468]], [[468, 468], "valid"], [[469, 469], "mapped", [470]], [[470, 470], "valid"], [[471, 471], "mapped", [472]], [[472, 472], "valid"], [[473, 473], "mapped", [474]], [[474, 474], "valid"], [[475, 475], "mapped", [476]], [[476, 477], "valid"], [[478, 478], "mapped", [479]], [[479, 479], "valid"], [[480, 480], "mapped", [481]], [[481, 481], "valid"], [[482, 482], "mapped", [483]], [[483, 483], "valid"], [[484, 484], "mapped", [485]], [[485, 485], "valid"], [[486, 486], "mapped", [487]], [[487, 487], "valid"], [[488, 488], "mapped", [489]], [[489, 489], "valid"], [[490, 490], "mapped", [491]], [[491, 491], "valid"], [[492, 492], "mapped", [493]], [[493, 493], "valid"], [[494, 494], "mapped", [495]], [[495, 496], "valid"], [[497, 499], "mapped", [100, 122]], [[500, 500], "mapped", [501]], [[501, 501], "valid"], [[502, 502], "mapped", [405]], [[503, 503], "mapped", [447]], [[504, 504], "mapped", [505]], [[505, 505], "valid"], [[506, 506], "mapped", [507]], [[507, 507], "valid"], [[508, 508], "mapped", [509]], [[509, 509], "valid"], [[510, 510], "mapped", [511]], [[511, 511], "valid"], [[512, 512], "mapped", [513]], [[513, 513], "valid"], [[514, 514], "mapped", [515]], [[515, 515], "valid"], [[516, 516], "mapped", [517]], [[517, 517], "valid"], [[518, 518], "mapped", [519]], [[519, 519], "valid"], [[520, 520], "mapped", [521]], [[521, 521], "valid"], [[522, 522], "mapped", [523]], [[523, 523], "valid"], [[524, 524], "mapped", [525]], [[525, 525], "valid"], [[526, 526], "mapped", [527]], [[527, 527], "valid"], [[528, 528], "mapped", [529]], [[529, 529], "valid"], [[530, 530], "mapped", [531]], [[531, 531], "valid"], [[532, 532], "mapped", [533]], [[533, 533], "valid"], [[534, 534], "mapped", [535]], [[535, 535], "valid"], [[536, 536], "mapped", [537]], [[537, 537], "valid"], [[538, 538], "mapped", [539]], [[539, 539], "valid"], [[540, 540], "mapped", [541]], [[541, 541], "valid"], [[542, 542], "mapped", [543]], [[543, 543], "valid"], [[544, 544], "mapped", [414]], [[545, 545], "valid"], [[546, 546], "mapped", [547]], [[547, 547], "valid"], [[548, 548], "mapped", [549]], [[549, 549], "valid"], [[550, 550], "mapped", [551]], [[551, 551], "valid"], [[552, 552], "mapped", [553]], [[553, 553], "valid"], [[554, 554], "mapped", [555]], [[555, 555], "valid"], [[556, 556], "mapped", [557]], [[557, 557], "valid"], [[558, 558], "mapped", [559]], [[559, 559], "valid"], [[560, 560], "mapped", [561]], [[561, 561], "valid"], [[562, 562], "mapped", [563]], [[563, 563], "valid"], [[564, 566], "valid"], [[567, 569], "valid"], [[570, 570], "mapped", [11365]], [[571, 571], "mapped", [572]], [[572, 572], "valid"], [[573, 573], "mapped", [410]], [[574, 574], "mapped", [11366]], [[575, 576], "valid"], [[577, 577], "mapped", [578]], [[578, 578], "valid"], [[579, 579], "mapped", [384]], [[580, 580], "mapped", [649]], [[581, 581], "mapped", [652]], [[582, 582], "mapped", [583]], [[583, 583], "valid"], [[584, 584], "mapped", [585]], [[585, 585], "valid"], [[586, 586], "mapped", [587]], [[587, 587], "valid"], [[588, 588], "mapped", [589]], [[589, 589], "valid"], [[590, 590], "mapped", [591]], [[591, 591], "valid"], [[592, 680], "valid"], [[681, 685], "valid"], [[686, 687], "valid"], [[688, 688], "mapped", [104]], [[689, 689], "mapped", [614]], [[690, 690], "mapped", [106]], [[691, 691], "mapped", [114]], [[692, 692], "mapped", [633]], [[693, 693], "mapped", [635]], [[694, 694], "mapped", [641]], [[695, 695], "mapped", [119]], [[696, 696], "mapped", [121]], [[697, 705], "valid"], [[706, 709], "valid", [], "NV8"], [[710, 721], "valid"], [[722, 727], "valid", [], "NV8"], [[728, 728], "disallowed_STD3_mapped", [32, 774]], [[729, 729], "disallowed_STD3_mapped", [32, 775]], [[730, 730], "disallowed_STD3_mapped", [32, 778]], [[731, 731], "disallowed_STD3_mapped", [32, 808]], [[732, 732], "disallowed_STD3_mapped", [32, 771]], [[733, 733], "disallowed_STD3_mapped", [32, 779]], [[734, 734], "valid", [], "NV8"], [[735, 735], "valid", [], "NV8"], [[736, 736], "mapped", [611]], [[737, 737], "mapped", [108]], [[738, 738], "mapped", [115]], [[739, 739], "mapped", [120]], [[740, 740], "mapped", [661]], [[741, 745], "valid", [], "NV8"], [[746, 747], "valid", [], "NV8"], [[748, 748], "valid"], [[749, 749], "valid", [], "NV8"], [[750, 750], "valid"], [[751, 767], "valid", [], "NV8"], [[768, 831], "valid"], [[832, 832], "mapped", [768]], [[833, 833], "mapped", [769]], [[834, 834], "valid"], [[835, 835], "mapped", [787]], [[836, 836], "mapped", [776, 769]], [[837, 837], "mapped", [953]], [[838, 846], "valid"], [[847, 847], "ignored"], [[848, 855], "valid"], [[856, 860], "valid"], [[861, 863], "valid"], [[864, 865], "valid"], [[866, 866], "valid"], [[867, 879], "valid"], [[880, 880], "mapped", [881]], [[881, 881], "valid"], [[882, 882], "mapped", [883]], [[883, 883], "valid"], [[884, 884], "mapped", [697]], [[885, 885], "valid"], [[886, 886], "mapped", [887]], [[887, 887], "valid"], [[888, 889], "disallowed"], [[890, 890], "disallowed_STD3_mapped", [32, 953]], [[891, 893], "valid"], [[894, 894], "disallowed_STD3_mapped", [59]], [[895, 895], "mapped", [1011]], [[896, 899], "disallowed"], [[900, 900], "disallowed_STD3_mapped", [32, 769]], [[901, 901], "disallowed_STD3_mapped", [32, 776, 769]], [[902, 902], "mapped", [940]], [[903, 903], "mapped", [183]], [[904, 904], "mapped", [941]], [[905, 905], "mapped", [942]], [[906, 906], "mapped", [943]], [[907, 907], "disallowed"], [[908, 908], "mapped", [972]], [[909, 909], "disallowed"], [[910, 910], "mapped", [973]], [[911, 911], "mapped", [974]], [[912, 912], "valid"], [[913, 913], "mapped", [945]], [[914, 914], "mapped", [946]], [[915, 915], "mapped", [947]], [[916, 916], "mapped", [948]], [[917, 917], "mapped", [949]], [[918, 918], "mapped", [950]], [[919, 919], "mapped", [951]], [[920, 920], "mapped", [952]], [[921, 921], "mapped", [953]], [[922, 922], "mapped", [954]], [[923, 923], "mapped", [955]], [[924, 924], "mapped", [956]], [[925, 925], "mapped", [957]], [[926, 926], "mapped", [958]], [[927, 927], "mapped", [959]], [[928, 928], "mapped", [960]], [[929, 929], "mapped", [961]], [[930, 930], "disallowed"], [[931, 931], "mapped", [963]], [[932, 932], "mapped", [964]], [[933, 933], "mapped", [965]], [[934, 934], "mapped", [966]], [[935, 935], "mapped", [967]], [[936, 936], "mapped", [968]], [[937, 937], "mapped", [969]], [[938, 938], "mapped", [970]], [[939, 939], "mapped", [971]], [[940, 961], "valid"], [[962, 962], "deviation", [963]], [[963, 974], "valid"], [[975, 975], "mapped", [983]], [[976, 976], "mapped", [946]], [[977, 977], "mapped", [952]], [[978, 978], "mapped", [965]], [[979, 979], "mapped", [973]], [[980, 980], "mapped", [971]], [[981, 981], "mapped", [966]], [[982, 982], "mapped", [960]], [[983, 983], "valid"], [[984, 984], "mapped", [985]], [[985, 985], "valid"], [[986, 986], "mapped", [987]], [[987, 987], "valid"], [[988, 988], "mapped", [989]], [[989, 989], "valid"], [[990, 990], "mapped", [991]], [[991, 991], "valid"], [[992, 992], "mapped", [993]], [[993, 993], "valid"], [[994, 994], "mapped", [995]], [[995, 995], "valid"], [[996, 996], "mapped", [997]], [[997, 997], "valid"], [[998, 998], "mapped", [999]], [[999, 999], "valid"], [[1e3, 1e3], "mapped", [1001]], [[1001, 1001], "valid"], [[1002, 1002], "mapped", [1003]], [[1003, 1003], "valid"], [[1004, 1004], "mapped", [1005]], [[1005, 1005], "valid"], [[1006, 1006], "mapped", [1007]], [[1007, 1007], "valid"], [[1008, 1008], "mapped", [954]], [[1009, 1009], "mapped", [961]], [[1010, 1010], "mapped", [963]], [[1011, 1011], "valid"], [[1012, 1012], "mapped", [952]], [[1013, 1013], "mapped", [949]], [[1014, 1014], "valid", [], "NV8"], [[1015, 1015], "mapped", [1016]], [[1016, 1016], "valid"], [[1017, 1017], "mapped", [963]], [[1018, 1018], "mapped", [1019]], [[1019, 1019], "valid"], [[1020, 1020], "valid"], [[1021, 1021], "mapped", [891]], [[1022, 1022], "mapped", [892]], [[1023, 1023], "mapped", [893]], [[1024, 1024], "mapped", [1104]], [[1025, 1025], "mapped", [1105]], [[1026, 1026], "mapped", [1106]], [[1027, 1027], "mapped", [1107]], [[1028, 1028], "mapped", [1108]], [[1029, 1029], "mapped", [1109]], [[1030, 1030], "mapped", [1110]], [[1031, 1031], "mapped", [1111]], [[1032, 1032], "mapped", [1112]], [[1033, 1033], "mapped", [1113]], [[1034, 1034], "mapped", [1114]], [[1035, 1035], "mapped", [1115]], [[1036, 1036], "mapped", [1116]], [[1037, 1037], "mapped", [1117]], [[1038, 1038], "mapped", [1118]], [[1039, 1039], "mapped", [1119]], [[1040, 1040], "mapped", [1072]], [[1041, 1041], "mapped", [1073]], [[1042, 1042], "mapped", [1074]], [[1043, 1043], "mapped", [1075]], [[1044, 1044], "mapped", [1076]], [[1045, 1045], "mapped", [1077]], [[1046, 1046], "mapped", [1078]], [[1047, 1047], "mapped", [1079]], [[1048, 1048], "mapped", [1080]], [[1049, 1049], "mapped", [1081]], [[1050, 1050], "mapped", [1082]], [[1051, 1051], "mapped", [1083]], [[1052, 1052], "mapped", [1084]], [[1053, 1053], "mapped", [1085]], [[1054, 1054], "mapped", [1086]], [[1055, 1055], "mapped", [1087]], [[1056, 1056], "mapped", [1088]], [[1057, 1057], "mapped", [1089]], [[1058, 1058], "mapped", [1090]], [[1059, 1059], "mapped", [1091]], [[1060, 1060], "mapped", [1092]], [[1061, 1061], "mapped", [1093]], [[1062, 1062], "mapped", [1094]], [[1063, 1063], "mapped", [1095]], [[1064, 1064], "mapped", [1096]], [[1065, 1065], "mapped", [1097]], [[1066, 1066], "mapped", [1098]], [[1067, 1067], "mapped", [1099]], [[1068, 1068], "mapped", [1100]], [[1069, 1069], "mapped", [1101]], [[1070, 1070], "mapped", [1102]], [[1071, 1071], "mapped", [1103]], [[1072, 1103], "valid"], [[1104, 1104], "valid"], [[1105, 1116], "valid"], [[1117, 1117], "valid"], [[1118, 1119], "valid"], [[1120, 1120], "mapped", [1121]], [[1121, 1121], "valid"], [[1122, 1122], "mapped", [1123]], [[1123, 1123], "valid"], [[1124, 1124], "mapped", [1125]], [[1125, 1125], "valid"], [[1126, 1126], "mapped", [1127]], [[1127, 1127], "valid"], [[1128, 1128], "mapped", [1129]], [[1129, 1129], "valid"], [[1130, 1130], "mapped", [1131]], [[1131, 1131], "valid"], [[1132, 1132], "mapped", [1133]], [[1133, 1133], "valid"], [[1134, 1134], "mapped", [1135]], [[1135, 1135], "valid"], [[1136, 1136], "mapped", [1137]], [[1137, 1137], "valid"], [[1138, 1138], "mapped", [1139]], [[1139, 1139], "valid"], [[1140, 1140], "mapped", [1141]], [[1141, 1141], "valid"], [[1142, 1142], "mapped", [1143]], [[1143, 1143], "valid"], [[1144, 1144], "mapped", [1145]], [[1145, 1145], "valid"], [[1146, 1146], "mapped", [1147]], [[1147, 1147], "valid"], [[1148, 1148], "mapped", [1149]], [[1149, 1149], "valid"], [[1150, 1150], "mapped", [1151]], [[1151, 1151], "valid"], [[1152, 1152], "mapped", [1153]], [[1153, 1153], "valid"], [[1154, 1154], "valid", [], "NV8"], [[1155, 1158], "valid"], [[1159, 1159], "valid"], [[1160, 1161], "valid", [], "NV8"], [[1162, 1162], "mapped", [1163]], [[1163, 1163], "valid"], [[1164, 1164], "mapped", [1165]], [[1165, 1165], "valid"], [[1166, 1166], "mapped", [1167]], [[1167, 1167], "valid"], [[1168, 1168], "mapped", [1169]], [[1169, 1169], "valid"], [[1170, 1170], "mapped", [1171]], [[1171, 1171], "valid"], [[1172, 1172], "mapped", [1173]], [[1173, 1173], "valid"], [[1174, 1174], "mapped", [1175]], [[1175, 1175], "valid"], [[1176, 1176], "mapped", [1177]], [[1177, 1177], "valid"], [[1178, 1178], "mapped", [1179]], [[1179, 1179], "valid"], [[1180, 1180], "mapped", [1181]], [[1181, 1181], "valid"], [[1182, 1182], "mapped", [1183]], [[1183, 1183], "valid"], [[1184, 1184], "mapped", [1185]], [[1185, 1185], "valid"], [[1186, 1186], "mapped", [1187]], [[1187, 1187], "valid"], [[1188, 1188], "mapped", [1189]], [[1189, 1189], "valid"], [[1190, 1190], "mapped", [1191]], [[1191, 1191], "valid"], [[1192, 1192], "mapped", [1193]], [[1193, 1193], "valid"], [[1194, 1194], "mapped", [1195]], [[1195, 1195], "valid"], [[1196, 1196], "mapped", [1197]], [[1197, 1197], "valid"], [[1198, 1198], "mapped", [1199]], [[1199, 1199], "valid"], [[1200, 1200], "mapped", [1201]], [[1201, 1201], "valid"], [[1202, 1202], "mapped", [1203]], [[1203, 1203], "valid"], [[1204, 1204], "mapped", [1205]], [[1205, 1205], "valid"], [[1206, 1206], "mapped", [1207]], [[1207, 1207], "valid"], [[1208, 1208], "mapped", [1209]], [[1209, 1209], "valid"], [[1210, 1210], "mapped", [1211]], [[1211, 1211], "valid"], [[1212, 1212], "mapped", [1213]], [[1213, 1213], "valid"], [[1214, 1214], "mapped", [1215]], [[1215, 1215], "valid"], [[1216, 1216], "disallowed"], [[1217, 1217], "mapped", [1218]], [[1218, 1218], "valid"], [[1219, 1219], "mapped", [1220]], [[1220, 1220], "valid"], [[1221, 1221], "mapped", [1222]], [[1222, 1222], "valid"], [[1223, 1223], "mapped", [1224]], [[1224, 1224], "valid"], [[1225, 1225], "mapped", [1226]], [[1226, 1226], "valid"], [[1227, 1227], "mapped", [1228]], [[1228, 1228], "valid"], [[1229, 1229], "mapped", [1230]], [[1230, 1230], "valid"], [[1231, 1231], "valid"], [[1232, 1232], "mapped", [1233]], [[1233, 1233], "valid"], [[1234, 1234], "mapped", [1235]], [[1235, 1235], "valid"], [[1236, 1236], "mapped", [1237]], [[1237, 1237], "valid"], [[1238, 1238], "mapped", [1239]], [[1239, 1239], "valid"], [[1240, 1240], "mapped", [1241]], [[1241, 1241], "valid"], [[1242, 1242], "mapped", [1243]], [[1243, 1243], "valid"], [[1244, 1244], "mapped", [1245]], [[1245, 1245], "valid"], [[1246, 1246], "mapped", [1247]], [[1247, 1247], "valid"], [[1248, 1248], "mapped", [1249]], [[1249, 1249], "valid"], [[1250, 1250], "mapped", [1251]], [[1251, 1251], "valid"], [[1252, 1252], "mapped", [1253]], [[1253, 1253], "valid"], [[1254, 1254], "mapped", [1255]], [[1255, 1255], "valid"], [[1256, 1256], "mapped", [1257]], [[1257, 1257], "valid"], [[1258, 1258], "mapped", [1259]], [[1259, 1259], "valid"], [[1260, 1260], "mapped", [1261]], [[1261, 1261], "valid"], [[1262, 1262], "mapped", [1263]], [[1263, 1263], "valid"], [[1264, 1264], "mapped", [1265]], [[1265, 1265], "valid"], [[1266, 1266], "mapped", [1267]], [[1267, 1267], "valid"], [[1268, 1268], "mapped", [1269]], [[1269, 1269], "valid"], [[1270, 1270], "mapped", [1271]], [[1271, 1271], "valid"], [[1272, 1272], "mapped", [1273]], [[1273, 1273], "valid"], [[1274, 1274], "mapped", [1275]], [[1275, 1275], "valid"], [[1276, 1276], "mapped", [1277]], [[1277, 1277], "valid"], [[1278, 1278], "mapped", [1279]], [[1279, 1279], "valid"], [[1280, 1280], "mapped", [1281]], [[1281, 1281], "valid"], [[1282, 1282], "mapped", [1283]], [[1283, 1283], "valid"], [[1284, 1284], "mapped", [1285]], [[1285, 1285], "valid"], [[1286, 1286], "mapped", [1287]], [[1287, 1287], "valid"], [[1288, 1288], "mapped", [1289]], [[1289, 1289], "valid"], [[1290, 1290], "mapped", [1291]], [[1291, 1291], "valid"], [[1292, 1292], "mapped", [1293]], [[1293, 1293], "valid"], [[1294, 1294], "mapped", [1295]], [[1295, 1295], "valid"], [[1296, 1296], "mapped", [1297]], [[1297, 1297], "valid"], [[1298, 1298], "mapped", [1299]], [[1299, 1299], "valid"], [[1300, 1300], "mapped", [1301]], [[1301, 1301], "valid"], [[1302, 1302], "mapped", [1303]], [[1303, 1303], "valid"], [[1304, 1304], "mapped", [1305]], [[1305, 1305], "valid"], [[1306, 1306], "mapped", [1307]], [[1307, 1307], "valid"], [[1308, 1308], "mapped", [1309]], [[1309, 1309], "valid"], [[1310, 1310], "mapped", [1311]], [[1311, 1311], "valid"], [[1312, 1312], "mapped", [1313]], [[1313, 1313], "valid"], [[1314, 1314], "mapped", [1315]], [[1315, 1315], "valid"], [[1316, 1316], "mapped", [1317]], [[1317, 1317], "valid"], [[1318, 1318], "mapped", [1319]], [[1319, 1319], "valid"], [[1320, 1320], "mapped", [1321]], [[1321, 1321], "valid"], [[1322, 1322], "mapped", [1323]], [[1323, 1323], "valid"], [[1324, 1324], "mapped", [1325]], [[1325, 1325], "valid"], [[1326, 1326], "mapped", [1327]], [[1327, 1327], "valid"], [[1328, 1328], "disallowed"], [[1329, 1329], "mapped", [1377]], [[1330, 1330], "mapped", [1378]], [[1331, 1331], "mapped", [1379]], [[1332, 1332], "mapped", [1380]], [[1333, 1333], "mapped", [1381]], [[1334, 1334], "mapped", [1382]], [[1335, 1335], "mapped", [1383]], [[1336, 1336], "mapped", [1384]], [[1337, 1337], "mapped", [1385]], [[1338, 1338], "mapped", [1386]], [[1339, 1339], "mapped", [1387]], [[1340, 1340], "mapped", [1388]], [[1341, 1341], "mapped", [1389]], [[1342, 1342], "mapped", [1390]], [[1343, 1343], "mapped", [1391]], [[1344, 1344], "mapped", [1392]], [[1345, 1345], "mapped", [1393]], [[1346, 1346], "mapped", [1394]], [[1347, 1347], "mapped", [1395]], [[1348, 1348], "mapped", [1396]], [[1349, 1349], "mapped", [1397]], [[1350, 1350], "mapped", [1398]], [[1351, 1351], "mapped", [1399]], [[1352, 1352], "mapped", [1400]], [[1353, 1353], "mapped", [1401]], [[1354, 1354], "mapped", [1402]], [[1355, 1355], "mapped", [1403]], [[1356, 1356], "mapped", [1404]], [[1357, 1357], "mapped", [1405]], [[1358, 1358], "mapped", [1406]], [[1359, 1359], "mapped", [1407]], [[1360, 1360], "mapped", [1408]], [[1361, 1361], "mapped", [1409]], [[1362, 1362], "mapped", [1410]], [[1363, 1363], "mapped", [1411]], [[1364, 1364], "mapped", [1412]], [[1365, 1365], "mapped", [1413]], [[1366, 1366], "mapped", [1414]], [[1367, 1368], "disallowed"], [[1369, 1369], "valid"], [[1370, 1375], "valid", [], "NV8"], [[1376, 1376], "disallowed"], [[1377, 1414], "valid"], [[1415, 1415], "mapped", [1381, 1410]], [[1416, 1416], "disallowed"], [[1417, 1417], "valid", [], "NV8"], [[1418, 1418], "valid", [], "NV8"], [[1419, 1420], "disallowed"], [[1421, 1422], "valid", [], "NV8"], [[1423, 1423], "valid", [], "NV8"], [[1424, 1424], "disallowed"], [[1425, 1441], "valid"], [[1442, 1442], "valid"], [[1443, 1455], "valid"], [[1456, 1465], "valid"], [[1466, 1466], "valid"], [[1467, 1469], "valid"], [[1470, 1470], "valid", [], "NV8"], [[1471, 1471], "valid"], [[1472, 1472], "valid", [], "NV8"], [[1473, 1474], "valid"], [[1475, 1475], "valid", [], "NV8"], [[1476, 1476], "valid"], [[1477, 1477], "valid"], [[1478, 1478], "valid", [], "NV8"], [[1479, 1479], "valid"], [[1480, 1487], "disallowed"], [[1488, 1514], "valid"], [[1515, 1519], "disallowed"], [[1520, 1524], "valid"], [[1525, 1535], "disallowed"], [[1536, 1539], "disallowed"], [[1540, 1540], "disallowed"], [[1541, 1541], "disallowed"], [[1542, 1546], "valid", [], "NV8"], [[1547, 1547], "valid", [], "NV8"], [[1548, 1548], "valid", [], "NV8"], [[1549, 1551], "valid", [], "NV8"], [[1552, 1557], "valid"], [[1558, 1562], "valid"], [[1563, 1563], "valid", [], "NV8"], [[1564, 1564], "disallowed"], [[1565, 1565], "disallowed"], [[1566, 1566], "valid", [], "NV8"], [[1567, 1567], "valid", [], "NV8"], [[1568, 1568], "valid"], [[1569, 1594], "valid"], [[1595, 1599], "valid"], [[1600, 1600], "valid", [], "NV8"], [[1601, 1618], "valid"], [[1619, 1621], "valid"], [[1622, 1624], "valid"], [[1625, 1630], "valid"], [[1631, 1631], "valid"], [[1632, 1641], "valid"], [[1642, 1645], "valid", [], "NV8"], [[1646, 1647], "valid"], [[1648, 1652], "valid"], [[1653, 1653], "mapped", [1575, 1652]], [[1654, 1654], "mapped", [1608, 1652]], [[1655, 1655], "mapped", [1735, 1652]], [[1656, 1656], "mapped", [1610, 1652]], [[1657, 1719], "valid"], [[1720, 1721], "valid"], [[1722, 1726], "valid"], [[1727, 1727], "valid"], [[1728, 1742], "valid"], [[1743, 1743], "valid"], [[1744, 1747], "valid"], [[1748, 1748], "valid", [], "NV8"], [[1749, 1756], "valid"], [[1757, 1757], "disallowed"], [[1758, 1758], "valid", [], "NV8"], [[1759, 1768], "valid"], [[1769, 1769], "valid", [], "NV8"], [[1770, 1773], "valid"], [[1774, 1775], "valid"], [[1776, 1785], "valid"], [[1786, 1790], "valid"], [[1791, 1791], "valid"], [[1792, 1805], "valid", [], "NV8"], [[1806, 1806], "disallowed"], [[1807, 1807], "disallowed"], [[1808, 1836], "valid"], [[1837, 1839], "valid"], [[1840, 1866], "valid"], [[1867, 1868], "disallowed"], [[1869, 1871], "valid"], [[1872, 1901], "valid"], [[1902, 1919], "valid"], [[1920, 1968], "valid"], [[1969, 1969], "valid"], [[1970, 1983], "disallowed"], [[1984, 2037], "valid"], [[2038, 2042], "valid", [], "NV8"], [[2043, 2047], "disallowed"], [[2048, 2093], "valid"], [[2094, 2095], "disallowed"], [[2096, 2110], "valid", [], "NV8"], [[2111, 2111], "disallowed"], [[2112, 2139], "valid"], [[2140, 2141], "disallowed"], [[2142, 2142], "valid", [], "NV8"], [[2143, 2207], "disallowed"], [[2208, 2208], "valid"], [[2209, 2209], "valid"], [[2210, 2220], "valid"], [[2221, 2226], "valid"], [[2227, 2228], "valid"], [[2229, 2274], "disallowed"], [[2275, 2275], "valid"], [[2276, 2302], "valid"], [[2303, 2303], "valid"], [[2304, 2304], "valid"], [[2305, 2307], "valid"], [[2308, 2308], "valid"], [[2309, 2361], "valid"], [[2362, 2363], "valid"], [[2364, 2381], "valid"], [[2382, 2382], "valid"], [[2383, 2383], "valid"], [[2384, 2388], "valid"], [[2389, 2389], "valid"], [[2390, 2391], "valid"], [[2392, 2392], "mapped", [2325, 2364]], [[2393, 2393], "mapped", [2326, 2364]], [[2394, 2394], "mapped", [2327, 2364]], [[2395, 2395], "mapped", [2332, 2364]], [[2396, 2396], "mapped", [2337, 2364]], [[2397, 2397], "mapped", [2338, 2364]], [[2398, 2398], "mapped", [2347, 2364]], [[2399, 2399], "mapped", [2351, 2364]], [[2400, 2403], "valid"], [[2404, 2405], "valid", [], "NV8"], [[2406, 2415], "valid"], [[2416, 2416], "valid", [], "NV8"], [[2417, 2418], "valid"], [[2419, 2423], "valid"], [[2424, 2424], "valid"], [[2425, 2426], "valid"], [[2427, 2428], "valid"], [[2429, 2429], "valid"], [[2430, 2431], "valid"], [[2432, 2432], "valid"], [[2433, 2435], "valid"], [[2436, 2436], "disallowed"], [[2437, 2444], "valid"], [[2445, 2446], "disallowed"], [[2447, 2448], "valid"], [[2449, 2450], "disallowed"], [[2451, 2472], "valid"], [[2473, 2473], "disallowed"], [[2474, 2480], "valid"], [[2481, 2481], "disallowed"], [[2482, 2482], "valid"], [[2483, 2485], "disallowed"], [[2486, 2489], "valid"], [[2490, 2491], "disallowed"], [[2492, 2492], "valid"], [[2493, 2493], "valid"], [[2494, 2500], "valid"], [[2501, 2502], "disallowed"], [[2503, 2504], "valid"], [[2505, 2506], "disallowed"], [[2507, 2509], "valid"], [[2510, 2510], "valid"], [[2511, 2518], "disallowed"], [[2519, 2519], "valid"], [[2520, 2523], "disallowed"], [[2524, 2524], "mapped", [2465, 2492]], [[2525, 2525], "mapped", [2466, 2492]], [[2526, 2526], "disallowed"], [[2527, 2527], "mapped", [2479, 2492]], [[2528, 2531], "valid"], [[2532, 2533], "disallowed"], [[2534, 2545], "valid"], [[2546, 2554], "valid", [], "NV8"], [[2555, 2555], "valid", [], "NV8"], [[2556, 2560], "disallowed"], [[2561, 2561], "valid"], [[2562, 2562], "valid"], [[2563, 2563], "valid"], [[2564, 2564], "disallowed"], [[2565, 2570], "valid"], [[2571, 2574], "disallowed"], [[2575, 2576], "valid"], [[2577, 2578], "disallowed"], [[2579, 2600], "valid"], [[2601, 2601], "disallowed"], [[2602, 2608], "valid"], [[2609, 2609], "disallowed"], [[2610, 2610], "valid"], [[2611, 2611], "mapped", [2610, 2620]], [[2612, 2612], "disallowed"], [[2613, 2613], "valid"], [[2614, 2614], "mapped", [2616, 2620]], [[2615, 2615], "disallowed"], [[2616, 2617], "valid"], [[2618, 2619], "disallowed"], [[2620, 2620], "valid"], [[2621, 2621], "disallowed"], [[2622, 2626], "valid"], [[2627, 2630], "disallowed"], [[2631, 2632], "valid"], [[2633, 2634], "disallowed"], [[2635, 2637], "valid"], [[2638, 2640], "disallowed"], [[2641, 2641], "valid"], [[2642, 2648], "disallowed"], [[2649, 2649], "mapped", [2582, 2620]], [[2650, 2650], "mapped", [2583, 2620]], [[2651, 2651], "mapped", [2588, 2620]], [[2652, 2652], "valid"], [[2653, 2653], "disallowed"], [[2654, 2654], "mapped", [2603, 2620]], [[2655, 2661], "disallowed"], [[2662, 2676], "valid"], [[2677, 2677], "valid"], [[2678, 2688], "disallowed"], [[2689, 2691], "valid"], [[2692, 2692], "disallowed"], [[2693, 2699], "valid"], [[2700, 2700], "valid"], [[2701, 2701], "valid"], [[2702, 2702], "disallowed"], [[2703, 2705], "valid"], [[2706, 2706], "disallowed"], [[2707, 2728], "valid"], [[2729, 2729], "disallowed"], [[2730, 2736], "valid"], [[2737, 2737], "disallowed"], [[2738, 2739], "valid"], [[2740, 2740], "disallowed"], [[2741, 2745], "valid"], [[2746, 2747], "disallowed"], [[2748, 2757], "valid"], [[2758, 2758], "disallowed"], [[2759, 2761], "valid"], [[2762, 2762], "disallowed"], [[2763, 2765], "valid"], [[2766, 2767], "disallowed"], [[2768, 2768], "valid"], [[2769, 2783], "disallowed"], [[2784, 2784], "valid"], [[2785, 2787], "valid"], [[2788, 2789], "disallowed"], [[2790, 2799], "valid"], [[2800, 2800], "valid", [], "NV8"], [[2801, 2801], "valid", [], "NV8"], [[2802, 2808], "disallowed"], [[2809, 2809], "valid"], [[2810, 2816], "disallowed"], [[2817, 2819], "valid"], [[2820, 2820], "disallowed"], [[2821, 2828], "valid"], [[2829, 2830], "disallowed"], [[2831, 2832], "valid"], [[2833, 2834], "disallowed"], [[2835, 2856], "valid"], [[2857, 2857], "disallowed"], [[2858, 2864], "valid"], [[2865, 2865], "disallowed"], [[2866, 2867], "valid"], [[2868, 2868], "disallowed"], [[2869, 2869], "valid"], [[2870, 2873], "valid"], [[2874, 2875], "disallowed"], [[2876, 2883], "valid"], [[2884, 2884], "valid"], [[2885, 2886], "disallowed"], [[2887, 2888], "valid"], [[2889, 2890], "disallowed"], [[2891, 2893], "valid"], [[2894, 2901], "disallowed"], [[2902, 2903], "valid"], [[2904, 2907], "disallowed"], [[2908, 2908], "mapped", [2849, 2876]], [[2909, 2909], "mapped", [2850, 2876]], [[2910, 2910], "disallowed"], [[2911, 2913], "valid"], [[2914, 2915], "valid"], [[2916, 2917], "disallowed"], [[2918, 2927], "valid"], [[2928, 2928], "valid", [], "NV8"], [[2929, 2929], "valid"], [[2930, 2935], "valid", [], "NV8"], [[2936, 2945], "disallowed"], [[2946, 2947], "valid"], [[2948, 2948], "disallowed"], [[2949, 2954], "valid"], [[2955, 2957], "disallowed"], [[2958, 2960], "valid"], [[2961, 2961], "disallowed"], [[2962, 2965], "valid"], [[2966, 2968], "disallowed"], [[2969, 2970], "valid"], [[2971, 2971], "disallowed"], [[2972, 2972], "valid"], [[2973, 2973], "disallowed"], [[2974, 2975], "valid"], [[2976, 2978], "disallowed"], [[2979, 2980], "valid"], [[2981, 2983], "disallowed"], [[2984, 2986], "valid"], [[2987, 2989], "disallowed"], [[2990, 2997], "valid"], [[2998, 2998], "valid"], [[2999, 3001], "valid"], [[3002, 3005], "disallowed"], [[3006, 3010], "valid"], [[3011, 3013], "disallowed"], [[3014, 3016], "valid"], [[3017, 3017], "disallowed"], [[3018, 3021], "valid"], [[3022, 3023], "disallowed"], [[3024, 3024], "valid"], [[3025, 3030], "disallowed"], [[3031, 3031], "valid"], [[3032, 3045], "disallowed"], [[3046, 3046], "valid"], [[3047, 3055], "valid"], [[3056, 3058], "valid", [], "NV8"], [[3059, 3066], "valid", [], "NV8"], [[3067, 3071], "disallowed"], [[3072, 3072], "valid"], [[3073, 3075], "valid"], [[3076, 3076], "disallowed"], [[3077, 3084], "valid"], [[3085, 3085], "disallowed"], [[3086, 3088], "valid"], [[3089, 3089], "disallowed"], [[3090, 3112], "valid"], [[3113, 3113], "disallowed"], [[3114, 3123], "valid"], [[3124, 3124], "valid"], [[3125, 3129], "valid"], [[3130, 3132], "disallowed"], [[3133, 3133], "valid"], [[3134, 3140], "valid"], [[3141, 3141], "disallowed"], [[3142, 3144], "valid"], [[3145, 3145], "disallowed"], [[3146, 3149], "valid"], [[3150, 3156], "disallowed"], [[3157, 3158], "valid"], [[3159, 3159], "disallowed"], [[3160, 3161], "valid"], [[3162, 3162], "valid"], [[3163, 3167], "disallowed"], [[3168, 3169], "valid"], [[3170, 3171], "valid"], [[3172, 3173], "disallowed"], [[3174, 3183], "valid"], [[3184, 3191], "disallowed"], [[3192, 3199], "valid", [], "NV8"], [[3200, 3200], "disallowed"], [[3201, 3201], "valid"], [[3202, 3203], "valid"], [[3204, 3204], "disallowed"], [[3205, 3212], "valid"], [[3213, 3213], "disallowed"], [[3214, 3216], "valid"], [[3217, 3217], "disallowed"], [[3218, 3240], "valid"], [[3241, 3241], "disallowed"], [[3242, 3251], "valid"], [[3252, 3252], "disallowed"], [[3253, 3257], "valid"], [[3258, 3259], "disallowed"], [[3260, 3261], "valid"], [[3262, 3268], "valid"], [[3269, 3269], "disallowed"], [[3270, 3272], "valid"], [[3273, 3273], "disallowed"], [[3274, 3277], "valid"], [[3278, 3284], "disallowed"], [[3285, 3286], "valid"], [[3287, 3293], "disallowed"], [[3294, 3294], "valid"], [[3295, 3295], "disallowed"], [[3296, 3297], "valid"], [[3298, 3299], "valid"], [[3300, 3301], "disallowed"], [[3302, 3311], "valid"], [[3312, 3312], "disallowed"], [[3313, 3314], "valid"], [[3315, 3328], "disallowed"], [[3329, 3329], "valid"], [[3330, 3331], "valid"], [[3332, 3332], "disallowed"], [[3333, 3340], "valid"], [[3341, 3341], "disallowed"], [[3342, 3344], "valid"], [[3345, 3345], "disallowed"], [[3346, 3368], "valid"], [[3369, 3369], "valid"], [[3370, 3385], "valid"], [[3386, 3386], "valid"], [[3387, 3388], "disallowed"], [[3389, 3389], "valid"], [[3390, 3395], "valid"], [[3396, 3396], "valid"], [[3397, 3397], "disallowed"], [[3398, 3400], "valid"], [[3401, 3401], "disallowed"], [[3402, 3405], "valid"], [[3406, 3406], "valid"], [[3407, 3414], "disallowed"], [[3415, 3415], "valid"], [[3416, 3422], "disallowed"], [[3423, 3423], "valid"], [[3424, 3425], "valid"], [[3426, 3427], "valid"], [[3428, 3429], "disallowed"], [[3430, 3439], "valid"], [[3440, 3445], "valid", [], "NV8"], [[3446, 3448], "disallowed"], [[3449, 3449], "valid", [], "NV8"], [[3450, 3455], "valid"], [[3456, 3457], "disallowed"], [[3458, 3459], "valid"], [[3460, 3460], "disallowed"], [[3461, 3478], "valid"], [[3479, 3481], "disallowed"], [[3482, 3505], "valid"], [[3506, 3506], "disallowed"], [[3507, 3515], "valid"], [[3516, 3516], "disallowed"], [[3517, 3517], "valid"], [[3518, 3519], "disallowed"], [[3520, 3526], "valid"], [[3527, 3529], "disallowed"], [[3530, 3530], "valid"], [[3531, 3534], "disallowed"], [[3535, 3540], "valid"], [[3541, 3541], "disallowed"], [[3542, 3542], "valid"], [[3543, 3543], "disallowed"], [[3544, 3551], "valid"], [[3552, 3557], "disallowed"], [[3558, 3567], "valid"], [[3568, 3569], "disallowed"], [[3570, 3571], "valid"], [[3572, 3572], "valid", [], "NV8"], [[3573, 3584], "disallowed"], [[3585, 3634], "valid"], [[3635, 3635], "mapped", [3661, 3634]], [[3636, 3642], "valid"], [[3643, 3646], "disallowed"], [[3647, 3647], "valid", [], "NV8"], [[3648, 3662], "valid"], [[3663, 3663], "valid", [], "NV8"], [[3664, 3673], "valid"], [[3674, 3675], "valid", [], "NV8"], [[3676, 3712], "disallowed"], [[3713, 3714], "valid"], [[3715, 3715], "disallowed"], [[3716, 3716], "valid"], [[3717, 3718], "disallowed"], [[3719, 3720], "valid"], [[3721, 3721], "disallowed"], [[3722, 3722], "valid"], [[3723, 3724], "disallowed"], [[3725, 3725], "valid"], [[3726, 3731], "disallowed"], [[3732, 3735], "valid"], [[3736, 3736], "disallowed"], [[3737, 3743], "valid"], [[3744, 3744], "disallowed"], [[3745, 3747], "valid"], [[3748, 3748], "disallowed"], [[3749, 3749], "valid"], [[3750, 3750], "disallowed"], [[3751, 3751], "valid"], [[3752, 3753], "disallowed"], [[3754, 3755], "valid"], [[3756, 3756], "disallowed"], [[3757, 3762], "valid"], [[3763, 3763], "mapped", [3789, 3762]], [[3764, 3769], "valid"], [[3770, 3770], "disallowed"], [[3771, 3773], "valid"], [[3774, 3775], "disallowed"], [[3776, 3780], "valid"], [[3781, 3781], "disallowed"], [[3782, 3782], "valid"], [[3783, 3783], "disallowed"], [[3784, 3789], "valid"], [[3790, 3791], "disallowed"], [[3792, 3801], "valid"], [[3802, 3803], "disallowed"], [[3804, 3804], "mapped", [3755, 3737]], [[3805, 3805], "mapped", [3755, 3745]], [[3806, 3807], "valid"], [[3808, 3839], "disallowed"], [[3840, 3840], "valid"], [[3841, 3850], "valid", [], "NV8"], [[3851, 3851], "valid"], [[3852, 3852], "mapped", [3851]], [[3853, 3863], "valid", [], "NV8"], [[3864, 3865], "valid"], [[3866, 3871], "valid", [], "NV8"], [[3872, 3881], "valid"], [[3882, 3892], "valid", [], "NV8"], [[3893, 3893], "valid"], [[3894, 3894], "valid", [], "NV8"], [[3895, 3895], "valid"], [[3896, 3896], "valid", [], "NV8"], [[3897, 3897], "valid"], [[3898, 3901], "valid", [], "NV8"], [[3902, 3906], "valid"], [[3907, 3907], "mapped", [3906, 4023]], [[3908, 3911], "valid"], [[3912, 3912], "disallowed"], [[3913, 3916], "valid"], [[3917, 3917], "mapped", [3916, 4023]], [[3918, 3921], "valid"], [[3922, 3922], "mapped", [3921, 4023]], [[3923, 3926], "valid"], [[3927, 3927], "mapped", [3926, 4023]], [[3928, 3931], "valid"], [[3932, 3932], "mapped", [3931, 4023]], [[3933, 3944], "valid"], [[3945, 3945], "mapped", [3904, 4021]], [[3946, 3946], "valid"], [[3947, 3948], "valid"], [[3949, 3952], "disallowed"], [[3953, 3954], "valid"], [[3955, 3955], "mapped", [3953, 3954]], [[3956, 3956], "valid"], [[3957, 3957], "mapped", [3953, 3956]], [[3958, 3958], "mapped", [4018, 3968]], [[3959, 3959], "mapped", [4018, 3953, 3968]], [[3960, 3960], "mapped", [4019, 3968]], [[3961, 3961], "mapped", [4019, 3953, 3968]], [[3962, 3968], "valid"], [[3969, 3969], "mapped", [3953, 3968]], [[3970, 3972], "valid"], [[3973, 3973], "valid", [], "NV8"], [[3974, 3979], "valid"], [[3980, 3983], "valid"], [[3984, 3986], "valid"], [[3987, 3987], "mapped", [3986, 4023]], [[3988, 3989], "valid"], [[3990, 3990], "valid"], [[3991, 3991], "valid"], [[3992, 3992], "disallowed"], [[3993, 3996], "valid"], [[3997, 3997], "mapped", [3996, 4023]], [[3998, 4001], "valid"], [[4002, 4002], "mapped", [4001, 4023]], [[4003, 4006], "valid"], [[4007, 4007], "mapped", [4006, 4023]], [[4008, 4011], "valid"], [[4012, 4012], "mapped", [4011, 4023]], [[4013, 4013], "valid"], [[4014, 4016], "valid"], [[4017, 4023], "valid"], [[4024, 4024], "valid"], [[4025, 4025], "mapped", [3984, 4021]], [[4026, 4028], "valid"], [[4029, 4029], "disallowed"], [[4030, 4037], "valid", [], "NV8"], [[4038, 4038], "valid"], [[4039, 4044], "valid", [], "NV8"], [[4045, 4045], "disallowed"], [[4046, 4046], "valid", [], "NV8"], [[4047, 4047], "valid", [], "NV8"], [[4048, 4049], "valid", [], "NV8"], [[4050, 4052], "valid", [], "NV8"], [[4053, 4056], "valid", [], "NV8"], [[4057, 4058], "valid", [], "NV8"], [[4059, 4095], "disallowed"], [[4096, 4129], "valid"], [[4130, 4130], "valid"], [[4131, 4135], "valid"], [[4136, 4136], "valid"], [[4137, 4138], "valid"], [[4139, 4139], "valid"], [[4140, 4146], "valid"], [[4147, 4149], "valid"], [[4150, 4153], "valid"], [[4154, 4159], "valid"], [[4160, 4169], "valid"], [[4170, 4175], "valid", [], "NV8"], [[4176, 4185], "valid"], [[4186, 4249], "valid"], [[4250, 4253], "valid"], [[4254, 4255], "valid", [], "NV8"], [[4256, 4293], "disallowed"], [[4294, 4294], "disallowed"], [[4295, 4295], "mapped", [11559]], [[4296, 4300], "disallowed"], [[4301, 4301], "mapped", [11565]], [[4302, 4303], "disallowed"], [[4304, 4342], "valid"], [[4343, 4344], "valid"], [[4345, 4346], "valid"], [[4347, 4347], "valid", [], "NV8"], [[4348, 4348], "mapped", [4316]], [[4349, 4351], "valid"], [[4352, 4441], "valid", [], "NV8"], [[4442, 4446], "valid", [], "NV8"], [[4447, 4448], "disallowed"], [[4449, 4514], "valid", [], "NV8"], [[4515, 4519], "valid", [], "NV8"], [[4520, 4601], "valid", [], "NV8"], [[4602, 4607], "valid", [], "NV8"], [[4608, 4614], "valid"], [[4615, 4615], "valid"], [[4616, 4678], "valid"], [[4679, 4679], "valid"], [[4680, 4680], "valid"], [[4681, 4681], "disallowed"], [[4682, 4685], "valid"], [[4686, 4687], "disallowed"], [[4688, 4694], "valid"], [[4695, 4695], "disallowed"], [[4696, 4696], "valid"], [[4697, 4697], "disallowed"], [[4698, 4701], "valid"], [[4702, 4703], "disallowed"], [[4704, 4742], "valid"], [[4743, 4743], "valid"], [[4744, 4744], "valid"], [[4745, 4745], "disallowed"], [[4746, 4749], "valid"], [[4750, 4751], "disallowed"], [[4752, 4782], "valid"], [[4783, 4783], "valid"], [[4784, 4784], "valid"], [[4785, 4785], "disallowed"], [[4786, 4789], "valid"], [[4790, 4791], "disallowed"], [[4792, 4798], "valid"], [[4799, 4799], "disallowed"], [[4800, 4800], "valid"], [[4801, 4801], "disallowed"], [[4802, 4805], "valid"], [[4806, 4807], "disallowed"], [[4808, 4814], "valid"], [[4815, 4815], "valid"], [[4816, 4822], "valid"], [[4823, 4823], "disallowed"], [[4824, 4846], "valid"], [[4847, 4847], "valid"], [[4848, 4878], "valid"], [[4879, 4879], "valid"], [[4880, 4880], "valid"], [[4881, 4881], "disallowed"], [[4882, 4885], "valid"], [[4886, 4887], "disallowed"], [[4888, 4894], "valid"], [[4895, 4895], "valid"], [[4896, 4934], "valid"], [[4935, 4935], "valid"], [[4936, 4954], "valid"], [[4955, 4956], "disallowed"], [[4957, 4958], "valid"], [[4959, 4959], "valid"], [[4960, 4960], "valid", [], "NV8"], [[4961, 4988], "valid", [], "NV8"], [[4989, 4991], "disallowed"], [[4992, 5007], "valid"], [[5008, 5017], "valid", [], "NV8"], [[5018, 5023], "disallowed"], [[5024, 5108], "valid"], [[5109, 5109], "valid"], [[5110, 5111], "disallowed"], [[5112, 5112], "mapped", [5104]], [[5113, 5113], "mapped", [5105]], [[5114, 5114], "mapped", [5106]], [[5115, 5115], "mapped", [5107]], [[5116, 5116], "mapped", [5108]], [[5117, 5117], "mapped", [5109]], [[5118, 5119], "disallowed"], [[5120, 5120], "valid", [], "NV8"], [[5121, 5740], "valid"], [[5741, 5742], "valid", [], "NV8"], [[5743, 5750], "valid"], [[5751, 5759], "valid"], [[5760, 5760], "disallowed"], [[5761, 5786], "valid"], [[5787, 5788], "valid", [], "NV8"], [[5789, 5791], "disallowed"], [[5792, 5866], "valid"], [[5867, 5872], "valid", [], "NV8"], [[5873, 5880], "valid"], [[5881, 5887], "disallowed"], [[5888, 5900], "valid"], [[5901, 5901], "disallowed"], [[5902, 5908], "valid"], [[5909, 5919], "disallowed"], [[5920, 5940], "valid"], [[5941, 5942], "valid", [], "NV8"], [[5943, 5951], "disallowed"], [[5952, 5971], "valid"], [[5972, 5983], "disallowed"], [[5984, 5996], "valid"], [[5997, 5997], "disallowed"], [[5998, 6e3], "valid"], [[6001, 6001], "disallowed"], [[6002, 6003], "valid"], [[6004, 6015], "disallowed"], [[6016, 6067], "valid"], [[6068, 6069], "disallowed"], [[6070, 6099], "valid"], [[6100, 6102], "valid", [], "NV8"], [[6103, 6103], "valid"], [[6104, 6107], "valid", [], "NV8"], [[6108, 6108], "valid"], [[6109, 6109], "valid"], [[6110, 6111], "disallowed"], [[6112, 6121], "valid"], [[6122, 6127], "disallowed"], [[6128, 6137], "valid", [], "NV8"], [[6138, 6143], "disallowed"], [[6144, 6149], "valid", [], "NV8"], [[6150, 6150], "disallowed"], [[6151, 6154], "valid", [], "NV8"], [[6155, 6157], "ignored"], [[6158, 6158], "disallowed"], [[6159, 6159], "disallowed"], [[6160, 6169], "valid"], [[6170, 6175], "disallowed"], [[6176, 6263], "valid"], [[6264, 6271], "disallowed"], [[6272, 6313], "valid"], [[6314, 6314], "valid"], [[6315, 6319], "disallowed"], [[6320, 6389], "valid"], [[6390, 6399], "disallowed"], [[6400, 6428], "valid"], [[6429, 6430], "valid"], [[6431, 6431], "disallowed"], [[6432, 6443], "valid"], [[6444, 6447], "disallowed"], [[6448, 6459], "valid"], [[6460, 6463], "disallowed"], [[6464, 6464], "valid", [], "NV8"], [[6465, 6467], "disallowed"], [[6468, 6469], "valid", [], "NV8"], [[6470, 6509], "valid"], [[6510, 6511], "disallowed"], [[6512, 6516], "valid"], [[6517, 6527], "disallowed"], [[6528, 6569], "valid"], [[6570, 6571], "valid"], [[6572, 6575], "disallowed"], [[6576, 6601], "valid"], [[6602, 6607], "disallowed"], [[6608, 6617], "valid"], [[6618, 6618], "valid", [], "XV8"], [[6619, 6621], "disallowed"], [[6622, 6623], "valid", [], "NV8"], [[6624, 6655], "valid", [], "NV8"], [[6656, 6683], "valid"], [[6684, 6685], "disallowed"], [[6686, 6687], "valid", [], "NV8"], [[6688, 6750], "valid"], [[6751, 6751], "disallowed"], [[6752, 6780], "valid"], [[6781, 6782], "disallowed"], [[6783, 6793], "valid"], [[6794, 6799], "disallowed"], [[6800, 6809], "valid"], [[6810, 6815], "disallowed"], [[6816, 6822], "valid", [], "NV8"], [[6823, 6823], "valid"], [[6824, 6829], "valid", [], "NV8"], [[6830, 6831], "disallowed"], [[6832, 6845], "valid"], [[6846, 6846], "valid", [], "NV8"], [[6847, 6911], "disallowed"], [[6912, 6987], "valid"], [[6988, 6991], "disallowed"], [[6992, 7001], "valid"], [[7002, 7018], "valid", [], "NV8"], [[7019, 7027], "valid"], [[7028, 7036], "valid", [], "NV8"], [[7037, 7039], "disallowed"], [[7040, 7082], "valid"], [[7083, 7085], "valid"], [[7086, 7097], "valid"], [[7098, 7103], "valid"], [[7104, 7155], "valid"], [[7156, 7163], "disallowed"], [[7164, 7167], "valid", [], "NV8"], [[7168, 7223], "valid"], [[7224, 7226], "disallowed"], [[7227, 7231], "valid", [], "NV8"], [[7232, 7241], "valid"], [[7242, 7244], "disallowed"], [[7245, 7293], "valid"], [[7294, 7295], "valid", [], "NV8"], [[7296, 7359], "disallowed"], [[7360, 7367], "valid", [], "NV8"], [[7368, 7375], "disallowed"], [[7376, 7378], "valid"], [[7379, 7379], "valid", [], "NV8"], [[7380, 7410], "valid"], [[7411, 7414], "valid"], [[7415, 7415], "disallowed"], [[7416, 7417], "valid"], [[7418, 7423], "disallowed"], [[7424, 7467], "valid"], [[7468, 7468], "mapped", [97]], [[7469, 7469], "mapped", [230]], [[7470, 7470], "mapped", [98]], [[7471, 7471], "valid"], [[7472, 7472], "mapped", [100]], [[7473, 7473], "mapped", [101]], [[7474, 7474], "mapped", [477]], [[7475, 7475], "mapped", [103]], [[7476, 7476], "mapped", [104]], [[7477, 7477], "mapped", [105]], [[7478, 7478], "mapped", [106]], [[7479, 7479], "mapped", [107]], [[7480, 7480], "mapped", [108]], [[7481, 7481], "mapped", [109]], [[7482, 7482], "mapped", [110]], [[7483, 7483], "valid"], [[7484, 7484], "mapped", [111]], [[7485, 7485], "mapped", [547]], [[7486, 7486], "mapped", [112]], [[7487, 7487], "mapped", [114]], [[7488, 7488], "mapped", [116]], [[7489, 7489], "mapped", [117]], [[7490, 7490], "mapped", [119]], [[7491, 7491], "mapped", [97]], [[7492, 7492], "mapped", [592]], [[7493, 7493], "mapped", [593]], [[7494, 7494], "mapped", [7426]], [[7495, 7495], "mapped", [98]], [[7496, 7496], "mapped", [100]], [[7497, 7497], "mapped", [101]], [[7498, 7498], "mapped", [601]], [[7499, 7499], "mapped", [603]], [[7500, 7500], "mapped", [604]], [[7501, 7501], "mapped", [103]], [[7502, 7502], "valid"], [[7503, 7503], "mapped", [107]], [[7504, 7504], "mapped", [109]], [[7505, 7505], "mapped", [331]], [[7506, 7506], "mapped", [111]], [[7507, 7507], "mapped", [596]], [[7508, 7508], "mapped", [7446]], [[7509, 7509], "mapped", [7447]], [[7510, 7510], "mapped", [112]], [[7511, 7511], "mapped", [116]], [[7512, 7512], "mapped", [117]], [[7513, 7513], "mapped", [7453]], [[7514, 7514], "mapped", [623]], [[7515, 7515], "mapped", [118]], [[7516, 7516], "mapped", [7461]], [[7517, 7517], "mapped", [946]], [[7518, 7518], "mapped", [947]], [[7519, 7519], "mapped", [948]], [[7520, 7520], "mapped", [966]], [[7521, 7521], "mapped", [967]], [[7522, 7522], "mapped", [105]], [[7523, 7523], "mapped", [114]], [[7524, 7524], "mapped", [117]], [[7525, 7525], "mapped", [118]], [[7526, 7526], "mapped", [946]], [[7527, 7527], "mapped", [947]], [[7528, 7528], "mapped", [961]], [[7529, 7529], "mapped", [966]], [[7530, 7530], "mapped", [967]], [[7531, 7531], "valid"], [[7532, 7543], "valid"], [[7544, 7544], "mapped", [1085]], [[7545, 7578], "valid"], [[7579, 7579], "mapped", [594]], [[7580, 7580], "mapped", [99]], [[7581, 7581], "mapped", [597]], [[7582, 7582], "mapped", [240]], [[7583, 7583], "mapped", [604]], [[7584, 7584], "mapped", [102]], [[7585, 7585], "mapped", [607]], [[7586, 7586], "mapped", [609]], [[7587, 7587], "mapped", [613]], [[7588, 7588], "mapped", [616]], [[7589, 7589], "mapped", [617]], [[7590, 7590], "mapped", [618]], [[7591, 7591], "mapped", [7547]], [[7592, 7592], "mapped", [669]], [[7593, 7593], "mapped", [621]], [[7594, 7594], "mapped", [7557]], [[7595, 7595], "mapped", [671]], [[7596, 7596], "mapped", [625]], [[7597, 7597], "mapped", [624]], [[7598, 7598], "mapped", [626]], [[7599, 7599], "mapped", [627]], [[7600, 7600], "mapped", [628]], [[7601, 7601], "mapped", [629]], [[7602, 7602], "mapped", [632]], [[7603, 7603], "mapped", [642]], [[7604, 7604], "mapped", [643]], [[7605, 7605], "mapped", [427]], [[7606, 7606], "mapped", [649]], [[7607, 7607], "mapped", [650]], [[7608, 7608], "mapped", [7452]], [[7609, 7609], "mapped", [651]], [[7610, 7610], "mapped", [652]], [[7611, 7611], "mapped", [122]], [[7612, 7612], "mapped", [656]], [[7613, 7613], "mapped", [657]], [[7614, 7614], "mapped", [658]], [[7615, 7615], "mapped", [952]], [[7616, 7619], "valid"], [[7620, 7626], "valid"], [[7627, 7654], "valid"], [[7655, 7669], "valid"], [[7670, 7675], "disallowed"], [[7676, 7676], "valid"], [[7677, 7677], "valid"], [[7678, 7679], "valid"], [[7680, 7680], "mapped", [7681]], [[7681, 7681], "valid"], [[7682, 7682], "mapped", [7683]], [[7683, 7683], "valid"], [[7684, 7684], "mapped", [7685]], [[7685, 7685], "valid"], [[7686, 7686], "mapped", [7687]], [[7687, 7687], "valid"], [[7688, 7688], "mapped", [7689]], [[7689, 7689], "valid"], [[7690, 7690], "mapped", [7691]], [[7691, 7691], "valid"], [[7692, 7692], "mapped", [7693]], [[7693, 7693], "valid"], [[7694, 7694], "mapped", [7695]], [[7695, 7695], "valid"], [[7696, 7696], "mapped", [7697]], [[7697, 7697], "valid"], [[7698, 7698], "mapped", [7699]], [[7699, 7699], "valid"], [[7700, 7700], "mapped", [7701]], [[7701, 7701], "valid"], [[7702, 7702], "mapped", [7703]], [[7703, 7703], "valid"], [[7704, 7704], "mapped", [7705]], [[7705, 7705], "valid"], [[7706, 7706], "mapped", [7707]], [[7707, 7707], "valid"], [[7708, 7708], "mapped", [7709]], [[7709, 7709], "valid"], [[7710, 7710], "mapped", [7711]], [[7711, 7711], "valid"], [[7712, 7712], "mapped", [7713]], [[7713, 7713], "valid"], [[7714, 7714], "mapped", [7715]], [[7715, 7715], "valid"], [[7716, 7716], "mapped", [7717]], [[7717, 7717], "valid"], [[7718, 7718], "mapped", [7719]], [[7719, 7719], "valid"], [[7720, 7720], "mapped", [7721]], [[7721, 7721], "valid"], [[7722, 7722], "mapped", [7723]], [[7723, 7723], "valid"], [[7724, 7724], "mapped", [7725]], [[7725, 7725], "valid"], [[7726, 7726], "mapped", [7727]], [[7727, 7727], "valid"], [[7728, 7728], "mapped", [7729]], [[7729, 7729], "valid"], [[7730, 7730], "mapped", [7731]], [[7731, 7731], "valid"], [[7732, 7732], "mapped", [7733]], [[7733, 7733], "valid"], [[7734, 7734], "mapped", [7735]], [[7735, 7735], "valid"], [[7736, 7736], "mapped", [7737]], [[7737, 7737], "valid"], [[7738, 7738], "mapped", [7739]], [[7739, 7739], "valid"], [[7740, 7740], "mapped", [7741]], [[7741, 7741], "valid"], [[7742, 7742], "mapped", [7743]], [[7743, 7743], "valid"], [[7744, 7744], "mapped", [7745]], [[7745, 7745], "valid"], [[7746, 7746], "mapped", [7747]], [[7747, 7747], "valid"], [[7748, 7748], "mapped", [7749]], [[7749, 7749], "valid"], [[7750, 7750], "mapped", [7751]], [[7751, 7751], "valid"], [[7752, 7752], "mapped", [7753]], [[7753, 7753], "valid"], [[7754, 7754], "mapped", [7755]], [[7755, 7755], "valid"], [[7756, 7756], "mapped", [7757]], [[7757, 7757], "valid"], [[7758, 7758], "mapped", [7759]], [[7759, 7759], "valid"], [[7760, 7760], "mapped", [7761]], [[7761, 7761], "valid"], [[7762, 7762], "mapped", [7763]], [[7763, 7763], "valid"], [[7764, 7764], "mapped", [7765]], [[7765, 7765], "valid"], [[7766, 7766], "mapped", [7767]], [[7767, 7767], "valid"], [[7768, 7768], "mapped", [7769]], [[7769, 7769], "valid"], [[7770, 7770], "mapped", [7771]], [[7771, 7771], "valid"], [[7772, 7772], "mapped", [7773]], [[7773, 7773], "valid"], [[7774, 7774], "mapped", [7775]], [[7775, 7775], "valid"], [[7776, 7776], "mapped", [7777]], [[7777, 7777], "valid"], [[7778, 7778], "mapped", [7779]], [[7779, 7779], "valid"], [[7780, 7780], "mapped", [7781]], [[7781, 7781], "valid"], [[7782, 7782], "mapped", [7783]], [[7783, 7783], "valid"], [[7784, 7784], "mapped", [7785]], [[7785, 7785], "valid"], [[7786, 7786], "mapped", [7787]], [[7787, 7787], "valid"], [[7788, 7788], "mapped", [7789]], [[7789, 7789], "valid"], [[7790, 7790], "mapped", [7791]], [[7791, 7791], "valid"], [[7792, 7792], "mapped", [7793]], [[7793, 7793], "valid"], [[7794, 7794], "mapped", [7795]], [[7795, 7795], "valid"], [[7796, 7796], "mapped", [7797]], [[7797, 7797], "valid"], [[7798, 7798], "mapped", [7799]], [[7799, 7799], "valid"], [[7800, 7800], "mapped", [7801]], [[7801, 7801], "valid"], [[7802, 7802], "mapped", [7803]], [[7803, 7803], "valid"], [[7804, 7804], "mapped", [7805]], [[7805, 7805], "valid"], [[7806, 7806], "mapped", [7807]], [[7807, 7807], "valid"], [[7808, 7808], "mapped", [7809]], [[7809, 7809], "valid"], [[7810, 7810], "mapped", [7811]], [[7811, 7811], "valid"], [[7812, 7812], "mapped", [7813]], [[7813, 7813], "valid"], [[7814, 7814], "mapped", [7815]], [[7815, 7815], "valid"], [[7816, 7816], "mapped", [7817]], [[7817, 7817], "valid"], [[7818, 7818], "mapped", [7819]], [[7819, 7819], "valid"], [[7820, 7820], "mapped", [7821]], [[7821, 7821], "valid"], [[7822, 7822], "mapped", [7823]], [[7823, 7823], "valid"], [[7824, 7824], "mapped", [7825]], [[7825, 7825], "valid"], [[7826, 7826], "mapped", [7827]], [[7827, 7827], "valid"], [[7828, 7828], "mapped", [7829]], [[7829, 7833], "valid"], [[7834, 7834], "mapped", [97, 702]], [[7835, 7835], "mapped", [7777]], [[7836, 7837], "valid"], [[7838, 7838], "mapped", [115, 115]], [[7839, 7839], "valid"], [[7840, 7840], "mapped", [7841]], [[7841, 7841], "valid"], [[7842, 7842], "mapped", [7843]], [[7843, 7843], "valid"], [[7844, 7844], "mapped", [7845]], [[7845, 7845], "valid"], [[7846, 7846], "mapped", [7847]], [[7847, 7847], "valid"], [[7848, 7848], "mapped", [7849]], [[7849, 7849], "valid"], [[7850, 7850], "mapped", [7851]], [[7851, 7851], "valid"], [[7852, 7852], "mapped", [7853]], [[7853, 7853], "valid"], [[7854, 7854], "mapped", [7855]], [[7855, 7855], "valid"], [[7856, 7856], "mapped", [7857]], [[7857, 7857], "valid"], [[7858, 7858], "mapped", [7859]], [[7859, 7859], "valid"], [[7860, 7860], "mapped", [7861]], [[7861, 7861], "valid"], [[7862, 7862], "mapped", [7863]], [[7863, 7863], "valid"], [[7864, 7864], "mapped", [7865]], [[7865, 7865], "valid"], [[7866, 7866], "mapped", [7867]], [[7867, 7867], "valid"], [[7868, 7868], "mapped", [7869]], [[7869, 7869], "valid"], [[7870, 7870], "mapped", [7871]], [[7871, 7871], "valid"], [[7872, 7872], "mapped", [7873]], [[7873, 7873], "valid"], [[7874, 7874], "mapped", [7875]], [[7875, 7875], "valid"], [[7876, 7876], "mapped", [7877]], [[7877, 7877], "valid"], [[7878, 7878], "mapped", [7879]], [[7879, 7879], "valid"], [[7880, 7880], "mapped", [7881]], [[7881, 7881], "valid"], [[7882, 7882], "mapped", [7883]], [[7883, 7883], "valid"], [[7884, 7884], "mapped", [7885]], [[7885, 7885], "valid"], [[7886, 7886], "mapped", [7887]], [[7887, 7887], "valid"], [[7888, 7888], "mapped", [7889]], [[7889, 7889], "valid"], [[7890, 7890], "mapped", [7891]], [[7891, 7891], "valid"], [[7892, 7892], "mapped", [7893]], [[7893, 7893], "valid"], [[7894, 7894], "mapped", [7895]], [[7895, 7895], "valid"], [[7896, 7896], "mapped", [7897]], [[7897, 7897], "valid"], [[7898, 7898], "mapped", [7899]], [[7899, 7899], "valid"], [[7900, 7900], "mapped", [7901]], [[7901, 7901], "valid"], [[7902, 7902], "mapped", [7903]], [[7903, 7903], "valid"], [[7904, 7904], "mapped", [7905]], [[7905, 7905], "valid"], [[7906, 7906], "mapped", [7907]], [[7907, 7907], "valid"], [[7908, 7908], "mapped", [7909]], [[7909, 7909], "valid"], [[7910, 7910], "mapped", [7911]], [[7911, 7911], "valid"], [[7912, 7912], "mapped", [7913]], [[7913, 7913], "valid"], [[7914, 7914], "mapped", [7915]], [[7915, 7915], "valid"], [[7916, 7916], "mapped", [7917]], [[7917, 7917], "valid"], [[7918, 7918], "mapped", [7919]], [[7919, 7919], "valid"], [[7920, 7920], "mapped", [7921]], [[7921, 7921], "valid"], [[7922, 7922], "mapped", [7923]], [[7923, 7923], "valid"], [[7924, 7924], "mapped", [7925]], [[7925, 7925], "valid"], [[7926, 7926], "mapped", [7927]], [[7927, 7927], "valid"], [[7928, 7928], "mapped", [7929]], [[7929, 7929], "valid"], [[7930, 7930], "mapped", [7931]], [[7931, 7931], "valid"], [[7932, 7932], "mapped", [7933]], [[7933, 7933], "valid"], [[7934, 7934], "mapped", [7935]], [[7935, 7935], "valid"], [[7936, 7943], "valid"], [[7944, 7944], "mapped", [7936]], [[7945, 7945], "mapped", [7937]], [[7946, 7946], "mapped", [7938]], [[7947, 7947], "mapped", [7939]], [[7948, 7948], "mapped", [7940]], [[7949, 7949], "mapped", [7941]], [[7950, 7950], "mapped", [7942]], [[7951, 7951], "mapped", [7943]], [[7952, 7957], "valid"], [[7958, 7959], "disallowed"], [[7960, 7960], "mapped", [7952]], [[7961, 7961], "mapped", [7953]], [[7962, 7962], "mapped", [7954]], [[7963, 7963], "mapped", [7955]], [[7964, 7964], "mapped", [7956]], [[7965, 7965], "mapped", [7957]], [[7966, 7967], "disallowed"], [[7968, 7975], "valid"], [[7976, 7976], "mapped", [7968]], [[7977, 7977], "mapped", [7969]], [[7978, 7978], "mapped", [7970]], [[7979, 7979], "mapped", [7971]], [[7980, 7980], "mapped", [7972]], [[7981, 7981], "mapped", [7973]], [[7982, 7982], "mapped", [7974]], [[7983, 7983], "mapped", [7975]], [[7984, 7991], "valid"], [[7992, 7992], "mapped", [7984]], [[7993, 7993], "mapped", [7985]], [[7994, 7994], "mapped", [7986]], [[7995, 7995], "mapped", [7987]], [[7996, 7996], "mapped", [7988]], [[7997, 7997], "mapped", [7989]], [[7998, 7998], "mapped", [7990]], [[7999, 7999], "mapped", [7991]], [[8e3, 8005], "valid"], [[8006, 8007], "disallowed"], [[8008, 8008], "mapped", [8e3]], [[8009, 8009], "mapped", [8001]], [[8010, 8010], "mapped", [8002]], [[8011, 8011], "mapped", [8003]], [[8012, 8012], "mapped", [8004]], [[8013, 8013], "mapped", [8005]], [[8014, 8015], "disallowed"], [[8016, 8023], "valid"], [[8024, 8024], "disallowed"], [[8025, 8025], "mapped", [8017]], [[8026, 8026], "disallowed"], [[8027, 8027], "mapped", [8019]], [[8028, 8028], "disallowed"], [[8029, 8029], "mapped", [8021]], [[8030, 8030], "disallowed"], [[8031, 8031], "mapped", [8023]], [[8032, 8039], "valid"], [[8040, 8040], "mapped", [8032]], [[8041, 8041], "mapped", [8033]], [[8042, 8042], "mapped", [8034]], [[8043, 8043], "mapped", [8035]], [[8044, 8044], "mapped", [8036]], [[8045, 8045], "mapped", [8037]], [[8046, 8046], "mapped", [8038]], [[8047, 8047], "mapped", [8039]], [[8048, 8048], "valid"], [[8049, 8049], "mapped", [940]], [[8050, 8050], "valid"], [[8051, 8051], "mapped", [941]], [[8052, 8052], "valid"], [[8053, 8053], "mapped", [942]], [[8054, 8054], "valid"], [[8055, 8055], "mapped", [943]], [[8056, 8056], "valid"], [[8057, 8057], "mapped", [972]], [[8058, 8058], "valid"], [[8059, 8059], "mapped", [973]], [[8060, 8060], "valid"], [[8061, 8061], "mapped", [974]], [[8062, 8063], "disallowed"], [[8064, 8064], "mapped", [7936, 953]], [[8065, 8065], "mapped", [7937, 953]], [[8066, 8066], "mapped", [7938, 953]], [[8067, 8067], "mapped", [7939, 953]], [[8068, 8068], "mapped", [7940, 953]], [[8069, 8069], "mapped", [7941, 953]], [[8070, 8070], "mapped", [7942, 953]], [[8071, 8071], "mapped", [7943, 953]], [[8072, 8072], "mapped", [7936, 953]], [[8073, 8073], "mapped", [7937, 953]], [[8074, 8074], "mapped", [7938, 953]], [[8075, 8075], "mapped", [7939, 953]], [[8076, 8076], "mapped", [7940, 953]], [[8077, 8077], "mapped", [7941, 953]], [[8078, 8078], "mapped", [7942, 953]], [[8079, 8079], "mapped", [7943, 953]], [[8080, 8080], "mapped", [7968, 953]], [[8081, 8081], "mapped", [7969, 953]], [[8082, 8082], "mapped", [7970, 953]], [[8083, 8083], "mapped", [7971, 953]], [[8084, 8084], "mapped", [7972, 953]], [[8085, 8085], "mapped", [7973, 953]], [[8086, 8086], "mapped", [7974, 953]], [[8087, 8087], "mapped", [7975, 953]], [[8088, 8088], "mapped", [7968, 953]], [[8089, 8089], "mapped", [7969, 953]], [[8090, 8090], "mapped", [7970, 953]], [[8091, 8091], "mapped", [7971, 953]], [[8092, 8092], "mapped", [7972, 953]], [[8093, 8093], "mapped", [7973, 953]], [[8094, 8094], "mapped", [7974, 953]], [[8095, 8095], "mapped", [7975, 953]], [[8096, 8096], "mapped", [8032, 953]], [[8097, 8097], "mapped", [8033, 953]], [[8098, 8098], "mapped", [8034, 953]], [[8099, 8099], "mapped", [8035, 953]], [[8100, 8100], "mapped", [8036, 953]], [[8101, 8101], "mapped", [8037, 953]], [[8102, 8102], "mapped", [8038, 953]], [[8103, 8103], "mapped", [8039, 953]], [[8104, 8104], "mapped", [8032, 953]], [[8105, 8105], "mapped", [8033, 953]], [[8106, 8106], "mapped", [8034, 953]], [[8107, 8107], "mapped", [8035, 953]], [[8108, 8108], "mapped", [8036, 953]], [[8109, 8109], "mapped", [8037, 953]], [[8110, 8110], "mapped", [8038, 953]], [[8111, 8111], "mapped", [8039, 953]], [[8112, 8113], "valid"], [[8114, 8114], "mapped", [8048, 953]], [[8115, 8115], "mapped", [945, 953]], [[8116, 8116], "mapped", [940, 953]], [[8117, 8117], "disallowed"], [[8118, 8118], "valid"], [[8119, 8119], "mapped", [8118, 953]], [[8120, 8120], "mapped", [8112]], [[8121, 8121], "mapped", [8113]], [[8122, 8122], "mapped", [8048]], [[8123, 8123], "mapped", [940]], [[8124, 8124], "mapped", [945, 953]], [[8125, 8125], "disallowed_STD3_mapped", [32, 787]], [[8126, 8126], "mapped", [953]], [[8127, 8127], "disallowed_STD3_mapped", [32, 787]], [[8128, 8128], "disallowed_STD3_mapped", [32, 834]], [[8129, 8129], "disallowed_STD3_mapped", [32, 776, 834]], [[8130, 8130], "mapped", [8052, 953]], [[8131, 8131], "mapped", [951, 953]], [[8132, 8132], "mapped", [942, 953]], [[8133, 8133], "disallowed"], [[8134, 8134], "valid"], [[8135, 8135], "mapped", [8134, 953]], [[8136, 8136], "mapped", [8050]], [[8137, 8137], "mapped", [941]], [[8138, 8138], "mapped", [8052]], [[8139, 8139], "mapped", [942]], [[8140, 8140], "mapped", [951, 953]], [[8141, 8141], "disallowed_STD3_mapped", [32, 787, 768]], [[8142, 8142], "disallowed_STD3_mapped", [32, 787, 769]], [[8143, 8143], "disallowed_STD3_mapped", [32, 787, 834]], [[8144, 8146], "valid"], [[8147, 8147], "mapped", [912]], [[8148, 8149], "disallowed"], [[8150, 8151], "valid"], [[8152, 8152], "mapped", [8144]], [[8153, 8153], "mapped", [8145]], [[8154, 8154], "mapped", [8054]], [[8155, 8155], "mapped", [943]], [[8156, 8156], "disallowed"], [[8157, 8157], "disallowed_STD3_mapped", [32, 788, 768]], [[8158, 8158], "disallowed_STD3_mapped", [32, 788, 769]], [[8159, 8159], "disallowed_STD3_mapped", [32, 788, 834]], [[8160, 8162], "valid"], [[8163, 8163], "mapped", [944]], [[8164, 8167], "valid"], [[8168, 8168], "mapped", [8160]], [[8169, 8169], "mapped", [8161]], [[8170, 8170], "mapped", [8058]], [[8171, 8171], "mapped", [973]], [[8172, 8172], "mapped", [8165]], [[8173, 8173], "disallowed_STD3_mapped", [32, 776, 768]], [[8174, 8174], "disallowed_STD3_mapped", [32, 776, 769]], [[8175, 8175], "disallowed_STD3_mapped", [96]], [[8176, 8177], "disallowed"], [[8178, 8178], "mapped", [8060, 953]], [[8179, 8179], "mapped", [969, 953]], [[8180, 8180], "mapped", [974, 953]], [[8181, 8181], "disallowed"], [[8182, 8182], "valid"], [[8183, 8183], "mapped", [8182, 953]], [[8184, 8184], "mapped", [8056]], [[8185, 8185], "mapped", [972]], [[8186, 8186], "mapped", [8060]], [[8187, 8187], "mapped", [974]], [[8188, 8188], "mapped", [969, 953]], [[8189, 8189], "disallowed_STD3_mapped", [32, 769]], [[8190, 8190], "disallowed_STD3_mapped", [32, 788]], [[8191, 8191], "disallowed"], [[8192, 8202], "disallowed_STD3_mapped", [32]], [[8203, 8203], "ignored"], [[8204, 8205], "deviation", []], [[8206, 8207], "disallowed"], [[8208, 8208], "valid", [], "NV8"], [[8209, 8209], "mapped", [8208]], [[8210, 8214], "valid", [], "NV8"], [[8215, 8215], "disallowed_STD3_mapped", [32, 819]], [[8216, 8227], "valid", [], "NV8"], [[8228, 8230], "disallowed"], [[8231, 8231], "valid", [], "NV8"], [[8232, 8238], "disallowed"], [[8239, 8239], "disallowed_STD3_mapped", [32]], [[8240, 8242], "valid", [], "NV8"], [[8243, 8243], "mapped", [8242, 8242]], [[8244, 8244], "mapped", [8242, 8242, 8242]], [[8245, 8245], "valid", [], "NV8"], [[8246, 8246], "mapped", [8245, 8245]], [[8247, 8247], "mapped", [8245, 8245, 8245]], [[8248, 8251], "valid", [], "NV8"], [[8252, 8252], "disallowed_STD3_mapped", [33, 33]], [[8253, 8253], "valid", [], "NV8"], [[8254, 8254], "disallowed_STD3_mapped", [32, 773]], [[8255, 8262], "valid", [], "NV8"], [[8263, 8263], "disallowed_STD3_mapped", [63, 63]], [[8264, 8264], "disallowed_STD3_mapped", [63, 33]], [[8265, 8265], "disallowed_STD3_mapped", [33, 63]], [[8266, 8269], "valid", [], "NV8"], [[8270, 8274], "valid", [], "NV8"], [[8275, 8276], "valid", [], "NV8"], [[8277, 8278], "valid", [], "NV8"], [[8279, 8279], "mapped", [8242, 8242, 8242, 8242]], [[8280, 8286], "valid", [], "NV8"], [[8287, 8287], "disallowed_STD3_mapped", [32]], [[8288, 8288], "ignored"], [[8289, 8291], "disallowed"], [[8292, 8292], "ignored"], [[8293, 8293], "disallowed"], [[8294, 8297], "disallowed"], [[8298, 8303], "disallowed"], [[8304, 8304], "mapped", [48]], [[8305, 8305], "mapped", [105]], [[8306, 8307], "disallowed"], [[8308, 8308], "mapped", [52]], [[8309, 8309], "mapped", [53]], [[8310, 8310], "mapped", [54]], [[8311, 8311], "mapped", [55]], [[8312, 8312], "mapped", [56]], [[8313, 8313], "mapped", [57]], [[8314, 8314], "disallowed_STD3_mapped", [43]], [[8315, 8315], "mapped", [8722]], [[8316, 8316], "disallowed_STD3_mapped", [61]], [[8317, 8317], "disallowed_STD3_mapped", [40]], [[8318, 8318], "disallowed_STD3_mapped", [41]], [[8319, 8319], "mapped", [110]], [[8320, 8320], "mapped", [48]], [[8321, 8321], "mapped", [49]], [[8322, 8322], "mapped", [50]], [[8323, 8323], "mapped", [51]], [[8324, 8324], "mapped", [52]], [[8325, 8325], "mapped", [53]], [[8326, 8326], "mapped", [54]], [[8327, 8327], "mapped", [55]], [[8328, 8328], "mapped", [56]], [[8329, 8329], "mapped", [57]], [[8330, 8330], "disallowed_STD3_mapped", [43]], [[8331, 8331], "mapped", [8722]], [[8332, 8332], "disallowed_STD3_mapped", [61]], [[8333, 8333], "disallowed_STD3_mapped", [40]], [[8334, 8334], "disallowed_STD3_mapped", [41]], [[8335, 8335], "disallowed"], [[8336, 8336], "mapped", [97]], [[8337, 8337], "mapped", [101]], [[8338, 8338], "mapped", [111]], [[8339, 8339], "mapped", [120]], [[8340, 8340], "mapped", [601]], [[8341, 8341], "mapped", [104]], [[8342, 8342], "mapped", [107]], [[8343, 8343], "mapped", [108]], [[8344, 8344], "mapped", [109]], [[8345, 8345], "mapped", [110]], [[8346, 8346], "mapped", [112]], [[8347, 8347], "mapped", [115]], [[8348, 8348], "mapped", [116]], [[8349, 8351], "disallowed"], [[8352, 8359], "valid", [], "NV8"], [[8360, 8360], "mapped", [114, 115]], [[8361, 8362], "valid", [], "NV8"], [[8363, 8363], "valid", [], "NV8"], [[8364, 8364], "valid", [], "NV8"], [[8365, 8367], "valid", [], "NV8"], [[8368, 8369], "valid", [], "NV8"], [[8370, 8373], "valid", [], "NV8"], [[8374, 8376], "valid", [], "NV8"], [[8377, 8377], "valid", [], "NV8"], [[8378, 8378], "valid", [], "NV8"], [[8379, 8381], "valid", [], "NV8"], [[8382, 8382], "valid", [], "NV8"], [[8383, 8399], "disallowed"], [[8400, 8417], "valid", [], "NV8"], [[8418, 8419], "valid", [], "NV8"], [[8420, 8426], "valid", [], "NV8"], [[8427, 8427], "valid", [], "NV8"], [[8428, 8431], "valid", [], "NV8"], [[8432, 8432], "valid", [], "NV8"], [[8433, 8447], "disallowed"], [[8448, 8448], "disallowed_STD3_mapped", [97, 47, 99]], [[8449, 8449], "disallowed_STD3_mapped", [97, 47, 115]], [[8450, 8450], "mapped", [99]], [[8451, 8451], "mapped", [176, 99]], [[8452, 8452], "valid", [], "NV8"], [[8453, 8453], "disallowed_STD3_mapped", [99, 47, 111]], [[8454, 8454], "disallowed_STD3_mapped", [99, 47, 117]], [[8455, 8455], "mapped", [603]], [[8456, 8456], "valid", [], "NV8"], [[8457, 8457], "mapped", [176, 102]], [[8458, 8458], "mapped", [103]], [[8459, 8462], "mapped", [104]], [[8463, 8463], "mapped", [295]], [[8464, 8465], "mapped", [105]], [[8466, 8467], "mapped", [108]], [[8468, 8468], "valid", [], "NV8"], [[8469, 8469], "mapped", [110]], [[8470, 8470], "mapped", [110, 111]], [[8471, 8472], "valid", [], "NV8"], [[8473, 8473], "mapped", [112]], [[8474, 8474], "mapped", [113]], [[8475, 8477], "mapped", [114]], [[8478, 8479], "valid", [], "NV8"], [[8480, 8480], "mapped", [115, 109]], [[8481, 8481], "mapped", [116, 101, 108]], [[8482, 8482], "mapped", [116, 109]], [[8483, 8483], "valid", [], "NV8"], [[8484, 8484], "mapped", [122]], [[8485, 8485], "valid", [], "NV8"], [[8486, 8486], "mapped", [969]], [[8487, 8487], "valid", [], "NV8"], [[8488, 8488], "mapped", [122]], [[8489, 8489], "valid", [], "NV8"], [[8490, 8490], "mapped", [107]], [[8491, 8491], "mapped", [229]], [[8492, 8492], "mapped", [98]], [[8493, 8493], "mapped", [99]], [[8494, 8494], "valid", [], "NV8"], [[8495, 8496], "mapped", [101]], [[8497, 8497], "mapped", [102]], [[8498, 8498], "disallowed"], [[8499, 8499], "mapped", [109]], [[8500, 8500], "mapped", [111]], [[8501, 8501], "mapped", [1488]], [[8502, 8502], "mapped", [1489]], [[8503, 8503], "mapped", [1490]], [[8504, 8504], "mapped", [1491]], [[8505, 8505], "mapped", [105]], [[8506, 8506], "valid", [], "NV8"], [[8507, 8507], "mapped", [102, 97, 120]], [[8508, 8508], "mapped", [960]], [[8509, 8510], "mapped", [947]], [[8511, 8511], "mapped", [960]], [[8512, 8512], "mapped", [8721]], [[8513, 8516], "valid", [], "NV8"], [[8517, 8518], "mapped", [100]], [[8519, 8519], "mapped", [101]], [[8520, 8520], "mapped", [105]], [[8521, 8521], "mapped", [106]], [[8522, 8523], "valid", [], "NV8"], [[8524, 8524], "valid", [], "NV8"], [[8525, 8525], "valid", [], "NV8"], [[8526, 8526], "valid"], [[8527, 8527], "valid", [], "NV8"], [[8528, 8528], "mapped", [49, 8260, 55]], [[8529, 8529], "mapped", [49, 8260, 57]], [[8530, 8530], "mapped", [49, 8260, 49, 48]], [[8531, 8531], "mapped", [49, 8260, 51]], [[8532, 8532], "mapped", [50, 8260, 51]], [[8533, 8533], "mapped", [49, 8260, 53]], [[8534, 8534], "mapped", [50, 8260, 53]], [[8535, 8535], "mapped", [51, 8260, 53]], [[8536, 8536], "mapped", [52, 8260, 53]], [[8537, 8537], "mapped", [49, 8260, 54]], [[8538, 8538], "mapped", [53, 8260, 54]], [[8539, 8539], "mapped", [49, 8260, 56]], [[8540, 8540], "mapped", [51, 8260, 56]], [[8541, 8541], "mapped", [53, 8260, 56]], [[8542, 8542], "mapped", [55, 8260, 56]], [[8543, 8543], "mapped", [49, 8260]], [[8544, 8544], "mapped", [105]], [[8545, 8545], "mapped", [105, 105]], [[8546, 8546], "mapped", [105, 105, 105]], [[8547, 8547], "mapped", [105, 118]], [[8548, 8548], "mapped", [118]], [[8549, 8549], "mapped", [118, 105]], [[8550, 8550], "mapped", [118, 105, 105]], [[8551, 8551], "mapped", [118, 105, 105, 105]], [[8552, 8552], "mapped", [105, 120]], [[8553, 8553], "mapped", [120]], [[8554, 8554], "mapped", [120, 105]], [[8555, 8555], "mapped", [120, 105, 105]], [[8556, 8556], "mapped", [108]], [[8557, 8557], "mapped", [99]], [[8558, 8558], "mapped", [100]], [[8559, 8559], "mapped", [109]], [[8560, 8560], "mapped", [105]], [[8561, 8561], "mapped", [105, 105]], [[8562, 8562], "mapped", [105, 105, 105]], [[8563, 8563], "mapped", [105, 118]], [[8564, 8564], "mapped", [118]], [[8565, 8565], "mapped", [118, 105]], [[8566, 8566], "mapped", [118, 105, 105]], [[8567, 8567], "mapped", [118, 105, 105, 105]], [[8568, 8568], "mapped", [105, 120]], [[8569, 8569], "mapped", [120]], [[8570, 8570], "mapped", [120, 105]], [[8571, 8571], "mapped", [120, 105, 105]], [[8572, 8572], "mapped", [108]], [[8573, 8573], "mapped", [99]], [[8574, 8574], "mapped", [100]], [[8575, 8575], "mapped", [109]], [[8576, 8578], "valid", [], "NV8"], [[8579, 8579], "disallowed"], [[8580, 8580], "valid"], [[8581, 8584], "valid", [], "NV8"], [[8585, 8585], "mapped", [48, 8260, 51]], [[8586, 8587], "valid", [], "NV8"], [[8588, 8591], "disallowed"], [[8592, 8682], "valid", [], "NV8"], [[8683, 8691], "valid", [], "NV8"], [[8692, 8703], "valid", [], "NV8"], [[8704, 8747], "valid", [], "NV8"], [[8748, 8748], "mapped", [8747, 8747]], [[8749, 8749], "mapped", [8747, 8747, 8747]], [[8750, 8750], "valid", [], "NV8"], [[8751, 8751], "mapped", [8750, 8750]], [[8752, 8752], "mapped", [8750, 8750, 8750]], [[8753, 8799], "valid", [], "NV8"], [[8800, 8800], "disallowed_STD3_valid"], [[8801, 8813], "valid", [], "NV8"], [[8814, 8815], "disallowed_STD3_valid"], [[8816, 8945], "valid", [], "NV8"], [[8946, 8959], "valid", [], "NV8"], [[8960, 8960], "valid", [], "NV8"], [[8961, 8961], "valid", [], "NV8"], [[8962, 9e3], "valid", [], "NV8"], [[9001, 9001], "mapped", [12296]], [[9002, 9002], "mapped", [12297]], [[9003, 9082], "valid", [], "NV8"], [[9083, 9083], "valid", [], "NV8"], [[9084, 9084], "valid", [], "NV8"], [[9085, 9114], "valid", [], "NV8"], [[9115, 9166], "valid", [], "NV8"], [[9167, 9168], "valid", [], "NV8"], [[9169, 9179], "valid", [], "NV8"], [[9180, 9191], "valid", [], "NV8"], [[9192, 9192], "valid", [], "NV8"], [[9193, 9203], "valid", [], "NV8"], [[9204, 9210], "valid", [], "NV8"], [[9211, 9215], "disallowed"], [[9216, 9252], "valid", [], "NV8"], [[9253, 9254], "valid", [], "NV8"], [[9255, 9279], "disallowed"], [[9280, 9290], "valid", [], "NV8"], [[9291, 9311], "disallowed"], [[9312, 9312], "mapped", [49]], [[9313, 9313], "mapped", [50]], [[9314, 9314], "mapped", [51]], [[9315, 9315], "mapped", [52]], [[9316, 9316], "mapped", [53]], [[9317, 9317], "mapped", [54]], [[9318, 9318], "mapped", [55]], [[9319, 9319], "mapped", [56]], [[9320, 9320], "mapped", [57]], [[9321, 9321], "mapped", [49, 48]], [[9322, 9322], "mapped", [49, 49]], [[9323, 9323], "mapped", [49, 50]], [[9324, 9324], "mapped", [49, 51]], [[9325, 9325], "mapped", [49, 52]], [[9326, 9326], "mapped", [49, 53]], [[9327, 9327], "mapped", [49, 54]], [[9328, 9328], "mapped", [49, 55]], [[9329, 9329], "mapped", [49, 56]], [[9330, 9330], "mapped", [49, 57]], [[9331, 9331], "mapped", [50, 48]], [[9332, 9332], "disallowed_STD3_mapped", [40, 49, 41]], [[9333, 9333], "disallowed_STD3_mapped", [40, 50, 41]], [[9334, 9334], "disallowed_STD3_mapped", [40, 51, 41]], [[9335, 9335], "disallowed_STD3_mapped", [40, 52, 41]], [[9336, 9336], "disallowed_STD3_mapped", [40, 53, 41]], [[9337, 9337], "disallowed_STD3_mapped", [40, 54, 41]], [[9338, 9338], "disallowed_STD3_mapped", [40, 55, 41]], [[9339, 9339], "disallowed_STD3_mapped", [40, 56, 41]], [[9340, 9340], "disallowed_STD3_mapped", [40, 57, 41]], [[9341, 9341], "disallowed_STD3_mapped", [40, 49, 48, 41]], [[9342, 9342], "disallowed_STD3_mapped", [40, 49, 49, 41]], [[9343, 9343], "disallowed_STD3_mapped", [40, 49, 50, 41]], [[9344, 9344], "disallowed_STD3_mapped", [40, 49, 51, 41]], [[9345, 9345], "disallowed_STD3_mapped", [40, 49, 52, 41]], [[9346, 9346], "disallowed_STD3_mapped", [40, 49, 53, 41]], [[9347, 9347], "disallowed_STD3_mapped", [40, 49, 54, 41]], [[9348, 9348], "disallowed_STD3_mapped", [40, 49, 55, 41]], [[9349, 9349], "disallowed_STD3_mapped", [40, 49, 56, 41]], [[9350, 9350], "disallowed_STD3_mapped", [40, 49, 57, 41]], [[9351, 9351], "disallowed_STD3_mapped", [40, 50, 48, 41]], [[9352, 9371], "disallowed"], [[9372, 9372], "disallowed_STD3_mapped", [40, 97, 41]], [[9373, 9373], "disallowed_STD3_mapped", [40, 98, 41]], [[9374, 9374], "disallowed_STD3_mapped", [40, 99, 41]], [[9375, 9375], "disallowed_STD3_mapped", [40, 100, 41]], [[9376, 9376], "disallowed_STD3_mapped", [40, 101, 41]], [[9377, 9377], "disallowed_STD3_mapped", [40, 102, 41]], [[9378, 9378], "disallowed_STD3_mapped", [40, 103, 41]], [[9379, 9379], "disallowed_STD3_mapped", [40, 104, 41]], [[9380, 9380], "disallowed_STD3_mapped", [40, 105, 41]], [[9381, 9381], "disallowed_STD3_mapped", [40, 106, 41]], [[9382, 9382], "disallowed_STD3_mapped", [40, 107, 41]], [[9383, 9383], "disallowed_STD3_mapped", [40, 108, 41]], [[9384, 9384], "disallowed_STD3_mapped", [40, 109, 41]], [[9385, 9385], "disallowed_STD3_mapped", [40, 110, 41]], [[9386, 9386], "disallowed_STD3_mapped", [40, 111, 41]], [[9387, 9387], "disallowed_STD3_mapped", [40, 112, 41]], [[9388, 9388], "disallowed_STD3_mapped", [40, 113, 41]], [[9389, 9389], "disallowed_STD3_mapped", [40, 114, 41]], [[9390, 9390], "disallowed_STD3_mapped", [40, 115, 41]], [[9391, 9391], "disallowed_STD3_mapped", [40, 116, 41]], [[9392, 9392], "disallowed_STD3_mapped", [40, 117, 41]], [[9393, 9393], "disallowed_STD3_mapped", [40, 118, 41]], [[9394, 9394], "disallowed_STD3_mapped", [40, 119, 41]], [[9395, 9395], "disallowed_STD3_mapped", [40, 120, 41]], [[9396, 9396], "disallowed_STD3_mapped", [40, 121, 41]], [[9397, 9397], "disallowed_STD3_mapped", [40, 122, 41]], [[9398, 9398], "mapped", [97]], [[9399, 9399], "mapped", [98]], [[9400, 9400], "mapped", [99]], [[9401, 9401], "mapped", [100]], [[9402, 9402], "mapped", [101]], [[9403, 9403], "mapped", [102]], [[9404, 9404], "mapped", [103]], [[9405, 9405], "mapped", [104]], [[9406, 9406], "mapped", [105]], [[9407, 9407], "mapped", [106]], [[9408, 9408], "mapped", [107]], [[9409, 9409], "mapped", [108]], [[9410, 9410], "mapped", [109]], [[9411, 9411], "mapped", [110]], [[9412, 9412], "mapped", [111]], [[9413, 9413], "mapped", [112]], [[9414, 9414], "mapped", [113]], [[9415, 9415], "mapped", [114]], [[9416, 9416], "mapped", [115]], [[9417, 9417], "mapped", [116]], [[9418, 9418], "mapped", [117]], [[9419, 9419], "mapped", [118]], [[9420, 9420], "mapped", [119]], [[9421, 9421], "mapped", [120]], [[9422, 9422], "mapped", [121]], [[9423, 9423], "mapped", [122]], [[9424, 9424], "mapped", [97]], [[9425, 9425], "mapped", [98]], [[9426, 9426], "mapped", [99]], [[9427, 9427], "mapped", [100]], [[9428, 9428], "mapped", [101]], [[9429, 9429], "mapped", [102]], [[9430, 9430], "mapped", [103]], [[9431, 9431], "mapped", [104]], [[9432, 9432], "mapped", [105]], [[9433, 9433], "mapped", [106]], [[9434, 9434], "mapped", [107]], [[9435, 9435], "mapped", [108]], [[9436, 9436], "mapped", [109]], [[9437, 9437], "mapped", [110]], [[9438, 9438], "mapped", [111]], [[9439, 9439], "mapped", [112]], [[9440, 9440], "mapped", [113]], [[9441, 9441], "mapped", [114]], [[9442, 9442], "mapped", [115]], [[9443, 9443], "mapped", [116]], [[9444, 9444], "mapped", [117]], [[9445, 9445], "mapped", [118]], [[9446, 9446], "mapped", [119]], [[9447, 9447], "mapped", [120]], [[9448, 9448], "mapped", [121]], [[9449, 9449], "mapped", [122]], [[9450, 9450], "mapped", [48]], [[9451, 9470], "valid", [], "NV8"], [[9471, 9471], "valid", [], "NV8"], [[9472, 9621], "valid", [], "NV8"], [[9622, 9631], "valid", [], "NV8"], [[9632, 9711], "valid", [], "NV8"], [[9712, 9719], "valid", [], "NV8"], [[9720, 9727], "valid", [], "NV8"], [[9728, 9747], "valid", [], "NV8"], [[9748, 9749], "valid", [], "NV8"], [[9750, 9751], "valid", [], "NV8"], [[9752, 9752], "valid", [], "NV8"], [[9753, 9753], "valid", [], "NV8"], [[9754, 9839], "valid", [], "NV8"], [[9840, 9841], "valid", [], "NV8"], [[9842, 9853], "valid", [], "NV8"], [[9854, 9855], "valid", [], "NV8"], [[9856, 9865], "valid", [], "NV8"], [[9866, 9873], "valid", [], "NV8"], [[9874, 9884], "valid", [], "NV8"], [[9885, 9885], "valid", [], "NV8"], [[9886, 9887], "valid", [], "NV8"], [[9888, 9889], "valid", [], "NV8"], [[9890, 9905], "valid", [], "NV8"], [[9906, 9906], "valid", [], "NV8"], [[9907, 9916], "valid", [], "NV8"], [[9917, 9919], "valid", [], "NV8"], [[9920, 9923], "valid", [], "NV8"], [[9924, 9933], "valid", [], "NV8"], [[9934, 9934], "valid", [], "NV8"], [[9935, 9953], "valid", [], "NV8"], [[9954, 9954], "valid", [], "NV8"], [[9955, 9955], "valid", [], "NV8"], [[9956, 9959], "valid", [], "NV8"], [[9960, 9983], "valid", [], "NV8"], [[9984, 9984], "valid", [], "NV8"], [[9985, 9988], "valid", [], "NV8"], [[9989, 9989], "valid", [], "NV8"], [[9990, 9993], "valid", [], "NV8"], [[9994, 9995], "valid", [], "NV8"], [[9996, 10023], "valid", [], "NV8"], [[10024, 10024], "valid", [], "NV8"], [[10025, 10059], "valid", [], "NV8"], [[10060, 10060], "valid", [], "NV8"], [[10061, 10061], "valid", [], "NV8"], [[10062, 10062], "valid", [], "NV8"], [[10063, 10066], "valid", [], "NV8"], [[10067, 10069], "valid", [], "NV8"], [[10070, 10070], "valid", [], "NV8"], [[10071, 10071], "valid", [], "NV8"], [[10072, 10078], "valid", [], "NV8"], [[10079, 10080], "valid", [], "NV8"], [[10081, 10087], "valid", [], "NV8"], [[10088, 10101], "valid", [], "NV8"], [[10102, 10132], "valid", [], "NV8"], [[10133, 10135], "valid", [], "NV8"], [[10136, 10159], "valid", [], "NV8"], [[10160, 10160], "valid", [], "NV8"], [[10161, 10174], "valid", [], "NV8"], [[10175, 10175], "valid", [], "NV8"], [[10176, 10182], "valid", [], "NV8"], [[10183, 10186], "valid", [], "NV8"], [[10187, 10187], "valid", [], "NV8"], [[10188, 10188], "valid", [], "NV8"], [[10189, 10189], "valid", [], "NV8"], [[10190, 10191], "valid", [], "NV8"], [[10192, 10219], "valid", [], "NV8"], [[10220, 10223], "valid", [], "NV8"], [[10224, 10239], "valid", [], "NV8"], [[10240, 10495], "valid", [], "NV8"], [[10496, 10763], "valid", [], "NV8"], [[10764, 10764], "mapped", [8747, 8747, 8747, 8747]], [[10765, 10867], "valid", [], "NV8"], [[10868, 10868], "disallowed_STD3_mapped", [58, 58, 61]], [[10869, 10869], "disallowed_STD3_mapped", [61, 61]], [[10870, 10870], "disallowed_STD3_mapped", [61, 61, 61]], [[10871, 10971], "valid", [], "NV8"], [[10972, 10972], "mapped", [10973, 824]], [[10973, 11007], "valid", [], "NV8"], [[11008, 11021], "valid", [], "NV8"], [[11022, 11027], "valid", [], "NV8"], [[11028, 11034], "valid", [], "NV8"], [[11035, 11039], "valid", [], "NV8"], [[11040, 11043], "valid", [], "NV8"], [[11044, 11084], "valid", [], "NV8"], [[11085, 11087], "valid", [], "NV8"], [[11088, 11092], "valid", [], "NV8"], [[11093, 11097], "valid", [], "NV8"], [[11098, 11123], "valid", [], "NV8"], [[11124, 11125], "disallowed"], [[11126, 11157], "valid", [], "NV8"], [[11158, 11159], "disallowed"], [[11160, 11193], "valid", [], "NV8"], [[11194, 11196], "disallowed"], [[11197, 11208], "valid", [], "NV8"], [[11209, 11209], "disallowed"], [[11210, 11217], "valid", [], "NV8"], [[11218, 11243], "disallowed"], [[11244, 11247], "valid", [], "NV8"], [[11248, 11263], "disallowed"], [[11264, 11264], "mapped", [11312]], [[11265, 11265], "mapped", [11313]], [[11266, 11266], "mapped", [11314]], [[11267, 11267], "mapped", [11315]], [[11268, 11268], "mapped", [11316]], [[11269, 11269], "mapped", [11317]], [[11270, 11270], "mapped", [11318]], [[11271, 11271], "mapped", [11319]], [[11272, 11272], "mapped", [11320]], [[11273, 11273], "mapped", [11321]], [[11274, 11274], "mapped", [11322]], [[11275, 11275], "mapped", [11323]], [[11276, 11276], "mapped", [11324]], [[11277, 11277], "mapped", [11325]], [[11278, 11278], "mapped", [11326]], [[11279, 11279], "mapped", [11327]], [[11280, 11280], "mapped", [11328]], [[11281, 11281], "mapped", [11329]], [[11282, 11282], "mapped", [11330]], [[11283, 11283], "mapped", [11331]], [[11284, 11284], "mapped", [11332]], [[11285, 11285], "mapped", [11333]], [[11286, 11286], "mapped", [11334]], [[11287, 11287], "mapped", [11335]], [[11288, 11288], "mapped", [11336]], [[11289, 11289], "mapped", [11337]], [[11290, 11290], "mapped", [11338]], [[11291, 11291], "mapped", [11339]], [[11292, 11292], "mapped", [11340]], [[11293, 11293], "mapped", [11341]], [[11294, 11294], "mapped", [11342]], [[11295, 11295], "mapped", [11343]], [[11296, 11296], "mapped", [11344]], [[11297, 11297], "mapped", [11345]], [[11298, 11298], "mapped", [11346]], [[11299, 11299], "mapped", [11347]], [[11300, 11300], "mapped", [11348]], [[11301, 11301], "mapped", [11349]], [[11302, 11302], "mapped", [11350]], [[11303, 11303], "mapped", [11351]], [[11304, 11304], "mapped", [11352]], [[11305, 11305], "mapped", [11353]], [[11306, 11306], "mapped", [11354]], [[11307, 11307], "mapped", [11355]], [[11308, 11308], "mapped", [11356]], [[11309, 11309], "mapped", [11357]], [[11310, 11310], "mapped", [11358]], [[11311, 11311], "disallowed"], [[11312, 11358], "valid"], [[11359, 11359], "disallowed"], [[11360, 11360], "mapped", [11361]], [[11361, 11361], "valid"], [[11362, 11362], "mapped", [619]], [[11363, 11363], "mapped", [7549]], [[11364, 11364], "mapped", [637]], [[11365, 11366], "valid"], [[11367, 11367], "mapped", [11368]], [[11368, 11368], "valid"], [[11369, 11369], "mapped", [11370]], [[11370, 11370], "valid"], [[11371, 11371], "mapped", [11372]], [[11372, 11372], "valid"], [[11373, 11373], "mapped", [593]], [[11374, 11374], "mapped", [625]], [[11375, 11375], "mapped", [592]], [[11376, 11376], "mapped", [594]], [[11377, 11377], "valid"], [[11378, 11378], "mapped", [11379]], [[11379, 11379], "valid"], [[11380, 11380], "valid"], [[11381, 11381], "mapped", [11382]], [[11382, 11383], "valid"], [[11384, 11387], "valid"], [[11388, 11388], "mapped", [106]], [[11389, 11389], "mapped", [118]], [[11390, 11390], "mapped", [575]], [[11391, 11391], "mapped", [576]], [[11392, 11392], "mapped", [11393]], [[11393, 11393], "valid"], [[11394, 11394], "mapped", [11395]], [[11395, 11395], "valid"], [[11396, 11396], "mapped", [11397]], [[11397, 11397], "valid"], [[11398, 11398], "mapped", [11399]], [[11399, 11399], "valid"], [[11400, 11400], "mapped", [11401]], [[11401, 11401], "valid"], [[11402, 11402], "mapped", [11403]], [[11403, 11403], "valid"], [[11404, 11404], "mapped", [11405]], [[11405, 11405], "valid"], [[11406, 11406], "mapped", [11407]], [[11407, 11407], "valid"], [[11408, 11408], "mapped", [11409]], [[11409, 11409], "valid"], [[11410, 11410], "mapped", [11411]], [[11411, 11411], "valid"], [[11412, 11412], "mapped", [11413]], [[11413, 11413], "valid"], [[11414, 11414], "mapped", [11415]], [[11415, 11415], "valid"], [[11416, 11416], "mapped", [11417]], [[11417, 11417], "valid"], [[11418, 11418], "mapped", [11419]], [[11419, 11419], "valid"], [[11420, 11420], "mapped", [11421]], [[11421, 11421], "valid"], [[11422, 11422], "mapped", [11423]], [[11423, 11423], "valid"], [[11424, 11424], "mapped", [11425]], [[11425, 11425], "valid"], [[11426, 11426], "mapped", [11427]], [[11427, 11427], "valid"], [[11428, 11428], "mapped", [11429]], [[11429, 11429], "valid"], [[11430, 11430], "mapped", [11431]], [[11431, 11431], "valid"], [[11432, 11432], "mapped", [11433]], [[11433, 11433], "valid"], [[11434, 11434], "mapped", [11435]], [[11435, 11435], "valid"], [[11436, 11436], "mapped", [11437]], [[11437, 11437], "valid"], [[11438, 11438], "mapped", [11439]], [[11439, 11439], "valid"], [[11440, 11440], "mapped", [11441]], [[11441, 11441], "valid"], [[11442, 11442], "mapped", [11443]], [[11443, 11443], "valid"], [[11444, 11444], "mapped", [11445]], [[11445, 11445], "valid"], [[11446, 11446], "mapped", [11447]], [[11447, 11447], "valid"], [[11448, 11448], "mapped", [11449]], [[11449, 11449], "valid"], [[11450, 11450], "mapped", [11451]], [[11451, 11451], "valid"], [[11452, 11452], "mapped", [11453]], [[11453, 11453], "valid"], [[11454, 11454], "mapped", [11455]], [[11455, 11455], "valid"], [[11456, 11456], "mapped", [11457]], [[11457, 11457], "valid"], [[11458, 11458], "mapped", [11459]], [[11459, 11459], "valid"], [[11460, 11460], "mapped", [11461]], [[11461, 11461], "valid"], [[11462, 11462], "mapped", [11463]], [[11463, 11463], "valid"], [[11464, 11464], "mapped", [11465]], [[11465, 11465], "valid"], [[11466, 11466], "mapped", [11467]], [[11467, 11467], "valid"], [[11468, 11468], "mapped", [11469]], [[11469, 11469], "valid"], [[11470, 11470], "mapped", [11471]], [[11471, 11471], "valid"], [[11472, 11472], "mapped", [11473]], [[11473, 11473], "valid"], [[11474, 11474], "mapped", [11475]], [[11475, 11475], "valid"], [[11476, 11476], "mapped", [11477]], [[11477, 11477], "valid"], [[11478, 11478], "mapped", [11479]], [[11479, 11479], "valid"], [[11480, 11480], "mapped", [11481]], [[11481, 11481], "valid"], [[11482, 11482], "mapped", [11483]], [[11483, 11483], "valid"], [[11484, 11484], "mapped", [11485]], [[11485, 11485], "valid"], [[11486, 11486], "mapped", [11487]], [[11487, 11487], "valid"], [[11488, 11488], "mapped", [11489]], [[11489, 11489], "valid"], [[11490, 11490], "mapped", [11491]], [[11491, 11492], "valid"], [[11493, 11498], "valid", [], "NV8"], [[11499, 11499], "mapped", [11500]], [[11500, 11500], "valid"], [[11501, 11501], "mapped", [11502]], [[11502, 11505], "valid"], [[11506, 11506], "mapped", [11507]], [[11507, 11507], "valid"], [[11508, 11512], "disallowed"], [[11513, 11519], "valid", [], "NV8"], [[11520, 11557], "valid"], [[11558, 11558], "disallowed"], [[11559, 11559], "valid"], [[11560, 11564], "disallowed"], [[11565, 11565], "valid"], [[11566, 11567], "disallowed"], [[11568, 11621], "valid"], [[11622, 11623], "valid"], [[11624, 11630], "disallowed"], [[11631, 11631], "mapped", [11617]], [[11632, 11632], "valid", [], "NV8"], [[11633, 11646], "disallowed"], [[11647, 11647], "valid"], [[11648, 11670], "valid"], [[11671, 11679], "disallowed"], [[11680, 11686], "valid"], [[11687, 11687], "disallowed"], [[11688, 11694], "valid"], [[11695, 11695], "disallowed"], [[11696, 11702], "valid"], [[11703, 11703], "disallowed"], [[11704, 11710], "valid"], [[11711, 11711], "disallowed"], [[11712, 11718], "valid"], [[11719, 11719], "disallowed"], [[11720, 11726], "valid"], [[11727, 11727], "disallowed"], [[11728, 11734], "valid"], [[11735, 11735], "disallowed"], [[11736, 11742], "valid"], [[11743, 11743], "disallowed"], [[11744, 11775], "valid"], [[11776, 11799], "valid", [], "NV8"], [[11800, 11803], "valid", [], "NV8"], [[11804, 11805], "valid", [], "NV8"], [[11806, 11822], "valid", [], "NV8"], [[11823, 11823], "valid"], [[11824, 11824], "valid", [], "NV8"], [[11825, 11825], "valid", [], "NV8"], [[11826, 11835], "valid", [], "NV8"], [[11836, 11842], "valid", [], "NV8"], [[11843, 11903], "disallowed"], [[11904, 11929], "valid", [], "NV8"], [[11930, 11930], "disallowed"], [[11931, 11934], "valid", [], "NV8"], [[11935, 11935], "mapped", [27597]], [[11936, 12018], "valid", [], "NV8"], [[12019, 12019], "mapped", [40863]], [[12020, 12031], "disallowed"], [[12032, 12032], "mapped", [19968]], [[12033, 12033], "mapped", [20008]], [[12034, 12034], "mapped", [20022]], [[12035, 12035], "mapped", [20031]], [[12036, 12036], "mapped", [20057]], [[12037, 12037], "mapped", [20101]], [[12038, 12038], "mapped", [20108]], [[12039, 12039], "mapped", [20128]], [[12040, 12040], "mapped", [20154]], [[12041, 12041], "mapped", [20799]], [[12042, 12042], "mapped", [20837]], [[12043, 12043], "mapped", [20843]], [[12044, 12044], "mapped", [20866]], [[12045, 12045], "mapped", [20886]], [[12046, 12046], "mapped", [20907]], [[12047, 12047], "mapped", [20960]], [[12048, 12048], "mapped", [20981]], [[12049, 12049], "mapped", [20992]], [[12050, 12050], "mapped", [21147]], [[12051, 12051], "mapped", [21241]], [[12052, 12052], "mapped", [21269]], [[12053, 12053], "mapped", [21274]], [[12054, 12054], "mapped", [21304]], [[12055, 12055], "mapped", [21313]], [[12056, 12056], "mapped", [21340]], [[12057, 12057], "mapped", [21353]], [[12058, 12058], "mapped", [21378]], [[12059, 12059], "mapped", [21430]], [[12060, 12060], "mapped", [21448]], [[12061, 12061], "mapped", [21475]], [[12062, 12062], "mapped", [22231]], [[12063, 12063], "mapped", [22303]], [[12064, 12064], "mapped", [22763]], [[12065, 12065], "mapped", [22786]], [[12066, 12066], "mapped", [22794]], [[12067, 12067], "mapped", [22805]], [[12068, 12068], "mapped", [22823]], [[12069, 12069], "mapped", [22899]], [[12070, 12070], "mapped", [23376]], [[12071, 12071], "mapped", [23424]], [[12072, 12072], "mapped", [23544]], [[12073, 12073], "mapped", [23567]], [[12074, 12074], "mapped", [23586]], [[12075, 12075], "mapped", [23608]], [[12076, 12076], "mapped", [23662]], [[12077, 12077], "mapped", [23665]], [[12078, 12078], "mapped", [24027]], [[12079, 12079], "mapped", [24037]], [[12080, 12080], "mapped", [24049]], [[12081, 12081], "mapped", [24062]], [[12082, 12082], "mapped", [24178]], [[12083, 12083], "mapped", [24186]], [[12084, 12084], "mapped", [24191]], [[12085, 12085], "mapped", [24308]], [[12086, 12086], "mapped", [24318]], [[12087, 12087], "mapped", [24331]], [[12088, 12088], "mapped", [24339]], [[12089, 12089], "mapped", [24400]], [[12090, 12090], "mapped", [24417]], [[12091, 12091], "mapped", [24435]], [[12092, 12092], "mapped", [24515]], [[12093, 12093], "mapped", [25096]], [[12094, 12094], "mapped", [25142]], [[12095, 12095], "mapped", [25163]], [[12096, 12096], "mapped", [25903]], [[12097, 12097], "mapped", [25908]], [[12098, 12098], "mapped", [25991]], [[12099, 12099], "mapped", [26007]], [[12100, 12100], "mapped", [26020]], [[12101, 12101], "mapped", [26041]], [[12102, 12102], "mapped", [26080]], [[12103, 12103], "mapped", [26085]], [[12104, 12104], "mapped", [26352]], [[12105, 12105], "mapped", [26376]], [[12106, 12106], "mapped", [26408]], [[12107, 12107], "mapped", [27424]], [[12108, 12108], "mapped", [27490]], [[12109, 12109], "mapped", [27513]], [[12110, 12110], "mapped", [27571]], [[12111, 12111], "mapped", [27595]], [[12112, 12112], "mapped", [27604]], [[12113, 12113], "mapped", [27611]], [[12114, 12114], "mapped", [27663]], [[12115, 12115], "mapped", [27668]], [[12116, 12116], "mapped", [27700]], [[12117, 12117], "mapped", [28779]], [[12118, 12118], "mapped", [29226]], [[12119, 12119], "mapped", [29238]], [[12120, 12120], "mapped", [29243]], [[12121, 12121], "mapped", [29247]], [[12122, 12122], "mapped", [29255]], [[12123, 12123], "mapped", [29273]], [[12124, 12124], "mapped", [29275]], [[12125, 12125], "mapped", [29356]], [[12126, 12126], "mapped", [29572]], [[12127, 12127], "mapped", [29577]], [[12128, 12128], "mapped", [29916]], [[12129, 12129], "mapped", [29926]], [[12130, 12130], "mapped", [29976]], [[12131, 12131], "mapped", [29983]], [[12132, 12132], "mapped", [29992]], [[12133, 12133], "mapped", [3e4]], [[12134, 12134], "mapped", [30091]], [[12135, 12135], "mapped", [30098]], [[12136, 12136], "mapped", [30326]], [[12137, 12137], "mapped", [30333]], [[12138, 12138], "mapped", [30382]], [[12139, 12139], "mapped", [30399]], [[12140, 12140], "mapped", [30446]], [[12141, 12141], "mapped", [30683]], [[12142, 12142], "mapped", [30690]], [[12143, 12143], "mapped", [30707]], [[12144, 12144], "mapped", [31034]], [[12145, 12145], "mapped", [31160]], [[12146, 12146], "mapped", [31166]], [[12147, 12147], "mapped", [31348]], [[12148, 12148], "mapped", [31435]], [[12149, 12149], "mapped", [31481]], [[12150, 12150], "mapped", [31859]], [[12151, 12151], "mapped", [31992]], [[12152, 12152], "mapped", [32566]], [[12153, 12153], "mapped", [32593]], [[12154, 12154], "mapped", [32650]], [[12155, 12155], "mapped", [32701]], [[12156, 12156], "mapped", [32769]], [[12157, 12157], "mapped", [32780]], [[12158, 12158], "mapped", [32786]], [[12159, 12159], "mapped", [32819]], [[12160, 12160], "mapped", [32895]], [[12161, 12161], "mapped", [32905]], [[12162, 12162], "mapped", [33251]], [[12163, 12163], "mapped", [33258]], [[12164, 12164], "mapped", [33267]], [[12165, 12165], "mapped", [33276]], [[12166, 12166], "mapped", [33292]], [[12167, 12167], "mapped", [33307]], [[12168, 12168], "mapped", [33311]], [[12169, 12169], "mapped", [33390]], [[12170, 12170], "mapped", [33394]], [[12171, 12171], "mapped", [33400]], [[12172, 12172], "mapped", [34381]], [[12173, 12173], "mapped", [34411]], [[12174, 12174], "mapped", [34880]], [[12175, 12175], "mapped", [34892]], [[12176, 12176], "mapped", [34915]], [[12177, 12177], "mapped", [35198]], [[12178, 12178], "mapped", [35211]], [[12179, 12179], "mapped", [35282]], [[12180, 12180], "mapped", [35328]], [[12181, 12181], "mapped", [35895]], [[12182, 12182], "mapped", [35910]], [[12183, 12183], "mapped", [35925]], [[12184, 12184], "mapped", [35960]], [[12185, 12185], "mapped", [35997]], [[12186, 12186], "mapped", [36196]], [[12187, 12187], "mapped", [36208]], [[12188, 12188], "mapped", [36275]], [[12189, 12189], "mapped", [36523]], [[12190, 12190], "mapped", [36554]], [[12191, 12191], "mapped", [36763]], [[12192, 12192], "mapped", [36784]], [[12193, 12193], "mapped", [36789]], [[12194, 12194], "mapped", [37009]], [[12195, 12195], "mapped", [37193]], [[12196, 12196], "mapped", [37318]], [[12197, 12197], "mapped", [37324]], [[12198, 12198], "mapped", [37329]], [[12199, 12199], "mapped", [38263]], [[12200, 12200], "mapped", [38272]], [[12201, 12201], "mapped", [38428]], [[12202, 12202], "mapped", [38582]], [[12203, 12203], "mapped", [38585]], [[12204, 12204], "mapped", [38632]], [[12205, 12205], "mapped", [38737]], [[12206, 12206], "mapped", [38750]], [[12207, 12207], "mapped", [38754]], [[12208, 12208], "mapped", [38761]], [[12209, 12209], "mapped", [38859]], [[12210, 12210], "mapped", [38893]], [[12211, 12211], "mapped", [38899]], [[12212, 12212], "mapped", [38913]], [[12213, 12213], "mapped", [39080]], [[12214, 12214], "mapped", [39131]], [[12215, 12215], "mapped", [39135]], [[12216, 12216], "mapped", [39318]], [[12217, 12217], "mapped", [39321]], [[12218, 12218], "mapped", [39340]], [[12219, 12219], "mapped", [39592]], [[12220, 12220], "mapped", [39640]], [[12221, 12221], "mapped", [39647]], [[12222, 12222], "mapped", [39717]], [[12223, 12223], "mapped", [39727]], [[12224, 12224], "mapped", [39730]], [[12225, 12225], "mapped", [39740]], [[12226, 12226], "mapped", [39770]], [[12227, 12227], "mapped", [40165]], [[12228, 12228], "mapped", [40565]], [[12229, 12229], "mapped", [40575]], [[12230, 12230], "mapped", [40613]], [[12231, 12231], "mapped", [40635]], [[12232, 12232], "mapped", [40643]], [[12233, 12233], "mapped", [40653]], [[12234, 12234], "mapped", [40657]], [[12235, 12235], "mapped", [40697]], [[12236, 12236], "mapped", [40701]], [[12237, 12237], "mapped", [40718]], [[12238, 12238], "mapped", [40723]], [[12239, 12239], "mapped", [40736]], [[12240, 12240], "mapped", [40763]], [[12241, 12241], "mapped", [40778]], [[12242, 12242], "mapped", [40786]], [[12243, 12243], "mapped", [40845]], [[12244, 12244], "mapped", [40860]], [[12245, 12245], "mapped", [40864]], [[12246, 12271], "disallowed"], [[12272, 12283], "disallowed"], [[12284, 12287], "disallowed"], [[12288, 12288], "disallowed_STD3_mapped", [32]], [[12289, 12289], "valid", [], "NV8"], [[12290, 12290], "mapped", [46]], [[12291, 12292], "valid", [], "NV8"], [[12293, 12295], "valid"], [[12296, 12329], "valid", [], "NV8"], [[12330, 12333], "valid"], [[12334, 12341], "valid", [], "NV8"], [[12342, 12342], "mapped", [12306]], [[12343, 12343], "valid", [], "NV8"], [[12344, 12344], "mapped", [21313]], [[12345, 12345], "mapped", [21316]], [[12346, 12346], "mapped", [21317]], [[12347, 12347], "valid", [], "NV8"], [[12348, 12348], "valid"], [[12349, 12349], "valid", [], "NV8"], [[12350, 12350], "valid", [], "NV8"], [[12351, 12351], "valid", [], "NV8"], [[12352, 12352], "disallowed"], [[12353, 12436], "valid"], [[12437, 12438], "valid"], [[12439, 12440], "disallowed"], [[12441, 12442], "valid"], [[12443, 12443], "disallowed_STD3_mapped", [32, 12441]], [[12444, 12444], "disallowed_STD3_mapped", [32, 12442]], [[12445, 12446], "valid"], [[12447, 12447], "mapped", [12424, 12426]], [[12448, 12448], "valid", [], "NV8"], [[12449, 12542], "valid"], [[12543, 12543], "mapped", [12467, 12488]], [[12544, 12548], "disallowed"], [[12549, 12588], "valid"], [[12589, 12589], "valid"], [[12590, 12592], "disallowed"], [[12593, 12593], "mapped", [4352]], [[12594, 12594], "mapped", [4353]], [[12595, 12595], "mapped", [4522]], [[12596, 12596], "mapped", [4354]], [[12597, 12597], "mapped", [4524]], [[12598, 12598], "mapped", [4525]], [[12599, 12599], "mapped", [4355]], [[12600, 12600], "mapped", [4356]], [[12601, 12601], "mapped", [4357]], [[12602, 12602], "mapped", [4528]], [[12603, 12603], "mapped", [4529]], [[12604, 12604], "mapped", [4530]], [[12605, 12605], "mapped", [4531]], [[12606, 12606], "mapped", [4532]], [[12607, 12607], "mapped", [4533]], [[12608, 12608], "mapped", [4378]], [[12609, 12609], "mapped", [4358]], [[12610, 12610], "mapped", [4359]], [[12611, 12611], "mapped", [4360]], [[12612, 12612], "mapped", [4385]], [[12613, 12613], "mapped", [4361]], [[12614, 12614], "mapped", [4362]], [[12615, 12615], "mapped", [4363]], [[12616, 12616], "mapped", [4364]], [[12617, 12617], "mapped", [4365]], [[12618, 12618], "mapped", [4366]], [[12619, 12619], "mapped", [4367]], [[12620, 12620], "mapped", [4368]], [[12621, 12621], "mapped", [4369]], [[12622, 12622], "mapped", [4370]], [[12623, 12623], "mapped", [4449]], [[12624, 12624], "mapped", [4450]], [[12625, 12625], "mapped", [4451]], [[12626, 12626], "mapped", [4452]], [[12627, 12627], "mapped", [4453]], [[12628, 12628], "mapped", [4454]], [[12629, 12629], "mapped", [4455]], [[12630, 12630], "mapped", [4456]], [[12631, 12631], "mapped", [4457]], [[12632, 12632], "mapped", [4458]], [[12633, 12633], "mapped", [4459]], [[12634, 12634], "mapped", [4460]], [[12635, 12635], "mapped", [4461]], [[12636, 12636], "mapped", [4462]], [[12637, 12637], "mapped", [4463]], [[12638, 12638], "mapped", [4464]], [[12639, 12639], "mapped", [4465]], [[12640, 12640], "mapped", [4466]], [[12641, 12641], "mapped", [4467]], [[12642, 12642], "mapped", [4468]], [[12643, 12643], "mapped", [4469]], [[12644, 12644], "disallowed"], [[12645, 12645], "mapped", [4372]], [[12646, 12646], "mapped", [4373]], [[12647, 12647], "mapped", [4551]], [[12648, 12648], "mapped", [4552]], [[12649, 12649], "mapped", [4556]], [[12650, 12650], "mapped", [4558]], [[12651, 12651], "mapped", [4563]], [[12652, 12652], "mapped", [4567]], [[12653, 12653], "mapped", [4569]], [[12654, 12654], "mapped", [4380]], [[12655, 12655], "mapped", [4573]], [[12656, 12656], "mapped", [4575]], [[12657, 12657], "mapped", [4381]], [[12658, 12658], "mapped", [4382]], [[12659, 12659], "mapped", [4384]], [[12660, 12660], "mapped", [4386]], [[12661, 12661], "mapped", [4387]], [[12662, 12662], "mapped", [4391]], [[12663, 12663], "mapped", [4393]], [[12664, 12664], "mapped", [4395]], [[12665, 12665], "mapped", [4396]], [[12666, 12666], "mapped", [4397]], [[12667, 12667], "mapped", [4398]], [[12668, 12668], "mapped", [4399]], [[12669, 12669], "mapped", [4402]], [[12670, 12670], "mapped", [4406]], [[12671, 12671], "mapped", [4416]], [[12672, 12672], "mapped", [4423]], [[12673, 12673], "mapped", [4428]], [[12674, 12674], "mapped", [4593]], [[12675, 12675], "mapped", [4594]], [[12676, 12676], "mapped", [4439]], [[12677, 12677], "mapped", [4440]], [[12678, 12678], "mapped", [4441]], [[12679, 12679], "mapped", [4484]], [[12680, 12680], "mapped", [4485]], [[12681, 12681], "mapped", [4488]], [[12682, 12682], "mapped", [4497]], [[12683, 12683], "mapped", [4498]], [[12684, 12684], "mapped", [4500]], [[12685, 12685], "mapped", [4510]], [[12686, 12686], "mapped", [4513]], [[12687, 12687], "disallowed"], [[12688, 12689], "valid", [], "NV8"], [[12690, 12690], "mapped", [19968]], [[12691, 12691], "mapped", [20108]], [[12692, 12692], "mapped", [19977]], [[12693, 12693], "mapped", [22235]], [[12694, 12694], "mapped", [19978]], [[12695, 12695], "mapped", [20013]], [[12696, 12696], "mapped", [19979]], [[12697, 12697], "mapped", [30002]], [[12698, 12698], "mapped", [20057]], [[12699, 12699], "mapped", [19993]], [[12700, 12700], "mapped", [19969]], [[12701, 12701], "mapped", [22825]], [[12702, 12702], "mapped", [22320]], [[12703, 12703], "mapped", [20154]], [[12704, 12727], "valid"], [[12728, 12730], "valid"], [[12731, 12735], "disallowed"], [[12736, 12751], "valid", [], "NV8"], [[12752, 12771], "valid", [], "NV8"], [[12772, 12783], "disallowed"], [[12784, 12799], "valid"], [[12800, 12800], "disallowed_STD3_mapped", [40, 4352, 41]], [[12801, 12801], "disallowed_STD3_mapped", [40, 4354, 41]], [[12802, 12802], "disallowed_STD3_mapped", [40, 4355, 41]], [[12803, 12803], "disallowed_STD3_mapped", [40, 4357, 41]], [[12804, 12804], "disallowed_STD3_mapped", [40, 4358, 41]], [[12805, 12805], "disallowed_STD3_mapped", [40, 4359, 41]], [[12806, 12806], "disallowed_STD3_mapped", [40, 4361, 41]], [[12807, 12807], "disallowed_STD3_mapped", [40, 4363, 41]], [[12808, 12808], "disallowed_STD3_mapped", [40, 4364, 41]], [[12809, 12809], "disallowed_STD3_mapped", [40, 4366, 41]], [[12810, 12810], "disallowed_STD3_mapped", [40, 4367, 41]], [[12811, 12811], "disallowed_STD3_mapped", [40, 4368, 41]], [[12812, 12812], "disallowed_STD3_mapped", [40, 4369, 41]], [[12813, 12813], "disallowed_STD3_mapped", [40, 4370, 41]], [[12814, 12814], "disallowed_STD3_mapped", [40, 44032, 41]], [[12815, 12815], "disallowed_STD3_mapped", [40, 45208, 41]], [[12816, 12816], "disallowed_STD3_mapped", [40, 45796, 41]], [[12817, 12817], "disallowed_STD3_mapped", [40, 46972, 41]], [[12818, 12818], "disallowed_STD3_mapped", [40, 47560, 41]], [[12819, 12819], "disallowed_STD3_mapped", [40, 48148, 41]], [[12820, 12820], "disallowed_STD3_mapped", [40, 49324, 41]], [[12821, 12821], "disallowed_STD3_mapped", [40, 50500, 41]], [[12822, 12822], "disallowed_STD3_mapped", [40, 51088, 41]], [[12823, 12823], "disallowed_STD3_mapped", [40, 52264, 41]], [[12824, 12824], "disallowed_STD3_mapped", [40, 52852, 41]], [[12825, 12825], "disallowed_STD3_mapped", [40, 53440, 41]], [[12826, 12826], "disallowed_STD3_mapped", [40, 54028, 41]], [[12827, 12827], "disallowed_STD3_mapped", [40, 54616, 41]], [[12828, 12828], "disallowed_STD3_mapped", [40, 51452, 41]], [[12829, 12829], "disallowed_STD3_mapped", [40, 50724, 51204, 41]], [[12830, 12830], "disallowed_STD3_mapped", [40, 50724, 54980, 41]], [[12831, 12831], "disallowed"], [[12832, 12832], "disallowed_STD3_mapped", [40, 19968, 41]], [[12833, 12833], "disallowed_STD3_mapped", [40, 20108, 41]], [[12834, 12834], "disallowed_STD3_mapped", [40, 19977, 41]], [[12835, 12835], "disallowed_STD3_mapped", [40, 22235, 41]], [[12836, 12836], "disallowed_STD3_mapped", [40, 20116, 41]], [[12837, 12837], "disallowed_STD3_mapped", [40, 20845, 41]], [[12838, 12838], "disallowed_STD3_mapped", [40, 19971, 41]], [[12839, 12839], "disallowed_STD3_mapped", [40, 20843, 41]], [[12840, 12840], "disallowed_STD3_mapped", [40, 20061, 41]], [[12841, 12841], "disallowed_STD3_mapped", [40, 21313, 41]], [[12842, 12842], "disallowed_STD3_mapped", [40, 26376, 41]], [[12843, 12843], "disallowed_STD3_mapped", [40, 28779, 41]], [[12844, 12844], "disallowed_STD3_mapped", [40, 27700, 41]], [[12845, 12845], "disallowed_STD3_mapped", [40, 26408, 41]], [[12846, 12846], "disallowed_STD3_mapped", [40, 37329, 41]], [[12847, 12847], "disallowed_STD3_mapped", [40, 22303, 41]], [[12848, 12848], "disallowed_STD3_mapped", [40, 26085, 41]], [[12849, 12849], "disallowed_STD3_mapped", [40, 26666, 41]], [[12850, 12850], "disallowed_STD3_mapped", [40, 26377, 41]], [[12851, 12851], "disallowed_STD3_mapped", [40, 31038, 41]], [[12852, 12852], "disallowed_STD3_mapped", [40, 21517, 41]], [[12853, 12853], "disallowed_STD3_mapped", [40, 29305, 41]], [[12854, 12854], "disallowed_STD3_mapped", [40, 36001, 41]], [[12855, 12855], "disallowed_STD3_mapped", [40, 31069, 41]], [[12856, 12856], "disallowed_STD3_mapped", [40, 21172, 41]], [[12857, 12857], "disallowed_STD3_mapped", [40, 20195, 41]], [[12858, 12858], "disallowed_STD3_mapped", [40, 21628, 41]], [[12859, 12859], "disallowed_STD3_mapped", [40, 23398, 41]], [[12860, 12860], "disallowed_STD3_mapped", [40, 30435, 41]], [[12861, 12861], "disallowed_STD3_mapped", [40, 20225, 41]], [[12862, 12862], "disallowed_STD3_mapped", [40, 36039, 41]], [[12863, 12863], "disallowed_STD3_mapped", [40, 21332, 41]], [[12864, 12864], "disallowed_STD3_mapped", [40, 31085, 41]], [[12865, 12865], "disallowed_STD3_mapped", [40, 20241, 41]], [[12866, 12866], "disallowed_STD3_mapped", [40, 33258, 41]], [[12867, 12867], "disallowed_STD3_mapped", [40, 33267, 41]], [[12868, 12868], "mapped", [21839]], [[12869, 12869], "mapped", [24188]], [[12870, 12870], "mapped", [25991]], [[12871, 12871], "mapped", [31631]], [[12872, 12879], "valid", [], "NV8"], [[12880, 12880], "mapped", [112, 116, 101]], [[12881, 12881], "mapped", [50, 49]], [[12882, 12882], "mapped", [50, 50]], [[12883, 12883], "mapped", [50, 51]], [[12884, 12884], "mapped", [50, 52]], [[12885, 12885], "mapped", [50, 53]], [[12886, 12886], "mapped", [50, 54]], [[12887, 12887], "mapped", [50, 55]], [[12888, 12888], "mapped", [50, 56]], [[12889, 12889], "mapped", [50, 57]], [[12890, 12890], "mapped", [51, 48]], [[12891, 12891], "mapped", [51, 49]], [[12892, 12892], "mapped", [51, 50]], [[12893, 12893], "mapped", [51, 51]], [[12894, 12894], "mapped", [51, 52]], [[12895, 12895], "mapped", [51, 53]], [[12896, 12896], "mapped", [4352]], [[12897, 12897], "mapped", [4354]], [[12898, 12898], "mapped", [4355]], [[12899, 12899], "mapped", [4357]], [[12900, 12900], "mapped", [4358]], [[12901, 12901], "mapped", [4359]], [[12902, 12902], "mapped", [4361]], [[12903, 12903], "mapped", [4363]], [[12904, 12904], "mapped", [4364]], [[12905, 12905], "mapped", [4366]], [[12906, 12906], "mapped", [4367]], [[12907, 12907], "mapped", [4368]], [[12908, 12908], "mapped", [4369]], [[12909, 12909], "mapped", [4370]], [[12910, 12910], "mapped", [44032]], [[12911, 12911], "mapped", [45208]], [[12912, 12912], "mapped", [45796]], [[12913, 12913], "mapped", [46972]], [[12914, 12914], "mapped", [47560]], [[12915, 12915], "mapped", [48148]], [[12916, 12916], "mapped", [49324]], [[12917, 12917], "mapped", [50500]], [[12918, 12918], "mapped", [51088]], [[12919, 12919], "mapped", [52264]], [[12920, 12920], "mapped", [52852]], [[12921, 12921], "mapped", [53440]], [[12922, 12922], "mapped", [54028]], [[12923, 12923], "mapped", [54616]], [[12924, 12924], "mapped", [52280, 44256]], [[12925, 12925], "mapped", [51452, 51032]], [[12926, 12926], "mapped", [50864]], [[12927, 12927], "valid", [], "NV8"], [[12928, 12928], "mapped", [19968]], [[12929, 12929], "mapped", [20108]], [[12930, 12930], "mapped", [19977]], [[12931, 12931], "mapped", [22235]], [[12932, 12932], "mapped", [20116]], [[12933, 12933], "mapped", [20845]], [[12934, 12934], "mapped", [19971]], [[12935, 12935], "mapped", [20843]], [[12936, 12936], "mapped", [20061]], [[12937, 12937], "mapped", [21313]], [[12938, 12938], "mapped", [26376]], [[12939, 12939], "mapped", [28779]], [[12940, 12940], "mapped", [27700]], [[12941, 12941], "mapped", [26408]], [[12942, 12942], "mapped", [37329]], [[12943, 12943], "mapped", [22303]], [[12944, 12944], "mapped", [26085]], [[12945, 12945], "mapped", [26666]], [[12946, 12946], "mapped", [26377]], [[12947, 12947], "mapped", [31038]], [[12948, 12948], "mapped", [21517]], [[12949, 12949], "mapped", [29305]], [[12950, 12950], "mapped", [36001]], [[12951, 12951], "mapped", [31069]], [[12952, 12952], "mapped", [21172]], [[12953, 12953], "mapped", [31192]], [[12954, 12954], "mapped", [30007]], [[12955, 12955], "mapped", [22899]], [[12956, 12956], "mapped", [36969]], [[12957, 12957], "mapped", [20778]], [[12958, 12958], "mapped", [21360]], [[12959, 12959], "mapped", [27880]], [[12960, 12960], "mapped", [38917]], [[12961, 12961], "mapped", [20241]], [[12962, 12962], "mapped", [20889]], [[12963, 12963], "mapped", [27491]], [[12964, 12964], "mapped", [19978]], [[12965, 12965], "mapped", [20013]], [[12966, 12966], "mapped", [19979]], [[12967, 12967], "mapped", [24038]], [[12968, 12968], "mapped", [21491]], [[12969, 12969], "mapped", [21307]], [[12970, 12970], "mapped", [23447]], [[12971, 12971], "mapped", [23398]], [[12972, 12972], "mapped", [30435]], [[12973, 12973], "mapped", [20225]], [[12974, 12974], "mapped", [36039]], [[12975, 12975], "mapped", [21332]], [[12976, 12976], "mapped", [22812]], [[12977, 12977], "mapped", [51, 54]], [[12978, 12978], "mapped", [51, 55]], [[12979, 12979], "mapped", [51, 56]], [[12980, 12980], "mapped", [51, 57]], [[12981, 12981], "mapped", [52, 48]], [[12982, 12982], "mapped", [52, 49]], [[12983, 12983], "mapped", [52, 50]], [[12984, 12984], "mapped", [52, 51]], [[12985, 12985], "mapped", [52, 52]], [[12986, 12986], "mapped", [52, 53]], [[12987, 12987], "mapped", [52, 54]], [[12988, 12988], "mapped", [52, 55]], [[12989, 12989], "mapped", [52, 56]], [[12990, 12990], "mapped", [52, 57]], [[12991, 12991], "mapped", [53, 48]], [[12992, 12992], "mapped", [49, 26376]], [[12993, 12993], "mapped", [50, 26376]], [[12994, 12994], "mapped", [51, 26376]], [[12995, 12995], "mapped", [52, 26376]], [[12996, 12996], "mapped", [53, 26376]], [[12997, 12997], "mapped", [54, 26376]], [[12998, 12998], "mapped", [55, 26376]], [[12999, 12999], "mapped", [56, 26376]], [[13e3, 13e3], "mapped", [57, 26376]], [[13001, 13001], "mapped", [49, 48, 26376]], [[13002, 13002], "mapped", [49, 49, 26376]], [[13003, 13003], "mapped", [49, 50, 26376]], [[13004, 13004], "mapped", [104, 103]], [[13005, 13005], "mapped", [101, 114, 103]], [[13006, 13006], "mapped", [101, 118]], [[13007, 13007], "mapped", [108, 116, 100]], [[13008, 13008], "mapped", [12450]], [[13009, 13009], "mapped", [12452]], [[13010, 13010], "mapped", [12454]], [[13011, 13011], "mapped", [12456]], [[13012, 13012], "mapped", [12458]], [[13013, 13013], "mapped", [12459]], [[13014, 13014], "mapped", [12461]], [[13015, 13015], "mapped", [12463]], [[13016, 13016], "mapped", [12465]], [[13017, 13017], "mapped", [12467]], [[13018, 13018], "mapped", [12469]], [[13019, 13019], "mapped", [12471]], [[13020, 13020], "mapped", [12473]], [[13021, 13021], "mapped", [12475]], [[13022, 13022], "mapped", [12477]], [[13023, 13023], "mapped", [12479]], [[13024, 13024], "mapped", [12481]], [[13025, 13025], "mapped", [12484]], [[13026, 13026], "mapped", [12486]], [[13027, 13027], "mapped", [12488]], [[13028, 13028], "mapped", [12490]], [[13029, 13029], "mapped", [12491]], [[13030, 13030], "mapped", [12492]], [[13031, 13031], "mapped", [12493]], [[13032, 13032], "mapped", [12494]], [[13033, 13033], "mapped", [12495]], [[13034, 13034], "mapped", [12498]], [[13035, 13035], "mapped", [12501]], [[13036, 13036], "mapped", [12504]], [[13037, 13037], "mapped", [12507]], [[13038, 13038], "mapped", [12510]], [[13039, 13039], "mapped", [12511]], [[13040, 13040], "mapped", [12512]], [[13041, 13041], "mapped", [12513]], [[13042, 13042], "mapped", [12514]], [[13043, 13043], "mapped", [12516]], [[13044, 13044], "mapped", [12518]], [[13045, 13045], "mapped", [12520]], [[13046, 13046], "mapped", [12521]], [[13047, 13047], "mapped", [12522]], [[13048, 13048], "mapped", [12523]], [[13049, 13049], "mapped", [12524]], [[13050, 13050], "mapped", [12525]], [[13051, 13051], "mapped", [12527]], [[13052, 13052], "mapped", [12528]], [[13053, 13053], "mapped", [12529]], [[13054, 13054], "mapped", [12530]], [[13055, 13055], "disallowed"], [[13056, 13056], "mapped", [12450, 12497, 12540, 12488]], [[13057, 13057], "mapped", [12450, 12523, 12501, 12449]], [[13058, 13058], "mapped", [12450, 12531, 12506, 12450]], [[13059, 13059], "mapped", [12450, 12540, 12523]], [[13060, 13060], "mapped", [12452, 12491, 12531, 12464]], [[13061, 13061], "mapped", [12452, 12531, 12481]], [[13062, 13062], "mapped", [12454, 12457, 12531]], [[13063, 13063], "mapped", [12456, 12473, 12463, 12540, 12489]], [[13064, 13064], "mapped", [12456, 12540, 12459, 12540]], [[13065, 13065], "mapped", [12458, 12531, 12473]], [[13066, 13066], "mapped", [12458, 12540, 12512]], [[13067, 13067], "mapped", [12459, 12452, 12522]], [[13068, 13068], "mapped", [12459, 12521, 12483, 12488]], [[13069, 13069], "mapped", [12459, 12525, 12522, 12540]], [[13070, 13070], "mapped", [12460, 12525, 12531]], [[13071, 13071], "mapped", [12460, 12531, 12510]], [[13072, 13072], "mapped", [12462, 12460]], [[13073, 13073], "mapped", [12462, 12491, 12540]], [[13074, 13074], "mapped", [12461, 12517, 12522, 12540]], [[13075, 13075], "mapped", [12462, 12523, 12480, 12540]], [[13076, 13076], "mapped", [12461, 12525]], [[13077, 13077], "mapped", [12461, 12525, 12464, 12521, 12512]], [[13078, 13078], "mapped", [12461, 12525, 12513, 12540, 12488, 12523]], [[13079, 13079], "mapped", [12461, 12525, 12527, 12483, 12488]], [[13080, 13080], "mapped", [12464, 12521, 12512]], [[13081, 13081], "mapped", [12464, 12521, 12512, 12488, 12531]], [[13082, 13082], "mapped", [12463, 12523, 12476, 12452, 12525]], [[13083, 13083], "mapped", [12463, 12525, 12540, 12493]], [[13084, 13084], "mapped", [12465, 12540, 12473]], [[13085, 13085], "mapped", [12467, 12523, 12490]], [[13086, 13086], "mapped", [12467, 12540, 12509]], [[13087, 13087], "mapped", [12469, 12452, 12463, 12523]], [[13088, 13088], "mapped", [12469, 12531, 12481, 12540, 12512]], [[13089, 13089], "mapped", [12471, 12522, 12531, 12464]], [[13090, 13090], "mapped", [12475, 12531, 12481]], [[13091, 13091], "mapped", [12475, 12531, 12488]], [[13092, 13092], "mapped", [12480, 12540, 12473]], [[13093, 13093], "mapped", [12487, 12471]], [[13094, 13094], "mapped", [12489, 12523]], [[13095, 13095], "mapped", [12488, 12531]], [[13096, 13096], "mapped", [12490, 12494]], [[13097, 13097], "mapped", [12494, 12483, 12488]], [[13098, 13098], "mapped", [12495, 12452, 12484]], [[13099, 13099], "mapped", [12497, 12540, 12475, 12531, 12488]], [[13100, 13100], "mapped", [12497, 12540, 12484]], [[13101, 13101], "mapped", [12496, 12540, 12524, 12523]], [[13102, 13102], "mapped", [12500, 12450, 12473, 12488, 12523]], [[13103, 13103], "mapped", [12500, 12463, 12523]], [[13104, 13104], "mapped", [12500, 12467]], [[13105, 13105], "mapped", [12499, 12523]], [[13106, 13106], "mapped", [12501, 12449, 12521, 12483, 12489]], [[13107, 13107], "mapped", [12501, 12451, 12540, 12488]], [[13108, 13108], "mapped", [12502, 12483, 12471, 12455, 12523]], [[13109, 13109], "mapped", [12501, 12521, 12531]], [[13110, 13110], "mapped", [12504, 12463, 12479, 12540, 12523]], [[13111, 13111], "mapped", [12506, 12477]], [[13112, 13112], "mapped", [12506, 12491, 12498]], [[13113, 13113], "mapped", [12504, 12523, 12484]], [[13114, 13114], "mapped", [12506, 12531, 12473]], [[13115, 13115], "mapped", [12506, 12540, 12472]], [[13116, 13116], "mapped", [12505, 12540, 12479]], [[13117, 13117], "mapped", [12509, 12452, 12531, 12488]], [[13118, 13118], "mapped", [12508, 12523, 12488]], [[13119, 13119], "mapped", [12507, 12531]], [[13120, 13120], "mapped", [12509, 12531, 12489]], [[13121, 13121], "mapped", [12507, 12540, 12523]], [[13122, 13122], "mapped", [12507, 12540, 12531]], [[13123, 13123], "mapped", [12510, 12452, 12463, 12525]], [[13124, 13124], "mapped", [12510, 12452, 12523]], [[13125, 13125], "mapped", [12510, 12483, 12495]], [[13126, 13126], "mapped", [12510, 12523, 12463]], [[13127, 13127], "mapped", [12510, 12531, 12471, 12519, 12531]], [[13128, 13128], "mapped", [12511, 12463, 12525, 12531]], [[13129, 13129], "mapped", [12511, 12522]], [[13130, 13130], "mapped", [12511, 12522, 12496, 12540, 12523]], [[13131, 13131], "mapped", [12513, 12460]], [[13132, 13132], "mapped", [12513, 12460, 12488, 12531]], [[13133, 13133], "mapped", [12513, 12540, 12488, 12523]], [[13134, 13134], "mapped", [12516, 12540, 12489]], [[13135, 13135], "mapped", [12516, 12540, 12523]], [[13136, 13136], "mapped", [12518, 12450, 12531]], [[13137, 13137], "mapped", [12522, 12483, 12488, 12523]], [[13138, 13138], "mapped", [12522, 12521]], [[13139, 13139], "mapped", [12523, 12500, 12540]], [[13140, 13140], "mapped", [12523, 12540, 12502, 12523]], [[13141, 13141], "mapped", [12524, 12512]], [[13142, 13142], "mapped", [12524, 12531, 12488, 12466, 12531]], [[13143, 13143], "mapped", [12527, 12483, 12488]], [[13144, 13144], "mapped", [48, 28857]], [[13145, 13145], "mapped", [49, 28857]], [[13146, 13146], "mapped", [50, 28857]], [[13147, 13147], "mapped", [51, 28857]], [[13148, 13148], "mapped", [52, 28857]], [[13149, 13149], "mapped", [53, 28857]], [[13150, 13150], "mapped", [54, 28857]], [[13151, 13151], "mapped", [55, 28857]], [[13152, 13152], "mapped", [56, 28857]], [[13153, 13153], "mapped", [57, 28857]], [[13154, 13154], "mapped", [49, 48, 28857]], [[13155, 13155], "mapped", [49, 49, 28857]], [[13156, 13156], "mapped", [49, 50, 28857]], [[13157, 13157], "mapped", [49, 51, 28857]], [[13158, 13158], "mapped", [49, 52, 28857]], [[13159, 13159], "mapped", [49, 53, 28857]], [[13160, 13160], "mapped", [49, 54, 28857]], [[13161, 13161], "mapped", [49, 55, 28857]], [[13162, 13162], "mapped", [49, 56, 28857]], [[13163, 13163], "mapped", [49, 57, 28857]], [[13164, 13164], "mapped", [50, 48, 28857]], [[13165, 13165], "mapped", [50, 49, 28857]], [[13166, 13166], "mapped", [50, 50, 28857]], [[13167, 13167], "mapped", [50, 51, 28857]], [[13168, 13168], "mapped", [50, 52, 28857]], [[13169, 13169], "mapped", [104, 112, 97]], [[13170, 13170], "mapped", [100, 97]], [[13171, 13171], "mapped", [97, 117]], [[13172, 13172], "mapped", [98, 97, 114]], [[13173, 13173], "mapped", [111, 118]], [[13174, 13174], "mapped", [112, 99]], [[13175, 13175], "mapped", [100, 109]], [[13176, 13176], "mapped", [100, 109, 50]], [[13177, 13177], "mapped", [100, 109, 51]], [[13178, 13178], "mapped", [105, 117]], [[13179, 13179], "mapped", [24179, 25104]], [[13180, 13180], "mapped", [26157, 21644]], [[13181, 13181], "mapped", [22823, 27491]], [[13182, 13182], "mapped", [26126, 27835]], [[13183, 13183], "mapped", [26666, 24335, 20250, 31038]], [[13184, 13184], "mapped", [112, 97]], [[13185, 13185], "mapped", [110, 97]], [[13186, 13186], "mapped", [956, 97]], [[13187, 13187], "mapped", [109, 97]], [[13188, 13188], "mapped", [107, 97]], [[13189, 13189], "mapped", [107, 98]], [[13190, 13190], "mapped", [109, 98]], [[13191, 13191], "mapped", [103, 98]], [[13192, 13192], "mapped", [99, 97, 108]], [[13193, 13193], "mapped", [107, 99, 97, 108]], [[13194, 13194], "mapped", [112, 102]], [[13195, 13195], "mapped", [110, 102]], [[13196, 13196], "mapped", [956, 102]], [[13197, 13197], "mapped", [956, 103]], [[13198, 13198], "mapped", [109, 103]], [[13199, 13199], "mapped", [107, 103]], [[13200, 13200], "mapped", [104, 122]], [[13201, 13201], "mapped", [107, 104, 122]], [[13202, 13202], "mapped", [109, 104, 122]], [[13203, 13203], "mapped", [103, 104, 122]], [[13204, 13204], "mapped", [116, 104, 122]], [[13205, 13205], "mapped", [956, 108]], [[13206, 13206], "mapped", [109, 108]], [[13207, 13207], "mapped", [100, 108]], [[13208, 13208], "mapped", [107, 108]], [[13209, 13209], "mapped", [102, 109]], [[13210, 13210], "mapped", [110, 109]], [[13211, 13211], "mapped", [956, 109]], [[13212, 13212], "mapped", [109, 109]], [[13213, 13213], "mapped", [99, 109]], [[13214, 13214], "mapped", [107, 109]], [[13215, 13215], "mapped", [109, 109, 50]], [[13216, 13216], "mapped", [99, 109, 50]], [[13217, 13217], "mapped", [109, 50]], [[13218, 13218], "mapped", [107, 109, 50]], [[13219, 13219], "mapped", [109, 109, 51]], [[13220, 13220], "mapped", [99, 109, 51]], [[13221, 13221], "mapped", [109, 51]], [[13222, 13222], "mapped", [107, 109, 51]], [[13223, 13223], "mapped", [109, 8725, 115]], [[13224, 13224], "mapped", [109, 8725, 115, 50]], [[13225, 13225], "mapped", [112, 97]], [[13226, 13226], "mapped", [107, 112, 97]], [[13227, 13227], "mapped", [109, 112, 97]], [[13228, 13228], "mapped", [103, 112, 97]], [[13229, 13229], "mapped", [114, 97, 100]], [[13230, 13230], "mapped", [114, 97, 100, 8725, 115]], [[13231, 13231], "mapped", [114, 97, 100, 8725, 115, 50]], [[13232, 13232], "mapped", [112, 115]], [[13233, 13233], "mapped", [110, 115]], [[13234, 13234], "mapped", [956, 115]], [[13235, 13235], "mapped", [109, 115]], [[13236, 13236], "mapped", [112, 118]], [[13237, 13237], "mapped", [110, 118]], [[13238, 13238], "mapped", [956, 118]], [[13239, 13239], "mapped", [109, 118]], [[13240, 13240], "mapped", [107, 118]], [[13241, 13241], "mapped", [109, 118]], [[13242, 13242], "mapped", [112, 119]], [[13243, 13243], "mapped", [110, 119]], [[13244, 13244], "mapped", [956, 119]], [[13245, 13245], "mapped", [109, 119]], [[13246, 13246], "mapped", [107, 119]], [[13247, 13247], "mapped", [109, 119]], [[13248, 13248], "mapped", [107, 969]], [[13249, 13249], "mapped", [109, 969]], [[13250, 13250], "disallowed"], [[13251, 13251], "mapped", [98, 113]], [[13252, 13252], "mapped", [99, 99]], [[13253, 13253], "mapped", [99, 100]], [[13254, 13254], "mapped", [99, 8725, 107, 103]], [[13255, 13255], "disallowed"], [[13256, 13256], "mapped", [100, 98]], [[13257, 13257], "mapped", [103, 121]], [[13258, 13258], "mapped", [104, 97]], [[13259, 13259], "mapped", [104, 112]], [[13260, 13260], "mapped", [105, 110]], [[13261, 13261], "mapped", [107, 107]], [[13262, 13262], "mapped", [107, 109]], [[13263, 13263], "mapped", [107, 116]], [[13264, 13264], "mapped", [108, 109]], [[13265, 13265], "mapped", [108, 110]], [[13266, 13266], "mapped", [108, 111, 103]], [[13267, 13267], "mapped", [108, 120]], [[13268, 13268], "mapped", [109, 98]], [[13269, 13269], "mapped", [109, 105, 108]], [[13270, 13270], "mapped", [109, 111, 108]], [[13271, 13271], "mapped", [112, 104]], [[13272, 13272], "disallowed"], [[13273, 13273], "mapped", [112, 112, 109]], [[13274, 13274], "mapped", [112, 114]], [[13275, 13275], "mapped", [115, 114]], [[13276, 13276], "mapped", [115, 118]], [[13277, 13277], "mapped", [119, 98]], [[13278, 13278], "mapped", [118, 8725, 109]], [[13279, 13279], "mapped", [97, 8725, 109]], [[13280, 13280], "mapped", [49, 26085]], [[13281, 13281], "mapped", [50, 26085]], [[13282, 13282], "mapped", [51, 26085]], [[13283, 13283], "mapped", [52, 26085]], [[13284, 13284], "mapped", [53, 26085]], [[13285, 13285], "mapped", [54, 26085]], [[13286, 13286], "mapped", [55, 26085]], [[13287, 13287], "mapped", [56, 26085]], [[13288, 13288], "mapped", [57, 26085]], [[13289, 13289], "mapped", [49, 48, 26085]], [[13290, 13290], "mapped", [49, 49, 26085]], [[13291, 13291], "mapped", [49, 50, 26085]], [[13292, 13292], "mapped", [49, 51, 26085]], [[13293, 13293], "mapped", [49, 52, 26085]], [[13294, 13294], "mapped", [49, 53, 26085]], [[13295, 13295], "mapped", [49, 54, 26085]], [[13296, 13296], "mapped", [49, 55, 26085]], [[13297, 13297], "mapped", [49, 56, 26085]], [[13298, 13298], "mapped", [49, 57, 26085]], [[13299, 13299], "mapped", [50, 48, 26085]], [[13300, 13300], "mapped", [50, 49, 26085]], [[13301, 13301], "mapped", [50, 50, 26085]], [[13302, 13302], "mapped", [50, 51, 26085]], [[13303, 13303], "mapped", [50, 52, 26085]], [[13304, 13304], "mapped", [50, 53, 26085]], [[13305, 13305], "mapped", [50, 54, 26085]], [[13306, 13306], "mapped", [50, 55, 26085]], [[13307, 13307], "mapped", [50, 56, 26085]], [[13308, 13308], "mapped", [50, 57, 26085]], [[13309, 13309], "mapped", [51, 48, 26085]], [[13310, 13310], "mapped", [51, 49, 26085]], [[13311, 13311], "mapped", [103, 97, 108]], [[13312, 19893], "valid"], [[19894, 19903], "disallowed"], [[19904, 19967], "valid", [], "NV8"], [[19968, 40869], "valid"], [[40870, 40891], "valid"], [[40892, 40899], "valid"], [[40900, 40907], "valid"], [[40908, 40908], "valid"], [[40909, 40917], "valid"], [[40918, 40959], "disallowed"], [[40960, 42124], "valid"], [[42125, 42127], "disallowed"], [[42128, 42145], "valid", [], "NV8"], [[42146, 42147], "valid", [], "NV8"], [[42148, 42163], "valid", [], "NV8"], [[42164, 42164], "valid", [], "NV8"], [[42165, 42176], "valid", [], "NV8"], [[42177, 42177], "valid", [], "NV8"], [[42178, 42180], "valid", [], "NV8"], [[42181, 42181], "valid", [], "NV8"], [[42182, 42182], "valid", [], "NV8"], [[42183, 42191], "disallowed"], [[42192, 42237], "valid"], [[42238, 42239], "valid", [], "NV8"], [[42240, 42508], "valid"], [[42509, 42511], "valid", [], "NV8"], [[42512, 42539], "valid"], [[42540, 42559], "disallowed"], [[42560, 42560], "mapped", [42561]], [[42561, 42561], "valid"], [[42562, 42562], "mapped", [42563]], [[42563, 42563], "valid"], [[42564, 42564], "mapped", [42565]], [[42565, 42565], "valid"], [[42566, 42566], "mapped", [42567]], [[42567, 42567], "valid"], [[42568, 42568], "mapped", [42569]], [[42569, 42569], "valid"], [[42570, 42570], "mapped", [42571]], [[42571, 42571], "valid"], [[42572, 42572], "mapped", [42573]], [[42573, 42573], "valid"], [[42574, 42574], "mapped", [42575]], [[42575, 42575], "valid"], [[42576, 42576], "mapped", [42577]], [[42577, 42577], "valid"], [[42578, 42578], "mapped", [42579]], [[42579, 42579], "valid"], [[42580, 42580], "mapped", [42581]], [[42581, 42581], "valid"], [[42582, 42582], "mapped", [42583]], [[42583, 42583], "valid"], [[42584, 42584], "mapped", [42585]], [[42585, 42585], "valid"], [[42586, 42586], "mapped", [42587]], [[42587, 42587], "valid"], [[42588, 42588], "mapped", [42589]], [[42589, 42589], "valid"], [[42590, 42590], "mapped", [42591]], [[42591, 42591], "valid"], [[42592, 42592], "mapped", [42593]], [[42593, 42593], "valid"], [[42594, 42594], "mapped", [42595]], [[42595, 42595], "valid"], [[42596, 42596], "mapped", [42597]], [[42597, 42597], "valid"], [[42598, 42598], "mapped", [42599]], [[42599, 42599], "valid"], [[42600, 42600], "mapped", [42601]], [[42601, 42601], "valid"], [[42602, 42602], "mapped", [42603]], [[42603, 42603], "valid"], [[42604, 42604], "mapped", [42605]], [[42605, 42607], "valid"], [[42608, 42611], "valid", [], "NV8"], [[42612, 42619], "valid"], [[42620, 42621], "valid"], [[42622, 42622], "valid", [], "NV8"], [[42623, 42623], "valid"], [[42624, 42624], "mapped", [42625]], [[42625, 42625], "valid"], [[42626, 42626], "mapped", [42627]], [[42627, 42627], "valid"], [[42628, 42628], "mapped", [42629]], [[42629, 42629], "valid"], [[42630, 42630], "mapped", [42631]], [[42631, 42631], "valid"], [[42632, 42632], "mapped", [42633]], [[42633, 42633], "valid"], [[42634, 42634], "mapped", [42635]], [[42635, 42635], "valid"], [[42636, 42636], "mapped", [42637]], [[42637, 42637], "valid"], [[42638, 42638], "mapped", [42639]], [[42639, 42639], "valid"], [[42640, 42640], "mapped", [42641]], [[42641, 42641], "valid"], [[42642, 42642], "mapped", [42643]], [[42643, 42643], "valid"], [[42644, 42644], "mapped", [42645]], [[42645, 42645], "valid"], [[42646, 42646], "mapped", [42647]], [[42647, 42647], "valid"], [[42648, 42648], "mapped", [42649]], [[42649, 42649], "valid"], [[42650, 42650], "mapped", [42651]], [[42651, 42651], "valid"], [[42652, 42652], "mapped", [1098]], [[42653, 42653], "mapped", [1100]], [[42654, 42654], "valid"], [[42655, 42655], "valid"], [[42656, 42725], "valid"], [[42726, 42735], "valid", [], "NV8"], [[42736, 42737], "valid"], [[42738, 42743], "valid", [], "NV8"], [[42744, 42751], "disallowed"], [[42752, 42774], "valid", [], "NV8"], [[42775, 42778], "valid"], [[42779, 42783], "valid"], [[42784, 42785], "valid", [], "NV8"], [[42786, 42786], "mapped", [42787]], [[42787, 42787], "valid"], [[42788, 42788], "mapped", [42789]], [[42789, 42789], "valid"], [[42790, 42790], "mapped", [42791]], [[42791, 42791], "valid"], [[42792, 42792], "mapped", [42793]], [[42793, 42793], "valid"], [[42794, 42794], "mapped", [42795]], [[42795, 42795], "valid"], [[42796, 42796], "mapped", [42797]], [[42797, 42797], "valid"], [[42798, 42798], "mapped", [42799]], [[42799, 42801], "valid"], [[42802, 42802], "mapped", [42803]], [[42803, 42803], "valid"], [[42804, 42804], "mapped", [42805]], [[42805, 42805], "valid"], [[42806, 42806], "mapped", [42807]], [[42807, 42807], "valid"], [[42808, 42808], "mapped", [42809]], [[42809, 42809], "valid"], [[42810, 42810], "mapped", [42811]], [[42811, 42811], "valid"], [[42812, 42812], "mapped", [42813]], [[42813, 42813], "valid"], [[42814, 42814], "mapped", [42815]], [[42815, 42815], "valid"], [[42816, 42816], "mapped", [42817]], [[42817, 42817], "valid"], [[42818, 42818], "mapped", [42819]], [[42819, 42819], "valid"], [[42820, 42820], "mapped", [42821]], [[42821, 42821], "valid"], [[42822, 42822], "mapped", [42823]], [[42823, 42823], "valid"], [[42824, 42824], "mapped", [42825]], [[42825, 42825], "valid"], [[42826, 42826], "mapped", [42827]], [[42827, 42827], "valid"], [[42828, 42828], "mapped", [42829]], [[42829, 42829], "valid"], [[42830, 42830], "mapped", [42831]], [[42831, 42831], "valid"], [[42832, 42832], "mapped", [42833]], [[42833, 42833], "valid"], [[42834, 42834], "mapped", [42835]], [[42835, 42835], "valid"], [[42836, 42836], "mapped", [42837]], [[42837, 42837], "valid"], [[42838, 42838], "mapped", [42839]], [[42839, 42839], "valid"], [[42840, 42840], "mapped", [42841]], [[42841, 42841], "valid"], [[42842, 42842], "mapped", [42843]], [[42843, 42843], "valid"], [[42844, 42844], "mapped", [42845]], [[42845, 42845], "valid"], [[42846, 42846], "mapped", [42847]], [[42847, 42847], "valid"], [[42848, 42848], "mapped", [42849]], [[42849, 42849], "valid"], [[42850, 42850], "mapped", [42851]], [[42851, 42851], "valid"], [[42852, 42852], "mapped", [42853]], [[42853, 42853], "valid"], [[42854, 42854], "mapped", [42855]], [[42855, 42855], "valid"], [[42856, 42856], "mapped", [42857]], [[42857, 42857], "valid"], [[42858, 42858], "mapped", [42859]], [[42859, 42859], "valid"], [[42860, 42860], "mapped", [42861]], [[42861, 42861], "valid"], [[42862, 42862], "mapped", [42863]], [[42863, 42863], "valid"], [[42864, 42864], "mapped", [42863]], [[42865, 42872], "valid"], [[42873, 42873], "mapped", [42874]], [[42874, 42874], "valid"], [[42875, 42875], "mapped", [42876]], [[42876, 42876], "valid"], [[42877, 42877], "mapped", [7545]], [[42878, 42878], "mapped", [42879]], [[42879, 42879], "valid"], [[42880, 42880], "mapped", [42881]], [[42881, 42881], "valid"], [[42882, 42882], "mapped", [42883]], [[42883, 42883], "valid"], [[42884, 42884], "mapped", [42885]], [[42885, 42885], "valid"], [[42886, 42886], "mapped", [42887]], [[42887, 42888], "valid"], [[42889, 42890], "valid", [], "NV8"], [[42891, 42891], "mapped", [42892]], [[42892, 42892], "valid"], [[42893, 42893], "mapped", [613]], [[42894, 42894], "valid"], [[42895, 42895], "valid"], [[42896, 42896], "mapped", [42897]], [[42897, 42897], "valid"], [[42898, 42898], "mapped", [42899]], [[42899, 42899], "valid"], [[42900, 42901], "valid"], [[42902, 42902], "mapped", [42903]], [[42903, 42903], "valid"], [[42904, 42904], "mapped", [42905]], [[42905, 42905], "valid"], [[42906, 42906], "mapped", [42907]], [[42907, 42907], "valid"], [[42908, 42908], "mapped", [42909]], [[42909, 42909], "valid"], [[42910, 42910], "mapped", [42911]], [[42911, 42911], "valid"], [[42912, 42912], "mapped", [42913]], [[42913, 42913], "valid"], [[42914, 42914], "mapped", [42915]], [[42915, 42915], "valid"], [[42916, 42916], "mapped", [42917]], [[42917, 42917], "valid"], [[42918, 42918], "mapped", [42919]], [[42919, 42919], "valid"], [[42920, 42920], "mapped", [42921]], [[42921, 42921], "valid"], [[42922, 42922], "mapped", [614]], [[42923, 42923], "mapped", [604]], [[42924, 42924], "mapped", [609]], [[42925, 42925], "mapped", [620]], [[42926, 42927], "disallowed"], [[42928, 42928], "mapped", [670]], [[42929, 42929], "mapped", [647]], [[42930, 42930], "mapped", [669]], [[42931, 42931], "mapped", [43859]], [[42932, 42932], "mapped", [42933]], [[42933, 42933], "valid"], [[42934, 42934], "mapped", [42935]], [[42935, 42935], "valid"], [[42936, 42998], "disallowed"], [[42999, 42999], "valid"], [[43e3, 43e3], "mapped", [295]], [[43001, 43001], "mapped", [339]], [[43002, 43002], "valid"], [[43003, 43007], "valid"], [[43008, 43047], "valid"], [[43048, 43051], "valid", [], "NV8"], [[43052, 43055], "disallowed"], [[43056, 43065], "valid", [], "NV8"], [[43066, 43071], "disallowed"], [[43072, 43123], "valid"], [[43124, 43127], "valid", [], "NV8"], [[43128, 43135], "disallowed"], [[43136, 43204], "valid"], [[43205, 43213], "disallowed"], [[43214, 43215], "valid", [], "NV8"], [[43216, 43225], "valid"], [[43226, 43231], "disallowed"], [[43232, 43255], "valid"], [[43256, 43258], "valid", [], "NV8"], [[43259, 43259], "valid"], [[43260, 43260], "valid", [], "NV8"], [[43261, 43261], "valid"], [[43262, 43263], "disallowed"], [[43264, 43309], "valid"], [[43310, 43311], "valid", [], "NV8"], [[43312, 43347], "valid"], [[43348, 43358], "disallowed"], [[43359, 43359], "valid", [], "NV8"], [[43360, 43388], "valid", [], "NV8"], [[43389, 43391], "disallowed"], [[43392, 43456], "valid"], [[43457, 43469], "valid", [], "NV8"], [[43470, 43470], "disallowed"], [[43471, 43481], "valid"], [[43482, 43485], "disallowed"], [[43486, 43487], "valid", [], "NV8"], [[43488, 43518], "valid"], [[43519, 43519], "disallowed"], [[43520, 43574], "valid"], [[43575, 43583], "disallowed"], [[43584, 43597], "valid"], [[43598, 43599], "disallowed"], [[43600, 43609], "valid"], [[43610, 43611], "disallowed"], [[43612, 43615], "valid", [], "NV8"], [[43616, 43638], "valid"], [[43639, 43641], "valid", [], "NV8"], [[43642, 43643], "valid"], [[43644, 43647], "valid"], [[43648, 43714], "valid"], [[43715, 43738], "disallowed"], [[43739, 43741], "valid"], [[43742, 43743], "valid", [], "NV8"], [[43744, 43759], "valid"], [[43760, 43761], "valid", [], "NV8"], [[43762, 43766], "valid"], [[43767, 43776], "disallowed"], [[43777, 43782], "valid"], [[43783, 43784], "disallowed"], [[43785, 43790], "valid"], [[43791, 43792], "disallowed"], [[43793, 43798], "valid"], [[43799, 43807], "disallowed"], [[43808, 43814], "valid"], [[43815, 43815], "disallowed"], [[43816, 43822], "valid"], [[43823, 43823], "disallowed"], [[43824, 43866], "valid"], [[43867, 43867], "valid", [], "NV8"], [[43868, 43868], "mapped", [42791]], [[43869, 43869], "mapped", [43831]], [[43870, 43870], "mapped", [619]], [[43871, 43871], "mapped", [43858]], [[43872, 43875], "valid"], [[43876, 43877], "valid"], [[43878, 43887], "disallowed"], [[43888, 43888], "mapped", [5024]], [[43889, 43889], "mapped", [5025]], [[43890, 43890], "mapped", [5026]], [[43891, 43891], "mapped", [5027]], [[43892, 43892], "mapped", [5028]], [[43893, 43893], "mapped", [5029]], [[43894, 43894], "mapped", [5030]], [[43895, 43895], "mapped", [5031]], [[43896, 43896], "mapped", [5032]], [[43897, 43897], "mapped", [5033]], [[43898, 43898], "mapped", [5034]], [[43899, 43899], "mapped", [5035]], [[43900, 43900], "mapped", [5036]], [[43901, 43901], "mapped", [5037]], [[43902, 43902], "mapped", [5038]], [[43903, 43903], "mapped", [5039]], [[43904, 43904], "mapped", [5040]], [[43905, 43905], "mapped", [5041]], [[43906, 43906], "mapped", [5042]], [[43907, 43907], "mapped", [5043]], [[43908, 43908], "mapped", [5044]], [[43909, 43909], "mapped", [5045]], [[43910, 43910], "mapped", [5046]], [[43911, 43911], "mapped", [5047]], [[43912, 43912], "mapped", [5048]], [[43913, 43913], "mapped", [5049]], [[43914, 43914], "mapped", [5050]], [[43915, 43915], "mapped", [5051]], [[43916, 43916], "mapped", [5052]], [[43917, 43917], "mapped", [5053]], [[43918, 43918], "mapped", [5054]], [[43919, 43919], "mapped", [5055]], [[43920, 43920], "mapped", [5056]], [[43921, 43921], "mapped", [5057]], [[43922, 43922], "mapped", [5058]], [[43923, 43923], "mapped", [5059]], [[43924, 43924], "mapped", [5060]], [[43925, 43925], "mapped", [5061]], [[43926, 43926], "mapped", [5062]], [[43927, 43927], "mapped", [5063]], [[43928, 43928], "mapped", [5064]], [[43929, 43929], "mapped", [5065]], [[43930, 43930], "mapped", [5066]], [[43931, 43931], "mapped", [5067]], [[43932, 43932], "mapped", [5068]], [[43933, 43933], "mapped", [5069]], [[43934, 43934], "mapped", [5070]], [[43935, 43935], "mapped", [5071]], [[43936, 43936], "mapped", [5072]], [[43937, 43937], "mapped", [5073]], [[43938, 43938], "mapped", [5074]], [[43939, 43939], "mapped", [5075]], [[43940, 43940], "mapped", [5076]], [[43941, 43941], "mapped", [5077]], [[43942, 43942], "mapped", [5078]], [[43943, 43943], "mapped", [5079]], [[43944, 43944], "mapped", [5080]], [[43945, 43945], "mapped", [5081]], [[43946, 43946], "mapped", [5082]], [[43947, 43947], "mapped", [5083]], [[43948, 43948], "mapped", [5084]], [[43949, 43949], "mapped", [5085]], [[43950, 43950], "mapped", [5086]], [[43951, 43951], "mapped", [5087]], [[43952, 43952], "mapped", [5088]], [[43953, 43953], "mapped", [5089]], [[43954, 43954], "mapped", [5090]], [[43955, 43955], "mapped", [5091]], [[43956, 43956], "mapped", [5092]], [[43957, 43957], "mapped", [5093]], [[43958, 43958], "mapped", [5094]], [[43959, 43959], "mapped", [5095]], [[43960, 43960], "mapped", [5096]], [[43961, 43961], "mapped", [5097]], [[43962, 43962], "mapped", [5098]], [[43963, 43963], "mapped", [5099]], [[43964, 43964], "mapped", [5100]], [[43965, 43965], "mapped", [5101]], [[43966, 43966], "mapped", [5102]], [[43967, 43967], "mapped", [5103]], [[43968, 44010], "valid"], [[44011, 44011], "valid", [], "NV8"], [[44012, 44013], "valid"], [[44014, 44015], "disallowed"], [[44016, 44025], "valid"], [[44026, 44031], "disallowed"], [[44032, 55203], "valid"], [[55204, 55215], "disallowed"], [[55216, 55238], "valid", [], "NV8"], [[55239, 55242], "disallowed"], [[55243, 55291], "valid", [], "NV8"], [[55292, 55295], "disallowed"], [[55296, 57343], "disallowed"], [[57344, 63743], "disallowed"], [[63744, 63744], "mapped", [35912]], [[63745, 63745], "mapped", [26356]], [[63746, 63746], "mapped", [36554]], [[63747, 63747], "mapped", [36040]], [[63748, 63748], "mapped", [28369]], [[63749, 63749], "mapped", [20018]], [[63750, 63750], "mapped", [21477]], [[63751, 63752], "mapped", [40860]], [[63753, 63753], "mapped", [22865]], [[63754, 63754], "mapped", [37329]], [[63755, 63755], "mapped", [21895]], [[63756, 63756], "mapped", [22856]], [[63757, 63757], "mapped", [25078]], [[63758, 63758], "mapped", [30313]], [[63759, 63759], "mapped", [32645]], [[63760, 63760], "mapped", [34367]], [[63761, 63761], "mapped", [34746]], [[63762, 63762], "mapped", [35064]], [[63763, 63763], "mapped", [37007]], [[63764, 63764], "mapped", [27138]], [[63765, 63765], "mapped", [27931]], [[63766, 63766], "mapped", [28889]], [[63767, 63767], "mapped", [29662]], [[63768, 63768], "mapped", [33853]], [[63769, 63769], "mapped", [37226]], [[63770, 63770], "mapped", [39409]], [[63771, 63771], "mapped", [20098]], [[63772, 63772], "mapped", [21365]], [[63773, 63773], "mapped", [27396]], [[63774, 63774], "mapped", [29211]], [[63775, 63775], "mapped", [34349]], [[63776, 63776], "mapped", [40478]], [[63777, 63777], "mapped", [23888]], [[63778, 63778], "mapped", [28651]], [[63779, 63779], "mapped", [34253]], [[63780, 63780], "mapped", [35172]], [[63781, 63781], "mapped", [25289]], [[63782, 63782], "mapped", [33240]], [[63783, 63783], "mapped", [34847]], [[63784, 63784], "mapped", [24266]], [[63785, 63785], "mapped", [26391]], [[63786, 63786], "mapped", [28010]], [[63787, 63787], "mapped", [29436]], [[63788, 63788], "mapped", [37070]], [[63789, 63789], "mapped", [20358]], [[63790, 63790], "mapped", [20919]], [[63791, 63791], "mapped", [21214]], [[63792, 63792], "mapped", [25796]], [[63793, 63793], "mapped", [27347]], [[63794, 63794], "mapped", [29200]], [[63795, 63795], "mapped", [30439]], [[63796, 63796], "mapped", [32769]], [[63797, 63797], "mapped", [34310]], [[63798, 63798], "mapped", [34396]], [[63799, 63799], "mapped", [36335]], [[63800, 63800], "mapped", [38706]], [[63801, 63801], "mapped", [39791]], [[63802, 63802], "mapped", [40442]], [[63803, 63803], "mapped", [30860]], [[63804, 63804], "mapped", [31103]], [[63805, 63805], "mapped", [32160]], [[63806, 63806], "mapped", [33737]], [[63807, 63807], "mapped", [37636]], [[63808, 63808], "mapped", [40575]], [[63809, 63809], "mapped", [35542]], [[63810, 63810], "mapped", [22751]], [[63811, 63811], "mapped", [24324]], [[63812, 63812], "mapped", [31840]], [[63813, 63813], "mapped", [32894]], [[63814, 63814], "mapped", [29282]], [[63815, 63815], "mapped", [30922]], [[63816, 63816], "mapped", [36034]], [[63817, 63817], "mapped", [38647]], [[63818, 63818], "mapped", [22744]], [[63819, 63819], "mapped", [23650]], [[63820, 63820], "mapped", [27155]], [[63821, 63821], "mapped", [28122]], [[63822, 63822], "mapped", [28431]], [[63823, 63823], "mapped", [32047]], [[63824, 63824], "mapped", [32311]], [[63825, 63825], "mapped", [38475]], [[63826, 63826], "mapped", [21202]], [[63827, 63827], "mapped", [32907]], [[63828, 63828], "mapped", [20956]], [[63829, 63829], "mapped", [20940]], [[63830, 63830], "mapped", [31260]], [[63831, 63831], "mapped", [32190]], [[63832, 63832], "mapped", [33777]], [[63833, 63833], "mapped", [38517]], [[63834, 63834], "mapped", [35712]], [[63835, 63835], "mapped", [25295]], [[63836, 63836], "mapped", [27138]], [[63837, 63837], "mapped", [35582]], [[63838, 63838], "mapped", [20025]], [[63839, 63839], "mapped", [23527]], [[63840, 63840], "mapped", [24594]], [[63841, 63841], "mapped", [29575]], [[63842, 63842], "mapped", [30064]], [[63843, 63843], "mapped", [21271]], [[63844, 63844], "mapped", [30971]], [[63845, 63845], "mapped", [20415]], [[63846, 63846], "mapped", [24489]], [[63847, 63847], "mapped", [19981]], [[63848, 63848], "mapped", [27852]], [[63849, 63849], "mapped", [25976]], [[63850, 63850], "mapped", [32034]], [[63851, 63851], "mapped", [21443]], [[63852, 63852], "mapped", [22622]], [[63853, 63853], "mapped", [30465]], [[63854, 63854], "mapped", [33865]], [[63855, 63855], "mapped", [35498]], [[63856, 63856], "mapped", [27578]], [[63857, 63857], "mapped", [36784]], [[63858, 63858], "mapped", [27784]], [[63859, 63859], "mapped", [25342]], [[63860, 63860], "mapped", [33509]], [[63861, 63861], "mapped", [25504]], [[63862, 63862], "mapped", [30053]], [[63863, 63863], "mapped", [20142]], [[63864, 63864], "mapped", [20841]], [[63865, 63865], "mapped", [20937]], [[63866, 63866], "mapped", [26753]], [[63867, 63867], "mapped", [31975]], [[63868, 63868], "mapped", [33391]], [[63869, 63869], "mapped", [35538]], [[63870, 63870], "mapped", [37327]], [[63871, 63871], "mapped", [21237]], [[63872, 63872], "mapped", [21570]], [[63873, 63873], "mapped", [22899]], [[63874, 63874], "mapped", [24300]], [[63875, 63875], "mapped", [26053]], [[63876, 63876], "mapped", [28670]], [[63877, 63877], "mapped", [31018]], [[63878, 63878], "mapped", [38317]], [[63879, 63879], "mapped", [39530]], [[63880, 63880], "mapped", [40599]], [[63881, 63881], "mapped", [40654]], [[63882, 63882], "mapped", [21147]], [[63883, 63883], "mapped", [26310]], [[63884, 63884], "mapped", [27511]], [[63885, 63885], "mapped", [36706]], [[63886, 63886], "mapped", [24180]], [[63887, 63887], "mapped", [24976]], [[63888, 63888], "mapped", [25088]], [[63889, 63889], "mapped", [25754]], [[63890, 63890], "mapped", [28451]], [[63891, 63891], "mapped", [29001]], [[63892, 63892], "mapped", [29833]], [[63893, 63893], "mapped", [31178]], [[63894, 63894], "mapped", [32244]], [[63895, 63895], "mapped", [32879]], [[63896, 63896], "mapped", [36646]], [[63897, 63897], "mapped", [34030]], [[63898, 63898], "mapped", [36899]], [[63899, 63899], "mapped", [37706]], [[63900, 63900], "mapped", [21015]], [[63901, 63901], "mapped", [21155]], [[63902, 63902], "mapped", [21693]], [[63903, 63903], "mapped", [28872]], [[63904, 63904], "mapped", [35010]], [[63905, 63905], "mapped", [35498]], [[63906, 63906], "mapped", [24265]], [[63907, 63907], "mapped", [24565]], [[63908, 63908], "mapped", [25467]], [[63909, 63909], "mapped", [27566]], [[63910, 63910], "mapped", [31806]], [[63911, 63911], "mapped", [29557]], [[63912, 63912], "mapped", [20196]], [[63913, 63913], "mapped", [22265]], [[63914, 63914], "mapped", [23527]], [[63915, 63915], "mapped", [23994]], [[63916, 63916], "mapped", [24604]], [[63917, 63917], "mapped", [29618]], [[63918, 63918], "mapped", [29801]], [[63919, 63919], "mapped", [32666]], [[63920, 63920], "mapped", [32838]], [[63921, 63921], "mapped", [37428]], [[63922, 63922], "mapped", [38646]], [[63923, 63923], "mapped", [38728]], [[63924, 63924], "mapped", [38936]], [[63925, 63925], "mapped", [20363]], [[63926, 63926], "mapped", [31150]], [[63927, 63927], "mapped", [37300]], [[63928, 63928], "mapped", [38584]], [[63929, 63929], "mapped", [24801]], [[63930, 63930], "mapped", [20102]], [[63931, 63931], "mapped", [20698]], [[63932, 63932], "mapped", [23534]], [[63933, 63933], "mapped", [23615]], [[63934, 63934], "mapped", [26009]], [[63935, 63935], "mapped", [27138]], [[63936, 63936], "mapped", [29134]], [[63937, 63937], "mapped", [30274]], [[63938, 63938], "mapped", [34044]], [[63939, 63939], "mapped", [36988]], [[63940, 63940], "mapped", [40845]], [[63941, 63941], "mapped", [26248]], [[63942, 63942], "mapped", [38446]], [[63943, 63943], "mapped", [21129]], [[63944, 63944], "mapped", [26491]], [[63945, 63945], "mapped", [26611]], [[63946, 63946], "mapped", [27969]], [[63947, 63947], "mapped", [28316]], [[63948, 63948], "mapped", [29705]], [[63949, 63949], "mapped", [30041]], [[63950, 63950], "mapped", [30827]], [[63951, 63951], "mapped", [32016]], [[63952, 63952], "mapped", [39006]], [[63953, 63953], "mapped", [20845]], [[63954, 63954], "mapped", [25134]], [[63955, 63955], "mapped", [38520]], [[63956, 63956], "mapped", [20523]], [[63957, 63957], "mapped", [23833]], [[63958, 63958], "mapped", [28138]], [[63959, 63959], "mapped", [36650]], [[63960, 63960], "mapped", [24459]], [[63961, 63961], "mapped", [24900]], [[63962, 63962], "mapped", [26647]], [[63963, 63963], "mapped", [29575]], [[63964, 63964], "mapped", [38534]], [[63965, 63965], "mapped", [21033]], [[63966, 63966], "mapped", [21519]], [[63967, 63967], "mapped", [23653]], [[63968, 63968], "mapped", [26131]], [[63969, 63969], "mapped", [26446]], [[63970, 63970], "mapped", [26792]], [[63971, 63971], "mapped", [27877]], [[63972, 63972], "mapped", [29702]], [[63973, 63973], "mapped", [30178]], [[63974, 63974], "mapped", [32633]], [[63975, 63975], "mapped", [35023]], [[63976, 63976], "mapped", [35041]], [[63977, 63977], "mapped", [37324]], [[63978, 63978], "mapped", [38626]], [[63979, 63979], "mapped", [21311]], [[63980, 63980], "mapped", [28346]], [[63981, 63981], "mapped", [21533]], [[63982, 63982], "mapped", [29136]], [[63983, 63983], "mapped", [29848]], [[63984, 63984], "mapped", [34298]], [[63985, 63985], "mapped", [38563]], [[63986, 63986], "mapped", [40023]], [[63987, 63987], "mapped", [40607]], [[63988, 63988], "mapped", [26519]], [[63989, 63989], "mapped", [28107]], [[63990, 63990], "mapped", [33256]], [[63991, 63991], "mapped", [31435]], [[63992, 63992], "mapped", [31520]], [[63993, 63993], "mapped", [31890]], [[63994, 63994], "mapped", [29376]], [[63995, 63995], "mapped", [28825]], [[63996, 63996], "mapped", [35672]], [[63997, 63997], "mapped", [20160]], [[63998, 63998], "mapped", [33590]], [[63999, 63999], "mapped", [21050]], [[64e3, 64e3], "mapped", [20999]], [[64001, 64001], "mapped", [24230]], [[64002, 64002], "mapped", [25299]], [[64003, 64003], "mapped", [31958]], [[64004, 64004], "mapped", [23429]], [[64005, 64005], "mapped", [27934]], [[64006, 64006], "mapped", [26292]], [[64007, 64007], "mapped", [36667]], [[64008, 64008], "mapped", [34892]], [[64009, 64009], "mapped", [38477]], [[64010, 64010], "mapped", [35211]], [[64011, 64011], "mapped", [24275]], [[64012, 64012], "mapped", [20800]], [[64013, 64013], "mapped", [21952]], [[64014, 64015], "valid"], [[64016, 64016], "mapped", [22618]], [[64017, 64017], "valid"], [[64018, 64018], "mapped", [26228]], [[64019, 64020], "valid"], [[64021, 64021], "mapped", [20958]], [[64022, 64022], "mapped", [29482]], [[64023, 64023], "mapped", [30410]], [[64024, 64024], "mapped", [31036]], [[64025, 64025], "mapped", [31070]], [[64026, 64026], "mapped", [31077]], [[64027, 64027], "mapped", [31119]], [[64028, 64028], "mapped", [38742]], [[64029, 64029], "mapped", [31934]], [[64030, 64030], "mapped", [32701]], [[64031, 64031], "valid"], [[64032, 64032], "mapped", [34322]], [[64033, 64033], "valid"], [[64034, 64034], "mapped", [35576]], [[64035, 64036], "valid"], [[64037, 64037], "mapped", [36920]], [[64038, 64038], "mapped", [37117]], [[64039, 64041], "valid"], [[64042, 64042], "mapped", [39151]], [[64043, 64043], "mapped", [39164]], [[64044, 64044], "mapped", [39208]], [[64045, 64045], "mapped", [40372]], [[64046, 64046], "mapped", [37086]], [[64047, 64047], "mapped", [38583]], [[64048, 64048], "mapped", [20398]], [[64049, 64049], "mapped", [20711]], [[64050, 64050], "mapped", [20813]], [[64051, 64051], "mapped", [21193]], [[64052, 64052], "mapped", [21220]], [[64053, 64053], "mapped", [21329]], [[64054, 64054], "mapped", [21917]], [[64055, 64055], "mapped", [22022]], [[64056, 64056], "mapped", [22120]], [[64057, 64057], "mapped", [22592]], [[64058, 64058], "mapped", [22696]], [[64059, 64059], "mapped", [23652]], [[64060, 64060], "mapped", [23662]], [[64061, 64061], "mapped", [24724]], [[64062, 64062], "mapped", [24936]], [[64063, 64063], "mapped", [24974]], [[64064, 64064], "mapped", [25074]], [[64065, 64065], "mapped", [25935]], [[64066, 64066], "mapped", [26082]], [[64067, 64067], "mapped", [26257]], [[64068, 64068], "mapped", [26757]], [[64069, 64069], "mapped", [28023]], [[64070, 64070], "mapped", [28186]], [[64071, 64071], "mapped", [28450]], [[64072, 64072], "mapped", [29038]], [[64073, 64073], "mapped", [29227]], [[64074, 64074], "mapped", [29730]], [[64075, 64075], "mapped", [30865]], [[64076, 64076], "mapped", [31038]], [[64077, 64077], "mapped", [31049]], [[64078, 64078], "mapped", [31048]], [[64079, 64079], "mapped", [31056]], [[64080, 64080], "mapped", [31062]], [[64081, 64081], "mapped", [31069]], [[64082, 64082], "mapped", [31117]], [[64083, 64083], "mapped", [31118]], [[64084, 64084], "mapped", [31296]], [[64085, 64085], "mapped", [31361]], [[64086, 64086], "mapped", [31680]], [[64087, 64087], "mapped", [32244]], [[64088, 64088], "mapped", [32265]], [[64089, 64089], "mapped", [32321]], [[64090, 64090], "mapped", [32626]], [[64091, 64091], "mapped", [32773]], [[64092, 64092], "mapped", [33261]], [[64093, 64094], "mapped", [33401]], [[64095, 64095], "mapped", [33879]], [[64096, 64096], "mapped", [35088]], [[64097, 64097], "mapped", [35222]], [[64098, 64098], "mapped", [35585]], [[64099, 64099], "mapped", [35641]], [[64100, 64100], "mapped", [36051]], [[64101, 64101], "mapped", [36104]], [[64102, 64102], "mapped", [36790]], [[64103, 64103], "mapped", [36920]], [[64104, 64104], "mapped", [38627]], [[64105, 64105], "mapped", [38911]], [[64106, 64106], "mapped", [38971]], [[64107, 64107], "mapped", [24693]], [[64108, 64108], "mapped", [148206]], [[64109, 64109], "mapped", [33304]], [[64110, 64111], "disallowed"], [[64112, 64112], "mapped", [20006]], [[64113, 64113], "mapped", [20917]], [[64114, 64114], "mapped", [20840]], [[64115, 64115], "mapped", [20352]], [[64116, 64116], "mapped", [20805]], [[64117, 64117], "mapped", [20864]], [[64118, 64118], "mapped", [21191]], [[64119, 64119], "mapped", [21242]], [[64120, 64120], "mapped", [21917]], [[64121, 64121], "mapped", [21845]], [[64122, 64122], "mapped", [21913]], [[64123, 64123], "mapped", [21986]], [[64124, 64124], "mapped", [22618]], [[64125, 64125], "mapped", [22707]], [[64126, 64126], "mapped", [22852]], [[64127, 64127], "mapped", [22868]], [[64128, 64128], "mapped", [23138]], [[64129, 64129], "mapped", [23336]], [[64130, 64130], "mapped", [24274]], [[64131, 64131], "mapped", [24281]], [[64132, 64132], "mapped", [24425]], [[64133, 64133], "mapped", [24493]], [[64134, 64134], "mapped", [24792]], [[64135, 64135], "mapped", [24910]], [[64136, 64136], "mapped", [24840]], [[64137, 64137], "mapped", [24974]], [[64138, 64138], "mapped", [24928]], [[64139, 64139], "mapped", [25074]], [[64140, 64140], "mapped", [25140]], [[64141, 64141], "mapped", [25540]], [[64142, 64142], "mapped", [25628]], [[64143, 64143], "mapped", [25682]], [[64144, 64144], "mapped", [25942]], [[64145, 64145], "mapped", [26228]], [[64146, 64146], "mapped", [26391]], [[64147, 64147], "mapped", [26395]], [[64148, 64148], "mapped", [26454]], [[64149, 64149], "mapped", [27513]], [[64150, 64150], "mapped", [27578]], [[64151, 64151], "mapped", [27969]], [[64152, 64152], "mapped", [28379]], [[64153, 64153], "mapped", [28363]], [[64154, 64154], "mapped", [28450]], [[64155, 64155], "mapped", [28702]], [[64156, 64156], "mapped", [29038]], [[64157, 64157], "mapped", [30631]], [[64158, 64158], "mapped", [29237]], [[64159, 64159], "mapped", [29359]], [[64160, 64160], "mapped", [29482]], [[64161, 64161], "mapped", [29809]], [[64162, 64162], "mapped", [29958]], [[64163, 64163], "mapped", [30011]], [[64164, 64164], "mapped", [30237]], [[64165, 64165], "mapped", [30239]], [[64166, 64166], "mapped", [30410]], [[64167, 64167], "mapped", [30427]], [[64168, 64168], "mapped", [30452]], [[64169, 64169], "mapped", [30538]], [[64170, 64170], "mapped", [30528]], [[64171, 64171], "mapped", [30924]], [[64172, 64172], "mapped", [31409]], [[64173, 64173], "mapped", [31680]], [[64174, 64174], "mapped", [31867]], [[64175, 64175], "mapped", [32091]], [[64176, 64176], "mapped", [32244]], [[64177, 64177], "mapped", [32574]], [[64178, 64178], "mapped", [32773]], [[64179, 64179], "mapped", [33618]], [[64180, 64180], "mapped", [33775]], [[64181, 64181], "mapped", [34681]], [[64182, 64182], "mapped", [35137]], [[64183, 64183], "mapped", [35206]], [[64184, 64184], "mapped", [35222]], [[64185, 64185], "mapped", [35519]], [[64186, 64186], "mapped", [35576]], [[64187, 64187], "mapped", [35531]], [[64188, 64188], "mapped", [35585]], [[64189, 64189], "mapped", [35582]], [[64190, 64190], "mapped", [35565]], [[64191, 64191], "mapped", [35641]], [[64192, 64192], "mapped", [35722]], [[64193, 64193], "mapped", [36104]], [[64194, 64194], "mapped", [36664]], [[64195, 64195], "mapped", [36978]], [[64196, 64196], "mapped", [37273]], [[64197, 64197], "mapped", [37494]], [[64198, 64198], "mapped", [38524]], [[64199, 64199], "mapped", [38627]], [[64200, 64200], "mapped", [38742]], [[64201, 64201], "mapped", [38875]], [[64202, 64202], "mapped", [38911]], [[64203, 64203], "mapped", [38923]], [[64204, 64204], "mapped", [38971]], [[64205, 64205], "mapped", [39698]], [[64206, 64206], "mapped", [40860]], [[64207, 64207], "mapped", [141386]], [[64208, 64208], "mapped", [141380]], [[64209, 64209], "mapped", [144341]], [[64210, 64210], "mapped", [15261]], [[64211, 64211], "mapped", [16408]], [[64212, 64212], "mapped", [16441]], [[64213, 64213], "mapped", [152137]], [[64214, 64214], "mapped", [154832]], [[64215, 64215], "mapped", [163539]], [[64216, 64216], "mapped", [40771]], [[64217, 64217], "mapped", [40846]], [[64218, 64255], "disallowed"], [[64256, 64256], "mapped", [102, 102]], [[64257, 64257], "mapped", [102, 105]], [[64258, 64258], "mapped", [102, 108]], [[64259, 64259], "mapped", [102, 102, 105]], [[64260, 64260], "mapped", [102, 102, 108]], [[64261, 64262], "mapped", [115, 116]], [[64263, 64274], "disallowed"], [[64275, 64275], "mapped", [1396, 1398]], [[64276, 64276], "mapped", [1396, 1381]], [[64277, 64277], "mapped", [1396, 1387]], [[64278, 64278], "mapped", [1406, 1398]], [[64279, 64279], "mapped", [1396, 1389]], [[64280, 64284], "disallowed"], [[64285, 64285], "mapped", [1497, 1460]], [[64286, 64286], "valid"], [[64287, 64287], "mapped", [1522, 1463]], [[64288, 64288], "mapped", [1506]], [[64289, 64289], "mapped", [1488]], [[64290, 64290], "mapped", [1491]], [[64291, 64291], "mapped", [1492]], [[64292, 64292], "mapped", [1499]], [[64293, 64293], "mapped", [1500]], [[64294, 64294], "mapped", [1501]], [[64295, 64295], "mapped", [1512]], [[64296, 64296], "mapped", [1514]], [[64297, 64297], "disallowed_STD3_mapped", [43]], [[64298, 64298], "mapped", [1513, 1473]], [[64299, 64299], "mapped", [1513, 1474]], [[64300, 64300], "mapped", [1513, 1468, 1473]], [[64301, 64301], "mapped", [1513, 1468, 1474]], [[64302, 64302], "mapped", [1488, 1463]], [[64303, 64303], "mapped", [1488, 1464]], [[64304, 64304], "mapped", [1488, 1468]], [[64305, 64305], "mapped", [1489, 1468]], [[64306, 64306], "mapped", [1490, 1468]], [[64307, 64307], "mapped", [1491, 1468]], [[64308, 64308], "mapped", [1492, 1468]], [[64309, 64309], "mapped", [1493, 1468]], [[64310, 64310], "mapped", [1494, 1468]], [[64311, 64311], "disallowed"], [[64312, 64312], "mapped", [1496, 1468]], [[64313, 64313], "mapped", [1497, 1468]], [[64314, 64314], "mapped", [1498, 1468]], [[64315, 64315], "mapped", [1499, 1468]], [[64316, 64316], "mapped", [1500, 1468]], [[64317, 64317], "disallowed"], [[64318, 64318], "mapped", [1502, 1468]], [[64319, 64319], "disallowed"], [[64320, 64320], "mapped", [1504, 1468]], [[64321, 64321], "mapped", [1505, 1468]], [[64322, 64322], "disallowed"], [[64323, 64323], "mapped", [1507, 1468]], [[64324, 64324], "mapped", [1508, 1468]], [[64325, 64325], "disallowed"], [[64326, 64326], "mapped", [1510, 1468]], [[64327, 64327], "mapped", [1511, 1468]], [[64328, 64328], "mapped", [1512, 1468]], [[64329, 64329], "mapped", [1513, 1468]], [[64330, 64330], "mapped", [1514, 1468]], [[64331, 64331], "mapped", [1493, 1465]], [[64332, 64332], "mapped", [1489, 1471]], [[64333, 64333], "mapped", [1499, 1471]], [[64334, 64334], "mapped", [1508, 1471]], [[64335, 64335], "mapped", [1488, 1500]], [[64336, 64337], "mapped", [1649]], [[64338, 64341], "mapped", [1659]], [[64342, 64345], "mapped", [1662]], [[64346, 64349], "mapped", [1664]], [[64350, 64353], "mapped", [1658]], [[64354, 64357], "mapped", [1663]], [[64358, 64361], "mapped", [1657]], [[64362, 64365], "mapped", [1700]], [[64366, 64369], "mapped", [1702]], [[64370, 64373], "mapped", [1668]], [[64374, 64377], "mapped", [1667]], [[64378, 64381], "mapped", [1670]], [[64382, 64385], "mapped", [1671]], [[64386, 64387], "mapped", [1677]], [[64388, 64389], "mapped", [1676]], [[64390, 64391], "mapped", [1678]], [[64392, 64393], "mapped", [1672]], [[64394, 64395], "mapped", [1688]], [[64396, 64397], "mapped", [1681]], [[64398, 64401], "mapped", [1705]], [[64402, 64405], "mapped", [1711]], [[64406, 64409], "mapped", [1715]], [[64410, 64413], "mapped", [1713]], [[64414, 64415], "mapped", [1722]], [[64416, 64419], "mapped", [1723]], [[64420, 64421], "mapped", [1728]], [[64422, 64425], "mapped", [1729]], [[64426, 64429], "mapped", [1726]], [[64430, 64431], "mapped", [1746]], [[64432, 64433], "mapped", [1747]], [[64434, 64449], "valid", [], "NV8"], [[64450, 64466], "disallowed"], [[64467, 64470], "mapped", [1709]], [[64471, 64472], "mapped", [1735]], [[64473, 64474], "mapped", [1734]], [[64475, 64476], "mapped", [1736]], [[64477, 64477], "mapped", [1735, 1652]], [[64478, 64479], "mapped", [1739]], [[64480, 64481], "mapped", [1733]], [[64482, 64483], "mapped", [1737]], [[64484, 64487], "mapped", [1744]], [[64488, 64489], "mapped", [1609]], [[64490, 64491], "mapped", [1574, 1575]], [[64492, 64493], "mapped", [1574, 1749]], [[64494, 64495], "mapped", [1574, 1608]], [[64496, 64497], "mapped", [1574, 1735]], [[64498, 64499], "mapped", [1574, 1734]], [[64500, 64501], "mapped", [1574, 1736]], [[64502, 64504], "mapped", [1574, 1744]], [[64505, 64507], "mapped", [1574, 1609]], [[64508, 64511], "mapped", [1740]], [[64512, 64512], "mapped", [1574, 1580]], [[64513, 64513], "mapped", [1574, 1581]], [[64514, 64514], "mapped", [1574, 1605]], [[64515, 64515], "mapped", [1574, 1609]], [[64516, 64516], "mapped", [1574, 1610]], [[64517, 64517], "mapped", [1576, 1580]], [[64518, 64518], "mapped", [1576, 1581]], [[64519, 64519], "mapped", [1576, 1582]], [[64520, 64520], "mapped", [1576, 1605]], [[64521, 64521], "mapped", [1576, 1609]], [[64522, 64522], "mapped", [1576, 1610]], [[64523, 64523], "mapped", [1578, 1580]], [[64524, 64524], "mapped", [1578, 1581]], [[64525, 64525], "mapped", [1578, 1582]], [[64526, 64526], "mapped", [1578, 1605]], [[64527, 64527], "mapped", [1578, 1609]], [[64528, 64528], "mapped", [1578, 1610]], [[64529, 64529], "mapped", [1579, 1580]], [[64530, 64530], "mapped", [1579, 1605]], [[64531, 64531], "mapped", [1579, 1609]], [[64532, 64532], "mapped", [1579, 1610]], [[64533, 64533], "mapped", [1580, 1581]], [[64534, 64534], "mapped", [1580, 1605]], [[64535, 64535], "mapped", [1581, 1580]], [[64536, 64536], "mapped", [1581, 1605]], [[64537, 64537], "mapped", [1582, 1580]], [[64538, 64538], "mapped", [1582, 1581]], [[64539, 64539], "mapped", [1582, 1605]], [[64540, 64540], "mapped", [1587, 1580]], [[64541, 64541], "mapped", [1587, 1581]], [[64542, 64542], "mapped", [1587, 1582]], [[64543, 64543], "mapped", [1587, 1605]], [[64544, 64544], "mapped", [1589, 1581]], [[64545, 64545], "mapped", [1589, 1605]], [[64546, 64546], "mapped", [1590, 1580]], [[64547, 64547], "mapped", [1590, 1581]], [[64548, 64548], "mapped", [1590, 1582]], [[64549, 64549], "mapped", [1590, 1605]], [[64550, 64550], "mapped", [1591, 1581]], [[64551, 64551], "mapped", [1591, 1605]], [[64552, 64552], "mapped", [1592, 1605]], [[64553, 64553], "mapped", [1593, 1580]], [[64554, 64554], "mapped", [1593, 1605]], [[64555, 64555], "mapped", [1594, 1580]], [[64556, 64556], "mapped", [1594, 1605]], [[64557, 64557], "mapped", [1601, 1580]], [[64558, 64558], "mapped", [1601, 1581]], [[64559, 64559], "mapped", [1601, 1582]], [[64560, 64560], "mapped", [1601, 1605]], [[64561, 64561], "mapped", [1601, 1609]], [[64562, 64562], "mapped", [1601, 1610]], [[64563, 64563], "mapped", [1602, 1581]], [[64564, 64564], "mapped", [1602, 1605]], [[64565, 64565], "mapped", [1602, 1609]], [[64566, 64566], "mapped", [1602, 1610]], [[64567, 64567], "mapped", [1603, 1575]], [[64568, 64568], "mapped", [1603, 1580]], [[64569, 64569], "mapped", [1603, 1581]], [[64570, 64570], "mapped", [1603, 1582]], [[64571, 64571], "mapped", [1603, 1604]], [[64572, 64572], "mapped", [1603, 1605]], [[64573, 64573], "mapped", [1603, 1609]], [[64574, 64574], "mapped", [1603, 1610]], [[64575, 64575], "mapped", [1604, 1580]], [[64576, 64576], "mapped", [1604, 1581]], [[64577, 64577], "mapped", [1604, 1582]], [[64578, 64578], "mapped", [1604, 1605]], [[64579, 64579], "mapped", [1604, 1609]], [[64580, 64580], "mapped", [1604, 1610]], [[64581, 64581], "mapped", [1605, 1580]], [[64582, 64582], "mapped", [1605, 1581]], [[64583, 64583], "mapped", [1605, 1582]], [[64584, 64584], "mapped", [1605, 1605]], [[64585, 64585], "mapped", [1605, 1609]], [[64586, 64586], "mapped", [1605, 1610]], [[64587, 64587], "mapped", [1606, 1580]], [[64588, 64588], "mapped", [1606, 1581]], [[64589, 64589], "mapped", [1606, 1582]], [[64590, 64590], "mapped", [1606, 1605]], [[64591, 64591], "mapped", [1606, 1609]], [[64592, 64592], "mapped", [1606, 1610]], [[64593, 64593], "mapped", [1607, 1580]], [[64594, 64594], "mapped", [1607, 1605]], [[64595, 64595], "mapped", [1607, 1609]], [[64596, 64596], "mapped", [1607, 1610]], [[64597, 64597], "mapped", [1610, 1580]], [[64598, 64598], "mapped", [1610, 1581]], [[64599, 64599], "mapped", [1610, 1582]], [[64600, 64600], "mapped", [1610, 1605]], [[64601, 64601], "mapped", [1610, 1609]], [[64602, 64602], "mapped", [1610, 1610]], [[64603, 64603], "mapped", [1584, 1648]], [[64604, 64604], "mapped", [1585, 1648]], [[64605, 64605], "mapped", [1609, 1648]], [[64606, 64606], "disallowed_STD3_mapped", [32, 1612, 1617]], [[64607, 64607], "disallowed_STD3_mapped", [32, 1613, 1617]], [[64608, 64608], "disallowed_STD3_mapped", [32, 1614, 1617]], [[64609, 64609], "disallowed_STD3_mapped", [32, 1615, 1617]], [[64610, 64610], "disallowed_STD3_mapped", [32, 1616, 1617]], [[64611, 64611], "disallowed_STD3_mapped", [32, 1617, 1648]], [[64612, 64612], "mapped", [1574, 1585]], [[64613, 64613], "mapped", [1574, 1586]], [[64614, 64614], "mapped", [1574, 1605]], [[64615, 64615], "mapped", [1574, 1606]], [[64616, 64616], "mapped", [1574, 1609]], [[64617, 64617], "mapped", [1574, 1610]], [[64618, 64618], "mapped", [1576, 1585]], [[64619, 64619], "mapped", [1576, 1586]], [[64620, 64620], "mapped", [1576, 1605]], [[64621, 64621], "mapped", [1576, 1606]], [[64622, 64622], "mapped", [1576, 1609]], [[64623, 64623], "mapped", [1576, 1610]], [[64624, 64624], "mapped", [1578, 1585]], [[64625, 64625], "mapped", [1578, 1586]], [[64626, 64626], "mapped", [1578, 1605]], [[64627, 64627], "mapped", [1578, 1606]], [[64628, 64628], "mapped", [1578, 1609]], [[64629, 64629], "mapped", [1578, 1610]], [[64630, 64630], "mapped", [1579, 1585]], [[64631, 64631], "mapped", [1579, 1586]], [[64632, 64632], "mapped", [1579, 1605]], [[64633, 64633], "mapped", [1579, 1606]], [[64634, 64634], "mapped", [1579, 1609]], [[64635, 64635], "mapped", [1579, 1610]], [[64636, 64636], "mapped", [1601, 1609]], [[64637, 64637], "mapped", [1601, 1610]], [[64638, 64638], "mapped", [1602, 1609]], [[64639, 64639], "mapped", [1602, 1610]], [[64640, 64640], "mapped", [1603, 1575]], [[64641, 64641], "mapped", [1603, 1604]], [[64642, 64642], "mapped", [1603, 1605]], [[64643, 64643], "mapped", [1603, 1609]], [[64644, 64644], "mapped", [1603, 1610]], [[64645, 64645], "mapped", [1604, 1605]], [[64646, 64646], "mapped", [1604, 1609]], [[64647, 64647], "mapped", [1604, 1610]], [[64648, 64648], "mapped", [1605, 1575]], [[64649, 64649], "mapped", [1605, 1605]], [[64650, 64650], "mapped", [1606, 1585]], [[64651, 64651], "mapped", [1606, 1586]], [[64652, 64652], "mapped", [1606, 1605]], [[64653, 64653], "mapped", [1606, 1606]], [[64654, 64654], "mapped", [1606, 1609]], [[64655, 64655], "mapped", [1606, 1610]], [[64656, 64656], "mapped", [1609, 1648]], [[64657, 64657], "mapped", [1610, 1585]], [[64658, 64658], "mapped", [1610, 1586]], [[64659, 64659], "mapped", [1610, 1605]], [[64660, 64660], "mapped", [1610, 1606]], [[64661, 64661], "mapped", [1610, 1609]], [[64662, 64662], "mapped", [1610, 1610]], [[64663, 64663], "mapped", [1574, 1580]], [[64664, 64664], "mapped", [1574, 1581]], [[64665, 64665], "mapped", [1574, 1582]], [[64666, 64666], "mapped", [1574, 1605]], [[64667, 64667], "mapped", [1574, 1607]], [[64668, 64668], "mapped", [1576, 1580]], [[64669, 64669], "mapped", [1576, 1581]], [[64670, 64670], "mapped", [1576, 1582]], [[64671, 64671], "mapped", [1576, 1605]], [[64672, 64672], "mapped", [1576, 1607]], [[64673, 64673], "mapped", [1578, 1580]], [[64674, 64674], "mapped", [1578, 1581]], [[64675, 64675], "mapped", [1578, 1582]], [[64676, 64676], "mapped", [1578, 1605]], [[64677, 64677], "mapped", [1578, 1607]], [[64678, 64678], "mapped", [1579, 1605]], [[64679, 64679], "mapped", [1580, 1581]], [[64680, 64680], "mapped", [1580, 1605]], [[64681, 64681], "mapped", [1581, 1580]], [[64682, 64682], "mapped", [1581, 1605]], [[64683, 64683], "mapped", [1582, 1580]], [[64684, 64684], "mapped", [1582, 1605]], [[64685, 64685], "mapped", [1587, 1580]], [[64686, 64686], "mapped", [1587, 1581]], [[64687, 64687], "mapped", [1587, 1582]], [[64688, 64688], "mapped", [1587, 1605]], [[64689, 64689], "mapped", [1589, 1581]], [[64690, 64690], "mapped", [1589, 1582]], [[64691, 64691], "mapped", [1589, 1605]], [[64692, 64692], "mapped", [1590, 1580]], [[64693, 64693], "mapped", [1590, 1581]], [[64694, 64694], "mapped", [1590, 1582]], [[64695, 64695], "mapped", [1590, 1605]], [[64696, 64696], "mapped", [1591, 1581]], [[64697, 64697], "mapped", [1592, 1605]], [[64698, 64698], "mapped", [1593, 1580]], [[64699, 64699], "mapped", [1593, 1605]], [[64700, 64700], "mapped", [1594, 1580]], [[64701, 64701], "mapped", [1594, 1605]], [[64702, 64702], "mapped", [1601, 1580]], [[64703, 64703], "mapped", [1601, 1581]], [[64704, 64704], "mapped", [1601, 1582]], [[64705, 64705], "mapped", [1601, 1605]], [[64706, 64706], "mapped", [1602, 1581]], [[64707, 64707], "mapped", [1602, 1605]], [[64708, 64708], "mapped", [1603, 1580]], [[64709, 64709], "mapped", [1603, 1581]], [[64710, 64710], "mapped", [1603, 1582]], [[64711, 64711], "mapped", [1603, 1604]], [[64712, 64712], "mapped", [1603, 1605]], [[64713, 64713], "mapped", [1604, 1580]], [[64714, 64714], "mapped", [1604, 1581]], [[64715, 64715], "mapped", [1604, 1582]], [[64716, 64716], "mapped", [1604, 1605]], [[64717, 64717], "mapped", [1604, 1607]], [[64718, 64718], "mapped", [1605, 1580]], [[64719, 64719], "mapped", [1605, 1581]], [[64720, 64720], "mapped", [1605, 1582]], [[64721, 64721], "mapped", [1605, 1605]], [[64722, 64722], "mapped", [1606, 1580]], [[64723, 64723], "mapped", [1606, 1581]], [[64724, 64724], "mapped", [1606, 1582]], [[64725, 64725], "mapped", [1606, 1605]], [[64726, 64726], "mapped", [1606, 1607]], [[64727, 64727], "mapped", [1607, 1580]], [[64728, 64728], "mapped", [1607, 1605]], [[64729, 64729], "mapped", [1607, 1648]], [[64730, 64730], "mapped", [1610, 1580]], [[64731, 64731], "mapped", [1610, 1581]], [[64732, 64732], "mapped", [1610, 1582]], [[64733, 64733], "mapped", [1610, 1605]], [[64734, 64734], "mapped", [1610, 1607]], [[64735, 64735], "mapped", [1574, 1605]], [[64736, 64736], "mapped", [1574, 1607]], [[64737, 64737], "mapped", [1576, 1605]], [[64738, 64738], "mapped", [1576, 1607]], [[64739, 64739], "mapped", [1578, 1605]], [[64740, 64740], "mapped", [1578, 1607]], [[64741, 64741], "mapped", [1579, 1605]], [[64742, 64742], "mapped", [1579, 1607]], [[64743, 64743], "mapped", [1587, 1605]], [[64744, 64744], "mapped", [1587, 1607]], [[64745, 64745], "mapped", [1588, 1605]], [[64746, 64746], "mapped", [1588, 1607]], [[64747, 64747], "mapped", [1603, 1604]], [[64748, 64748], "mapped", [1603, 1605]], [[64749, 64749], "mapped", [1604, 1605]], [[64750, 64750], "mapped", [1606, 1605]], [[64751, 64751], "mapped", [1606, 1607]], [[64752, 64752], "mapped", [1610, 1605]], [[64753, 64753], "mapped", [1610, 1607]], [[64754, 64754], "mapped", [1600, 1614, 1617]], [[64755, 64755], "mapped", [1600, 1615, 1617]], [[64756, 64756], "mapped", [1600, 1616, 1617]], [[64757, 64757], "mapped", [1591, 1609]], [[64758, 64758], "mapped", [1591, 1610]], [[64759, 64759], "mapped", [1593, 1609]], [[64760, 64760], "mapped", [1593, 1610]], [[64761, 64761], "mapped", [1594, 1609]], [[64762, 64762], "mapped", [1594, 1610]], [[64763, 64763], "mapped", [1587, 1609]], [[64764, 64764], "mapped", [1587, 1610]], [[64765, 64765], "mapped", [1588, 1609]], [[64766, 64766], "mapped", [1588, 1610]], [[64767, 64767], "mapped", [1581, 1609]], [[64768, 64768], "mapped", [1581, 1610]], [[64769, 64769], "mapped", [1580, 1609]], [[64770, 64770], "mapped", [1580, 1610]], [[64771, 64771], "mapped", [1582, 1609]], [[64772, 64772], "mapped", [1582, 1610]], [[64773, 64773], "mapped", [1589, 1609]], [[64774, 64774], "mapped", [1589, 1610]], [[64775, 64775], "mapped", [1590, 1609]], [[64776, 64776], "mapped", [1590, 1610]], [[64777, 64777], "mapped", [1588, 1580]], [[64778, 64778], "mapped", [1588, 1581]], [[64779, 64779], "mapped", [1588, 1582]], [[64780, 64780], "mapped", [1588, 1605]], [[64781, 64781], "mapped", [1588, 1585]], [[64782, 64782], "mapped", [1587, 1585]], [[64783, 64783], "mapped", [1589, 1585]], [[64784, 64784], "mapped", [1590, 1585]], [[64785, 64785], "mapped", [1591, 1609]], [[64786, 64786], "mapped", [1591, 1610]], [[64787, 64787], "mapped", [1593, 1609]], [[64788, 64788], "mapped", [1593, 1610]], [[64789, 64789], "mapped", [1594, 1609]], [[64790, 64790], "mapped", [1594, 1610]], [[64791, 64791], "mapped", [1587, 1609]], [[64792, 64792], "mapped", [1587, 1610]], [[64793, 64793], "mapped", [1588, 1609]], [[64794, 64794], "mapped", [1588, 1610]], [[64795, 64795], "mapped", [1581, 1609]], [[64796, 64796], "mapped", [1581, 1610]], [[64797, 64797], "mapped", [1580, 1609]], [[64798, 64798], "mapped", [1580, 1610]], [[64799, 64799], "mapped", [1582, 1609]], [[64800, 64800], "mapped", [1582, 1610]], [[64801, 64801], "mapped", [1589, 1609]], [[64802, 64802], "mapped", [1589, 1610]], [[64803, 64803], "mapped", [1590, 1609]], [[64804, 64804], "mapped", [1590, 1610]], [[64805, 64805], "mapped", [1588, 1580]], [[64806, 64806], "mapped", [1588, 1581]], [[64807, 64807], "mapped", [1588, 1582]], [[64808, 64808], "mapped", [1588, 1605]], [[64809, 64809], "mapped", [1588, 1585]], [[64810, 64810], "mapped", [1587, 1585]], [[64811, 64811], "mapped", [1589, 1585]], [[64812, 64812], "mapped", [1590, 1585]], [[64813, 64813], "mapped", [1588, 1580]], [[64814, 64814], "mapped", [1588, 1581]], [[64815, 64815], "mapped", [1588, 1582]], [[64816, 64816], "mapped", [1588, 1605]], [[64817, 64817], "mapped", [1587, 1607]], [[64818, 64818], "mapped", [1588, 1607]], [[64819, 64819], "mapped", [1591, 1605]], [[64820, 64820], "mapped", [1587, 1580]], [[64821, 64821], "mapped", [1587, 1581]], [[64822, 64822], "mapped", [1587, 1582]], [[64823, 64823], "mapped", [1588, 1580]], [[64824, 64824], "mapped", [1588, 1581]], [[64825, 64825], "mapped", [1588, 1582]], [[64826, 64826], "mapped", [1591, 1605]], [[64827, 64827], "mapped", [1592, 1605]], [[64828, 64829], "mapped", [1575, 1611]], [[64830, 64831], "valid", [], "NV8"], [[64832, 64847], "disallowed"], [[64848, 64848], "mapped", [1578, 1580, 1605]], [[64849, 64850], "mapped", [1578, 1581, 1580]], [[64851, 64851], "mapped", [1578, 1581, 1605]], [[64852, 64852], "mapped", [1578, 1582, 1605]], [[64853, 64853], "mapped", [1578, 1605, 1580]], [[64854, 64854], "mapped", [1578, 1605, 1581]], [[64855, 64855], "mapped", [1578, 1605, 1582]], [[64856, 64857], "mapped", [1580, 1605, 1581]], [[64858, 64858], "mapped", [1581, 1605, 1610]], [[64859, 64859], "mapped", [1581, 1605, 1609]], [[64860, 64860], "mapped", [1587, 1581, 1580]], [[64861, 64861], "mapped", [1587, 1580, 1581]], [[64862, 64862], "mapped", [1587, 1580, 1609]], [[64863, 64864], "mapped", [1587, 1605, 1581]], [[64865, 64865], "mapped", [1587, 1605, 1580]], [[64866, 64867], "mapped", [1587, 1605, 1605]], [[64868, 64869], "mapped", [1589, 1581, 1581]], [[64870, 64870], "mapped", [1589, 1605, 1605]], [[64871, 64872], "mapped", [1588, 1581, 1605]], [[64873, 64873], "mapped", [1588, 1580, 1610]], [[64874, 64875], "mapped", [1588, 1605, 1582]], [[64876, 64877], "mapped", [1588, 1605, 1605]], [[64878, 64878], "mapped", [1590, 1581, 1609]], [[64879, 64880], "mapped", [1590, 1582, 1605]], [[64881, 64882], "mapped", [1591, 1605, 1581]], [[64883, 64883], "mapped", [1591, 1605, 1605]], [[64884, 64884], "mapped", [1591, 1605, 1610]], [[64885, 64885], "mapped", [1593, 1580, 1605]], [[64886, 64887], "mapped", [1593, 1605, 1605]], [[64888, 64888], "mapped", [1593, 1605, 1609]], [[64889, 64889], "mapped", [1594, 1605, 1605]], [[64890, 64890], "mapped", [1594, 1605, 1610]], [[64891, 64891], "mapped", [1594, 1605, 1609]], [[64892, 64893], "mapped", [1601, 1582, 1605]], [[64894, 64894], "mapped", [1602, 1605, 1581]], [[64895, 64895], "mapped", [1602, 1605, 1605]], [[64896, 64896], "mapped", [1604, 1581, 1605]], [[64897, 64897], "mapped", [1604, 1581, 1610]], [[64898, 64898], "mapped", [1604, 1581, 1609]], [[64899, 64900], "mapped", [1604, 1580, 1580]], [[64901, 64902], "mapped", [1604, 1582, 1605]], [[64903, 64904], "mapped", [1604, 1605, 1581]], [[64905, 64905], "mapped", [1605, 1581, 1580]], [[64906, 64906], "mapped", [1605, 1581, 1605]], [[64907, 64907], "mapped", [1605, 1581, 1610]], [[64908, 64908], "mapped", [1605, 1580, 1581]], [[64909, 64909], "mapped", [1605, 1580, 1605]], [[64910, 64910], "mapped", [1605, 1582, 1580]], [[64911, 64911], "mapped", [1605, 1582, 1605]], [[64912, 64913], "disallowed"], [[64914, 64914], "mapped", [1605, 1580, 1582]], [[64915, 64915], "mapped", [1607, 1605, 1580]], [[64916, 64916], "mapped", [1607, 1605, 1605]], [[64917, 64917], "mapped", [1606, 1581, 1605]], [[64918, 64918], "mapped", [1606, 1581, 1609]], [[64919, 64920], "mapped", [1606, 1580, 1605]], [[64921, 64921], "mapped", [1606, 1580, 1609]], [[64922, 64922], "mapped", [1606, 1605, 1610]], [[64923, 64923], "mapped", [1606, 1605, 1609]], [[64924, 64925], "mapped", [1610, 1605, 1605]], [[64926, 64926], "mapped", [1576, 1582, 1610]], [[64927, 64927], "mapped", [1578, 1580, 1610]], [[64928, 64928], "mapped", [1578, 1580, 1609]], [[64929, 64929], "mapped", [1578, 1582, 1610]], [[64930, 64930], "mapped", [1578, 1582, 1609]], [[64931, 64931], "mapped", [1578, 1605, 1610]], [[64932, 64932], "mapped", [1578, 1605, 1609]], [[64933, 64933], "mapped", [1580, 1605, 1610]], [[64934, 64934], "mapped", [1580, 1581, 1609]], [[64935, 64935], "mapped", [1580, 1605, 1609]], [[64936, 64936], "mapped", [1587, 1582, 1609]], [[64937, 64937], "mapped", [1589, 1581, 1610]], [[64938, 64938], "mapped", [1588, 1581, 1610]], [[64939, 64939], "mapped", [1590, 1581, 1610]], [[64940, 64940], "mapped", [1604, 1580, 1610]], [[64941, 64941], "mapped", [1604, 1605, 1610]], [[64942, 64942], "mapped", [1610, 1581, 1610]], [[64943, 64943], "mapped", [1610, 1580, 1610]], [[64944, 64944], "mapped", [1610, 1605, 1610]], [[64945, 64945], "mapped", [1605, 1605, 1610]], [[64946, 64946], "mapped", [1602, 1605, 1610]], [[64947, 64947], "mapped", [1606, 1581, 1610]], [[64948, 64948], "mapped", [1602, 1605, 1581]], [[64949, 64949], "mapped", [1604, 1581, 1605]], [[64950, 64950], "mapped", [1593, 1605, 1610]], [[64951, 64951], "mapped", [1603, 1605, 1610]], [[64952, 64952], "mapped", [1606, 1580, 1581]], [[64953, 64953], "mapped", [1605, 1582, 1610]], [[64954, 64954], "mapped", [1604, 1580, 1605]], [[64955, 64955], "mapped", [1603, 1605, 1605]], [[64956, 64956], "mapped", [1604, 1580, 1605]], [[64957, 64957], "mapped", [1606, 1580, 1581]], [[64958, 64958], "mapped", [1580, 1581, 1610]], [[64959, 64959], "mapped", [1581, 1580, 1610]], [[64960, 64960], "mapped", [1605, 1580, 1610]], [[64961, 64961], "mapped", [1601, 1605, 1610]], [[64962, 64962], "mapped", [1576, 1581, 1610]], [[64963, 64963], "mapped", [1603, 1605, 1605]], [[64964, 64964], "mapped", [1593, 1580, 1605]], [[64965, 64965], "mapped", [1589, 1605, 1605]], [[64966, 64966], "mapped", [1587, 1582, 1610]], [[64967, 64967], "mapped", [1606, 1580, 1610]], [[64968, 64975], "disallowed"], [[64976, 65007], "disallowed"], [[65008, 65008], "mapped", [1589, 1604, 1746]], [[65009, 65009], "mapped", [1602, 1604, 1746]], [[65010, 65010], "mapped", [1575, 1604, 1604, 1607]], [[65011, 65011], "mapped", [1575, 1603, 1576, 1585]], [[65012, 65012], "mapped", [1605, 1581, 1605, 1583]], [[65013, 65013], "mapped", [1589, 1604, 1593, 1605]], [[65014, 65014], "mapped", [1585, 1587, 1608, 1604]], [[65015, 65015], "mapped", [1593, 1604, 1610, 1607]], [[65016, 65016], "mapped", [1608, 1587, 1604, 1605]], [[65017, 65017], "mapped", [1589, 1604, 1609]], [[65018, 65018], "disallowed_STD3_mapped", [1589, 1604, 1609, 32, 1575, 1604, 1604, 1607, 32, 1593, 1604, 1610, 1607, 32, 1608, 1587, 1604, 1605]], [[65019, 65019], "disallowed_STD3_mapped", [1580, 1604, 32, 1580, 1604, 1575, 1604, 1607]], [[65020, 65020], "mapped", [1585, 1740, 1575, 1604]], [[65021, 65021], "valid", [], "NV8"], [[65022, 65023], "disallowed"], [[65024, 65039], "ignored"], [[65040, 65040], "disallowed_STD3_mapped", [44]], [[65041, 65041], "mapped", [12289]], [[65042, 65042], "disallowed"], [[65043, 65043], "disallowed_STD3_mapped", [58]], [[65044, 65044], "disallowed_STD3_mapped", [59]], [[65045, 65045], "disallowed_STD3_mapped", [33]], [[65046, 65046], "disallowed_STD3_mapped", [63]], [[65047, 65047], "mapped", [12310]], [[65048, 65048], "mapped", [12311]], [[65049, 65049], "disallowed"], [[65050, 65055], "disallowed"], [[65056, 65059], "valid"], [[65060, 65062], "valid"], [[65063, 65069], "valid"], [[65070, 65071], "valid"], [[65072, 65072], "disallowed"], [[65073, 65073], "mapped", [8212]], [[65074, 65074], "mapped", [8211]], [[65075, 65076], "disallowed_STD3_mapped", [95]], [[65077, 65077], "disallowed_STD3_mapped", [40]], [[65078, 65078], "disallowed_STD3_mapped", [41]], [[65079, 65079], "disallowed_STD3_mapped", [123]], [[65080, 65080], "disallowed_STD3_mapped", [125]], [[65081, 65081], "mapped", [12308]], [[65082, 65082], "mapped", [12309]], [[65083, 65083], "mapped", [12304]], [[65084, 65084], "mapped", [12305]], [[65085, 65085], "mapped", [12298]], [[65086, 65086], "mapped", [12299]], [[65087, 65087], "mapped", [12296]], [[65088, 65088], "mapped", [12297]], [[65089, 65089], "mapped", [12300]], [[65090, 65090], "mapped", [12301]], [[65091, 65091], "mapped", [12302]], [[65092, 65092], "mapped", [12303]], [[65093, 65094], "valid", [], "NV8"], [[65095, 65095], "disallowed_STD3_mapped", [91]], [[65096, 65096], "disallowed_STD3_mapped", [93]], [[65097, 65100], "disallowed_STD3_mapped", [32, 773]], [[65101, 65103], "disallowed_STD3_mapped", [95]], [[65104, 65104], "disallowed_STD3_mapped", [44]], [[65105, 65105], "mapped", [12289]], [[65106, 65106], "disallowed"], [[65107, 65107], "disallowed"], [[65108, 65108], "disallowed_STD3_mapped", [59]], [[65109, 65109], "disallowed_STD3_mapped", [58]], [[65110, 65110], "disallowed_STD3_mapped", [63]], [[65111, 65111], "disallowed_STD3_mapped", [33]], [[65112, 65112], "mapped", [8212]], [[65113, 65113], "disallowed_STD3_mapped", [40]], [[65114, 65114], "disallowed_STD3_mapped", [41]], [[65115, 65115], "disallowed_STD3_mapped", [123]], [[65116, 65116], "disallowed_STD3_mapped", [125]], [[65117, 65117], "mapped", [12308]], [[65118, 65118], "mapped", [12309]], [[65119, 65119], "disallowed_STD3_mapped", [35]], [[65120, 65120], "disallowed_STD3_mapped", [38]], [[65121, 65121], "disallowed_STD3_mapped", [42]], [[65122, 65122], "disallowed_STD3_mapped", [43]], [[65123, 65123], "mapped", [45]], [[65124, 65124], "disallowed_STD3_mapped", [60]], [[65125, 65125], "disallowed_STD3_mapped", [62]], [[65126, 65126], "disallowed_STD3_mapped", [61]], [[65127, 65127], "disallowed"], [[65128, 65128], "disallowed_STD3_mapped", [92]], [[65129, 65129], "disallowed_STD3_mapped", [36]], [[65130, 65130], "disallowed_STD3_mapped", [37]], [[65131, 65131], "disallowed_STD3_mapped", [64]], [[65132, 65135], "disallowed"], [[65136, 65136], "disallowed_STD3_mapped", [32, 1611]], [[65137, 65137], "mapped", [1600, 1611]], [[65138, 65138], "disallowed_STD3_mapped", [32, 1612]], [[65139, 65139], "valid"], [[65140, 65140], "disallowed_STD3_mapped", [32, 1613]], [[65141, 65141], "disallowed"], [[65142, 65142], "disallowed_STD3_mapped", [32, 1614]], [[65143, 65143], "mapped", [1600, 1614]], [[65144, 65144], "disallowed_STD3_mapped", [32, 1615]], [[65145, 65145], "mapped", [1600, 1615]], [[65146, 65146], "disallowed_STD3_mapped", [32, 1616]], [[65147, 65147], "mapped", [1600, 1616]], [[65148, 65148], "disallowed_STD3_mapped", [32, 1617]], [[65149, 65149], "mapped", [1600, 1617]], [[65150, 65150], "disallowed_STD3_mapped", [32, 1618]], [[65151, 65151], "mapped", [1600, 1618]], [[65152, 65152], "mapped", [1569]], [[65153, 65154], "mapped", [1570]], [[65155, 65156], "mapped", [1571]], [[65157, 65158], "mapped", [1572]], [[65159, 65160], "mapped", [1573]], [[65161, 65164], "mapped", [1574]], [[65165, 65166], "mapped", [1575]], [[65167, 65170], "mapped", [1576]], [[65171, 65172], "mapped", [1577]], [[65173, 65176], "mapped", [1578]], [[65177, 65180], "mapped", [1579]], [[65181, 65184], "mapped", [1580]], [[65185, 65188], "mapped", [1581]], [[65189, 65192], "mapped", [1582]], [[65193, 65194], "mapped", [1583]], [[65195, 65196], "mapped", [1584]], [[65197, 65198], "mapped", [1585]], [[65199, 65200], "mapped", [1586]], [[65201, 65204], "mapped", [1587]], [[65205, 65208], "mapped", [1588]], [[65209, 65212], "mapped", [1589]], [[65213, 65216], "mapped", [1590]], [[65217, 65220], "mapped", [1591]], [[65221, 65224], "mapped", [1592]], [[65225, 65228], "mapped", [1593]], [[65229, 65232], "mapped", [1594]], [[65233, 65236], "mapped", [1601]], [[65237, 65240], "mapped", [1602]], [[65241, 65244], "mapped", [1603]], [[65245, 65248], "mapped", [1604]], [[65249, 65252], "mapped", [1605]], [[65253, 65256], "mapped", [1606]], [[65257, 65260], "mapped", [1607]], [[65261, 65262], "mapped", [1608]], [[65263, 65264], "mapped", [1609]], [[65265, 65268], "mapped", [1610]], [[65269, 65270], "mapped", [1604, 1570]], [[65271, 65272], "mapped", [1604, 1571]], [[65273, 65274], "mapped", [1604, 1573]], [[65275, 65276], "mapped", [1604, 1575]], [[65277, 65278], "disallowed"], [[65279, 65279], "ignored"], [[65280, 65280], "disallowed"], [[65281, 65281], "disallowed_STD3_mapped", [33]], [[65282, 65282], "disallowed_STD3_mapped", [34]], [[65283, 65283], "disallowed_STD3_mapped", [35]], [[65284, 65284], "disallowed_STD3_mapped", [36]], [[65285, 65285], "disallowed_STD3_mapped", [37]], [[65286, 65286], "disallowed_STD3_mapped", [38]], [[65287, 65287], "disallowed_STD3_mapped", [39]], [[65288, 65288], "disallowed_STD3_mapped", [40]], [[65289, 65289], "disallowed_STD3_mapped", [41]], [[65290, 65290], "disallowed_STD3_mapped", [42]], [[65291, 65291], "disallowed_STD3_mapped", [43]], [[65292, 65292], "disallowed_STD3_mapped", [44]], [[65293, 65293], "mapped", [45]], [[65294, 65294], "mapped", [46]], [[65295, 65295], "disallowed_STD3_mapped", [47]], [[65296, 65296], "mapped", [48]], [[65297, 65297], "mapped", [49]], [[65298, 65298], "mapped", [50]], [[65299, 65299], "mapped", [51]], [[65300, 65300], "mapped", [52]], [[65301, 65301], "mapped", [53]], [[65302, 65302], "mapped", [54]], [[65303, 65303], "mapped", [55]], [[65304, 65304], "mapped", [56]], [[65305, 65305], "mapped", [57]], [[65306, 65306], "disallowed_STD3_mapped", [58]], [[65307, 65307], "disallowed_STD3_mapped", [59]], [[65308, 65308], "disallowed_STD3_mapped", [60]], [[65309, 65309], "disallowed_STD3_mapped", [61]], [[65310, 65310], "disallowed_STD3_mapped", [62]], [[65311, 65311], "disallowed_STD3_mapped", [63]], [[65312, 65312], "disallowed_STD3_mapped", [64]], [[65313, 65313], "mapped", [97]], [[65314, 65314], "mapped", [98]], [[65315, 65315], "mapped", [99]], [[65316, 65316], "mapped", [100]], [[65317, 65317], "mapped", [101]], [[65318, 65318], "mapped", [102]], [[65319, 65319], "mapped", [103]], [[65320, 65320], "mapped", [104]], [[65321, 65321], "mapped", [105]], [[65322, 65322], "mapped", [106]], [[65323, 65323], "mapped", [107]], [[65324, 65324], "mapped", [108]], [[65325, 65325], "mapped", [109]], [[65326, 65326], "mapped", [110]], [[65327, 65327], "mapped", [111]], [[65328, 65328], "mapped", [112]], [[65329, 65329], "mapped", [113]], [[65330, 65330], "mapped", [114]], [[65331, 65331], "mapped", [115]], [[65332, 65332], "mapped", [116]], [[65333, 65333], "mapped", [117]], [[65334, 65334], "mapped", [118]], [[65335, 65335], "mapped", [119]], [[65336, 65336], "mapped", [120]], [[65337, 65337], "mapped", [121]], [[65338, 65338], "mapped", [122]], [[65339, 65339], "disallowed_STD3_mapped", [91]], [[65340, 65340], "disallowed_STD3_mapped", [92]], [[65341, 65341], "disallowed_STD3_mapped", [93]], [[65342, 65342], "disallowed_STD3_mapped", [94]], [[65343, 65343], "disallowed_STD3_mapped", [95]], [[65344, 65344], "disallowed_STD3_mapped", [96]], [[65345, 65345], "mapped", [97]], [[65346, 65346], "mapped", [98]], [[65347, 65347], "mapped", [99]], [[65348, 65348], "mapped", [100]], [[65349, 65349], "mapped", [101]], [[65350, 65350], "mapped", [102]], [[65351, 65351], "mapped", [103]], [[65352, 65352], "mapped", [104]], [[65353, 65353], "mapped", [105]], [[65354, 65354], "mapped", [106]], [[65355, 65355], "mapped", [107]], [[65356, 65356], "mapped", [108]], [[65357, 65357], "mapped", [109]], [[65358, 65358], "mapped", [110]], [[65359, 65359], "mapped", [111]], [[65360, 65360], "mapped", [112]], [[65361, 65361], "mapped", [113]], [[65362, 65362], "mapped", [114]], [[65363, 65363], "mapped", [115]], [[65364, 65364], "mapped", [116]], [[65365, 65365], "mapped", [117]], [[65366, 65366], "mapped", [118]], [[65367, 65367], "mapped", [119]], [[65368, 65368], "mapped", [120]], [[65369, 65369], "mapped", [121]], [[65370, 65370], "mapped", [122]], [[65371, 65371], "disallowed_STD3_mapped", [123]], [[65372, 65372], "disallowed_STD3_mapped", [124]], [[65373, 65373], "disallowed_STD3_mapped", [125]], [[65374, 65374], "disallowed_STD3_mapped", [126]], [[65375, 65375], "mapped", [10629]], [[65376, 65376], "mapped", [10630]], [[65377, 65377], "mapped", [46]], [[65378, 65378], "mapped", [12300]], [[65379, 65379], "mapped", [12301]], [[65380, 65380], "mapped", [12289]], [[65381, 65381], "mapped", [12539]], [[65382, 65382], "mapped", [12530]], [[65383, 65383], "mapped", [12449]], [[65384, 65384], "mapped", [12451]], [[65385, 65385], "mapped", [12453]], [[65386, 65386], "mapped", [12455]], [[65387, 65387], "mapped", [12457]], [[65388, 65388], "mapped", [12515]], [[65389, 65389], "mapped", [12517]], [[65390, 65390], "mapped", [12519]], [[65391, 65391], "mapped", [12483]], [[65392, 65392], "mapped", [12540]], [[65393, 65393], "mapped", [12450]], [[65394, 65394], "mapped", [12452]], [[65395, 65395], "mapped", [12454]], [[65396, 65396], "mapped", [12456]], [[65397, 65397], "mapped", [12458]], [[65398, 65398], "mapped", [12459]], [[65399, 65399], "mapped", [12461]], [[65400, 65400], "mapped", [12463]], [[65401, 65401], "mapped", [12465]], [[65402, 65402], "mapped", [12467]], [[65403, 65403], "mapped", [12469]], [[65404, 65404], "mapped", [12471]], [[65405, 65405], "mapped", [12473]], [[65406, 65406], "mapped", [12475]], [[65407, 65407], "mapped", [12477]], [[65408, 65408], "mapped", [12479]], [[65409, 65409], "mapped", [12481]], [[65410, 65410], "mapped", [12484]], [[65411, 65411], "mapped", [12486]], [[65412, 65412], "mapped", [12488]], [[65413, 65413], "mapped", [12490]], [[65414, 65414], "mapped", [12491]], [[65415, 65415], "mapped", [12492]], [[65416, 65416], "mapped", [12493]], [[65417, 65417], "mapped", [12494]], [[65418, 65418], "mapped", [12495]], [[65419, 65419], "mapped", [12498]], [[65420, 65420], "mapped", [12501]], [[65421, 65421], "mapped", [12504]], [[65422, 65422], "mapped", [12507]], [[65423, 65423], "mapped", [12510]], [[65424, 65424], "mapped", [12511]], [[65425, 65425], "mapped", [12512]], [[65426, 65426], "mapped", [12513]], [[65427, 65427], "mapped", [12514]], [[65428, 65428], "mapped", [12516]], [[65429, 65429], "mapped", [12518]], [[65430, 65430], "mapped", [12520]], [[65431, 65431], "mapped", [12521]], [[65432, 65432], "mapped", [12522]], [[65433, 65433], "mapped", [12523]], [[65434, 65434], "mapped", [12524]], [[65435, 65435], "mapped", [12525]], [[65436, 65436], "mapped", [12527]], [[65437, 65437], "mapped", [12531]], [[65438, 65438], "mapped", [12441]], [[65439, 65439], "mapped", [12442]], [[65440, 65440], "disallowed"], [[65441, 65441], "mapped", [4352]], [[65442, 65442], "mapped", [4353]], [[65443, 65443], "mapped", [4522]], [[65444, 65444], "mapped", [4354]], [[65445, 65445], "mapped", [4524]], [[65446, 65446], "mapped", [4525]], [[65447, 65447], "mapped", [4355]], [[65448, 65448], "mapped", [4356]], [[65449, 65449], "mapped", [4357]], [[65450, 65450], "mapped", [4528]], [[65451, 65451], "mapped", [4529]], [[65452, 65452], "mapped", [4530]], [[65453, 65453], "mapped", [4531]], [[65454, 65454], "mapped", [4532]], [[65455, 65455], "mapped", [4533]], [[65456, 65456], "mapped", [4378]], [[65457, 65457], "mapped", [4358]], [[65458, 65458], "mapped", [4359]], [[65459, 65459], "mapped", [4360]], [[65460, 65460], "mapped", [4385]], [[65461, 65461], "mapped", [4361]], [[65462, 65462], "mapped", [4362]], [[65463, 65463], "mapped", [4363]], [[65464, 65464], "mapped", [4364]], [[65465, 65465], "mapped", [4365]], [[65466, 65466], "mapped", [4366]], [[65467, 65467], "mapped", [4367]], [[65468, 65468], "mapped", [4368]], [[65469, 65469], "mapped", [4369]], [[65470, 65470], "mapped", [4370]], [[65471, 65473], "disallowed"], [[65474, 65474], "mapped", [4449]], [[65475, 65475], "mapped", [4450]], [[65476, 65476], "mapped", [4451]], [[65477, 65477], "mapped", [4452]], [[65478, 65478], "mapped", [4453]], [[65479, 65479], "mapped", [4454]], [[65480, 65481], "disallowed"], [[65482, 65482], "mapped", [4455]], [[65483, 65483], "mapped", [4456]], [[65484, 65484], "mapped", [4457]], [[65485, 65485], "mapped", [4458]], [[65486, 65486], "mapped", [4459]], [[65487, 65487], "mapped", [4460]], [[65488, 65489], "disallowed"], [[65490, 65490], "mapped", [4461]], [[65491, 65491], "mapped", [4462]], [[65492, 65492], "mapped", [4463]], [[65493, 65493], "mapped", [4464]], [[65494, 65494], "mapped", [4465]], [[65495, 65495], "mapped", [4466]], [[65496, 65497], "disallowed"], [[65498, 65498], "mapped", [4467]], [[65499, 65499], "mapped", [4468]], [[65500, 65500], "mapped", [4469]], [[65501, 65503], "disallowed"], [[65504, 65504], "mapped", [162]], [[65505, 65505], "mapped", [163]], [[65506, 65506], "mapped", [172]], [[65507, 65507], "disallowed_STD3_mapped", [32, 772]], [[65508, 65508], "mapped", [166]], [[65509, 65509], "mapped", [165]], [[65510, 65510], "mapped", [8361]], [[65511, 65511], "disallowed"], [[65512, 65512], "mapped", [9474]], [[65513, 65513], "mapped", [8592]], [[65514, 65514], "mapped", [8593]], [[65515, 65515], "mapped", [8594]], [[65516, 65516], "mapped", [8595]], [[65517, 65517], "mapped", [9632]], [[65518, 65518], "mapped", [9675]], [[65519, 65528], "disallowed"], [[65529, 65531], "disallowed"], [[65532, 65532], "disallowed"], [[65533, 65533], "disallowed"], [[65534, 65535], "disallowed"], [[65536, 65547], "valid"], [[65548, 65548], "disallowed"], [[65549, 65574], "valid"], [[65575, 65575], "disallowed"], [[65576, 65594], "valid"], [[65595, 65595], "disallowed"], [[65596, 65597], "valid"], [[65598, 65598], "disallowed"], [[65599, 65613], "valid"], [[65614, 65615], "disallowed"], [[65616, 65629], "valid"], [[65630, 65663], "disallowed"], [[65664, 65786], "valid"], [[65787, 65791], "disallowed"], [[65792, 65794], "valid", [], "NV8"], [[65795, 65798], "disallowed"], [[65799, 65843], "valid", [], "NV8"], [[65844, 65846], "disallowed"], [[65847, 65855], "valid", [], "NV8"], [[65856, 65930], "valid", [], "NV8"], [[65931, 65932], "valid", [], "NV8"], [[65933, 65935], "disallowed"], [[65936, 65947], "valid", [], "NV8"], [[65948, 65951], "disallowed"], [[65952, 65952], "valid", [], "NV8"], [[65953, 65999], "disallowed"], [[66e3, 66044], "valid", [], "NV8"], [[66045, 66045], "valid"], [[66046, 66175], "disallowed"], [[66176, 66204], "valid"], [[66205, 66207], "disallowed"], [[66208, 66256], "valid"], [[66257, 66271], "disallowed"], [[66272, 66272], "valid"], [[66273, 66299], "valid", [], "NV8"], [[66300, 66303], "disallowed"], [[66304, 66334], "valid"], [[66335, 66335], "valid"], [[66336, 66339], "valid", [], "NV8"], [[66340, 66351], "disallowed"], [[66352, 66368], "valid"], [[66369, 66369], "valid", [], "NV8"], [[66370, 66377], "valid"], [[66378, 66378], "valid", [], "NV8"], [[66379, 66383], "disallowed"], [[66384, 66426], "valid"], [[66427, 66431], "disallowed"], [[66432, 66461], "valid"], [[66462, 66462], "disallowed"], [[66463, 66463], "valid", [], "NV8"], [[66464, 66499], "valid"], [[66500, 66503], "disallowed"], [[66504, 66511], "valid"], [[66512, 66517], "valid", [], "NV8"], [[66518, 66559], "disallowed"], [[66560, 66560], "mapped", [66600]], [[66561, 66561], "mapped", [66601]], [[66562, 66562], "mapped", [66602]], [[66563, 66563], "mapped", [66603]], [[66564, 66564], "mapped", [66604]], [[66565, 66565], "mapped", [66605]], [[66566, 66566], "mapped", [66606]], [[66567, 66567], "mapped", [66607]], [[66568, 66568], "mapped", [66608]], [[66569, 66569], "mapped", [66609]], [[66570, 66570], "mapped", [66610]], [[66571, 66571], "mapped", [66611]], [[66572, 66572], "mapped", [66612]], [[66573, 66573], "mapped", [66613]], [[66574, 66574], "mapped", [66614]], [[66575, 66575], "mapped", [66615]], [[66576, 66576], "mapped", [66616]], [[66577, 66577], "mapped", [66617]], [[66578, 66578], "mapped", [66618]], [[66579, 66579], "mapped", [66619]], [[66580, 66580], "mapped", [66620]], [[66581, 66581], "mapped", [66621]], [[66582, 66582], "mapped", [66622]], [[66583, 66583], "mapped", [66623]], [[66584, 66584], "mapped", [66624]], [[66585, 66585], "mapped", [66625]], [[66586, 66586], "mapped", [66626]], [[66587, 66587], "mapped", [66627]], [[66588, 66588], "mapped", [66628]], [[66589, 66589], "mapped", [66629]], [[66590, 66590], "mapped", [66630]], [[66591, 66591], "mapped", [66631]], [[66592, 66592], "mapped", [66632]], [[66593, 66593], "mapped", [66633]], [[66594, 66594], "mapped", [66634]], [[66595, 66595], "mapped", [66635]], [[66596, 66596], "mapped", [66636]], [[66597, 66597], "mapped", [66637]], [[66598, 66598], "mapped", [66638]], [[66599, 66599], "mapped", [66639]], [[66600, 66637], "valid"], [[66638, 66717], "valid"], [[66718, 66719], "disallowed"], [[66720, 66729], "valid"], [[66730, 66815], "disallowed"], [[66816, 66855], "valid"], [[66856, 66863], "disallowed"], [[66864, 66915], "valid"], [[66916, 66926], "disallowed"], [[66927, 66927], "valid", [], "NV8"], [[66928, 67071], "disallowed"], [[67072, 67382], "valid"], [[67383, 67391], "disallowed"], [[67392, 67413], "valid"], [[67414, 67423], "disallowed"], [[67424, 67431], "valid"], [[67432, 67583], "disallowed"], [[67584, 67589], "valid"], [[67590, 67591], "disallowed"], [[67592, 67592], "valid"], [[67593, 67593], "disallowed"], [[67594, 67637], "valid"], [[67638, 67638], "disallowed"], [[67639, 67640], "valid"], [[67641, 67643], "disallowed"], [[67644, 67644], "valid"], [[67645, 67646], "disallowed"], [[67647, 67647], "valid"], [[67648, 67669], "valid"], [[67670, 67670], "disallowed"], [[67671, 67679], "valid", [], "NV8"], [[67680, 67702], "valid"], [[67703, 67711], "valid", [], "NV8"], [[67712, 67742], "valid"], [[67743, 67750], "disallowed"], [[67751, 67759], "valid", [], "NV8"], [[67760, 67807], "disallowed"], [[67808, 67826], "valid"], [[67827, 67827], "disallowed"], [[67828, 67829], "valid"], [[67830, 67834], "disallowed"], [[67835, 67839], "valid", [], "NV8"], [[67840, 67861], "valid"], [[67862, 67865], "valid", [], "NV8"], [[67866, 67867], "valid", [], "NV8"], [[67868, 67870], "disallowed"], [[67871, 67871], "valid", [], "NV8"], [[67872, 67897], "valid"], [[67898, 67902], "disallowed"], [[67903, 67903], "valid", [], "NV8"], [[67904, 67967], "disallowed"], [[67968, 68023], "valid"], [[68024, 68027], "disallowed"], [[68028, 68029], "valid", [], "NV8"], [[68030, 68031], "valid"], [[68032, 68047], "valid", [], "NV8"], [[68048, 68049], "disallowed"], [[68050, 68095], "valid", [], "NV8"], [[68096, 68099], "valid"], [[68100, 68100], "disallowed"], [[68101, 68102], "valid"], [[68103, 68107], "disallowed"], [[68108, 68115], "valid"], [[68116, 68116], "disallowed"], [[68117, 68119], "valid"], [[68120, 68120], "disallowed"], [[68121, 68147], "valid"], [[68148, 68151], "disallowed"], [[68152, 68154], "valid"], [[68155, 68158], "disallowed"], [[68159, 68159], "valid"], [[68160, 68167], "valid", [], "NV8"], [[68168, 68175], "disallowed"], [[68176, 68184], "valid", [], "NV8"], [[68185, 68191], "disallowed"], [[68192, 68220], "valid"], [[68221, 68223], "valid", [], "NV8"], [[68224, 68252], "valid"], [[68253, 68255], "valid", [], "NV8"], [[68256, 68287], "disallowed"], [[68288, 68295], "valid"], [[68296, 68296], "valid", [], "NV8"], [[68297, 68326], "valid"], [[68327, 68330], "disallowed"], [[68331, 68342], "valid", [], "NV8"], [[68343, 68351], "disallowed"], [[68352, 68405], "valid"], [[68406, 68408], "disallowed"], [[68409, 68415], "valid", [], "NV8"], [[68416, 68437], "valid"], [[68438, 68439], "disallowed"], [[68440, 68447], "valid", [], "NV8"], [[68448, 68466], "valid"], [[68467, 68471], "disallowed"], [[68472, 68479], "valid", [], "NV8"], [[68480, 68497], "valid"], [[68498, 68504], "disallowed"], [[68505, 68508], "valid", [], "NV8"], [[68509, 68520], "disallowed"], [[68521, 68527], "valid", [], "NV8"], [[68528, 68607], "disallowed"], [[68608, 68680], "valid"], [[68681, 68735], "disallowed"], [[68736, 68736], "mapped", [68800]], [[68737, 68737], "mapped", [68801]], [[68738, 68738], "mapped", [68802]], [[68739, 68739], "mapped", [68803]], [[68740, 68740], "mapped", [68804]], [[68741, 68741], "mapped", [68805]], [[68742, 68742], "mapped", [68806]], [[68743, 68743], "mapped", [68807]], [[68744, 68744], "mapped", [68808]], [[68745, 68745], "mapped", [68809]], [[68746, 68746], "mapped", [68810]], [[68747, 68747], "mapped", [68811]], [[68748, 68748], "mapped", [68812]], [[68749, 68749], "mapped", [68813]], [[68750, 68750], "mapped", [68814]], [[68751, 68751], "mapped", [68815]], [[68752, 68752], "mapped", [68816]], [[68753, 68753], "mapped", [68817]], [[68754, 68754], "mapped", [68818]], [[68755, 68755], "mapped", [68819]], [[68756, 68756], "mapped", [68820]], [[68757, 68757], "mapped", [68821]], [[68758, 68758], "mapped", [68822]], [[68759, 68759], "mapped", [68823]], [[68760, 68760], "mapped", [68824]], [[68761, 68761], "mapped", [68825]], [[68762, 68762], "mapped", [68826]], [[68763, 68763], "mapped", [68827]], [[68764, 68764], "mapped", [68828]], [[68765, 68765], "mapped", [68829]], [[68766, 68766], "mapped", [68830]], [[68767, 68767], "mapped", [68831]], [[68768, 68768], "mapped", [68832]], [[68769, 68769], "mapped", [68833]], [[68770, 68770], "mapped", [68834]], [[68771, 68771], "mapped", [68835]], [[68772, 68772], "mapped", [68836]], [[68773, 68773], "mapped", [68837]], [[68774, 68774], "mapped", [68838]], [[68775, 68775], "mapped", [68839]], [[68776, 68776], "mapped", [68840]], [[68777, 68777], "mapped", [68841]], [[68778, 68778], "mapped", [68842]], [[68779, 68779], "mapped", [68843]], [[68780, 68780], "mapped", [68844]], [[68781, 68781], "mapped", [68845]], [[68782, 68782], "mapped", [68846]], [[68783, 68783], "mapped", [68847]], [[68784, 68784], "mapped", [68848]], [[68785, 68785], "mapped", [68849]], [[68786, 68786], "mapped", [68850]], [[68787, 68799], "disallowed"], [[68800, 68850], "valid"], [[68851, 68857], "disallowed"], [[68858, 68863], "valid", [], "NV8"], [[68864, 69215], "disallowed"], [[69216, 69246], "valid", [], "NV8"], [[69247, 69631], "disallowed"], [[69632, 69702], "valid"], [[69703, 69709], "valid", [], "NV8"], [[69710, 69713], "disallowed"], [[69714, 69733], "valid", [], "NV8"], [[69734, 69743], "valid"], [[69744, 69758], "disallowed"], [[69759, 69759], "valid"], [[69760, 69818], "valid"], [[69819, 69820], "valid", [], "NV8"], [[69821, 69821], "disallowed"], [[69822, 69825], "valid", [], "NV8"], [[69826, 69839], "disallowed"], [[69840, 69864], "valid"], [[69865, 69871], "disallowed"], [[69872, 69881], "valid"], [[69882, 69887], "disallowed"], [[69888, 69940], "valid"], [[69941, 69941], "disallowed"], [[69942, 69951], "valid"], [[69952, 69955], "valid", [], "NV8"], [[69956, 69967], "disallowed"], [[69968, 70003], "valid"], [[70004, 70005], "valid", [], "NV8"], [[70006, 70006], "valid"], [[70007, 70015], "disallowed"], [[70016, 70084], "valid"], [[70085, 70088], "valid", [], "NV8"], [[70089, 70089], "valid", [], "NV8"], [[70090, 70092], "valid"], [[70093, 70093], "valid", [], "NV8"], [[70094, 70095], "disallowed"], [[70096, 70105], "valid"], [[70106, 70106], "valid"], [[70107, 70107], "valid", [], "NV8"], [[70108, 70108], "valid"], [[70109, 70111], "valid", [], "NV8"], [[70112, 70112], "disallowed"], [[70113, 70132], "valid", [], "NV8"], [[70133, 70143], "disallowed"], [[70144, 70161], "valid"], [[70162, 70162], "disallowed"], [[70163, 70199], "valid"], [[70200, 70205], "valid", [], "NV8"], [[70206, 70271], "disallowed"], [[70272, 70278], "valid"], [[70279, 70279], "disallowed"], [[70280, 70280], "valid"], [[70281, 70281], "disallowed"], [[70282, 70285], "valid"], [[70286, 70286], "disallowed"], [[70287, 70301], "valid"], [[70302, 70302], "disallowed"], [[70303, 70312], "valid"], [[70313, 70313], "valid", [], "NV8"], [[70314, 70319], "disallowed"], [[70320, 70378], "valid"], [[70379, 70383], "disallowed"], [[70384, 70393], "valid"], [[70394, 70399], "disallowed"], [[70400, 70400], "valid"], [[70401, 70403], "valid"], [[70404, 70404], "disallowed"], [[70405, 70412], "valid"], [[70413, 70414], "disallowed"], [[70415, 70416], "valid"], [[70417, 70418], "disallowed"], [[70419, 70440], "valid"], [[70441, 70441], "disallowed"], [[70442, 70448], "valid"], [[70449, 70449], "disallowed"], [[70450, 70451], "valid"], [[70452, 70452], "disallowed"], [[70453, 70457], "valid"], [[70458, 70459], "disallowed"], [[70460, 70468], "valid"], [[70469, 70470], "disallowed"], [[70471, 70472], "valid"], [[70473, 70474], "disallowed"], [[70475, 70477], "valid"], [[70478, 70479], "disallowed"], [[70480, 70480], "valid"], [[70481, 70486], "disallowed"], [[70487, 70487], "valid"], [[70488, 70492], "disallowed"], [[70493, 70499], "valid"], [[70500, 70501], "disallowed"], [[70502, 70508], "valid"], [[70509, 70511], "disallowed"], [[70512, 70516], "valid"], [[70517, 70783], "disallowed"], [[70784, 70853], "valid"], [[70854, 70854], "valid", [], "NV8"], [[70855, 70855], "valid"], [[70856, 70863], "disallowed"], [[70864, 70873], "valid"], [[70874, 71039], "disallowed"], [[71040, 71093], "valid"], [[71094, 71095], "disallowed"], [[71096, 71104], "valid"], [[71105, 71113], "valid", [], "NV8"], [[71114, 71127], "valid", [], "NV8"], [[71128, 71133], "valid"], [[71134, 71167], "disallowed"], [[71168, 71232], "valid"], [[71233, 71235], "valid", [], "NV8"], [[71236, 71236], "valid"], [[71237, 71247], "disallowed"], [[71248, 71257], "valid"], [[71258, 71295], "disallowed"], [[71296, 71351], "valid"], [[71352, 71359], "disallowed"], [[71360, 71369], "valid"], [[71370, 71423], "disallowed"], [[71424, 71449], "valid"], [[71450, 71452], "disallowed"], [[71453, 71467], "valid"], [[71468, 71471], "disallowed"], [[71472, 71481], "valid"], [[71482, 71487], "valid", [], "NV8"], [[71488, 71839], "disallowed"], [[71840, 71840], "mapped", [71872]], [[71841, 71841], "mapped", [71873]], [[71842, 71842], "mapped", [71874]], [[71843, 71843], "mapped", [71875]], [[71844, 71844], "mapped", [71876]], [[71845, 71845], "mapped", [71877]], [[71846, 71846], "mapped", [71878]], [[71847, 71847], "mapped", [71879]], [[71848, 71848], "mapped", [71880]], [[71849, 71849], "mapped", [71881]], [[71850, 71850], "mapped", [71882]], [[71851, 71851], "mapped", [71883]], [[71852, 71852], "mapped", [71884]], [[71853, 71853], "mapped", [71885]], [[71854, 71854], "mapped", [71886]], [[71855, 71855], "mapped", [71887]], [[71856, 71856], "mapped", [71888]], [[71857, 71857], "mapped", [71889]], [[71858, 71858], "mapped", [71890]], [[71859, 71859], "mapped", [71891]], [[71860, 71860], "mapped", [71892]], [[71861, 71861], "mapped", [71893]], [[71862, 71862], "mapped", [71894]], [[71863, 71863], "mapped", [71895]], [[71864, 71864], "mapped", [71896]], [[71865, 71865], "mapped", [71897]], [[71866, 71866], "mapped", [71898]], [[71867, 71867], "mapped", [71899]], [[71868, 71868], "mapped", [71900]], [[71869, 71869], "mapped", [71901]], [[71870, 71870], "mapped", [71902]], [[71871, 71871], "mapped", [71903]], [[71872, 71913], "valid"], [[71914, 71922], "valid", [], "NV8"], [[71923, 71934], "disallowed"], [[71935, 71935], "valid"], [[71936, 72383], "disallowed"], [[72384, 72440], "valid"], [[72441, 73727], "disallowed"], [[73728, 74606], "valid"], [[74607, 74648], "valid"], [[74649, 74649], "valid"], [[74650, 74751], "disallowed"], [[74752, 74850], "valid", [], "NV8"], [[74851, 74862], "valid", [], "NV8"], [[74863, 74863], "disallowed"], [[74864, 74867], "valid", [], "NV8"], [[74868, 74868], "valid", [], "NV8"], [[74869, 74879], "disallowed"], [[74880, 75075], "valid"], [[75076, 77823], "disallowed"], [[77824, 78894], "valid"], [[78895, 82943], "disallowed"], [[82944, 83526], "valid"], [[83527, 92159], "disallowed"], [[92160, 92728], "valid"], [[92729, 92735], "disallowed"], [[92736, 92766], "valid"], [[92767, 92767], "disallowed"], [[92768, 92777], "valid"], [[92778, 92781], "disallowed"], [[92782, 92783], "valid", [], "NV8"], [[92784, 92879], "disallowed"], [[92880, 92909], "valid"], [[92910, 92911], "disallowed"], [[92912, 92916], "valid"], [[92917, 92917], "valid", [], "NV8"], [[92918, 92927], "disallowed"], [[92928, 92982], "valid"], [[92983, 92991], "valid", [], "NV8"], [[92992, 92995], "valid"], [[92996, 92997], "valid", [], "NV8"], [[92998, 93007], "disallowed"], [[93008, 93017], "valid"], [[93018, 93018], "disallowed"], [[93019, 93025], "valid", [], "NV8"], [[93026, 93026], "disallowed"], [[93027, 93047], "valid"], [[93048, 93052], "disallowed"], [[93053, 93071], "valid"], [[93072, 93951], "disallowed"], [[93952, 94020], "valid"], [[94021, 94031], "disallowed"], [[94032, 94078], "valid"], [[94079, 94094], "disallowed"], [[94095, 94111], "valid"], [[94112, 110591], "disallowed"], [[110592, 110593], "valid"], [[110594, 113663], "disallowed"], [[113664, 113770], "valid"], [[113771, 113775], "disallowed"], [[113776, 113788], "valid"], [[113789, 113791], "disallowed"], [[113792, 113800], "valid"], [[113801, 113807], "disallowed"], [[113808, 113817], "valid"], [[113818, 113819], "disallowed"], [[113820, 113820], "valid", [], "NV8"], [[113821, 113822], "valid"], [[113823, 113823], "valid", [], "NV8"], [[113824, 113827], "ignored"], [[113828, 118783], "disallowed"], [[118784, 119029], "valid", [], "NV8"], [[119030, 119039], "disallowed"], [[119040, 119078], "valid", [], "NV8"], [[119079, 119080], "disallowed"], [[119081, 119081], "valid", [], "NV8"], [[119082, 119133], "valid", [], "NV8"], [[119134, 119134], "mapped", [119127, 119141]], [[119135, 119135], "mapped", [119128, 119141]], [[119136, 119136], "mapped", [119128, 119141, 119150]], [[119137, 119137], "mapped", [119128, 119141, 119151]], [[119138, 119138], "mapped", [119128, 119141, 119152]], [[119139, 119139], "mapped", [119128, 119141, 119153]], [[119140, 119140], "mapped", [119128, 119141, 119154]], [[119141, 119154], "valid", [], "NV8"], [[119155, 119162], "disallowed"], [[119163, 119226], "valid", [], "NV8"], [[119227, 119227], "mapped", [119225, 119141]], [[119228, 119228], "mapped", [119226, 119141]], [[119229, 119229], "mapped", [119225, 119141, 119150]], [[119230, 119230], "mapped", [119226, 119141, 119150]], [[119231, 119231], "mapped", [119225, 119141, 119151]], [[119232, 119232], "mapped", [119226, 119141, 119151]], [[119233, 119261], "valid", [], "NV8"], [[119262, 119272], "valid", [], "NV8"], [[119273, 119295], "disallowed"], [[119296, 119365], "valid", [], "NV8"], [[119366, 119551], "disallowed"], [[119552, 119638], "valid", [], "NV8"], [[119639, 119647], "disallowed"], [[119648, 119665], "valid", [], "NV8"], [[119666, 119807], "disallowed"], [[119808, 119808], "mapped", [97]], [[119809, 119809], "mapped", [98]], [[119810, 119810], "mapped", [99]], [[119811, 119811], "mapped", [100]], [[119812, 119812], "mapped", [101]], [[119813, 119813], "mapped", [102]], [[119814, 119814], "mapped", [103]], [[119815, 119815], "mapped", [104]], [[119816, 119816], "mapped", [105]], [[119817, 119817], "mapped", [106]], [[119818, 119818], "mapped", [107]], [[119819, 119819], "mapped", [108]], [[119820, 119820], "mapped", [109]], [[119821, 119821], "mapped", [110]], [[119822, 119822], "mapped", [111]], [[119823, 119823], "mapped", [112]], [[119824, 119824], "mapped", [113]], [[119825, 119825], "mapped", [114]], [[119826, 119826], "mapped", [115]], [[119827, 119827], "mapped", [116]], [[119828, 119828], "mapped", [117]], [[119829, 119829], "mapped", [118]], [[119830, 119830], "mapped", [119]], [[119831, 119831], "mapped", [120]], [[119832, 119832], "mapped", [121]], [[119833, 119833], "mapped", [122]], [[119834, 119834], "mapped", [97]], [[119835, 119835], "mapped", [98]], [[119836, 119836], "mapped", [99]], [[119837, 119837], "mapped", [100]], [[119838, 119838], "mapped", [101]], [[119839, 119839], "mapped", [102]], [[119840, 119840], "mapped", [103]], [[119841, 119841], "mapped", [104]], [[119842, 119842], "mapped", [105]], [[119843, 119843], "mapped", [106]], [[119844, 119844], "mapped", [107]], [[119845, 119845], "mapped", [108]], [[119846, 119846], "mapped", [109]], [[119847, 119847], "mapped", [110]], [[119848, 119848], "mapped", [111]], [[119849, 119849], "mapped", [112]], [[119850, 119850], "mapped", [113]], [[119851, 119851], "mapped", [114]], [[119852, 119852], "mapped", [115]], [[119853, 119853], "mapped", [116]], [[119854, 119854], "mapped", [117]], [[119855, 119855], "mapped", [118]], [[119856, 119856], "mapped", [119]], [[119857, 119857], "mapped", [120]], [[119858, 119858], "mapped", [121]], [[119859, 119859], "mapped", [122]], [[119860, 119860], "mapped", [97]], [[119861, 119861], "mapped", [98]], [[119862, 119862], "mapped", [99]], [[119863, 119863], "mapped", [100]], [[119864, 119864], "mapped", [101]], [[119865, 119865], "mapped", [102]], [[119866, 119866], "mapped", [103]], [[119867, 119867], "mapped", [104]], [[119868, 119868], "mapped", [105]], [[119869, 119869], "mapped", [106]], [[119870, 119870], "mapped", [107]], [[119871, 119871], "mapped", [108]], [[119872, 119872], "mapped", [109]], [[119873, 119873], "mapped", [110]], [[119874, 119874], "mapped", [111]], [[119875, 119875], "mapped", [112]], [[119876, 119876], "mapped", [113]], [[119877, 119877], "mapped", [114]], [[119878, 119878], "mapped", [115]], [[119879, 119879], "mapped", [116]], [[119880, 119880], "mapped", [117]], [[119881, 119881], "mapped", [118]], [[119882, 119882], "mapped", [119]], [[119883, 119883], "mapped", [120]], [[119884, 119884], "mapped", [121]], [[119885, 119885], "mapped", [122]], [[119886, 119886], "mapped", [97]], [[119887, 119887], "mapped", [98]], [[119888, 119888], "mapped", [99]], [[119889, 119889], "mapped", [100]], [[119890, 119890], "mapped", [101]], [[119891, 119891], "mapped", [102]], [[119892, 119892], "mapped", [103]], [[119893, 119893], "disallowed"], [[119894, 119894], "mapped", [105]], [[119895, 119895], "mapped", [106]], [[119896, 119896], "mapped", [107]], [[119897, 119897], "mapped", [108]], [[119898, 119898], "mapped", [109]], [[119899, 119899], "mapped", [110]], [[119900, 119900], "mapped", [111]], [[119901, 119901], "mapped", [112]], [[119902, 119902], "mapped", [113]], [[119903, 119903], "mapped", [114]], [[119904, 119904], "mapped", [115]], [[119905, 119905], "mapped", [116]], [[119906, 119906], "mapped", [117]], [[119907, 119907], "mapped", [118]], [[119908, 119908], "mapped", [119]], [[119909, 119909], "mapped", [120]], [[119910, 119910], "mapped", [121]], [[119911, 119911], "mapped", [122]], [[119912, 119912], "mapped", [97]], [[119913, 119913], "mapped", [98]], [[119914, 119914], "mapped", [99]], [[119915, 119915], "mapped", [100]], [[119916, 119916], "mapped", [101]], [[119917, 119917], "mapped", [102]], [[119918, 119918], "mapped", [103]], [[119919, 119919], "mapped", [104]], [[119920, 119920], "mapped", [105]], [[119921, 119921], "mapped", [106]], [[119922, 119922], "mapped", [107]], [[119923, 119923], "mapped", [108]], [[119924, 119924], "mapped", [109]], [[119925, 119925], "mapped", [110]], [[119926, 119926], "mapped", [111]], [[119927, 119927], "mapped", [112]], [[119928, 119928], "mapped", [113]], [[119929, 119929], "mapped", [114]], [[119930, 119930], "mapped", [115]], [[119931, 119931], "mapped", [116]], [[119932, 119932], "mapped", [117]], [[119933, 119933], "mapped", [118]], [[119934, 119934], "mapped", [119]], [[119935, 119935], "mapped", [120]], [[119936, 119936], "mapped", [121]], [[119937, 119937], "mapped", [122]], [[119938, 119938], "mapped", [97]], [[119939, 119939], "mapped", [98]], [[119940, 119940], "mapped", [99]], [[119941, 119941], "mapped", [100]], [[119942, 119942], "mapped", [101]], [[119943, 119943], "mapped", [102]], [[119944, 119944], "mapped", [103]], [[119945, 119945], "mapped", [104]], [[119946, 119946], "mapped", [105]], [[119947, 119947], "mapped", [106]], [[119948, 119948], "mapped", [107]], [[119949, 119949], "mapped", [108]], [[119950, 119950], "mapped", [109]], [[119951, 119951], "mapped", [110]], [[119952, 119952], "mapped", [111]], [[119953, 119953], "mapped", [112]], [[119954, 119954], "mapped", [113]], [[119955, 119955], "mapped", [114]], [[119956, 119956], "mapped", [115]], [[119957, 119957], "mapped", [116]], [[119958, 119958], "mapped", [117]], [[119959, 119959], "mapped", [118]], [[119960, 119960], "mapped", [119]], [[119961, 119961], "mapped", [120]], [[119962, 119962], "mapped", [121]], [[119963, 119963], "mapped", [122]], [[119964, 119964], "mapped", [97]], [[119965, 119965], "disallowed"], [[119966, 119966], "mapped", [99]], [[119967, 119967], "mapped", [100]], [[119968, 119969], "disallowed"], [[119970, 119970], "mapped", [103]], [[119971, 119972], "disallowed"], [[119973, 119973], "mapped", [106]], [[119974, 119974], "mapped", [107]], [[119975, 119976], "disallowed"], [[119977, 119977], "mapped", [110]], [[119978, 119978], "mapped", [111]], [[119979, 119979], "mapped", [112]], [[119980, 119980], "mapped", [113]], [[119981, 119981], "disallowed"], [[119982, 119982], "mapped", [115]], [[119983, 119983], "mapped", [116]], [[119984, 119984], "mapped", [117]], [[119985, 119985], "mapped", [118]], [[119986, 119986], "mapped", [119]], [[119987, 119987], "mapped", [120]], [[119988, 119988], "mapped", [121]], [[119989, 119989], "mapped", [122]], [[119990, 119990], "mapped", [97]], [[119991, 119991], "mapped", [98]], [[119992, 119992], "mapped", [99]], [[119993, 119993], "mapped", [100]], [[119994, 119994], "disallowed"], [[119995, 119995], "mapped", [102]], [[119996, 119996], "disallowed"], [[119997, 119997], "mapped", [104]], [[119998, 119998], "mapped", [105]], [[119999, 119999], "mapped", [106]], [[12e4, 12e4], "mapped", [107]], [[120001, 120001], "mapped", [108]], [[120002, 120002], "mapped", [109]], [[120003, 120003], "mapped", [110]], [[120004, 120004], "disallowed"], [[120005, 120005], "mapped", [112]], [[120006, 120006], "mapped", [113]], [[120007, 120007], "mapped", [114]], [[120008, 120008], "mapped", [115]], [[120009, 120009], "mapped", [116]], [[120010, 120010], "mapped", [117]], [[120011, 120011], "mapped", [118]], [[120012, 120012], "mapped", [119]], [[120013, 120013], "mapped", [120]], [[120014, 120014], "mapped", [121]], [[120015, 120015], "mapped", [122]], [[120016, 120016], "mapped", [97]], [[120017, 120017], "mapped", [98]], [[120018, 120018], "mapped", [99]], [[120019, 120019], "mapped", [100]], [[120020, 120020], "mapped", [101]], [[120021, 120021], "mapped", [102]], [[120022, 120022], "mapped", [103]], [[120023, 120023], "mapped", [104]], [[120024, 120024], "mapped", [105]], [[120025, 120025], "mapped", [106]], [[120026, 120026], "mapped", [107]], [[120027, 120027], "mapped", [108]], [[120028, 120028], "mapped", [109]], [[120029, 120029], "mapped", [110]], [[120030, 120030], "mapped", [111]], [[120031, 120031], "mapped", [112]], [[120032, 120032], "mapped", [113]], [[120033, 120033], "mapped", [114]], [[120034, 120034], "mapped", [115]], [[120035, 120035], "mapped", [116]], [[120036, 120036], "mapped", [117]], [[120037, 120037], "mapped", [118]], [[120038, 120038], "mapped", [119]], [[120039, 120039], "mapped", [120]], [[120040, 120040], "mapped", [121]], [[120041, 120041], "mapped", [122]], [[120042, 120042], "mapped", [97]], [[120043, 120043], "mapped", [98]], [[120044, 120044], "mapped", [99]], [[120045, 120045], "mapped", [100]], [[120046, 120046], "mapped", [101]], [[120047, 120047], "mapped", [102]], [[120048, 120048], "mapped", [103]], [[120049, 120049], "mapped", [104]], [[120050, 120050], "mapped", [105]], [[120051, 120051], "mapped", [106]], [[120052, 120052], "mapped", [107]], [[120053, 120053], "mapped", [108]], [[120054, 120054], "mapped", [109]], [[120055, 120055], "mapped", [110]], [[120056, 120056], "mapped", [111]], [[120057, 120057], "mapped", [112]], [[120058, 120058], "mapped", [113]], [[120059, 120059], "mapped", [114]], [[120060, 120060], "mapped", [115]], [[120061, 120061], "mapped", [116]], [[120062, 120062], "mapped", [117]], [[120063, 120063], "mapped", [118]], [[120064, 120064], "mapped", [119]], [[120065, 120065], "mapped", [120]], [[120066, 120066], "mapped", [121]], [[120067, 120067], "mapped", [122]], [[120068, 120068], "mapped", [97]], [[120069, 120069], "mapped", [98]], [[120070, 120070], "disallowed"], [[120071, 120071], "mapped", [100]], [[120072, 120072], "mapped", [101]], [[120073, 120073], "mapped", [102]], [[120074, 120074], "mapped", [103]], [[120075, 120076], "disallowed"], [[120077, 120077], "mapped", [106]], [[120078, 120078], "mapped", [107]], [[120079, 120079], "mapped", [108]], [[120080, 120080], "mapped", [109]], [[120081, 120081], "mapped", [110]], [[120082, 120082], "mapped", [111]], [[120083, 120083], "mapped", [112]], [[120084, 120084], "mapped", [113]], [[120085, 120085], "disallowed"], [[120086, 120086], "mapped", [115]], [[120087, 120087], "mapped", [116]], [[120088, 120088], "mapped", [117]], [[120089, 120089], "mapped", [118]], [[120090, 120090], "mapped", [119]], [[120091, 120091], "mapped", [120]], [[120092, 120092], "mapped", [121]], [[120093, 120093], "disallowed"], [[120094, 120094], "mapped", [97]], [[120095, 120095], "mapped", [98]], [[120096, 120096], "mapped", [99]], [[120097, 120097], "mapped", [100]], [[120098, 120098], "mapped", [101]], [[120099, 120099], "mapped", [102]], [[120100, 120100], "mapped", [103]], [[120101, 120101], "mapped", [104]], [[120102, 120102], "mapped", [105]], [[120103, 120103], "mapped", [106]], [[120104, 120104], "mapped", [107]], [[120105, 120105], "mapped", [108]], [[120106, 120106], "mapped", [109]], [[120107, 120107], "mapped", [110]], [[120108, 120108], "mapped", [111]], [[120109, 120109], "mapped", [112]], [[120110, 120110], "mapped", [113]], [[120111, 120111], "mapped", [114]], [[120112, 120112], "mapped", [115]], [[120113, 120113], "mapped", [116]], [[120114, 120114], "mapped", [117]], [[120115, 120115], "mapped", [118]], [[120116, 120116], "mapped", [119]], [[120117, 120117], "mapped", [120]], [[120118, 120118], "mapped", [121]], [[120119, 120119], "mapped", [122]], [[120120, 120120], "mapped", [97]], [[120121, 120121], "mapped", [98]], [[120122, 120122], "disallowed"], [[120123, 120123], "mapped", [100]], [[120124, 120124], "mapped", [101]], [[120125, 120125], "mapped", [102]], [[120126, 120126], "mapped", [103]], [[120127, 120127], "disallowed"], [[120128, 120128], "mapped", [105]], [[120129, 120129], "mapped", [106]], [[120130, 120130], "mapped", [107]], [[120131, 120131], "mapped", [108]], [[120132, 120132], "mapped", [109]], [[120133, 120133], "disallowed"], [[120134, 120134], "mapped", [111]], [[120135, 120137], "disallowed"], [[120138, 120138], "mapped", [115]], [[120139, 120139], "mapped", [116]], [[120140, 120140], "mapped", [117]], [[120141, 120141], "mapped", [118]], [[120142, 120142], "mapped", [119]], [[120143, 120143], "mapped", [120]], [[120144, 120144], "mapped", [121]], [[120145, 120145], "disallowed"], [[120146, 120146], "mapped", [97]], [[120147, 120147], "mapped", [98]], [[120148, 120148], "mapped", [99]], [[120149, 120149], "mapped", [100]], [[120150, 120150], "mapped", [101]], [[120151, 120151], "mapped", [102]], [[120152, 120152], "mapped", [103]], [[120153, 120153], "mapped", [104]], [[120154, 120154], "mapped", [105]], [[120155, 120155], "mapped", [106]], [[120156, 120156], "mapped", [107]], [[120157, 120157], "mapped", [108]], [[120158, 120158], "mapped", [109]], [[120159, 120159], "mapped", [110]], [[120160, 120160], "mapped", [111]], [[120161, 120161], "mapped", [112]], [[120162, 120162], "mapped", [113]], [[120163, 120163], "mapped", [114]], [[120164, 120164], "mapped", [115]], [[120165, 120165], "mapped", [116]], [[120166, 120166], "mapped", [117]], [[120167, 120167], "mapped", [118]], [[120168, 120168], "mapped", [119]], [[120169, 120169], "mapped", [120]], [[120170, 120170], "mapped", [121]], [[120171, 120171], "mapped", [122]], [[120172, 120172], "mapped", [97]], [[120173, 120173], "mapped", [98]], [[120174, 120174], "mapped", [99]], [[120175, 120175], "mapped", [100]], [[120176, 120176], "mapped", [101]], [[120177, 120177], "mapped", [102]], [[120178, 120178], "mapped", [103]], [[120179, 120179], "mapped", [104]], [[120180, 120180], "mapped", [105]], [[120181, 120181], "mapped", [106]], [[120182, 120182], "mapped", [107]], [[120183, 120183], "mapped", [108]], [[120184, 120184], "mapped", [109]], [[120185, 120185], "mapped", [110]], [[120186, 120186], "mapped", [111]], [[120187, 120187], "mapped", [112]], [[120188, 120188], "mapped", [113]], [[120189, 120189], "mapped", [114]], [[120190, 120190], "mapped", [115]], [[120191, 120191], "mapped", [116]], [[120192, 120192], "mapped", [117]], [[120193, 120193], "mapped", [118]], [[120194, 120194], "mapped", [119]], [[120195, 120195], "mapped", [120]], [[120196, 120196], "mapped", [121]], [[120197, 120197], "mapped", [122]], [[120198, 120198], "mapped", [97]], [[120199, 120199], "mapped", [98]], [[120200, 120200], "mapped", [99]], [[120201, 120201], "mapped", [100]], [[120202, 120202], "mapped", [101]], [[120203, 120203], "mapped", [102]], [[120204, 120204], "mapped", [103]], [[120205, 120205], "mapped", [104]], [[120206, 120206], "mapped", [105]], [[120207, 120207], "mapped", [106]], [[120208, 120208], "mapped", [107]], [[120209, 120209], "mapped", [108]], [[120210, 120210], "mapped", [109]], [[120211, 120211], "mapped", [110]], [[120212, 120212], "mapped", [111]], [[120213, 120213], "mapped", [112]], [[120214, 120214], "mapped", [113]], [[120215, 120215], "mapped", [114]], [[120216, 120216], "mapped", [115]], [[120217, 120217], "mapped", [116]], [[120218, 120218], "mapped", [117]], [[120219, 120219], "mapped", [118]], [[120220, 120220], "mapped", [119]], [[120221, 120221], "mapped", [120]], [[120222, 120222], "mapped", [121]], [[120223, 120223], "mapped", [122]], [[120224, 120224], "mapped", [97]], [[120225, 120225], "mapped", [98]], [[120226, 120226], "mapped", [99]], [[120227, 120227], "mapped", [100]], [[120228, 120228], "mapped", [101]], [[120229, 120229], "mapped", [102]], [[120230, 120230], "mapped", [103]], [[120231, 120231], "mapped", [104]], [[120232, 120232], "mapped", [105]], [[120233, 120233], "mapped", [106]], [[120234, 120234], "mapped", [107]], [[120235, 120235], "mapped", [108]], [[120236, 120236], "mapped", [109]], [[120237, 120237], "mapped", [110]], [[120238, 120238], "mapped", [111]], [[120239, 120239], "mapped", [112]], [[120240, 120240], "mapped", [113]], [[120241, 120241], "mapped", [114]], [[120242, 120242], "mapped", [115]], [[120243, 120243], "mapped", [116]], [[120244, 120244], "mapped", [117]], [[120245, 120245], "mapped", [118]], [[120246, 120246], "mapped", [119]], [[120247, 120247], "mapped", [120]], [[120248, 120248], "mapped", [121]], [[120249, 120249], "mapped", [122]], [[120250, 120250], "mapped", [97]], [[120251, 120251], "mapped", [98]], [[120252, 120252], "mapped", [99]], [[120253, 120253], "mapped", [100]], [[120254, 120254], "mapped", [101]], [[120255, 120255], "mapped", [102]], [[120256, 120256], "mapped", [103]], [[120257, 120257], "mapped", [104]], [[120258, 120258], "mapped", [105]], [[120259, 120259], "mapped", [106]], [[120260, 120260], "mapped", [107]], [[120261, 120261], "mapped", [108]], [[120262, 120262], "mapped", [109]], [[120263, 120263], "mapped", [110]], [[120264, 120264], "mapped", [111]], [[120265, 120265], "mapped", [112]], [[120266, 120266], "mapped", [113]], [[120267, 120267], "mapped", [114]], [[120268, 120268], "mapped", [115]], [[120269, 120269], "mapped", [116]], [[120270, 120270], "mapped", [117]], [[120271, 120271], "mapped", [118]], [[120272, 120272], "mapped", [119]], [[120273, 120273], "mapped", [120]], [[120274, 120274], "mapped", [121]], [[120275, 120275], "mapped", [122]], [[120276, 120276], "mapped", [97]], [[120277, 120277], "mapped", [98]], [[120278, 120278], "mapped", [99]], [[120279, 120279], "mapped", [100]], [[120280, 120280], "mapped", [101]], [[120281, 120281], "mapped", [102]], [[120282, 120282], "mapped", [103]], [[120283, 120283], "mapped", [104]], [[120284, 120284], "mapped", [105]], [[120285, 120285], "mapped", [106]], [[120286, 120286], "mapped", [107]], [[120287, 120287], "mapped", [108]], [[120288, 120288], "mapped", [109]], [[120289, 120289], "mapped", [110]], [[120290, 120290], "mapped", [111]], [[120291, 120291], "mapped", [112]], [[120292, 120292], "mapped", [113]], [[120293, 120293], "mapped", [114]], [[120294, 120294], "mapped", [115]], [[120295, 120295], "mapped", [116]], [[120296, 120296], "mapped", [117]], [[120297, 120297], "mapped", [118]], [[120298, 120298], "mapped", [119]], [[120299, 120299], "mapped", [120]], [[120300, 120300], "mapped", [121]], [[120301, 120301], "mapped", [122]], [[120302, 120302], "mapped", [97]], [[120303, 120303], "mapped", [98]], [[120304, 120304], "mapped", [99]], [[120305, 120305], "mapped", [100]], [[120306, 120306], "mapped", [101]], [[120307, 120307], "mapped", [102]], [[120308, 120308], "mapped", [103]], [[120309, 120309], "mapped", [104]], [[120310, 120310], "mapped", [105]], [[120311, 120311], "mapped", [106]], [[120312, 120312], "mapped", [107]], [[120313, 120313], "mapped", [108]], [[120314, 120314], "mapped", [109]], [[120315, 120315], "mapped", [110]], [[120316, 120316], "mapped", [111]], [[120317, 120317], "mapped", [112]], [[120318, 120318], "mapped", [113]], [[120319, 120319], "mapped", [114]], [[120320, 120320], "mapped", [115]], [[120321, 120321], "mapped", [116]], [[120322, 120322], "mapped", [117]], [[120323, 120323], "mapped", [118]], [[120324, 120324], "mapped", [119]], [[120325, 120325], "mapped", [120]], [[120326, 120326], "mapped", [121]], [[120327, 120327], "mapped", [122]], [[120328, 120328], "mapped", [97]], [[120329, 120329], "mapped", [98]], [[120330, 120330], "mapped", [99]], [[120331, 120331], "mapped", [100]], [[120332, 120332], "mapped", [101]], [[120333, 120333], "mapped", [102]], [[120334, 120334], "mapped", [103]], [[120335, 120335], "mapped", [104]], [[120336, 120336], "mapped", [105]], [[120337, 120337], "mapped", [106]], [[120338, 120338], "mapped", [107]], [[120339, 120339], "mapped", [108]], [[120340, 120340], "mapped", [109]], [[120341, 120341], "mapped", [110]], [[120342, 120342], "mapped", [111]], [[120343, 120343], "mapped", [112]], [[120344, 120344], "mapped", [113]], [[120345, 120345], "mapped", [114]], [[120346, 120346], "mapped", [115]], [[120347, 120347], "mapped", [116]], [[120348, 120348], "mapped", [117]], [[120349, 120349], "mapped", [118]], [[120350, 120350], "mapped", [119]], [[120351, 120351], "mapped", [120]], [[120352, 120352], "mapped", [121]], [[120353, 120353], "mapped", [122]], [[120354, 120354], "mapped", [97]], [[120355, 120355], "mapped", [98]], [[120356, 120356], "mapped", [99]], [[120357, 120357], "mapped", [100]], [[120358, 120358], "mapped", [101]], [[120359, 120359], "mapped", [102]], [[120360, 120360], "mapped", [103]], [[120361, 120361], "mapped", [104]], [[120362, 120362], "mapped", [105]], [[120363, 120363], "mapped", [106]], [[120364, 120364], "mapped", [107]], [[120365, 120365], "mapped", [108]], [[120366, 120366], "mapped", [109]], [[120367, 120367], "mapped", [110]], [[120368, 120368], "mapped", [111]], [[120369, 120369], "mapped", [112]], [[120370, 120370], "mapped", [113]], [[120371, 120371], "mapped", [114]], [[120372, 120372], "mapped", [115]], [[120373, 120373], "mapped", [116]], [[120374, 120374], "mapped", [117]], [[120375, 120375], "mapped", [118]], [[120376, 120376], "mapped", [119]], [[120377, 120377], "mapped", [120]], [[120378, 120378], "mapped", [121]], [[120379, 120379], "mapped", [122]], [[120380, 120380], "mapped", [97]], [[120381, 120381], "mapped", [98]], [[120382, 120382], "mapped", [99]], [[120383, 120383], "mapped", [100]], [[120384, 120384], "mapped", [101]], [[120385, 120385], "mapped", [102]], [[120386, 120386], "mapped", [103]], [[120387, 120387], "mapped", [104]], [[120388, 120388], "mapped", [105]], [[120389, 120389], "mapped", [106]], [[120390, 120390], "mapped", [107]], [[120391, 120391], "mapped", [108]], [[120392, 120392], "mapped", [109]], [[120393, 120393], "mapped", [110]], [[120394, 120394], "mapped", [111]], [[120395, 120395], "mapped", [112]], [[120396, 120396], "mapped", [113]], [[120397, 120397], "mapped", [114]], [[120398, 120398], "mapped", [115]], [[120399, 120399], "mapped", [116]], [[120400, 120400], "mapped", [117]], [[120401, 120401], "mapped", [118]], [[120402, 120402], "mapped", [119]], [[120403, 120403], "mapped", [120]], [[120404, 120404], "mapped", [121]], [[120405, 120405], "mapped", [122]], [[120406, 120406], "mapped", [97]], [[120407, 120407], "mapped", [98]], [[120408, 120408], "mapped", [99]], [[120409, 120409], "mapped", [100]], [[120410, 120410], "mapped", [101]], [[120411, 120411], "mapped", [102]], [[120412, 120412], "mapped", [103]], [[120413, 120413], "mapped", [104]], [[120414, 120414], "mapped", [105]], [[120415, 120415], "mapped", [106]], [[120416, 120416], "mapped", [107]], [[120417, 120417], "mapped", [108]], [[120418, 120418], "mapped", [109]], [[120419, 120419], "mapped", [110]], [[120420, 120420], "mapped", [111]], [[120421, 120421], "mapped", [112]], [[120422, 120422], "mapped", [113]], [[120423, 120423], "mapped", [114]], [[120424, 120424], "mapped", [115]], [[120425, 120425], "mapped", [116]], [[120426, 120426], "mapped", [117]], [[120427, 120427], "mapped", [118]], [[120428, 120428], "mapped", [119]], [[120429, 120429], "mapped", [120]], [[120430, 120430], "mapped", [121]], [[120431, 120431], "mapped", [122]], [[120432, 120432], "mapped", [97]], [[120433, 120433], "mapped", [98]], [[120434, 120434], "mapped", [99]], [[120435, 120435], "mapped", [100]], [[120436, 120436], "mapped", [101]], [[120437, 120437], "mapped", [102]], [[120438, 120438], "mapped", [103]], [[120439, 120439], "mapped", [104]], [[120440, 120440], "mapped", [105]], [[120441, 120441], "mapped", [106]], [[120442, 120442], "mapped", [107]], [[120443, 120443], "mapped", [108]], [[120444, 120444], "mapped", [109]], [[120445, 120445], "mapped", [110]], [[120446, 120446], "mapped", [111]], [[120447, 120447], "mapped", [112]], [[120448, 120448], "mapped", [113]], [[120449, 120449], "mapped", [114]], [[120450, 120450], "mapped", [115]], [[120451, 120451], "mapped", [116]], [[120452, 120452], "mapped", [117]], [[120453, 120453], "mapped", [118]], [[120454, 120454], "mapped", [119]], [[120455, 120455], "mapped", [120]], [[120456, 120456], "mapped", [121]], [[120457, 120457], "mapped", [122]], [[120458, 120458], "mapped", [97]], [[120459, 120459], "mapped", [98]], [[120460, 120460], "mapped", [99]], [[120461, 120461], "mapped", [100]], [[120462, 120462], "mapped", [101]], [[120463, 120463], "mapped", [102]], [[120464, 120464], "mapped", [103]], [[120465, 120465], "mapped", [104]], [[120466, 120466], "mapped", [105]], [[120467, 120467], "mapped", [106]], [[120468, 120468], "mapped", [107]], [[120469, 120469], "mapped", [108]], [[120470, 120470], "mapped", [109]], [[120471, 120471], "mapped", [110]], [[120472, 120472], "mapped", [111]], [[120473, 120473], "mapped", [112]], [[120474, 120474], "mapped", [113]], [[120475, 120475], "mapped", [114]], [[120476, 120476], "mapped", [115]], [[120477, 120477], "mapped", [116]], [[120478, 120478], "mapped", [117]], [[120479, 120479], "mapped", [118]], [[120480, 120480], "mapped", [119]], [[120481, 120481], "mapped", [120]], [[120482, 120482], "mapped", [121]], [[120483, 120483], "mapped", [122]], [[120484, 120484], "mapped", [305]], [[120485, 120485], "mapped", [567]], [[120486, 120487], "disallowed"], [[120488, 120488], "mapped", [945]], [[120489, 120489], "mapped", [946]], [[120490, 120490], "mapped", [947]], [[120491, 120491], "mapped", [948]], [[120492, 120492], "mapped", [949]], [[120493, 120493], "mapped", [950]], [[120494, 120494], "mapped", [951]], [[120495, 120495], "mapped", [952]], [[120496, 120496], "mapped", [953]], [[120497, 120497], "mapped", [954]], [[120498, 120498], "mapped", [955]], [[120499, 120499], "mapped", [956]], [[120500, 120500], "mapped", [957]], [[120501, 120501], "mapped", [958]], [[120502, 120502], "mapped", [959]], [[120503, 120503], "mapped", [960]], [[120504, 120504], "mapped", [961]], [[120505, 120505], "mapped", [952]], [[120506, 120506], "mapped", [963]], [[120507, 120507], "mapped", [964]], [[120508, 120508], "mapped", [965]], [[120509, 120509], "mapped", [966]], [[120510, 120510], "mapped", [967]], [[120511, 120511], "mapped", [968]], [[120512, 120512], "mapped", [969]], [[120513, 120513], "mapped", [8711]], [[120514, 120514], "mapped", [945]], [[120515, 120515], "mapped", [946]], [[120516, 120516], "mapped", [947]], [[120517, 120517], "mapped", [948]], [[120518, 120518], "mapped", [949]], [[120519, 120519], "mapped", [950]], [[120520, 120520], "mapped", [951]], [[120521, 120521], "mapped", [952]], [[120522, 120522], "mapped", [953]], [[120523, 120523], "mapped", [954]], [[120524, 120524], "mapped", [955]], [[120525, 120525], "mapped", [956]], [[120526, 120526], "mapped", [957]], [[120527, 120527], "mapped", [958]], [[120528, 120528], "mapped", [959]], [[120529, 120529], "mapped", [960]], [[120530, 120530], "mapped", [961]], [[120531, 120532], "mapped", [963]], [[120533, 120533], "mapped", [964]], [[120534, 120534], "mapped", [965]], [[120535, 120535], "mapped", [966]], [[120536, 120536], "mapped", [967]], [[120537, 120537], "mapped", [968]], [[120538, 120538], "mapped", [969]], [[120539, 120539], "mapped", [8706]], [[120540, 120540], "mapped", [949]], [[120541, 120541], "mapped", [952]], [[120542, 120542], "mapped", [954]], [[120543, 120543], "mapped", [966]], [[120544, 120544], "mapped", [961]], [[120545, 120545], "mapped", [960]], [[120546, 120546], "mapped", [945]], [[120547, 120547], "mapped", [946]], [[120548, 120548], "mapped", [947]], [[120549, 120549], "mapped", [948]], [[120550, 120550], "mapped", [949]], [[120551, 120551], "mapped", [950]], [[120552, 120552], "mapped", [951]], [[120553, 120553], "mapped", [952]], [[120554, 120554], "mapped", [953]], [[120555, 120555], "mapped", [954]], [[120556, 120556], "mapped", [955]], [[120557, 120557], "mapped", [956]], [[120558, 120558], "mapped", [957]], [[120559, 120559], "mapped", [958]], [[120560, 120560], "mapped", [959]], [[120561, 120561], "mapped", [960]], [[120562, 120562], "mapped", [961]], [[120563, 120563], "mapped", [952]], [[120564, 120564], "mapped", [963]], [[120565, 120565], "mapped", [964]], [[120566, 120566], "mapped", [965]], [[120567, 120567], "mapped", [966]], [[120568, 120568], "mapped", [967]], [[120569, 120569], "mapped", [968]], [[120570, 120570], "mapped", [969]], [[120571, 120571], "mapped", [8711]], [[120572, 120572], "mapped", [945]], [[120573, 120573], "mapped", [946]], [[120574, 120574], "mapped", [947]], [[120575, 120575], "mapped", [948]], [[120576, 120576], "mapped", [949]], [[120577, 120577], "mapped", [950]], [[120578, 120578], "mapped", [951]], [[120579, 120579], "mapped", [952]], [[120580, 120580], "mapped", [953]], [[120581, 120581], "mapped", [954]], [[120582, 120582], "mapped", [955]], [[120583, 120583], "mapped", [956]], [[120584, 120584], "mapped", [957]], [[120585, 120585], "mapped", [958]], [[120586, 120586], "mapped", [959]], [[120587, 120587], "mapped", [960]], [[120588, 120588], "mapped", [961]], [[120589, 120590], "mapped", [963]], [[120591, 120591], "mapped", [964]], [[120592, 120592], "mapped", [965]], [[120593, 120593], "mapped", [966]], [[120594, 120594], "mapped", [967]], [[120595, 120595], "mapped", [968]], [[120596, 120596], "mapped", [969]], [[120597, 120597], "mapped", [8706]], [[120598, 120598], "mapped", [949]], [[120599, 120599], "mapped", [952]], [[120600, 120600], "mapped", [954]], [[120601, 120601], "mapped", [966]], [[120602, 120602], "mapped", [961]], [[120603, 120603], "mapped", [960]], [[120604, 120604], "mapped", [945]], [[120605, 120605], "mapped", [946]], [[120606, 120606], "mapped", [947]], [[120607, 120607], "mapped", [948]], [[120608, 120608], "mapped", [949]], [[120609, 120609], "mapped", [950]], [[120610, 120610], "mapped", [951]], [[120611, 120611], "mapped", [952]], [[120612, 120612], "mapped", [953]], [[120613, 120613], "mapped", [954]], [[120614, 120614], "mapped", [955]], [[120615, 120615], "mapped", [956]], [[120616, 120616], "mapped", [957]], [[120617, 120617], "mapped", [958]], [[120618, 120618], "mapped", [959]], [[120619, 120619], "mapped", [960]], [[120620, 120620], "mapped", [961]], [[120621, 120621], "mapped", [952]], [[120622, 120622], "mapped", [963]], [[120623, 120623], "mapped", [964]], [[120624, 120624], "mapped", [965]], [[120625, 120625], "mapped", [966]], [[120626, 120626], "mapped", [967]], [[120627, 120627], "mapped", [968]], [[120628, 120628], "mapped", [969]], [[120629, 120629], "mapped", [8711]], [[120630, 120630], "mapped", [945]], [[120631, 120631], "mapped", [946]], [[120632, 120632], "mapped", [947]], [[120633, 120633], "mapped", [948]], [[120634, 120634], "mapped", [949]], [[120635, 120635], "mapped", [950]], [[120636, 120636], "mapped", [951]], [[120637, 120637], "mapped", [952]], [[120638, 120638], "mapped", [953]], [[120639, 120639], "mapped", [954]], [[120640, 120640], "mapped", [955]], [[120641, 120641], "mapped", [956]], [[120642, 120642], "mapped", [957]], [[120643, 120643], "mapped", [958]], [[120644, 120644], "mapped", [959]], [[120645, 120645], "mapped", [960]], [[120646, 120646], "mapped", [961]], [[120647, 120648], "mapped", [963]], [[120649, 120649], "mapped", [964]], [[120650, 120650], "mapped", [965]], [[120651, 120651], "mapped", [966]], [[120652, 120652], "mapped", [967]], [[120653, 120653], "mapped", [968]], [[120654, 120654], "mapped", [969]], [[120655, 120655], "mapped", [8706]], [[120656, 120656], "mapped", [949]], [[120657, 120657], "mapped", [952]], [[120658, 120658], "mapped", [954]], [[120659, 120659], "mapped", [966]], [[120660, 120660], "mapped", [961]], [[120661, 120661], "mapped", [960]], [[120662, 120662], "mapped", [945]], [[120663, 120663], "mapped", [946]], [[120664, 120664], "mapped", [947]], [[120665, 120665], "mapped", [948]], [[120666, 120666], "mapped", [949]], [[120667, 120667], "mapped", [950]], [[120668, 120668], "mapped", [951]], [[120669, 120669], "mapped", [952]], [[120670, 120670], "mapped", [953]], [[120671, 120671], "mapped", [954]], [[120672, 120672], "mapped", [955]], [[120673, 120673], "mapped", [956]], [[120674, 120674], "mapped", [957]], [[120675, 120675], "mapped", [958]], [[120676, 120676], "mapped", [959]], [[120677, 120677], "mapped", [960]], [[120678, 120678], "mapped", [961]], [[120679, 120679], "mapped", [952]], [[120680, 120680], "mapped", [963]], [[120681, 120681], "mapped", [964]], [[120682, 120682], "mapped", [965]], [[120683, 120683], "mapped", [966]], [[120684, 120684], "mapped", [967]], [[120685, 120685], "mapped", [968]], [[120686, 120686], "mapped", [969]], [[120687, 120687], "mapped", [8711]], [[120688, 120688], "mapped", [945]], [[120689, 120689], "mapped", [946]], [[120690, 120690], "mapped", [947]], [[120691, 120691], "mapped", [948]], [[120692, 120692], "mapped", [949]], [[120693, 120693], "mapped", [950]], [[120694, 120694], "mapped", [951]], [[120695, 120695], "mapped", [952]], [[120696, 120696], "mapped", [953]], [[120697, 120697], "mapped", [954]], [[120698, 120698], "mapped", [955]], [[120699, 120699], "mapped", [956]], [[120700, 120700], "mapped", [957]], [[120701, 120701], "mapped", [958]], [[120702, 120702], "mapped", [959]], [[120703, 120703], "mapped", [960]], [[120704, 120704], "mapped", [961]], [[120705, 120706], "mapped", [963]], [[120707, 120707], "mapped", [964]], [[120708, 120708], "mapped", [965]], [[120709, 120709], "mapped", [966]], [[120710, 120710], "mapped", [967]], [[120711, 120711], "mapped", [968]], [[120712, 120712], "mapped", [969]], [[120713, 120713], "mapped", [8706]], [[120714, 120714], "mapped", [949]], [[120715, 120715], "mapped", [952]], [[120716, 120716], "mapped", [954]], [[120717, 120717], "mapped", [966]], [[120718, 120718], "mapped", [961]], [[120719, 120719], "mapped", [960]], [[120720, 120720], "mapped", [945]], [[120721, 120721], "mapped", [946]], [[120722, 120722], "mapped", [947]], [[120723, 120723], "mapped", [948]], [[120724, 120724], "mapped", [949]], [[120725, 120725], "mapped", [950]], [[120726, 120726], "mapped", [951]], [[120727, 120727], "mapped", [952]], [[120728, 120728], "mapped", [953]], [[120729, 120729], "mapped", [954]], [[120730, 120730], "mapped", [955]], [[120731, 120731], "mapped", [956]], [[120732, 120732], "mapped", [957]], [[120733, 120733], "mapped", [958]], [[120734, 120734], "mapped", [959]], [[120735, 120735], "mapped", [960]], [[120736, 120736], "mapped", [961]], [[120737, 120737], "mapped", [952]], [[120738, 120738], "mapped", [963]], [[120739, 120739], "mapped", [964]], [[120740, 120740], "mapped", [965]], [[120741, 120741], "mapped", [966]], [[120742, 120742], "mapped", [967]], [[120743, 120743], "mapped", [968]], [[120744, 120744], "mapped", [969]], [[120745, 120745], "mapped", [8711]], [[120746, 120746], "mapped", [945]], [[120747, 120747], "mapped", [946]], [[120748, 120748], "mapped", [947]], [[120749, 120749], "mapped", [948]], [[120750, 120750], "mapped", [949]], [[120751, 120751], "mapped", [950]], [[120752, 120752], "mapped", [951]], [[120753, 120753], "mapped", [952]], [[120754, 120754], "mapped", [953]], [[120755, 120755], "mapped", [954]], [[120756, 120756], "mapped", [955]], [[120757, 120757], "mapped", [956]], [[120758, 120758], "mapped", [957]], [[120759, 120759], "mapped", [958]], [[120760, 120760], "mapped", [959]], [[120761, 120761], "mapped", [960]], [[120762, 120762], "mapped", [961]], [[120763, 120764], "mapped", [963]], [[120765, 120765], "mapped", [964]], [[120766, 120766], "mapped", [965]], [[120767, 120767], "mapped", [966]], [[120768, 120768], "mapped", [967]], [[120769, 120769], "mapped", [968]], [[120770, 120770], "mapped", [969]], [[120771, 120771], "mapped", [8706]], [[120772, 120772], "mapped", [949]], [[120773, 120773], "mapped", [952]], [[120774, 120774], "mapped", [954]], [[120775, 120775], "mapped", [966]], [[120776, 120776], "mapped", [961]], [[120777, 120777], "mapped", [960]], [[120778, 120779], "mapped", [989]], [[120780, 120781], "disallowed"], [[120782, 120782], "mapped", [48]], [[120783, 120783], "mapped", [49]], [[120784, 120784], "mapped", [50]], [[120785, 120785], "mapped", [51]], [[120786, 120786], "mapped", [52]], [[120787, 120787], "mapped", [53]], [[120788, 120788], "mapped", [54]], [[120789, 120789], "mapped", [55]], [[120790, 120790], "mapped", [56]], [[120791, 120791], "mapped", [57]], [[120792, 120792], "mapped", [48]], [[120793, 120793], "mapped", [49]], [[120794, 120794], "mapped", [50]], [[120795, 120795], "mapped", [51]], [[120796, 120796], "mapped", [52]], [[120797, 120797], "mapped", [53]], [[120798, 120798], "mapped", [54]], [[120799, 120799], "mapped", [55]], [[120800, 120800], "mapped", [56]], [[120801, 120801], "mapped", [57]], [[120802, 120802], "mapped", [48]], [[120803, 120803], "mapped", [49]], [[120804, 120804], "mapped", [50]], [[120805, 120805], "mapped", [51]], [[120806, 120806], "mapped", [52]], [[120807, 120807], "mapped", [53]], [[120808, 120808], "mapped", [54]], [[120809, 120809], "mapped", [55]], [[120810, 120810], "mapped", [56]], [[120811, 120811], "mapped", [57]], [[120812, 120812], "mapped", [48]], [[120813, 120813], "mapped", [49]], [[120814, 120814], "mapped", [50]], [[120815, 120815], "mapped", [51]], [[120816, 120816], "mapped", [52]], [[120817, 120817], "mapped", [53]], [[120818, 120818], "mapped", [54]], [[120819, 120819], "mapped", [55]], [[120820, 120820], "mapped", [56]], [[120821, 120821], "mapped", [57]], [[120822, 120822], "mapped", [48]], [[120823, 120823], "mapped", [49]], [[120824, 120824], "mapped", [50]], [[120825, 120825], "mapped", [51]], [[120826, 120826], "mapped", [52]], [[120827, 120827], "mapped", [53]], [[120828, 120828], "mapped", [54]], [[120829, 120829], "mapped", [55]], [[120830, 120830], "mapped", [56]], [[120831, 120831], "mapped", [57]], [[120832, 121343], "valid", [], "NV8"], [[121344, 121398], "valid"], [[121399, 121402], "valid", [], "NV8"], [[121403, 121452], "valid"], [[121453, 121460], "valid", [], "NV8"], [[121461, 121461], "valid"], [[121462, 121475], "valid", [], "NV8"], [[121476, 121476], "valid"], [[121477, 121483], "valid", [], "NV8"], [[121484, 121498], "disallowed"], [[121499, 121503], "valid"], [[121504, 121504], "disallowed"], [[121505, 121519], "valid"], [[121520, 124927], "disallowed"], [[124928, 125124], "valid"], [[125125, 125126], "disallowed"], [[125127, 125135], "valid", [], "NV8"], [[125136, 125142], "valid"], [[125143, 126463], "disallowed"], [[126464, 126464], "mapped", [1575]], [[126465, 126465], "mapped", [1576]], [[126466, 126466], "mapped", [1580]], [[126467, 126467], "mapped", [1583]], [[126468, 126468], "disallowed"], [[126469, 126469], "mapped", [1608]], [[126470, 126470], "mapped", [1586]], [[126471, 126471], "mapped", [1581]], [[126472, 126472], "mapped", [1591]], [[126473, 126473], "mapped", [1610]], [[126474, 126474], "mapped", [1603]], [[126475, 126475], "mapped", [1604]], [[126476, 126476], "mapped", [1605]], [[126477, 126477], "mapped", [1606]], [[126478, 126478], "mapped", [1587]], [[126479, 126479], "mapped", [1593]], [[126480, 126480], "mapped", [1601]], [[126481, 126481], "mapped", [1589]], [[126482, 126482], "mapped", [1602]], [[126483, 126483], "mapped", [1585]], [[126484, 126484], "mapped", [1588]], [[126485, 126485], "mapped", [1578]], [[126486, 126486], "mapped", [1579]], [[126487, 126487], "mapped", [1582]], [[126488, 126488], "mapped", [1584]], [[126489, 126489], "mapped", [1590]], [[126490, 126490], "mapped", [1592]], [[126491, 126491], "mapped", [1594]], [[126492, 126492], "mapped", [1646]], [[126493, 126493], "mapped", [1722]], [[126494, 126494], "mapped", [1697]], [[126495, 126495], "mapped", [1647]], [[126496, 126496], "disallowed"], [[126497, 126497], "mapped", [1576]], [[126498, 126498], "mapped", [1580]], [[126499, 126499], "disallowed"], [[126500, 126500], "mapped", [1607]], [[126501, 126502], "disallowed"], [[126503, 126503], "mapped", [1581]], [[126504, 126504], "disallowed"], [[126505, 126505], "mapped", [1610]], [[126506, 126506], "mapped", [1603]], [[126507, 126507], "mapped", [1604]], [[126508, 126508], "mapped", [1605]], [[126509, 126509], "mapped", [1606]], [[126510, 126510], "mapped", [1587]], [[126511, 126511], "mapped", [1593]], [[126512, 126512], "mapped", [1601]], [[126513, 126513], "mapped", [1589]], [[126514, 126514], "mapped", [1602]], [[126515, 126515], "disallowed"], [[126516, 126516], "mapped", [1588]], [[126517, 126517], "mapped", [1578]], [[126518, 126518], "mapped", [1579]], [[126519, 126519], "mapped", [1582]], [[126520, 126520], "disallowed"], [[126521, 126521], "mapped", [1590]], [[126522, 126522], "disallowed"], [[126523, 126523], "mapped", [1594]], [[126524, 126529], "disallowed"], [[126530, 126530], "mapped", [1580]], [[126531, 126534], "disallowed"], [[126535, 126535], "mapped", [1581]], [[126536, 126536], "disallowed"], [[126537, 126537], "mapped", [1610]], [[126538, 126538], "disallowed"], [[126539, 126539], "mapped", [1604]], [[126540, 126540], "disallowed"], [[126541, 126541], "mapped", [1606]], [[126542, 126542], "mapped", [1587]], [[126543, 126543], "mapped", [1593]], [[126544, 126544], "disallowed"], [[126545, 126545], "mapped", [1589]], [[126546, 126546], "mapped", [1602]], [[126547, 126547], "disallowed"], [[126548, 126548], "mapped", [1588]], [[126549, 126550], "disallowed"], [[126551, 126551], "mapped", [1582]], [[126552, 126552], "disallowed"], [[126553, 126553], "mapped", [1590]], [[126554, 126554], "disallowed"], [[126555, 126555], "mapped", [1594]], [[126556, 126556], "disallowed"], [[126557, 126557], "mapped", [1722]], [[126558, 126558], "disallowed"], [[126559, 126559], "mapped", [1647]], [[126560, 126560], "disallowed"], [[126561, 126561], "mapped", [1576]], [[126562, 126562], "mapped", [1580]], [[126563, 126563], "disallowed"], [[126564, 126564], "mapped", [1607]], [[126565, 126566], "disallowed"], [[126567, 126567], "mapped", [1581]], [[126568, 126568], "mapped", [1591]], [[126569, 126569], "mapped", [1610]], [[126570, 126570], "mapped", [1603]], [[126571, 126571], "disallowed"], [[126572, 126572], "mapped", [1605]], [[126573, 126573], "mapped", [1606]], [[126574, 126574], "mapped", [1587]], [[126575, 126575], "mapped", [1593]], [[126576, 126576], "mapped", [1601]], [[126577, 126577], "mapped", [1589]], [[126578, 126578], "mapped", [1602]], [[126579, 126579], "disallowed"], [[126580, 126580], "mapped", [1588]], [[126581, 126581], "mapped", [1578]], [[126582, 126582], "mapped", [1579]], [[126583, 126583], "mapped", [1582]], [[126584, 126584], "disallowed"], [[126585, 126585], "mapped", [1590]], [[126586, 126586], "mapped", [1592]], [[126587, 126587], "mapped", [1594]], [[126588, 126588], "mapped", [1646]], [[126589, 126589], "disallowed"], [[126590, 126590], "mapped", [1697]], [[126591, 126591], "disallowed"], [[126592, 126592], "mapped", [1575]], [[126593, 126593], "mapped", [1576]], [[126594, 126594], "mapped", [1580]], [[126595, 126595], "mapped", [1583]], [[126596, 126596], "mapped", [1607]], [[126597, 126597], "mapped", [1608]], [[126598, 126598], "mapped", [1586]], [[126599, 126599], "mapped", [1581]], [[126600, 126600], "mapped", [1591]], [[126601, 126601], "mapped", [1610]], [[126602, 126602], "disallowed"], [[126603, 126603], "mapped", [1604]], [[126604, 126604], "mapped", [1605]], [[126605, 126605], "mapped", [1606]], [[126606, 126606], "mapped", [1587]], [[126607, 126607], "mapped", [1593]], [[126608, 126608], "mapped", [1601]], [[126609, 126609], "mapped", [1589]], [[126610, 126610], "mapped", [1602]], [[126611, 126611], "mapped", [1585]], [[126612, 126612], "mapped", [1588]], [[126613, 126613], "mapped", [1578]], [[126614, 126614], "mapped", [1579]], [[126615, 126615], "mapped", [1582]], [[126616, 126616], "mapped", [1584]], [[126617, 126617], "mapped", [1590]], [[126618, 126618], "mapped", [1592]], [[126619, 126619], "mapped", [1594]], [[126620, 126624], "disallowed"], [[126625, 126625], "mapped", [1576]], [[126626, 126626], "mapped", [1580]], [[126627, 126627], "mapped", [1583]], [[126628, 126628], "disallowed"], [[126629, 126629], "mapped", [1608]], [[126630, 126630], "mapped", [1586]], [[126631, 126631], "mapped", [1581]], [[126632, 126632], "mapped", [1591]], [[126633, 126633], "mapped", [1610]], [[126634, 126634], "disallowed"], [[126635, 126635], "mapped", [1604]], [[126636, 126636], "mapped", [1605]], [[126637, 126637], "mapped", [1606]], [[126638, 126638], "mapped", [1587]], [[126639, 126639], "mapped", [1593]], [[126640, 126640], "mapped", [1601]], [[126641, 126641], "mapped", [1589]], [[126642, 126642], "mapped", [1602]], [[126643, 126643], "mapped", [1585]], [[126644, 126644], "mapped", [1588]], [[126645, 126645], "mapped", [1578]], [[126646, 126646], "mapped", [1579]], [[126647, 126647], "mapped", [1582]], [[126648, 126648], "mapped", [1584]], [[126649, 126649], "mapped", [1590]], [[126650, 126650], "mapped", [1592]], [[126651, 126651], "mapped", [1594]], [[126652, 126703], "disallowed"], [[126704, 126705], "valid", [], "NV8"], [[126706, 126975], "disallowed"], [[126976, 127019], "valid", [], "NV8"], [[127020, 127023], "disallowed"], [[127024, 127123], "valid", [], "NV8"], [[127124, 127135], "disallowed"], [[127136, 127150], "valid", [], "NV8"], [[127151, 127152], "disallowed"], [[127153, 127166], "valid", [], "NV8"], [[127167, 127167], "valid", [], "NV8"], [[127168, 127168], "disallowed"], [[127169, 127183], "valid", [], "NV8"], [[127184, 127184], "disallowed"], [[127185, 127199], "valid", [], "NV8"], [[127200, 127221], "valid", [], "NV8"], [[127222, 127231], "disallowed"], [[127232, 127232], "disallowed"], [[127233, 127233], "disallowed_STD3_mapped", [48, 44]], [[127234, 127234], "disallowed_STD3_mapped", [49, 44]], [[127235, 127235], "disallowed_STD3_mapped", [50, 44]], [[127236, 127236], "disallowed_STD3_mapped", [51, 44]], [[127237, 127237], "disallowed_STD3_mapped", [52, 44]], [[127238, 127238], "disallowed_STD3_mapped", [53, 44]], [[127239, 127239], "disallowed_STD3_mapped", [54, 44]], [[127240, 127240], "disallowed_STD3_mapped", [55, 44]], [[127241, 127241], "disallowed_STD3_mapped", [56, 44]], [[127242, 127242], "disallowed_STD3_mapped", [57, 44]], [[127243, 127244], "valid", [], "NV8"], [[127245, 127247], "disallowed"], [[127248, 127248], "disallowed_STD3_mapped", [40, 97, 41]], [[127249, 127249], "disallowed_STD3_mapped", [40, 98, 41]], [[127250, 127250], "disallowed_STD3_mapped", [40, 99, 41]], [[127251, 127251], "disallowed_STD3_mapped", [40, 100, 41]], [[127252, 127252], "disallowed_STD3_mapped", [40, 101, 41]], [[127253, 127253], "disallowed_STD3_mapped", [40, 102, 41]], [[127254, 127254], "disallowed_STD3_mapped", [40, 103, 41]], [[127255, 127255], "disallowed_STD3_mapped", [40, 104, 41]], [[127256, 127256], "disallowed_STD3_mapped", [40, 105, 41]], [[127257, 127257], "disallowed_STD3_mapped", [40, 106, 41]], [[127258, 127258], "disallowed_STD3_mapped", [40, 107, 41]], [[127259, 127259], "disallowed_STD3_mapped", [40, 108, 41]], [[127260, 127260], "disallowed_STD3_mapped", [40, 109, 41]], [[127261, 127261], "disallowed_STD3_mapped", [40, 110, 41]], [[127262, 127262], "disallowed_STD3_mapped", [40, 111, 41]], [[127263, 127263], "disallowed_STD3_mapped", [40, 112, 41]], [[127264, 127264], "disallowed_STD3_mapped", [40, 113, 41]], [[127265, 127265], "disallowed_STD3_mapped", [40, 114, 41]], [[127266, 127266], "disallowed_STD3_mapped", [40, 115, 41]], [[127267, 127267], "disallowed_STD3_mapped", [40, 116, 41]], [[127268, 127268], "disallowed_STD3_mapped", [40, 117, 41]], [[127269, 127269], "disallowed_STD3_mapped", [40, 118, 41]], [[127270, 127270], "disallowed_STD3_mapped", [40, 119, 41]], [[127271, 127271], "disallowed_STD3_mapped", [40, 120, 41]], [[127272, 127272], "disallowed_STD3_mapped", [40, 121, 41]], [[127273, 127273], "disallowed_STD3_mapped", [40, 122, 41]], [[127274, 127274], "mapped", [12308, 115, 12309]], [[127275, 127275], "mapped", [99]], [[127276, 127276], "mapped", [114]], [[127277, 127277], "mapped", [99, 100]], [[127278, 127278], "mapped", [119, 122]], [[127279, 127279], "disallowed"], [[127280, 127280], "mapped", [97]], [[127281, 127281], "mapped", [98]], [[127282, 127282], "mapped", [99]], [[127283, 127283], "mapped", [100]], [[127284, 127284], "mapped", [101]], [[127285, 127285], "mapped", [102]], [[127286, 127286], "mapped", [103]], [[127287, 127287], "mapped", [104]], [[127288, 127288], "mapped", [105]], [[127289, 127289], "mapped", [106]], [[127290, 127290], "mapped", [107]], [[127291, 127291], "mapped", [108]], [[127292, 127292], "mapped", [109]], [[127293, 127293], "mapped", [110]], [[127294, 127294], "mapped", [111]], [[127295, 127295], "mapped", [112]], [[127296, 127296], "mapped", [113]], [[127297, 127297], "mapped", [114]], [[127298, 127298], "mapped", [115]], [[127299, 127299], "mapped", [116]], [[127300, 127300], "mapped", [117]], [[127301, 127301], "mapped", [118]], [[127302, 127302], "mapped", [119]], [[127303, 127303], "mapped", [120]], [[127304, 127304], "mapped", [121]], [[127305, 127305], "mapped", [122]], [[127306, 127306], "mapped", [104, 118]], [[127307, 127307], "mapped", [109, 118]], [[127308, 127308], "mapped", [115, 100]], [[127309, 127309], "mapped", [115, 115]], [[127310, 127310], "mapped", [112, 112, 118]], [[127311, 127311], "mapped", [119, 99]], [[127312, 127318], "valid", [], "NV8"], [[127319, 127319], "valid", [], "NV8"], [[127320, 127326], "valid", [], "NV8"], [[127327, 127327], "valid", [], "NV8"], [[127328, 127337], "valid", [], "NV8"], [[127338, 127338], "mapped", [109, 99]], [[127339, 127339], "mapped", [109, 100]], [[127340, 127343], "disallowed"], [[127344, 127352], "valid", [], "NV8"], [[127353, 127353], "valid", [], "NV8"], [[127354, 127354], "valid", [], "NV8"], [[127355, 127356], "valid", [], "NV8"], [[127357, 127358], "valid", [], "NV8"], [[127359, 127359], "valid", [], "NV8"], [[127360, 127369], "valid", [], "NV8"], [[127370, 127373], "valid", [], "NV8"], [[127374, 127375], "valid", [], "NV8"], [[127376, 127376], "mapped", [100, 106]], [[127377, 127386], "valid", [], "NV8"], [[127387, 127461], "disallowed"], [[127462, 127487], "valid", [], "NV8"], [[127488, 127488], "mapped", [12411, 12363]], [[127489, 127489], "mapped", [12467, 12467]], [[127490, 127490], "mapped", [12469]], [[127491, 127503], "disallowed"], [[127504, 127504], "mapped", [25163]], [[127505, 127505], "mapped", [23383]], [[127506, 127506], "mapped", [21452]], [[127507, 127507], "mapped", [12487]], [[127508, 127508], "mapped", [20108]], [[127509, 127509], "mapped", [22810]], [[127510, 127510], "mapped", [35299]], [[127511, 127511], "mapped", [22825]], [[127512, 127512], "mapped", [20132]], [[127513, 127513], "mapped", [26144]], [[127514, 127514], "mapped", [28961]], [[127515, 127515], "mapped", [26009]], [[127516, 127516], "mapped", [21069]], [[127517, 127517], "mapped", [24460]], [[127518, 127518], "mapped", [20877]], [[127519, 127519], "mapped", [26032]], [[127520, 127520], "mapped", [21021]], [[127521, 127521], "mapped", [32066]], [[127522, 127522], "mapped", [29983]], [[127523, 127523], "mapped", [36009]], [[127524, 127524], "mapped", [22768]], [[127525, 127525], "mapped", [21561]], [[127526, 127526], "mapped", [28436]], [[127527, 127527], "mapped", [25237]], [[127528, 127528], "mapped", [25429]], [[127529, 127529], "mapped", [19968]], [[127530, 127530], "mapped", [19977]], [[127531, 127531], "mapped", [36938]], [[127532, 127532], "mapped", [24038]], [[127533, 127533], "mapped", [20013]], [[127534, 127534], "mapped", [21491]], [[127535, 127535], "mapped", [25351]], [[127536, 127536], "mapped", [36208]], [[127537, 127537], "mapped", [25171]], [[127538, 127538], "mapped", [31105]], [[127539, 127539], "mapped", [31354]], [[127540, 127540], "mapped", [21512]], [[127541, 127541], "mapped", [28288]], [[127542, 127542], "mapped", [26377]], [[127543, 127543], "mapped", [26376]], [[127544, 127544], "mapped", [30003]], [[127545, 127545], "mapped", [21106]], [[127546, 127546], "mapped", [21942]], [[127547, 127551], "disallowed"], [[127552, 127552], "mapped", [12308, 26412, 12309]], [[127553, 127553], "mapped", [12308, 19977, 12309]], [[127554, 127554], "mapped", [12308, 20108, 12309]], [[127555, 127555], "mapped", [12308, 23433, 12309]], [[127556, 127556], "mapped", [12308, 28857, 12309]], [[127557, 127557], "mapped", [12308, 25171, 12309]], [[127558, 127558], "mapped", [12308, 30423, 12309]], [[127559, 127559], "mapped", [12308, 21213, 12309]], [[127560, 127560], "mapped", [12308, 25943, 12309]], [[127561, 127567], "disallowed"], [[127568, 127568], "mapped", [24471]], [[127569, 127569], "mapped", [21487]], [[127570, 127743], "disallowed"], [[127744, 127776], "valid", [], "NV8"], [[127777, 127788], "valid", [], "NV8"], [[127789, 127791], "valid", [], "NV8"], [[127792, 127797], "valid", [], "NV8"], [[127798, 127798], "valid", [], "NV8"], [[127799, 127868], "valid", [], "NV8"], [[127869, 127869], "valid", [], "NV8"], [[127870, 127871], "valid", [], "NV8"], [[127872, 127891], "valid", [], "NV8"], [[127892, 127903], "valid", [], "NV8"], [[127904, 127940], "valid", [], "NV8"], [[127941, 127941], "valid", [], "NV8"], [[127942, 127946], "valid", [], "NV8"], [[127947, 127950], "valid", [], "NV8"], [[127951, 127955], "valid", [], "NV8"], [[127956, 127967], "valid", [], "NV8"], [[127968, 127984], "valid", [], "NV8"], [[127985, 127991], "valid", [], "NV8"], [[127992, 127999], "valid", [], "NV8"], [[128e3, 128062], "valid", [], "NV8"], [[128063, 128063], "valid", [], "NV8"], [[128064, 128064], "valid", [], "NV8"], [[128065, 128065], "valid", [], "NV8"], [[128066, 128247], "valid", [], "NV8"], [[128248, 128248], "valid", [], "NV8"], [[128249, 128252], "valid", [], "NV8"], [[128253, 128254], "valid", [], "NV8"], [[128255, 128255], "valid", [], "NV8"], [[128256, 128317], "valid", [], "NV8"], [[128318, 128319], "valid", [], "NV8"], [[128320, 128323], "valid", [], "NV8"], [[128324, 128330], "valid", [], "NV8"], [[128331, 128335], "valid", [], "NV8"], [[128336, 128359], "valid", [], "NV8"], [[128360, 128377], "valid", [], "NV8"], [[128378, 128378], "disallowed"], [[128379, 128419], "valid", [], "NV8"], [[128420, 128420], "disallowed"], [[128421, 128506], "valid", [], "NV8"], [[128507, 128511], "valid", [], "NV8"], [[128512, 128512], "valid", [], "NV8"], [[128513, 128528], "valid", [], "NV8"], [[128529, 128529], "valid", [], "NV8"], [[128530, 128532], "valid", [], "NV8"], [[128533, 128533], "valid", [], "NV8"], [[128534, 128534], "valid", [], "NV8"], [[128535, 128535], "valid", [], "NV8"], [[128536, 128536], "valid", [], "NV8"], [[128537, 128537], "valid", [], "NV8"], [[128538, 128538], "valid", [], "NV8"], [[128539, 128539], "valid", [], "NV8"], [[128540, 128542], "valid", [], "NV8"], [[128543, 128543], "valid", [], "NV8"], [[128544, 128549], "valid", [], "NV8"], [[128550, 128551], "valid", [], "NV8"], [[128552, 128555], "valid", [], "NV8"], [[128556, 128556], "valid", [], "NV8"], [[128557, 128557], "valid", [], "NV8"], [[128558, 128559], "valid", [], "NV8"], [[128560, 128563], "valid", [], "NV8"], [[128564, 128564], "valid", [], "NV8"], [[128565, 128576], "valid", [], "NV8"], [[128577, 128578], "valid", [], "NV8"], [[128579, 128580], "valid", [], "NV8"], [[128581, 128591], "valid", [], "NV8"], [[128592, 128639], "valid", [], "NV8"], [[128640, 128709], "valid", [], "NV8"], [[128710, 128719], "valid", [], "NV8"], [[128720, 128720], "valid", [], "NV8"], [[128721, 128735], "disallowed"], [[128736, 128748], "valid", [], "NV8"], [[128749, 128751], "disallowed"], [[128752, 128755], "valid", [], "NV8"], [[128756, 128767], "disallowed"], [[128768, 128883], "valid", [], "NV8"], [[128884, 128895], "disallowed"], [[128896, 128980], "valid", [], "NV8"], [[128981, 129023], "disallowed"], [[129024, 129035], "valid", [], "NV8"], [[129036, 129039], "disallowed"], [[129040, 129095], "valid", [], "NV8"], [[129096, 129103], "disallowed"], [[129104, 129113], "valid", [], "NV8"], [[129114, 129119], "disallowed"], [[129120, 129159], "valid", [], "NV8"], [[129160, 129167], "disallowed"], [[129168, 129197], "valid", [], "NV8"], [[129198, 129295], "disallowed"], [[129296, 129304], "valid", [], "NV8"], [[129305, 129407], "disallowed"], [[129408, 129412], "valid", [], "NV8"], [[129413, 129471], "disallowed"], [[129472, 129472], "valid", [], "NV8"], [[129473, 131069], "disallowed"], [[131070, 131071], "disallowed"], [[131072, 173782], "valid"], [[173783, 173823], "disallowed"], [[173824, 177972], "valid"], [[177973, 177983], "disallowed"], [[177984, 178205], "valid"], [[178206, 178207], "disallowed"], [[178208, 183969], "valid"], [[183970, 194559], "disallowed"], [[194560, 194560], "mapped", [20029]], [[194561, 194561], "mapped", [20024]], [[194562, 194562], "mapped", [20033]], [[194563, 194563], "mapped", [131362]], [[194564, 194564], "mapped", [20320]], [[194565, 194565], "mapped", [20398]], [[194566, 194566], "mapped", [20411]], [[194567, 194567], "mapped", [20482]], [[194568, 194568], "mapped", [20602]], [[194569, 194569], "mapped", [20633]], [[194570, 194570], "mapped", [20711]], [[194571, 194571], "mapped", [20687]], [[194572, 194572], "mapped", [13470]], [[194573, 194573], "mapped", [132666]], [[194574, 194574], "mapped", [20813]], [[194575, 194575], "mapped", [20820]], [[194576, 194576], "mapped", [20836]], [[194577, 194577], "mapped", [20855]], [[194578, 194578], "mapped", [132380]], [[194579, 194579], "mapped", [13497]], [[194580, 194580], "mapped", [20839]], [[194581, 194581], "mapped", [20877]], [[194582, 194582], "mapped", [132427]], [[194583, 194583], "mapped", [20887]], [[194584, 194584], "mapped", [20900]], [[194585, 194585], "mapped", [20172]], [[194586, 194586], "mapped", [20908]], [[194587, 194587], "mapped", [20917]], [[194588, 194588], "mapped", [168415]], [[194589, 194589], "mapped", [20981]], [[194590, 194590], "mapped", [20995]], [[194591, 194591], "mapped", [13535]], [[194592, 194592], "mapped", [21051]], [[194593, 194593], "mapped", [21062]], [[194594, 194594], "mapped", [21106]], [[194595, 194595], "mapped", [21111]], [[194596, 194596], "mapped", [13589]], [[194597, 194597], "mapped", [21191]], [[194598, 194598], "mapped", [21193]], [[194599, 194599], "mapped", [21220]], [[194600, 194600], "mapped", [21242]], [[194601, 194601], "mapped", [21253]], [[194602, 194602], "mapped", [21254]], [[194603, 194603], "mapped", [21271]], [[194604, 194604], "mapped", [21321]], [[194605, 194605], "mapped", [21329]], [[194606, 194606], "mapped", [21338]], [[194607, 194607], "mapped", [21363]], [[194608, 194608], "mapped", [21373]], [[194609, 194611], "mapped", [21375]], [[194612, 194612], "mapped", [133676]], [[194613, 194613], "mapped", [28784]], [[194614, 194614], "mapped", [21450]], [[194615, 194615], "mapped", [21471]], [[194616, 194616], "mapped", [133987]], [[194617, 194617], "mapped", [21483]], [[194618, 194618], "mapped", [21489]], [[194619, 194619], "mapped", [21510]], [[194620, 194620], "mapped", [21662]], [[194621, 194621], "mapped", [21560]], [[194622, 194622], "mapped", [21576]], [[194623, 194623], "mapped", [21608]], [[194624, 194624], "mapped", [21666]], [[194625, 194625], "mapped", [21750]], [[194626, 194626], "mapped", [21776]], [[194627, 194627], "mapped", [21843]], [[194628, 194628], "mapped", [21859]], [[194629, 194630], "mapped", [21892]], [[194631, 194631], "mapped", [21913]], [[194632, 194632], "mapped", [21931]], [[194633, 194633], "mapped", [21939]], [[194634, 194634], "mapped", [21954]], [[194635, 194635], "mapped", [22294]], [[194636, 194636], "mapped", [22022]], [[194637, 194637], "mapped", [22295]], [[194638, 194638], "mapped", [22097]], [[194639, 194639], "mapped", [22132]], [[194640, 194640], "mapped", [20999]], [[194641, 194641], "mapped", [22766]], [[194642, 194642], "mapped", [22478]], [[194643, 194643], "mapped", [22516]], [[194644, 194644], "mapped", [22541]], [[194645, 194645], "mapped", [22411]], [[194646, 194646], "mapped", [22578]], [[194647, 194647], "mapped", [22577]], [[194648, 194648], "mapped", [22700]], [[194649, 194649], "mapped", [136420]], [[194650, 194650], "mapped", [22770]], [[194651, 194651], "mapped", [22775]], [[194652, 194652], "mapped", [22790]], [[194653, 194653], "mapped", [22810]], [[194654, 194654], "mapped", [22818]], [[194655, 194655], "mapped", [22882]], [[194656, 194656], "mapped", [136872]], [[194657, 194657], "mapped", [136938]], [[194658, 194658], "mapped", [23020]], [[194659, 194659], "mapped", [23067]], [[194660, 194660], "mapped", [23079]], [[194661, 194661], "mapped", [23e3]], [[194662, 194662], "mapped", [23142]], [[194663, 194663], "mapped", [14062]], [[194664, 194664], "disallowed"], [[194665, 194665], "mapped", [23304]], [[194666, 194667], "mapped", [23358]], [[194668, 194668], "mapped", [137672]], [[194669, 194669], "mapped", [23491]], [[194670, 194670], "mapped", [23512]], [[194671, 194671], "mapped", [23527]], [[194672, 194672], "mapped", [23539]], [[194673, 194673], "mapped", [138008]], [[194674, 194674], "mapped", [23551]], [[194675, 194675], "mapped", [23558]], [[194676, 194676], "disallowed"], [[194677, 194677], "mapped", [23586]], [[194678, 194678], "mapped", [14209]], [[194679, 194679], "mapped", [23648]], [[194680, 194680], "mapped", [23662]], [[194681, 194681], "mapped", [23744]], [[194682, 194682], "mapped", [23693]], [[194683, 194683], "mapped", [138724]], [[194684, 194684], "mapped", [23875]], [[194685, 194685], "mapped", [138726]], [[194686, 194686], "mapped", [23918]], [[194687, 194687], "mapped", [23915]], [[194688, 194688], "mapped", [23932]], [[194689, 194689], "mapped", [24033]], [[194690, 194690], "mapped", [24034]], [[194691, 194691], "mapped", [14383]], [[194692, 194692], "mapped", [24061]], [[194693, 194693], "mapped", [24104]], [[194694, 194694], "mapped", [24125]], [[194695, 194695], "mapped", [24169]], [[194696, 194696], "mapped", [14434]], [[194697, 194697], "mapped", [139651]], [[194698, 194698], "mapped", [14460]], [[194699, 194699], "mapped", [24240]], [[194700, 194700], "mapped", [24243]], [[194701, 194701], "mapped", [24246]], [[194702, 194702], "mapped", [24266]], [[194703, 194703], "mapped", [172946]], [[194704, 194704], "mapped", [24318]], [[194705, 194706], "mapped", [140081]], [[194707, 194707], "mapped", [33281]], [[194708, 194709], "mapped", [24354]], [[194710, 194710], "mapped", [14535]], [[194711, 194711], "mapped", [144056]], [[194712, 194712], "mapped", [156122]], [[194713, 194713], "mapped", [24418]], [[194714, 194714], "mapped", [24427]], [[194715, 194715], "mapped", [14563]], [[194716, 194716], "mapped", [24474]], [[194717, 194717], "mapped", [24525]], [[194718, 194718], "mapped", [24535]], [[194719, 194719], "mapped", [24569]], [[194720, 194720], "mapped", [24705]], [[194721, 194721], "mapped", [14650]], [[194722, 194722], "mapped", [14620]], [[194723, 194723], "mapped", [24724]], [[194724, 194724], "mapped", [141012]], [[194725, 194725], "mapped", [24775]], [[194726, 194726], "mapped", [24904]], [[194727, 194727], "mapped", [24908]], [[194728, 194728], "mapped", [24910]], [[194729, 194729], "mapped", [24908]], [[194730, 194730], "mapped", [24954]], [[194731, 194731], "mapped", [24974]], [[194732, 194732], "mapped", [25010]], [[194733, 194733], "mapped", [24996]], [[194734, 194734], "mapped", [25007]], [[194735, 194735], "mapped", [25054]], [[194736, 194736], "mapped", [25074]], [[194737, 194737], "mapped", [25078]], [[194738, 194738], "mapped", [25104]], [[194739, 194739], "mapped", [25115]], [[194740, 194740], "mapped", [25181]], [[194741, 194741], "mapped", [25265]], [[194742, 194742], "mapped", [25300]], [[194743, 194743], "mapped", [25424]], [[194744, 194744], "mapped", [142092]], [[194745, 194745], "mapped", [25405]], [[194746, 194746], "mapped", [25340]], [[194747, 194747], "mapped", [25448]], [[194748, 194748], "mapped", [25475]], [[194749, 194749], "mapped", [25572]], [[194750, 194750], "mapped", [142321]], [[194751, 194751], "mapped", [25634]], [[194752, 194752], "mapped", [25541]], [[194753, 194753], "mapped", [25513]], [[194754, 194754], "mapped", [14894]], [[194755, 194755], "mapped", [25705]], [[194756, 194756], "mapped", [25726]], [[194757, 194757], "mapped", [25757]], [[194758, 194758], "mapped", [25719]], [[194759, 194759], "mapped", [14956]], [[194760, 194760], "mapped", [25935]], [[194761, 194761], "mapped", [25964]], [[194762, 194762], "mapped", [143370]], [[194763, 194763], "mapped", [26083]], [[194764, 194764], "mapped", [26360]], [[194765, 194765], "mapped", [26185]], [[194766, 194766], "mapped", [15129]], [[194767, 194767], "mapped", [26257]], [[194768, 194768], "mapped", [15112]], [[194769, 194769], "mapped", [15076]], [[194770, 194770], "mapped", [20882]], [[194771, 194771], "mapped", [20885]], [[194772, 194772], "mapped", [26368]], [[194773, 194773], "mapped", [26268]], [[194774, 194774], "mapped", [32941]], [[194775, 194775], "mapped", [17369]], [[194776, 194776], "mapped", [26391]], [[194777, 194777], "mapped", [26395]], [[194778, 194778], "mapped", [26401]], [[194779, 194779], "mapped", [26462]], [[194780, 194780], "mapped", [26451]], [[194781, 194781], "mapped", [144323]], [[194782, 194782], "mapped", [15177]], [[194783, 194783], "mapped", [26618]], [[194784, 194784], "mapped", [26501]], [[194785, 194785], "mapped", [26706]], [[194786, 194786], "mapped", [26757]], [[194787, 194787], "mapped", [144493]], [[194788, 194788], "mapped", [26766]], [[194789, 194789], "mapped", [26655]], [[194790, 194790], "mapped", [26900]], [[194791, 194791], "mapped", [15261]], [[194792, 194792], "mapped", [26946]], [[194793, 194793], "mapped", [27043]], [[194794, 194794], "mapped", [27114]], [[194795, 194795], "mapped", [27304]], [[194796, 194796], "mapped", [145059]], [[194797, 194797], "mapped", [27355]], [[194798, 194798], "mapped", [15384]], [[194799, 194799], "mapped", [27425]], [[194800, 194800], "mapped", [145575]], [[194801, 194801], "mapped", [27476]], [[194802, 194802], "mapped", [15438]], [[194803, 194803], "mapped", [27506]], [[194804, 194804], "mapped", [27551]], [[194805, 194805], "mapped", [27578]], [[194806, 194806], "mapped", [27579]], [[194807, 194807], "mapped", [146061]], [[194808, 194808], "mapped", [138507]], [[194809, 194809], "mapped", [146170]], [[194810, 194810], "mapped", [27726]], [[194811, 194811], "mapped", [146620]], [[194812, 194812], "mapped", [27839]], [[194813, 194813], "mapped", [27853]], [[194814, 194814], "mapped", [27751]], [[194815, 194815], "mapped", [27926]], [[194816, 194816], "mapped", [27966]], [[194817, 194817], "mapped", [28023]], [[194818, 194818], "mapped", [27969]], [[194819, 194819], "mapped", [28009]], [[194820, 194820], "mapped", [28024]], [[194821, 194821], "mapped", [28037]], [[194822, 194822], "mapped", [146718]], [[194823, 194823], "mapped", [27956]], [[194824, 194824], "mapped", [28207]], [[194825, 194825], "mapped", [28270]], [[194826, 194826], "mapped", [15667]], [[194827, 194827], "mapped", [28363]], [[194828, 194828], "mapped", [28359]], [[194829, 194829], "mapped", [147153]], [[194830, 194830], "mapped", [28153]], [[194831, 194831], "mapped", [28526]], [[194832, 194832], "mapped", [147294]], [[194833, 194833], "mapped", [147342]], [[194834, 194834], "mapped", [28614]], [[194835, 194835], "mapped", [28729]], [[194836, 194836], "mapped", [28702]], [[194837, 194837], "mapped", [28699]], [[194838, 194838], "mapped", [15766]], [[194839, 194839], "mapped", [28746]], [[194840, 194840], "mapped", [28797]], [[194841, 194841], "mapped", [28791]], [[194842, 194842], "mapped", [28845]], [[194843, 194843], "mapped", [132389]], [[194844, 194844], "mapped", [28997]], [[194845, 194845], "mapped", [148067]], [[194846, 194846], "mapped", [29084]], [[194847, 194847], "disallowed"], [[194848, 194848], "mapped", [29224]], [[194849, 194849], "mapped", [29237]], [[194850, 194850], "mapped", [29264]], [[194851, 194851], "mapped", [149e3]], [[194852, 194852], "mapped", [29312]], [[194853, 194853], "mapped", [29333]], [[194854, 194854], "mapped", [149301]], [[194855, 194855], "mapped", [149524]], [[194856, 194856], "mapped", [29562]], [[194857, 194857], "mapped", [29579]], [[194858, 194858], "mapped", [16044]], [[194859, 194859], "mapped", [29605]], [[194860, 194861], "mapped", [16056]], [[194862, 194862], "mapped", [29767]], [[194863, 194863], "mapped", [29788]], [[194864, 194864], "mapped", [29809]], [[194865, 194865], "mapped", [29829]], [[194866, 194866], "mapped", [29898]], [[194867, 194867], "mapped", [16155]], [[194868, 194868], "mapped", [29988]], [[194869, 194869], "mapped", [150582]], [[194870, 194870], "mapped", [30014]], [[194871, 194871], "mapped", [150674]], [[194872, 194872], "mapped", [30064]], [[194873, 194873], "mapped", [139679]], [[194874, 194874], "mapped", [30224]], [[194875, 194875], "mapped", [151457]], [[194876, 194876], "mapped", [151480]], [[194877, 194877], "mapped", [151620]], [[194878, 194878], "mapped", [16380]], [[194879, 194879], "mapped", [16392]], [[194880, 194880], "mapped", [30452]], [[194881, 194881], "mapped", [151795]], [[194882, 194882], "mapped", [151794]], [[194883, 194883], "mapped", [151833]], [[194884, 194884], "mapped", [151859]], [[194885, 194885], "mapped", [30494]], [[194886, 194887], "mapped", [30495]], [[194888, 194888], "mapped", [30538]], [[194889, 194889], "mapped", [16441]], [[194890, 194890], "mapped", [30603]], [[194891, 194891], "mapped", [16454]], [[194892, 194892], "mapped", [16534]], [[194893, 194893], "mapped", [152605]], [[194894, 194894], "mapped", [30798]], [[194895, 194895], "mapped", [30860]], [[194896, 194896], "mapped", [30924]], [[194897, 194897], "mapped", [16611]], [[194898, 194898], "mapped", [153126]], [[194899, 194899], "mapped", [31062]], [[194900, 194900], "mapped", [153242]], [[194901, 194901], "mapped", [153285]], [[194902, 194902], "mapped", [31119]], [[194903, 194903], "mapped", [31211]], [[194904, 194904], "mapped", [16687]], [[194905, 194905], "mapped", [31296]], [[194906, 194906], "mapped", [31306]], [[194907, 194907], "mapped", [31311]], [[194908, 194908], "mapped", [153980]], [[194909, 194910], "mapped", [154279]], [[194911, 194911], "disallowed"], [[194912, 194912], "mapped", [16898]], [[194913, 194913], "mapped", [154539]], [[194914, 194914], "mapped", [31686]], [[194915, 194915], "mapped", [31689]], [[194916, 194916], "mapped", [16935]], [[194917, 194917], "mapped", [154752]], [[194918, 194918], "mapped", [31954]], [[194919, 194919], "mapped", [17056]], [[194920, 194920], "mapped", [31976]], [[194921, 194921], "mapped", [31971]], [[194922, 194922], "mapped", [32e3]], [[194923, 194923], "mapped", [155526]], [[194924, 194924], "mapped", [32099]], [[194925, 194925], "mapped", [17153]], [[194926, 194926], "mapped", [32199]], [[194927, 194927], "mapped", [32258]], [[194928, 194928], "mapped", [32325]], [[194929, 194929], "mapped", [17204]], [[194930, 194930], "mapped", [156200]], [[194931, 194931], "mapped", [156231]], [[194932, 194932], "mapped", [17241]], [[194933, 194933], "mapped", [156377]], [[194934, 194934], "mapped", [32634]], [[194935, 194935], "mapped", [156478]], [[194936, 194936], "mapped", [32661]], [[194937, 194937], "mapped", [32762]], [[194938, 194938], "mapped", [32773]], [[194939, 194939], "mapped", [156890]], [[194940, 194940], "mapped", [156963]], [[194941, 194941], "mapped", [32864]], [[194942, 194942], "mapped", [157096]], [[194943, 194943], "mapped", [32880]], [[194944, 194944], "mapped", [144223]], [[194945, 194945], "mapped", [17365]], [[194946, 194946], "mapped", [32946]], [[194947, 194947], "mapped", [33027]], [[194948, 194948], "mapped", [17419]], [[194949, 194949], "mapped", [33086]], [[194950, 194950], "mapped", [23221]], [[194951, 194951], "mapped", [157607]], [[194952, 194952], "mapped", [157621]], [[194953, 194953], "mapped", [144275]], [[194954, 194954], "mapped", [144284]], [[194955, 194955], "mapped", [33281]], [[194956, 194956], "mapped", [33284]], [[194957, 194957], "mapped", [36766]], [[194958, 194958], "mapped", [17515]], [[194959, 194959], "mapped", [33425]], [[194960, 194960], "mapped", [33419]], [[194961, 194961], "mapped", [33437]], [[194962, 194962], "mapped", [21171]], [[194963, 194963], "mapped", [33457]], [[194964, 194964], "mapped", [33459]], [[194965, 194965], "mapped", [33469]], [[194966, 194966], "mapped", [33510]], [[194967, 194967], "mapped", [158524]], [[194968, 194968], "mapped", [33509]], [[194969, 194969], "mapped", [33565]], [[194970, 194970], "mapped", [33635]], [[194971, 194971], "mapped", [33709]], [[194972, 194972], "mapped", [33571]], [[194973, 194973], "mapped", [33725]], [[194974, 194974], "mapped", [33767]], [[194975, 194975], "mapped", [33879]], [[194976, 194976], "mapped", [33619]], [[194977, 194977], "mapped", [33738]], [[194978, 194978], "mapped", [33740]], [[194979, 194979], "mapped", [33756]], [[194980, 194980], "mapped", [158774]], [[194981, 194981], "mapped", [159083]], [[194982, 194982], "mapped", [158933]], [[194983, 194983], "mapped", [17707]], [[194984, 194984], "mapped", [34033]], [[194985, 194985], "mapped", [34035]], [[194986, 194986], "mapped", [34070]], [[194987, 194987], "mapped", [160714]], [[194988, 194988], "mapped", [34148]], [[194989, 194989], "mapped", [159532]], [[194990, 194990], "mapped", [17757]], [[194991, 194991], "mapped", [17761]], [[194992, 194992], "mapped", [159665]], [[194993, 194993], "mapped", [159954]], [[194994, 194994], "mapped", [17771]], [[194995, 194995], "mapped", [34384]], [[194996, 194996], "mapped", [34396]], [[194997, 194997], "mapped", [34407]], [[194998, 194998], "mapped", [34409]], [[194999, 194999], "mapped", [34473]], [[195e3, 195e3], "mapped", [34440]], [[195001, 195001], "mapped", [34574]], [[195002, 195002], "mapped", [34530]], [[195003, 195003], "mapped", [34681]], [[195004, 195004], "mapped", [34600]], [[195005, 195005], "mapped", [34667]], [[195006, 195006], "mapped", [34694]], [[195007, 195007], "disallowed"], [[195008, 195008], "mapped", [34785]], [[195009, 195009], "mapped", [34817]], [[195010, 195010], "mapped", [17913]], [[195011, 195011], "mapped", [34912]], [[195012, 195012], "mapped", [34915]], [[195013, 195013], "mapped", [161383]], [[195014, 195014], "mapped", [35031]], [[195015, 195015], "mapped", [35038]], [[195016, 195016], "mapped", [17973]], [[195017, 195017], "mapped", [35066]], [[195018, 195018], "mapped", [13499]], [[195019, 195019], "mapped", [161966]], [[195020, 195020], "mapped", [162150]], [[195021, 195021], "mapped", [18110]], [[195022, 195022], "mapped", [18119]], [[195023, 195023], "mapped", [35488]], [[195024, 195024], "mapped", [35565]], [[195025, 195025], "mapped", [35722]], [[195026, 195026], "mapped", [35925]], [[195027, 195027], "mapped", [162984]], [[195028, 195028], "mapped", [36011]], [[195029, 195029], "mapped", [36033]], [[195030, 195030], "mapped", [36123]], [[195031, 195031], "mapped", [36215]], [[195032, 195032], "mapped", [163631]], [[195033, 195033], "mapped", [133124]], [[195034, 195034], "mapped", [36299]], [[195035, 195035], "mapped", [36284]], [[195036, 195036], "mapped", [36336]], [[195037, 195037], "mapped", [133342]], [[195038, 195038], "mapped", [36564]], [[195039, 195039], "mapped", [36664]], [[195040, 195040], "mapped", [165330]], [[195041, 195041], "mapped", [165357]], [[195042, 195042], "mapped", [37012]], [[195043, 195043], "mapped", [37105]], [[195044, 195044], "mapped", [37137]], [[195045, 195045], "mapped", [165678]], [[195046, 195046], "mapped", [37147]], [[195047, 195047], "mapped", [37432]], [[195048, 195048], "mapped", [37591]], [[195049, 195049], "mapped", [37592]], [[195050, 195050], "mapped", [37500]], [[195051, 195051], "mapped", [37881]], [[195052, 195052], "mapped", [37909]], [[195053, 195053], "mapped", [166906]], [[195054, 195054], "mapped", [38283]], [[195055, 195055], "mapped", [18837]], [[195056, 195056], "mapped", [38327]], [[195057, 195057], "mapped", [167287]], [[195058, 195058], "mapped", [18918]], [[195059, 195059], "mapped", [38595]], [[195060, 195060], "mapped", [23986]], [[195061, 195061], "mapped", [38691]], [[195062, 195062], "mapped", [168261]], [[195063, 195063], "mapped", [168474]], [[195064, 195064], "mapped", [19054]], [[195065, 195065], "mapped", [19062]], [[195066, 195066], "mapped", [38880]], [[195067, 195067], "mapped", [168970]], [[195068, 195068], "mapped", [19122]], [[195069, 195069], "mapped", [169110]], [[195070, 195071], "mapped", [38923]], [[195072, 195072], "mapped", [38953]], [[195073, 195073], "mapped", [169398]], [[195074, 195074], "mapped", [39138]], [[195075, 195075], "mapped", [19251]], [[195076, 195076], "mapped", [39209]], [[195077, 195077], "mapped", [39335]], [[195078, 195078], "mapped", [39362]], [[195079, 195079], "mapped", [39422]], [[195080, 195080], "mapped", [19406]], [[195081, 195081], "mapped", [170800]], [[195082, 195082], "mapped", [39698]], [[195083, 195083], "mapped", [4e4]], [[195084, 195084], "mapped", [40189]], [[195085, 195085], "mapped", [19662]], [[195086, 195086], "mapped", [19693]], [[195087, 195087], "mapped", [40295]], [[195088, 195088], "mapped", [172238]], [[195089, 195089], "mapped", [19704]], [[195090, 195090], "mapped", [172293]], [[195091, 195091], "mapped", [172558]], [[195092, 195092], "mapped", [172689]], [[195093, 195093], "mapped", [40635]], [[195094, 195094], "mapped", [19798]], [[195095, 195095], "mapped", [40697]], [[195096, 195096], "mapped", [40702]], [[195097, 195097], "mapped", [40709]], [[195098, 195098], "mapped", [40719]], [[195099, 195099], "mapped", [40726]], [[195100, 195100], "mapped", [40763]], [[195101, 195101], "mapped", [173568]], [[195102, 196605], "disallowed"], [[196606, 196607], "disallowed"], [[196608, 262141], "disallowed"], [[262142, 262143], "disallowed"], [[262144, 327677], "disallowed"], [[327678, 327679], "disallowed"], [[327680, 393213], "disallowed"], [[393214, 393215], "disallowed"], [[393216, 458749], "disallowed"], [[458750, 458751], "disallowed"], [[458752, 524285], "disallowed"], [[524286, 524287], "disallowed"], [[524288, 589821], "disallowed"], [[589822, 589823], "disallowed"], [[589824, 655357], "disallowed"], [[655358, 655359], "disallowed"], [[655360, 720893], "disallowed"], [[720894, 720895], "disallowed"], [[720896, 786429], "disallowed"], [[786430, 786431], "disallowed"], [[786432, 851965], "disallowed"], [[851966, 851967], "disallowed"], [[851968, 917501], "disallowed"], [[917502, 917503], "disallowed"], [[917504, 917504], "disallowed"], [[917505, 917505], "disallowed"], [[917506, 917535], "disallowed"], [[917536, 917631], "disallowed"], [[917632, 917759], "disallowed"], [[917760, 917999], "ignored"], [[918e3, 983037], "disallowed"], [[983038, 983039], "disallowed"], [[983040, 1048573], "disallowed"], [[1048574, 1048575], "disallowed"], [[1048576, 1114109], "disallowed"], [[1114110, 1114111], "disallowed"]];
  }
});

// node_modules/.pnpm/tr46@0.0.3/node_modules/tr46/index.js
var require_tr46 = __commonJS2({
  "node_modules/.pnpm/tr46@0.0.3/node_modules/tr46/index.js"(exports2, module2) {
    "use strict";
    var punycode = require("punycode");
    var mappingTable = require_mappingTable();
    var PROCESSING_OPTIONS = {
      TRANSITIONAL: 0,
      NONTRANSITIONAL: 1
    };
    function normalize(str) {
      return str.split("\0").map(function(s) {
        return s.normalize("NFC");
      }).join("\0");
    }
    function findStatus(val) {
      var start = 0;
      var end = mappingTable.length - 1;
      while (start <= end) {
        var mid = Math.floor((start + end) / 2);
        var target = mappingTable[mid];
        if (target[0][0] <= val && target[0][1] >= val) {
          return target;
        } else if (target[0][0] > val) {
          end = mid - 1;
        } else {
          start = mid + 1;
        }
      }
      return null;
    }
    var regexAstralSymbols = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
    function countSymbols(string) {
      return string.replace(regexAstralSymbols, "_").length;
    }
    function mapChars(domain_name, useSTD3, processing_option) {
      var hasError = false;
      var processed = "";
      var len = countSymbols(domain_name);
      for (var i = 0; i < len; ++i) {
        var codePoint = domain_name.codePointAt(i);
        var status = findStatus(codePoint);
        switch (status[1]) {
          case "disallowed":
            hasError = true;
            processed += String.fromCodePoint(codePoint);
            break;
          case "ignored":
            break;
          case "mapped":
            processed += String.fromCodePoint.apply(String, status[2]);
            break;
          case "deviation":
            if (processing_option === PROCESSING_OPTIONS.TRANSITIONAL) {
              processed += String.fromCodePoint.apply(String, status[2]);
            } else {
              processed += String.fromCodePoint(codePoint);
            }
            break;
          case "valid":
            processed += String.fromCodePoint(codePoint);
            break;
          case "disallowed_STD3_mapped":
            if (useSTD3) {
              hasError = true;
              processed += String.fromCodePoint(codePoint);
            } else {
              processed += String.fromCodePoint.apply(String, status[2]);
            }
            break;
          case "disallowed_STD3_valid":
            if (useSTD3) {
              hasError = true;
            }
            processed += String.fromCodePoint(codePoint);
            break;
        }
      }
      return {
        string: processed,
        error: hasError
      };
    }
    var combiningMarksRegex = /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
    function validateLabel(label, processing_option) {
      if (label.substr(0, 4) === "xn--") {
        label = punycode.toUnicode(label);
        processing_option = PROCESSING_OPTIONS.NONTRANSITIONAL;
      }
      var error2 = false;
      if (normalize(label) !== label || label[3] === "-" && label[4] === "-" || label[0] === "-" || label[label.length - 1] === "-" || label.indexOf(".") !== -1 || label.search(combiningMarksRegex) === 0) {
        error2 = true;
      }
      var len = countSymbols(label);
      for (var i = 0; i < len; ++i) {
        var status = findStatus(label.codePointAt(i));
        if (processing === PROCESSING_OPTIONS.TRANSITIONAL && status[1] !== "valid" || processing === PROCESSING_OPTIONS.NONTRANSITIONAL && status[1] !== "valid" && status[1] !== "deviation") {
          error2 = true;
          break;
        }
      }
      return {
        label,
        error: error2
      };
    }
    function processing(domain_name, useSTD3, processing_option) {
      var result = mapChars(domain_name, useSTD3, processing_option);
      result.string = normalize(result.string);
      var labels = result.string.split(".");
      for (var i = 0; i < labels.length; ++i) {
        try {
          var validation = validateLabel(labels[i]);
          labels[i] = validation.label;
          result.error = result.error || validation.error;
        } catch (e) {
          result.error = true;
        }
      }
      return {
        string: labels.join("."),
        error: result.error
      };
    }
    module2.exports.toASCII = function(domain_name, useSTD3, processing_option, verifyDnsLength) {
      var result = processing(domain_name, useSTD3, processing_option);
      var labels = result.string.split(".");
      labels = labels.map(function(l) {
        try {
          return punycode.toASCII(l);
        } catch (e) {
          result.error = true;
          return l;
        }
      });
      if (verifyDnsLength) {
        var total = labels.slice(0, labels.length - 1).join(".").length;
        if (total.length > 253 || total.length === 0) {
          result.error = true;
        }
        for (var i = 0; i < labels.length; ++i) {
          if (labels.length > 63 || labels.length === 0) {
            result.error = true;
            break;
          }
        }
      }
      if (result.error)
        return null;
      return labels.join(".");
    };
    module2.exports.toUnicode = function(domain_name, useSTD3) {
      var result = processing(domain_name, useSTD3, PROCESSING_OPTIONS.NONTRANSITIONAL);
      return {
        domain: result.string,
        error: result.error
      };
    };
    module2.exports.PROCESSING_OPTIONS = PROCESSING_OPTIONS;
  }
});

// node_modules/.pnpm/whatwg-url@5.0.0/node_modules/whatwg-url/lib/url-state-machine.js
var require_url_state_machine = __commonJS2({
  "node_modules/.pnpm/whatwg-url@5.0.0/node_modules/whatwg-url/lib/url-state-machine.js"(exports2, module2) {
    "use strict";
    var punycode = require("punycode");
    var tr46 = require_tr46();
    var specialSchemes = {
      ftp: 21,
      file: null,
      gopher: 70,
      http: 80,
      https: 443,
      ws: 80,
      wss: 443
    };
    var failure = Symbol("failure");
    function countSymbols(str) {
      return punycode.ucs2.decode(str).length;
    }
    function at(input, idx) {
      const c = input[idx];
      return isNaN(c) ? void 0 : String.fromCodePoint(c);
    }
    function isASCIIDigit(c) {
      return c >= 48 && c <= 57;
    }
    function isASCIIAlpha(c) {
      return c >= 65 && c <= 90 || c >= 97 && c <= 122;
    }
    function isASCIIAlphanumeric(c) {
      return isASCIIAlpha(c) || isASCIIDigit(c);
    }
    function isASCIIHex(c) {
      return isASCIIDigit(c) || c >= 65 && c <= 70 || c >= 97 && c <= 102;
    }
    function isSingleDot(buffer) {
      return buffer === "." || buffer.toLowerCase() === "%2e";
    }
    function isDoubleDot(buffer) {
      buffer = buffer.toLowerCase();
      return buffer === ".." || buffer === "%2e." || buffer === ".%2e" || buffer === "%2e%2e";
    }
    function isWindowsDriveLetterCodePoints(cp1, cp2) {
      return isASCIIAlpha(cp1) && (cp2 === 58 || cp2 === 124);
    }
    function isWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && (string[1] === ":" || string[1] === "|");
    }
    function isNormalizedWindowsDriveLetterString(string) {
      return string.length === 2 && isASCIIAlpha(string.codePointAt(0)) && string[1] === ":";
    }
    function containsForbiddenHostCodePoint(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function containsForbiddenHostCodePointExcludingPercent(string) {
      return string.search(/\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/) !== -1;
    }
    function isSpecialScheme(scheme) {
      return specialSchemes[scheme] !== void 0;
    }
    function isSpecial(url) {
      return isSpecialScheme(url.scheme);
    }
    function defaultPort(scheme) {
      return specialSchemes[scheme];
    }
    function percentEncode(c) {
      let hex = c.toString(16).toUpperCase();
      if (hex.length === 1) {
        hex = "0" + hex;
      }
      return "%" + hex;
    }
    function utf8PercentEncode(c) {
      const buf = new Buffer(c);
      let str = "";
      for (let i = 0; i < buf.length; ++i) {
        str += percentEncode(buf[i]);
      }
      return str;
    }
    function utf8PercentDecode(str) {
      const input = new Buffer(str);
      const output = [];
      for (let i = 0; i < input.length; ++i) {
        if (input[i] !== 37) {
          output.push(input[i]);
        } else if (input[i] === 37 && isASCIIHex(input[i + 1]) && isASCIIHex(input[i + 2])) {
          output.push(parseInt(input.slice(i + 1, i + 3).toString(), 16));
          i += 2;
        } else {
          output.push(input[i]);
        }
      }
      return new Buffer(output).toString();
    }
    function isC0ControlPercentEncode(c) {
      return c <= 31 || c > 126;
    }
    var extraPathPercentEncodeSet = /* @__PURE__ */ new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
    function isPathPercentEncode(c) {
      return isC0ControlPercentEncode(c) || extraPathPercentEncodeSet.has(c);
    }
    var extraUserinfoPercentEncodeSet = /* @__PURE__ */ new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
    function isUserinfoPercentEncode(c) {
      return isPathPercentEncode(c) || extraUserinfoPercentEncodeSet.has(c);
    }
    function percentEncodeChar(c, encodeSetPredicate) {
      const cStr = String.fromCodePoint(c);
      if (encodeSetPredicate(c)) {
        return utf8PercentEncode(cStr);
      }
      return cStr;
    }
    function parseIPv4Number(input) {
      let R = 10;
      if (input.length >= 2 && input.charAt(0) === "0" && input.charAt(1).toLowerCase() === "x") {
        input = input.substring(2);
        R = 16;
      } else if (input.length >= 2 && input.charAt(0) === "0") {
        input = input.substring(1);
        R = 8;
      }
      if (input === "") {
        return 0;
      }
      const regex = R === 10 ? /[^0-9]/ : R === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
      if (regex.test(input)) {
        return failure;
      }
      return parseInt(input, R);
    }
    function parseIPv4(input) {
      const parts = input.split(".");
      if (parts[parts.length - 1] === "") {
        if (parts.length > 1) {
          parts.pop();
        }
      }
      if (parts.length > 4) {
        return input;
      }
      const numbers = [];
      for (const part of parts) {
        if (part === "") {
          return input;
        }
        const n = parseIPv4Number(part);
        if (n === failure) {
          return input;
        }
        numbers.push(n);
      }
      for (let i = 0; i < numbers.length - 1; ++i) {
        if (numbers[i] > 255) {
          return failure;
        }
      }
      if (numbers[numbers.length - 1] >= Math.pow(256, 5 - numbers.length)) {
        return failure;
      }
      let ipv4 = numbers.pop();
      let counter = 0;
      for (const n of numbers) {
        ipv4 += n * Math.pow(256, 3 - counter);
        ++counter;
      }
      return ipv4;
    }
    function serializeIPv4(address) {
      let output = "";
      let n = address;
      for (let i = 1; i <= 4; ++i) {
        output = String(n % 256) + output;
        if (i !== 4) {
          output = "." + output;
        }
        n = Math.floor(n / 256);
      }
      return output;
    }
    function parseIPv6(input) {
      const address = [0, 0, 0, 0, 0, 0, 0, 0];
      let pieceIndex = 0;
      let compress = null;
      let pointer = 0;
      input = punycode.ucs2.decode(input);
      if (input[pointer] === 58) {
        if (input[pointer + 1] !== 58) {
          return failure;
        }
        pointer += 2;
        ++pieceIndex;
        compress = pieceIndex;
      }
      while (pointer < input.length) {
        if (pieceIndex === 8) {
          return failure;
        }
        if (input[pointer] === 58) {
          if (compress !== null) {
            return failure;
          }
          ++pointer;
          ++pieceIndex;
          compress = pieceIndex;
          continue;
        }
        let value = 0;
        let length = 0;
        while (length < 4 && isASCIIHex(input[pointer])) {
          value = value * 16 + parseInt(at(input, pointer), 16);
          ++pointer;
          ++length;
        }
        if (input[pointer] === 46) {
          if (length === 0) {
            return failure;
          }
          pointer -= length;
          if (pieceIndex > 6) {
            return failure;
          }
          let numbersSeen = 0;
          while (input[pointer] !== void 0) {
            let ipv4Piece = null;
            if (numbersSeen > 0) {
              if (input[pointer] === 46 && numbersSeen < 4) {
                ++pointer;
              } else {
                return failure;
              }
            }
            if (!isASCIIDigit(input[pointer])) {
              return failure;
            }
            while (isASCIIDigit(input[pointer])) {
              const number = parseInt(at(input, pointer));
              if (ipv4Piece === null) {
                ipv4Piece = number;
              } else if (ipv4Piece === 0) {
                return failure;
              } else {
                ipv4Piece = ipv4Piece * 10 + number;
              }
              if (ipv4Piece > 255) {
                return failure;
              }
              ++pointer;
            }
            address[pieceIndex] = address[pieceIndex] * 256 + ipv4Piece;
            ++numbersSeen;
            if (numbersSeen === 2 || numbersSeen === 4) {
              ++pieceIndex;
            }
          }
          if (numbersSeen !== 4) {
            return failure;
          }
          break;
        } else if (input[pointer] === 58) {
          ++pointer;
          if (input[pointer] === void 0) {
            return failure;
          }
        } else if (input[pointer] !== void 0) {
          return failure;
        }
        address[pieceIndex] = value;
        ++pieceIndex;
      }
      if (compress !== null) {
        let swaps = pieceIndex - compress;
        pieceIndex = 7;
        while (pieceIndex !== 0 && swaps > 0) {
          const temp = address[compress + swaps - 1];
          address[compress + swaps - 1] = address[pieceIndex];
          address[pieceIndex] = temp;
          --pieceIndex;
          --swaps;
        }
      } else if (compress === null && pieceIndex !== 8) {
        return failure;
      }
      return address;
    }
    function serializeIPv6(address) {
      let output = "";
      const seqResult = findLongestZeroSequence(address);
      const compress = seqResult.idx;
      let ignore0 = false;
      for (let pieceIndex = 0; pieceIndex <= 7; ++pieceIndex) {
        if (ignore0 && address[pieceIndex] === 0) {
          continue;
        } else if (ignore0) {
          ignore0 = false;
        }
        if (compress === pieceIndex) {
          const separator = pieceIndex === 0 ? "::" : ":";
          output += separator;
          ignore0 = true;
          continue;
        }
        output += address[pieceIndex].toString(16);
        if (pieceIndex !== 7) {
          output += ":";
        }
      }
      return output;
    }
    function parseHost(input, isSpecialArg) {
      if (input[0] === "[") {
        if (input[input.length - 1] !== "]") {
          return failure;
        }
        return parseIPv6(input.substring(1, input.length - 1));
      }
      if (!isSpecialArg) {
        return parseOpaqueHost(input);
      }
      const domain = utf8PercentDecode(input);
      const asciiDomain = tr46.toASCII(domain, false, tr46.PROCESSING_OPTIONS.NONTRANSITIONAL, false);
      if (asciiDomain === null) {
        return failure;
      }
      if (containsForbiddenHostCodePoint(asciiDomain)) {
        return failure;
      }
      const ipv4Host = parseIPv4(asciiDomain);
      if (typeof ipv4Host === "number" || ipv4Host === failure) {
        return ipv4Host;
      }
      return asciiDomain;
    }
    function parseOpaqueHost(input) {
      if (containsForbiddenHostCodePointExcludingPercent(input)) {
        return failure;
      }
      let output = "";
      const decoded = punycode.ucs2.decode(input);
      for (let i = 0; i < decoded.length; ++i) {
        output += percentEncodeChar(decoded[i], isC0ControlPercentEncode);
      }
      return output;
    }
    function findLongestZeroSequence(arr) {
      let maxIdx = null;
      let maxLen = 1;
      let currStart = null;
      let currLen = 0;
      for (let i = 0; i < arr.length; ++i) {
        if (arr[i] !== 0) {
          if (currLen > maxLen) {
            maxIdx = currStart;
            maxLen = currLen;
          }
          currStart = null;
          currLen = 0;
        } else {
          if (currStart === null) {
            currStart = i;
          }
          ++currLen;
        }
      }
      if (currLen > maxLen) {
        maxIdx = currStart;
        maxLen = currLen;
      }
      return {
        idx: maxIdx,
        len: maxLen
      };
    }
    function serializeHost(host) {
      if (typeof host === "number") {
        return serializeIPv4(host);
      }
      if (host instanceof Array) {
        return "[" + serializeIPv6(host) + "]";
      }
      return host;
    }
    function trimControlChars(url) {
      return url.replace(/^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g, "");
    }
    function trimTabAndNewline(url) {
      return url.replace(/\u0009|\u000A|\u000D/g, "");
    }
    function shortenPath(url) {
      const path = url.path;
      if (path.length === 0) {
        return;
      }
      if (url.scheme === "file" && path.length === 1 && isNormalizedWindowsDriveLetter(path[0])) {
        return;
      }
      path.pop();
    }
    function includesCredentials(url) {
      return url.username !== "" || url.password !== "";
    }
    function cannotHaveAUsernamePasswordPort(url) {
      return url.host === null || url.host === "" || url.cannotBeABaseURL || url.scheme === "file";
    }
    function isNormalizedWindowsDriveLetter(string) {
      return /^[A-Za-z]:$/.test(string);
    }
    function URLStateMachine(input, base, encodingOverride, url, stateOverride) {
      this.pointer = 0;
      this.input = input;
      this.base = base || null;
      this.encodingOverride = encodingOverride || "utf-8";
      this.stateOverride = stateOverride;
      this.url = url;
      this.failure = false;
      this.parseError = false;
      if (!this.url) {
        this.url = {
          scheme: "",
          username: "",
          password: "",
          host: null,
          port: null,
          path: [],
          query: null,
          fragment: null,
          cannotBeABaseURL: false
        };
        const res2 = trimControlChars(this.input);
        if (res2 !== this.input) {
          this.parseError = true;
        }
        this.input = res2;
      }
      const res = trimTabAndNewline(this.input);
      if (res !== this.input) {
        this.parseError = true;
      }
      this.input = res;
      this.state = stateOverride || "scheme start";
      this.buffer = "";
      this.atFlag = false;
      this.arrFlag = false;
      this.passwordTokenSeenFlag = false;
      this.input = punycode.ucs2.decode(this.input);
      for (; this.pointer <= this.input.length; ++this.pointer) {
        const c = this.input[this.pointer];
        const cStr = isNaN(c) ? void 0 : String.fromCodePoint(c);
        const ret = this["parse " + this.state](c, cStr);
        if (!ret) {
          break;
        } else if (ret === failure) {
          this.failure = true;
          break;
        }
      }
    }
    URLStateMachine.prototype["parse scheme start"] = function parseSchemeStart(c, cStr) {
      if (isASCIIAlpha(c)) {
        this.buffer += cStr.toLowerCase();
        this.state = "scheme";
      } else if (!this.stateOverride) {
        this.state = "no scheme";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse scheme"] = function parseScheme(c, cStr) {
      if (isASCIIAlphanumeric(c) || c === 43 || c === 45 || c === 46) {
        this.buffer += cStr.toLowerCase();
      } else if (c === 58) {
        if (this.stateOverride) {
          if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
            return false;
          }
          if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
            return false;
          }
          if ((includesCredentials(this.url) || this.url.port !== null) && this.buffer === "file") {
            return false;
          }
          if (this.url.scheme === "file" && (this.url.host === "" || this.url.host === null)) {
            return false;
          }
        }
        this.url.scheme = this.buffer;
        this.buffer = "";
        if (this.stateOverride) {
          return false;
        }
        if (this.url.scheme === "file") {
          if (this.input[this.pointer + 1] !== 47 || this.input[this.pointer + 2] !== 47) {
            this.parseError = true;
          }
          this.state = "file";
        } else if (isSpecial(this.url) && this.base !== null && this.base.scheme === this.url.scheme) {
          this.state = "special relative or authority";
        } else if (isSpecial(this.url)) {
          this.state = "special authority slashes";
        } else if (this.input[this.pointer + 1] === 47) {
          this.state = "path or authority";
          ++this.pointer;
        } else {
          this.url.cannotBeABaseURL = true;
          this.url.path.push("");
          this.state = "cannot-be-a-base-URL path";
        }
      } else if (!this.stateOverride) {
        this.buffer = "";
        this.state = "no scheme";
        this.pointer = -1;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    URLStateMachine.prototype["parse no scheme"] = function parseNoScheme(c) {
      if (this.base === null || this.base.cannotBeABaseURL && c !== 35) {
        return failure;
      } else if (this.base.cannotBeABaseURL && c === 35) {
        this.url.scheme = this.base.scheme;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.url.cannotBeABaseURL = true;
        this.state = "fragment";
      } else if (this.base.scheme === "file") {
        this.state = "file";
        --this.pointer;
      } else {
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special relative or authority"] = function parseSpecialRelativeOrAuthority(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "relative";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse path or authority"] = function parsePathOrAuthority(c) {
      if (c === 47) {
        this.state = "authority";
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative"] = function parseRelative(c) {
      this.url.scheme = this.base.scheme;
      if (isNaN(c)) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
      } else if (c === 47) {
        this.state = "relative slash";
      } else if (c === 63) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice();
        this.url.query = this.base.query;
        this.url.fragment = "";
        this.state = "fragment";
      } else if (isSpecial(this.url) && c === 92) {
        this.parseError = true;
        this.state = "relative slash";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.url.path = this.base.path.slice(0, this.base.path.length - 1);
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse relative slash"] = function parseRelativeSlash(c) {
      if (isSpecial(this.url) && (c === 47 || c === 92)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "special authority ignore slashes";
      } else if (c === 47) {
        this.state = "authority";
      } else {
        this.url.username = this.base.username;
        this.url.password = this.base.password;
        this.url.host = this.base.host;
        this.url.port = this.base.port;
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority slashes"] = function parseSpecialAuthoritySlashes(c) {
      if (c === 47 && this.input[this.pointer + 1] === 47) {
        this.state = "special authority ignore slashes";
        ++this.pointer;
      } else {
        this.parseError = true;
        this.state = "special authority ignore slashes";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse special authority ignore slashes"] = function parseSpecialAuthorityIgnoreSlashes(c) {
      if (c !== 47 && c !== 92) {
        this.state = "authority";
        --this.pointer;
      } else {
        this.parseError = true;
      }
      return true;
    };
    URLStateMachine.prototype["parse authority"] = function parseAuthority(c, cStr) {
      if (c === 64) {
        this.parseError = true;
        if (this.atFlag) {
          this.buffer = "%40" + this.buffer;
        }
        this.atFlag = true;
        const len = countSymbols(this.buffer);
        for (let pointer = 0; pointer < len; ++pointer) {
          const codePoint = this.buffer.codePointAt(pointer);
          if (codePoint === 58 && !this.passwordTokenSeenFlag) {
            this.passwordTokenSeenFlag = true;
            continue;
          }
          const encodedCodePoints = percentEncodeChar(codePoint, isUserinfoPercentEncode);
          if (this.passwordTokenSeenFlag) {
            this.url.password += encodedCodePoints;
          } else {
            this.url.username += encodedCodePoints;
          }
        }
        this.buffer = "";
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        if (this.atFlag && this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        this.pointer -= countSymbols(this.buffer) + 1;
        this.buffer = "";
        this.state = "host";
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse hostname"] = URLStateMachine.prototype["parse host"] = function parseHostName(c, cStr) {
      if (this.stateOverride && this.url.scheme === "file") {
        --this.pointer;
        this.state = "file host";
      } else if (c === 58 && !this.arrFlag) {
        if (this.buffer === "") {
          this.parseError = true;
          return failure;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "port";
        if (this.stateOverride === "hostname") {
          return false;
        }
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92) {
        --this.pointer;
        if (isSpecial(this.url) && this.buffer === "") {
          this.parseError = true;
          return failure;
        } else if (this.stateOverride && this.buffer === "" && (includesCredentials(this.url) || this.url.port !== null)) {
          this.parseError = true;
          return false;
        }
        const host = parseHost(this.buffer, isSpecial(this.url));
        if (host === failure) {
          return failure;
        }
        this.url.host = host;
        this.buffer = "";
        this.state = "path start";
        if (this.stateOverride) {
          return false;
        }
      } else {
        if (c === 91) {
          this.arrFlag = true;
        } else if (c === 93) {
          this.arrFlag = false;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse port"] = function parsePort(c, cStr) {
      if (isASCIIDigit(c)) {
        this.buffer += cStr;
      } else if (isNaN(c) || c === 47 || c === 63 || c === 35 || isSpecial(this.url) && c === 92 || this.stateOverride) {
        if (this.buffer !== "") {
          const port = parseInt(this.buffer);
          if (port > Math.pow(2, 16) - 1) {
            this.parseError = true;
            return failure;
          }
          this.url.port = port === defaultPort(this.url.scheme) ? null : port;
          this.buffer = "";
        }
        if (this.stateOverride) {
          return false;
        }
        this.state = "path start";
        --this.pointer;
      } else {
        this.parseError = true;
        return failure;
      }
      return true;
    };
    var fileOtherwiseCodePoints = /* @__PURE__ */ new Set([47, 92, 63, 35]);
    URLStateMachine.prototype["parse file"] = function parseFile(c) {
      this.url.scheme = "file";
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file slash";
      } else if (this.base !== null && this.base.scheme === "file") {
        if (isNaN(c)) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
        } else if (c === 63) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = "";
          this.state = "query";
        } else if (c === 35) {
          this.url.host = this.base.host;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
          this.url.fragment = "";
          this.state = "fragment";
        } else {
          if (this.input.length - this.pointer - 1 === 0 || !isWindowsDriveLetterCodePoints(c, this.input[this.pointer + 1]) || this.input.length - this.pointer - 1 >= 2 && !fileOtherwiseCodePoints.has(this.input[this.pointer + 2])) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            shortenPath(this.url);
          } else {
            this.parseError = true;
          }
          this.state = "path";
          --this.pointer;
        }
      } else {
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file slash"] = function parseFileSlash(c) {
      if (c === 47 || c === 92) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "file host";
      } else {
        if (this.base !== null && this.base.scheme === "file") {
          if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
            this.url.path.push(this.base.path[0]);
          } else {
            this.url.host = this.base.host;
          }
        }
        this.state = "path";
        --this.pointer;
      }
      return true;
    };
    URLStateMachine.prototype["parse file host"] = function parseFileHost(c, cStr) {
      if (isNaN(c) || c === 47 || c === 92 || c === 63 || c === 35) {
        --this.pointer;
        if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
          this.parseError = true;
          this.state = "path";
        } else if (this.buffer === "") {
          this.url.host = "";
          if (this.stateOverride) {
            return false;
          }
          this.state = "path start";
        } else {
          let host = parseHost(this.buffer, isSpecial(this.url));
          if (host === failure) {
            return failure;
          }
          if (host === "localhost") {
            host = "";
          }
          this.url.host = host;
          if (this.stateOverride) {
            return false;
          }
          this.buffer = "";
          this.state = "path start";
        }
      } else {
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse path start"] = function parsePathStart(c) {
      if (isSpecial(this.url)) {
        if (c === 92) {
          this.parseError = true;
        }
        this.state = "path";
        if (c !== 47 && c !== 92) {
          --this.pointer;
        }
      } else if (!this.stateOverride && c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (!this.stateOverride && c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else if (c !== void 0) {
        this.state = "path";
        if (c !== 47) {
          --this.pointer;
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse path"] = function parsePath(c) {
      if (isNaN(c) || c === 47 || isSpecial(this.url) && c === 92 || !this.stateOverride && (c === 63 || c === 35)) {
        if (isSpecial(this.url) && c === 92) {
          this.parseError = true;
        }
        if (isDoubleDot(this.buffer)) {
          shortenPath(this.url);
          if (c !== 47 && !(isSpecial(this.url) && c === 92)) {
            this.url.path.push("");
          }
        } else if (isSingleDot(this.buffer) && c !== 47 && !(isSpecial(this.url) && c === 92)) {
          this.url.path.push("");
        } else if (!isSingleDot(this.buffer)) {
          if (this.url.scheme === "file" && this.url.path.length === 0 && isWindowsDriveLetterString(this.buffer)) {
            if (this.url.host !== "" && this.url.host !== null) {
              this.parseError = true;
              this.url.host = "";
            }
            this.buffer = this.buffer[0] + ":";
          }
          this.url.path.push(this.buffer);
        }
        this.buffer = "";
        if (this.url.scheme === "file" && (c === void 0 || c === 63 || c === 35)) {
          while (this.url.path.length > 1 && this.url.path[0] === "") {
            this.parseError = true;
            this.url.path.shift();
          }
        }
        if (c === 63) {
          this.url.query = "";
          this.state = "query";
        }
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += percentEncodeChar(c, isPathPercentEncode);
      }
      return true;
    };
    URLStateMachine.prototype["parse cannot-be-a-base-URL path"] = function parseCannotBeABaseURLPath(c) {
      if (c === 63) {
        this.url.query = "";
        this.state = "query";
      } else if (c === 35) {
        this.url.fragment = "";
        this.state = "fragment";
      } else {
        if (!isNaN(c) && c !== 37) {
          this.parseError = true;
        }
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        if (!isNaN(c)) {
          this.url.path[0] = this.url.path[0] + percentEncodeChar(c, isC0ControlPercentEncode);
        }
      }
      return true;
    };
    URLStateMachine.prototype["parse query"] = function parseQuery(c, cStr) {
      if (isNaN(c) || !this.stateOverride && c === 35) {
        if (!isSpecial(this.url) || this.url.scheme === "ws" || this.url.scheme === "wss") {
          this.encodingOverride = "utf-8";
        }
        const buffer = new Buffer(this.buffer);
        for (let i = 0; i < buffer.length; ++i) {
          if (buffer[i] < 33 || buffer[i] > 126 || buffer[i] === 34 || buffer[i] === 35 || buffer[i] === 60 || buffer[i] === 62) {
            this.url.query += percentEncode(buffer[i]);
          } else {
            this.url.query += String.fromCodePoint(buffer[i]);
          }
        }
        this.buffer = "";
        if (c === 35) {
          this.url.fragment = "";
          this.state = "fragment";
        }
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.buffer += cStr;
      }
      return true;
    };
    URLStateMachine.prototype["parse fragment"] = function parseFragment(c) {
      if (isNaN(c)) {
      } else if (c === 0) {
        this.parseError = true;
      } else {
        if (c === 37 && (!isASCIIHex(this.input[this.pointer + 1]) || !isASCIIHex(this.input[this.pointer + 2]))) {
          this.parseError = true;
        }
        this.url.fragment += percentEncodeChar(c, isC0ControlPercentEncode);
      }
      return true;
    };
    function serializeURL(url, excludeFragment) {
      let output = url.scheme + ":";
      if (url.host !== null) {
        output += "//";
        if (url.username !== "" || url.password !== "") {
          output += url.username;
          if (url.password !== "") {
            output += ":" + url.password;
          }
          output += "@";
        }
        output += serializeHost(url.host);
        if (url.port !== null) {
          output += ":" + url.port;
        }
      } else if (url.host === null && url.scheme === "file") {
        output += "//";
      }
      if (url.cannotBeABaseURL) {
        output += url.path[0];
      } else {
        for (const string of url.path) {
          output += "/" + string;
        }
      }
      if (url.query !== null) {
        output += "?" + url.query;
      }
      if (!excludeFragment && url.fragment !== null) {
        output += "#" + url.fragment;
      }
      return output;
    }
    function serializeOrigin(tuple) {
      let result = tuple.scheme + "://";
      result += serializeHost(tuple.host);
      if (tuple.port !== null) {
        result += ":" + tuple.port;
      }
      return result;
    }
    module2.exports.serializeURL = serializeURL;
    module2.exports.serializeURLOrigin = function(url) {
      switch (url.scheme) {
        case "blob":
          try {
            return module2.exports.serializeURLOrigin(module2.exports.parseURL(url.path[0]));
          } catch (e) {
            return "null";
          }
        case "ftp":
        case "gopher":
        case "http":
        case "https":
        case "ws":
        case "wss":
          return serializeOrigin({
            scheme: url.scheme,
            host: url.host,
            port: url.port
          });
        case "file":
          return "file://";
        default:
          return "null";
      }
    };
    module2.exports.basicURLParse = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      const usm = new URLStateMachine(input, options.baseURL, options.encodingOverride, options.url, options.stateOverride);
      if (usm.failure) {
        return "failure";
      }
      return usm.url;
    };
    module2.exports.setTheUsername = function(url, username) {
      url.username = "";
      const decoded = punycode.ucs2.decode(username);
      for (let i = 0; i < decoded.length; ++i) {
        url.username += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module2.exports.setThePassword = function(url, password) {
      url.password = "";
      const decoded = punycode.ucs2.decode(password);
      for (let i = 0; i < decoded.length; ++i) {
        url.password += percentEncodeChar(decoded[i], isUserinfoPercentEncode);
      }
    };
    module2.exports.serializeHost = serializeHost;
    module2.exports.cannotHaveAUsernamePasswordPort = cannotHaveAUsernamePasswordPort;
    module2.exports.serializeInteger = function(integer) {
      return String(integer);
    };
    module2.exports.parseURL = function(input, options) {
      if (options === void 0) {
        options = {};
      }
      return module2.exports.basicURLParse(input, { baseURL: options.baseURL, encodingOverride: options.encodingOverride });
    };
  }
});

// node_modules/.pnpm/whatwg-url@5.0.0/node_modules/whatwg-url/lib/URL-impl.js
var require_URL_impl = __commonJS2({
  "node_modules/.pnpm/whatwg-url@5.0.0/node_modules/whatwg-url/lib/URL-impl.js"(exports2) {
    "use strict";
    var usm = require_url_state_machine();
    exports2.implementation = class URLImpl {
      constructor(constructorArgs) {
        const url = constructorArgs[0];
        const base = constructorArgs[1];
        let parsedBase = null;
        if (base !== void 0) {
          parsedBase = usm.basicURLParse(base);
          if (parsedBase === "failure") {
            throw new TypeError("Invalid base URL");
          }
        }
        const parsedURL = usm.basicURLParse(url, { baseURL: parsedBase });
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get href() {
        return usm.serializeURL(this._url);
      }
      set href(v) {
        const parsedURL = usm.basicURLParse(v);
        if (parsedURL === "failure") {
          throw new TypeError("Invalid URL");
        }
        this._url = parsedURL;
      }
      get origin() {
        return usm.serializeURLOrigin(this._url);
      }
      get protocol() {
        return this._url.scheme + ":";
      }
      set protocol(v) {
        usm.basicURLParse(v + ":", { url: this._url, stateOverride: "scheme start" });
      }
      get username() {
        return this._url.username;
      }
      set username(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setTheUsername(this._url, v);
      }
      get password() {
        return this._url.password;
      }
      set password(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        usm.setThePassword(this._url, v);
      }
      get host() {
        const url = this._url;
        if (url.host === null) {
          return "";
        }
        if (url.port === null) {
          return usm.serializeHost(url.host);
        }
        return usm.serializeHost(url.host) + ":" + usm.serializeInteger(url.port);
      }
      set host(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "host" });
      }
      get hostname() {
        if (this._url.host === null) {
          return "";
        }
        return usm.serializeHost(this._url.host);
      }
      set hostname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        usm.basicURLParse(v, { url: this._url, stateOverride: "hostname" });
      }
      get port() {
        if (this._url.port === null) {
          return "";
        }
        return usm.serializeInteger(this._url.port);
      }
      set port(v) {
        if (usm.cannotHaveAUsernamePasswordPort(this._url)) {
          return;
        }
        if (v === "") {
          this._url.port = null;
        } else {
          usm.basicURLParse(v, { url: this._url, stateOverride: "port" });
        }
      }
      get pathname() {
        if (this._url.cannotBeABaseURL) {
          return this._url.path[0];
        }
        if (this._url.path.length === 0) {
          return "";
        }
        return "/" + this._url.path.join("/");
      }
      set pathname(v) {
        if (this._url.cannotBeABaseURL) {
          return;
        }
        this._url.path = [];
        usm.basicURLParse(v, { url: this._url, stateOverride: "path start" });
      }
      get search() {
        if (this._url.query === null || this._url.query === "") {
          return "";
        }
        return "?" + this._url.query;
      }
      set search(v) {
        const url = this._url;
        if (v === "") {
          url.query = null;
          return;
        }
        const input = v[0] === "?" ? v.substring(1) : v;
        url.query = "";
        usm.basicURLParse(input, { url, stateOverride: "query" });
      }
      get hash() {
        if (this._url.fragment === null || this._url.fragment === "") {
          return "";
        }
        return "#" + this._url.fragment;
      }
      set hash(v) {
        if (v === "") {
          this._url.fragment = null;
          return;
        }
        const input = v[0] === "#" ? v.substring(1) : v;
        this._url.fragment = "";
        usm.basicURLParse(input, { url: this._url, stateOverride: "fragment" });
      }
      toJSON() {
        return this.href;
      }
    };
  }
});

// node_modules/.pnpm/whatwg-url@5.0.0/node_modules/whatwg-url/lib/URL.js
var require_URL = __commonJS2({
  "node_modules/.pnpm/whatwg-url@5.0.0/node_modules/whatwg-url/lib/URL.js"(exports2, module2) {
    "use strict";
    var conversions = require_lib2();
    var utils = require_utils2();
    var Impl = require_URL_impl();
    var impl = utils.implSymbol;
    function URL2(url) {
      if (!this || this[impl] || !(this instanceof URL2)) {
        throw new TypeError("Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function.");
      }
      if (arguments.length < 1) {
        throw new TypeError("Failed to construct 'URL': 1 argument required, but only " + arguments.length + " present.");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 2; ++i) {
        args[i] = arguments[i];
      }
      args[0] = conversions["USVString"](args[0]);
      if (args[1] !== void 0) {
        args[1] = conversions["USVString"](args[1]);
      }
      module2.exports.setup(this, args);
    }
    URL2.prototype.toJSON = function toJSON() {
      if (!this || !module2.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      const args = [];
      for (let i = 0; i < arguments.length && i < 0; ++i) {
        args[i] = arguments[i];
      }
      return this[impl].toJSON.apply(this[impl], args);
    };
    Object.defineProperty(URL2.prototype, "href", {
      get() {
        return this[impl].href;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].href = V;
      },
      enumerable: true,
      configurable: true
    });
    URL2.prototype.toString = function() {
      if (!this || !module2.exports.is(this)) {
        throw new TypeError("Illegal invocation");
      }
      return this.href;
    };
    Object.defineProperty(URL2.prototype, "origin", {
      get() {
        return this[impl].origin;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "protocol", {
      get() {
        return this[impl].protocol;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].protocol = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "username", {
      get() {
        return this[impl].username;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].username = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "password", {
      get() {
        return this[impl].password;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].password = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "host", {
      get() {
        return this[impl].host;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].host = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "hostname", {
      get() {
        return this[impl].hostname;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].hostname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "port", {
      get() {
        return this[impl].port;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].port = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "pathname", {
      get() {
        return this[impl].pathname;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].pathname = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "search", {
      get() {
        return this[impl].search;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].search = V;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(URL2.prototype, "hash", {
      get() {
        return this[impl].hash;
      },
      set(V) {
        V = conversions["USVString"](V);
        this[impl].hash = V;
      },
      enumerable: true,
      configurable: true
    });
    module2.exports = {
      is(obj) {
        return !!obj && obj[impl] instanceof Impl.implementation;
      },
      create(constructorArgs, privateData) {
        let obj = Object.create(URL2.prototype);
        this.setup(obj, constructorArgs, privateData);
        return obj;
      },
      setup(obj, constructorArgs, privateData) {
        if (!privateData)
          privateData = {};
        privateData.wrapper = obj;
        obj[impl] = new Impl.implementation(constructorArgs, privateData);
        obj[impl][utils.wrapperSymbol] = obj;
      },
      interface: URL2,
      expose: {
        Window: { URL: URL2 },
        Worker: { URL: URL2 }
      }
    };
  }
});

// node_modules/.pnpm/whatwg-url@5.0.0/node_modules/whatwg-url/lib/public-api.js
var require_public_api = __commonJS2({
  "node_modules/.pnpm/whatwg-url@5.0.0/node_modules/whatwg-url/lib/public-api.js"(exports2) {
    "use strict";
    exports2.URL = require_URL().interface;
    exports2.serializeURL = require_url_state_machine().serializeURL;
    exports2.serializeURLOrigin = require_url_state_machine().serializeURLOrigin;
    exports2.basicURLParse = require_url_state_machine().basicURLParse;
    exports2.setTheUsername = require_url_state_machine().setTheUsername;
    exports2.setThePassword = require_url_state_machine().setThePassword;
    exports2.serializeHost = require_url_state_machine().serializeHost;
    exports2.serializeInteger = require_url_state_machine().serializeInteger;
    exports2.parseURL = require_url_state_machine().parseURL;
  }
});

// node_modules/.pnpm/node-fetch@2.6.7/node_modules/node-fetch/lib/index.js
var require_lib3 = __commonJS2({
  "node_modules/.pnpm/node-fetch@2.6.7/node_modules/node-fetch/lib/index.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var Stream = _interopDefault(require("stream"));
    var http = _interopDefault(require("http"));
    var Url = _interopDefault(require("url"));
    var whatwgUrl = _interopDefault(require_public_api());
    var https = _interopDefault(require("https"));
    var zlib = _interopDefault(require("zlib"));
    var Readable = Stream.Readable;
    var BUFFER = Symbol("buffer");
    var TYPE = Symbol("type");
    var Blob = class {
      constructor() {
        this[TYPE] = "";
        const blobParts = arguments[0];
        const options = arguments[1];
        const buffers = [];
        let size = 0;
        if (blobParts) {
          const a = blobParts;
          const length = Number(a.length);
          for (let i = 0; i < length; i++) {
            const element = a[i];
            let buffer;
            if (element instanceof Buffer) {
              buffer = element;
            } else if (ArrayBuffer.isView(element)) {
              buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
            } else if (element instanceof ArrayBuffer) {
              buffer = Buffer.from(element);
            } else if (element instanceof Blob) {
              buffer = element[BUFFER];
            } else {
              buffer = Buffer.from(typeof element === "string" ? element : String(element));
            }
            size += buffer.length;
            buffers.push(buffer);
          }
        }
        this[BUFFER] = Buffer.concat(buffers);
        let type = options && options.type !== void 0 && String(options.type).toLowerCase();
        if (type && !/[^\u0020-\u007E]/.test(type)) {
          this[TYPE] = type;
        }
      }
      get size() {
        return this[BUFFER].length;
      }
      get type() {
        return this[TYPE];
      }
      text() {
        return Promise.resolve(this[BUFFER].toString());
      }
      arrayBuffer() {
        const buf = this[BUFFER];
        const ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        return Promise.resolve(ab);
      }
      stream() {
        const readable = new Readable();
        readable._read = function() {
        };
        readable.push(this[BUFFER]);
        readable.push(null);
        return readable;
      }
      toString() {
        return "[object Blob]";
      }
      slice() {
        const size = this.size;
        const start = arguments[0];
        const end = arguments[1];
        let relativeStart, relativeEnd;
        if (start === void 0) {
          relativeStart = 0;
        } else if (start < 0) {
          relativeStart = Math.max(size + start, 0);
        } else {
          relativeStart = Math.min(start, size);
        }
        if (end === void 0) {
          relativeEnd = size;
        } else if (end < 0) {
          relativeEnd = Math.max(size + end, 0);
        } else {
          relativeEnd = Math.min(end, size);
        }
        const span = Math.max(relativeEnd - relativeStart, 0);
        const buffer = this[BUFFER];
        const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);
        const blob = new Blob([], { type: arguments[2] });
        blob[BUFFER] = slicedBuffer;
        return blob;
      }
    };
    Object.defineProperties(Blob.prototype, {
      size: { enumerable: true },
      type: { enumerable: true },
      slice: { enumerable: true }
    });
    Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
      value: "Blob",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function FetchError(message, type, systemError) {
      Error.call(this, message);
      this.message = message;
      this.type = type;
      if (systemError) {
        this.code = this.errno = systemError.code;
      }
      Error.captureStackTrace(this, this.constructor);
    }
    FetchError.prototype = Object.create(Error.prototype);
    FetchError.prototype.constructor = FetchError;
    FetchError.prototype.name = "FetchError";
    var convert;
    try {
      convert = require("encoding").convert;
    } catch (e) {
    }
    var INTERNALS = Symbol("Body internals");
    var PassThrough = Stream.PassThrough;
    function Body(body) {
      var _this = this;
      var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$size = _ref.size;
      let size = _ref$size === void 0 ? 0 : _ref$size;
      var _ref$timeout = _ref.timeout;
      let timeout = _ref$timeout === void 0 ? 0 : _ref$timeout;
      if (body == null) {
        body = null;
      } else if (isURLSearchParams(body)) {
        body = Buffer.from(body.toString());
      } else if (isBlob(body))
        ;
      else if (Buffer.isBuffer(body))
        ;
      else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        body = Buffer.from(body);
      } else if (ArrayBuffer.isView(body)) {
        body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
      } else if (body instanceof Stream)
        ;
      else {
        body = Buffer.from(String(body));
      }
      this[INTERNALS] = {
        body,
        disturbed: false,
        error: null
      };
      this.size = size;
      this.timeout = timeout;
      if (body instanceof Stream) {
        body.on("error", function(err) {
          const error2 = err.name === "AbortError" ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, "system", err);
          _this[INTERNALS].error = error2;
        });
      }
    }
    Body.prototype = {
      get body() {
        return this[INTERNALS].body;
      },
      get bodyUsed() {
        return this[INTERNALS].disturbed;
      },
      arrayBuffer() {
        return consumeBody.call(this).then(function(buf) {
          return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);
        });
      },
      blob() {
        let ct = this.headers && this.headers.get("content-type") || "";
        return consumeBody.call(this).then(function(buf) {
          return Object.assign(new Blob([], {
            type: ct.toLowerCase()
          }), {
            [BUFFER]: buf
          });
        });
      },
      json() {
        var _this2 = this;
        return consumeBody.call(this).then(function(buffer) {
          try {
            return JSON.parse(buffer.toString());
          } catch (err) {
            return Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, "invalid-json"));
          }
        });
      },
      text() {
        return consumeBody.call(this).then(function(buffer) {
          return buffer.toString();
        });
      },
      buffer() {
        return consumeBody.call(this);
      },
      textConverted() {
        var _this3 = this;
        return consumeBody.call(this).then(function(buffer) {
          return convertBody(buffer, _this3.headers);
        });
      }
    };
    Object.defineProperties(Body.prototype, {
      body: { enumerable: true },
      bodyUsed: { enumerable: true },
      arrayBuffer: { enumerable: true },
      blob: { enumerable: true },
      json: { enumerable: true },
      text: { enumerable: true }
    });
    Body.mixIn = function(proto) {
      for (const name of Object.getOwnPropertyNames(Body.prototype)) {
        if (!(name in proto)) {
          const desc = Object.getOwnPropertyDescriptor(Body.prototype, name);
          Object.defineProperty(proto, name, desc);
        }
      }
    };
    function consumeBody() {
      var _this4 = this;
      if (this[INTERNALS].disturbed) {
        return Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));
      }
      this[INTERNALS].disturbed = true;
      if (this[INTERNALS].error) {
        return Body.Promise.reject(this[INTERNALS].error);
      }
      let body = this.body;
      if (body === null) {
        return Body.Promise.resolve(Buffer.alloc(0));
      }
      if (isBlob(body)) {
        body = body.stream();
      }
      if (Buffer.isBuffer(body)) {
        return Body.Promise.resolve(body);
      }
      if (!(body instanceof Stream)) {
        return Body.Promise.resolve(Buffer.alloc(0));
      }
      let accum = [];
      let accumBytes = 0;
      let abort = false;
      return new Body.Promise(function(resolve, reject) {
        let resTimeout;
        if (_this4.timeout) {
          resTimeout = setTimeout(function() {
            abort = true;
            reject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, "body-timeout"));
          }, _this4.timeout);
        }
        body.on("error", function(err) {
          if (err.name === "AbortError") {
            abort = true;
            reject(err);
          } else {
            reject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, "system", err));
          }
        });
        body.on("data", function(chunk) {
          if (abort || chunk === null) {
            return;
          }
          if (_this4.size && accumBytes + chunk.length > _this4.size) {
            abort = true;
            reject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, "max-size"));
            return;
          }
          accumBytes += chunk.length;
          accum.push(chunk);
        });
        body.on("end", function() {
          if (abort) {
            return;
          }
          clearTimeout(resTimeout);
          try {
            resolve(Buffer.concat(accum, accumBytes));
          } catch (err) {
            reject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, "system", err));
          }
        });
      });
    }
    function convertBody(buffer, headers) {
      if (typeof convert !== "function") {
        throw new Error("The package `encoding` must be installed to use the textConverted() function");
      }
      const ct = headers.get("content-type");
      let charset = "utf-8";
      let res, str;
      if (ct) {
        res = /charset=([^;]*)/i.exec(ct);
      }
      str = buffer.slice(0, 1024).toString();
      if (!res && str) {
        res = /<meta.+?charset=(['"])(.+?)\1/i.exec(str);
      }
      if (!res && str) {
        res = /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(str);
        if (!res) {
          res = /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(str);
          if (res) {
            res.pop();
          }
        }
        if (res) {
          res = /charset=(.*)/i.exec(res.pop());
        }
      }
      if (!res && str) {
        res = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(str);
      }
      if (res) {
        charset = res.pop();
        if (charset === "gb2312" || charset === "gbk") {
          charset = "gb18030";
        }
      }
      return convert(buffer, "UTF-8", charset).toString();
    }
    function isURLSearchParams(obj) {
      if (typeof obj !== "object" || typeof obj.append !== "function" || typeof obj.delete !== "function" || typeof obj.get !== "function" || typeof obj.getAll !== "function" || typeof obj.has !== "function" || typeof obj.set !== "function") {
        return false;
      }
      return obj.constructor.name === "URLSearchParams" || Object.prototype.toString.call(obj) === "[object URLSearchParams]" || typeof obj.sort === "function";
    }
    function isBlob(obj) {
      return typeof obj === "object" && typeof obj.arrayBuffer === "function" && typeof obj.type === "string" && typeof obj.stream === "function" && typeof obj.constructor === "function" && typeof obj.constructor.name === "string" && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);
    }
    function clone2(instance) {
      let p1, p2;
      let body = instance.body;
      if (instance.bodyUsed) {
        throw new Error("cannot clone body after it is used");
      }
      if (body instanceof Stream && typeof body.getBoundary !== "function") {
        p1 = new PassThrough();
        p2 = new PassThrough();
        body.pipe(p1);
        body.pipe(p2);
        instance[INTERNALS].body = p1;
        body = p2;
      }
      return body;
    }
    function extractContentType(body) {
      if (body === null) {
        return null;
      } else if (typeof body === "string") {
        return "text/plain;charset=UTF-8";
      } else if (isURLSearchParams(body)) {
        return "application/x-www-form-urlencoded;charset=UTF-8";
      } else if (isBlob(body)) {
        return body.type || null;
      } else if (Buffer.isBuffer(body)) {
        return null;
      } else if (Object.prototype.toString.call(body) === "[object ArrayBuffer]") {
        return null;
      } else if (ArrayBuffer.isView(body)) {
        return null;
      } else if (typeof body.getBoundary === "function") {
        return `multipart/form-data;boundary=${body.getBoundary()}`;
      } else if (body instanceof Stream) {
        return null;
      } else {
        return "text/plain;charset=UTF-8";
      }
    }
    function getTotalBytes(instance) {
      const body = instance.body;
      if (body === null) {
        return 0;
      } else if (isBlob(body)) {
        return body.size;
      } else if (Buffer.isBuffer(body)) {
        return body.length;
      } else if (body && typeof body.getLengthSync === "function") {
        if (body._lengthRetrievers && body._lengthRetrievers.length == 0 || body.hasKnownLength && body.hasKnownLength()) {
          return body.getLengthSync();
        }
        return null;
      } else {
        return null;
      }
    }
    function writeToStream(dest, instance) {
      const body = instance.body;
      if (body === null) {
        dest.end();
      } else if (isBlob(body)) {
        body.stream().pipe(dest);
      } else if (Buffer.isBuffer(body)) {
        dest.write(body);
        dest.end();
      } else {
        body.pipe(dest);
      }
    }
    Body.Promise = global.Promise;
    var invalidTokenRegex = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
    var invalidHeaderCharRegex = /[^\t\x20-\x7e\x80-\xff]/;
    function validateName(name) {
      name = `${name}`;
      if (invalidTokenRegex.test(name) || name === "") {
        throw new TypeError(`${name} is not a legal HTTP header name`);
      }
    }
    function validateValue3(value) {
      value = `${value}`;
      if (invalidHeaderCharRegex.test(value)) {
        throw new TypeError(`${value} is not a legal HTTP header value`);
      }
    }
    function find(map, name) {
      name = name.toLowerCase();
      for (const key in map) {
        if (key.toLowerCase() === name) {
          return key;
        }
      }
      return void 0;
    }
    var MAP = Symbol("map");
    var Headers = class {
      constructor() {
        let init = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : void 0;
        this[MAP] = /* @__PURE__ */ Object.create(null);
        if (init instanceof Headers) {
          const rawHeaders = init.raw();
          const headerNames = Object.keys(rawHeaders);
          for (const headerName of headerNames) {
            for (const value of rawHeaders[headerName]) {
              this.append(headerName, value);
            }
          }
          return;
        }
        if (init == null)
          ;
        else if (typeof init === "object") {
          const method = init[Symbol.iterator];
          if (method != null) {
            if (typeof method !== "function") {
              throw new TypeError("Header pairs must be iterable");
            }
            const pairs = [];
            for (const pair of init) {
              if (typeof pair !== "object" || typeof pair[Symbol.iterator] !== "function") {
                throw new TypeError("Each header pair must be iterable");
              }
              pairs.push(Array.from(pair));
            }
            for (const pair of pairs) {
              if (pair.length !== 2) {
                throw new TypeError("Each header pair must be a name/value tuple");
              }
              this.append(pair[0], pair[1]);
            }
          } else {
            for (const key of Object.keys(init)) {
              const value = init[key];
              this.append(key, value);
            }
          }
        } else {
          throw new TypeError("Provided initializer must be an object");
        }
      }
      get(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key === void 0) {
          return null;
        }
        return this[MAP][key].join(", ");
      }
      forEach(callback) {
        let thisArg = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : void 0;
        let pairs = getHeaders(this);
        let i = 0;
        while (i < pairs.length) {
          var _pairs$i = pairs[i];
          const name = _pairs$i[0], value = _pairs$i[1];
          callback.call(thisArg, value, name, this);
          pairs = getHeaders(this);
          i++;
        }
      }
      set(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue3(value);
        const key = find(this[MAP], name);
        this[MAP][key !== void 0 ? key : name] = [value];
      }
      append(name, value) {
        name = `${name}`;
        value = `${value}`;
        validateName(name);
        validateValue3(value);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          this[MAP][key].push(value);
        } else {
          this[MAP][name] = [value];
        }
      }
      has(name) {
        name = `${name}`;
        validateName(name);
        return find(this[MAP], name) !== void 0;
      }
      delete(name) {
        name = `${name}`;
        validateName(name);
        const key = find(this[MAP], name);
        if (key !== void 0) {
          delete this[MAP][key];
        }
      }
      raw() {
        return this[MAP];
      }
      keys() {
        return createHeadersIterator(this, "key");
      }
      values() {
        return createHeadersIterator(this, "value");
      }
      [Symbol.iterator]() {
        return createHeadersIterator(this, "key+value");
      }
    };
    Headers.prototype.entries = Headers.prototype[Symbol.iterator];
    Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
      value: "Headers",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Headers.prototype, {
      get: { enumerable: true },
      forEach: { enumerable: true },
      set: { enumerable: true },
      append: { enumerable: true },
      has: { enumerable: true },
      delete: { enumerable: true },
      keys: { enumerable: true },
      values: { enumerable: true },
      entries: { enumerable: true }
    });
    function getHeaders(headers) {
      let kind = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "key+value";
      const keys2 = Object.keys(headers[MAP]).sort();
      return keys2.map(kind === "key" ? function(k) {
        return k.toLowerCase();
      } : kind === "value" ? function(k) {
        return headers[MAP][k].join(", ");
      } : function(k) {
        return [k.toLowerCase(), headers[MAP][k].join(", ")];
      });
    }
    var INTERNAL = Symbol("internal");
    function createHeadersIterator(target, kind) {
      const iterator = Object.create(HeadersIteratorPrototype);
      iterator[INTERNAL] = {
        target,
        kind,
        index: 0
      };
      return iterator;
    }
    var HeadersIteratorPrototype = Object.setPrototypeOf({
      next() {
        if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {
          throw new TypeError("Value of `this` is not a HeadersIterator");
        }
        var _INTERNAL = this[INTERNAL];
        const target = _INTERNAL.target, kind = _INTERNAL.kind, index = _INTERNAL.index;
        const values = getHeaders(target, kind);
        const len = values.length;
        if (index >= len) {
          return {
            value: void 0,
            done: true
          };
        }
        this[INTERNAL].index = index + 1;
        return {
          value: values[index],
          done: false
        };
      }
    }, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));
    Object.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {
      value: "HeadersIterator",
      writable: false,
      enumerable: false,
      configurable: true
    });
    function exportNodeCompatibleHeaders(headers) {
      const obj = Object.assign({ __proto__: null }, headers[MAP]);
      const hostHeaderKey = find(headers[MAP], "Host");
      if (hostHeaderKey !== void 0) {
        obj[hostHeaderKey] = obj[hostHeaderKey][0];
      }
      return obj;
    }
    function createHeadersLenient(obj) {
      const headers = new Headers();
      for (const name of Object.keys(obj)) {
        if (invalidTokenRegex.test(name)) {
          continue;
        }
        if (Array.isArray(obj[name])) {
          for (const val of obj[name]) {
            if (invalidHeaderCharRegex.test(val)) {
              continue;
            }
            if (headers[MAP][name] === void 0) {
              headers[MAP][name] = [val];
            } else {
              headers[MAP][name].push(val);
            }
          }
        } else if (!invalidHeaderCharRegex.test(obj[name])) {
          headers[MAP][name] = [obj[name]];
        }
      }
      return headers;
    }
    var INTERNALS$1 = Symbol("Response internals");
    var STATUS_CODES = http.STATUS_CODES;
    var Response = class {
      constructor() {
        let body = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;
        let opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        Body.call(this, body, opts);
        const status = opts.status || 200;
        const headers = new Headers(opts.headers);
        if (body != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(body);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        this[INTERNALS$1] = {
          url: opts.url,
          status,
          statusText: opts.statusText || STATUS_CODES[status],
          headers,
          counter: opts.counter
        };
      }
      get url() {
        return this[INTERNALS$1].url || "";
      }
      get status() {
        return this[INTERNALS$1].status;
      }
      get ok() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
      }
      get redirected() {
        return this[INTERNALS$1].counter > 0;
      }
      get statusText() {
        return this[INTERNALS$1].statusText;
      }
      get headers() {
        return this[INTERNALS$1].headers;
      }
      clone() {
        return new Response(clone2(this), {
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected
        });
      }
    };
    Body.mixIn(Response.prototype);
    Object.defineProperties(Response.prototype, {
      url: { enumerable: true },
      status: { enumerable: true },
      ok: { enumerable: true },
      redirected: { enumerable: true },
      statusText: { enumerable: true },
      headers: { enumerable: true },
      clone: { enumerable: true }
    });
    Object.defineProperty(Response.prototype, Symbol.toStringTag, {
      value: "Response",
      writable: false,
      enumerable: false,
      configurable: true
    });
    var INTERNALS$2 = Symbol("Request internals");
    var URL2 = Url.URL || whatwgUrl.URL;
    var parse_url = Url.parse;
    var format_url = Url.format;
    function parseURL(urlStr) {
      if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(urlStr)) {
        urlStr = new URL2(urlStr).toString();
      }
      return parse_url(urlStr);
    }
    var streamDestructionSupported = "destroy" in Stream.Readable.prototype;
    function isRequest(input) {
      return typeof input === "object" && typeof input[INTERNALS$2] === "object";
    }
    function isAbortSignal(signal) {
      const proto = signal && typeof signal === "object" && Object.getPrototypeOf(signal);
      return !!(proto && proto.constructor.name === "AbortSignal");
    }
    var Request = class {
      constructor(input) {
        let init = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
        let parsedURL;
        if (!isRequest(input)) {
          if (input && input.href) {
            parsedURL = parseURL(input.href);
          } else {
            parsedURL = parseURL(`${input}`);
          }
          input = {};
        } else {
          parsedURL = parseURL(input.url);
        }
        let method = init.method || input.method || "GET";
        method = method.toUpperCase();
        if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body");
        }
        let inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone2(input) : null;
        Body.call(this, inputBody, {
          timeout: init.timeout || input.timeout || 0,
          size: init.size || input.size || 0
        });
        const headers = new Headers(init.headers || input.headers || {});
        if (inputBody != null && !headers.has("Content-Type")) {
          const contentType = extractContentType(inputBody);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        let signal = isRequest(input) ? input.signal : null;
        if ("signal" in init)
          signal = init.signal;
        if (signal != null && !isAbortSignal(signal)) {
          throw new TypeError("Expected signal to be an instanceof AbortSignal");
        }
        this[INTERNALS$2] = {
          method,
          redirect: init.redirect || input.redirect || "follow",
          headers,
          parsedURL,
          signal
        };
        this.follow = init.follow !== void 0 ? init.follow : input.follow !== void 0 ? input.follow : 20;
        this.compress = init.compress !== void 0 ? init.compress : input.compress !== void 0 ? input.compress : true;
        this.counter = init.counter || input.counter || 0;
        this.agent = init.agent || input.agent;
      }
      get method() {
        return this[INTERNALS$2].method;
      }
      get url() {
        return format_url(this[INTERNALS$2].parsedURL);
      }
      get headers() {
        return this[INTERNALS$2].headers;
      }
      get redirect() {
        return this[INTERNALS$2].redirect;
      }
      get signal() {
        return this[INTERNALS$2].signal;
      }
      clone() {
        return new Request(this);
      }
    };
    Body.mixIn(Request.prototype);
    Object.defineProperty(Request.prototype, Symbol.toStringTag, {
      value: "Request",
      writable: false,
      enumerable: false,
      configurable: true
    });
    Object.defineProperties(Request.prototype, {
      method: { enumerable: true },
      url: { enumerable: true },
      headers: { enumerable: true },
      redirect: { enumerable: true },
      clone: { enumerable: true },
      signal: { enumerable: true }
    });
    function getNodeRequestOptions(request2) {
      const parsedURL = request2[INTERNALS$2].parsedURL;
      const headers = new Headers(request2[INTERNALS$2].headers);
      if (!headers.has("Accept")) {
        headers.set("Accept", "*/*");
      }
      if (!parsedURL.protocol || !parsedURL.hostname) {
        throw new TypeError("Only absolute URLs are supported");
      }
      if (!/^https?:$/.test(parsedURL.protocol)) {
        throw new TypeError("Only HTTP(S) protocols are supported");
      }
      if (request2.signal && request2.body instanceof Stream.Readable && !streamDestructionSupported) {
        throw new Error("Cancellation of streamed requests with AbortSignal is not supported in node < 8");
      }
      let contentLengthValue = null;
      if (request2.body == null && /^(POST|PUT)$/i.test(request2.method)) {
        contentLengthValue = "0";
      }
      if (request2.body != null) {
        const totalBytes = getTotalBytes(request2);
        if (typeof totalBytes === "number") {
          contentLengthValue = String(totalBytes);
        }
      }
      if (contentLengthValue) {
        headers.set("Content-Length", contentLengthValue);
      }
      if (!headers.has("User-Agent")) {
        headers.set("User-Agent", "node-fetch/1.0 (+https://github.com/bitinn/node-fetch)");
      }
      if (request2.compress && !headers.has("Accept-Encoding")) {
        headers.set("Accept-Encoding", "gzip,deflate");
      }
      let agent = request2.agent;
      if (typeof agent === "function") {
        agent = agent(parsedURL);
      }
      if (!headers.has("Connection") && !agent) {
        headers.set("Connection", "close");
      }
      return Object.assign({}, parsedURL, {
        method: request2.method,
        headers: exportNodeCompatibleHeaders(headers),
        agent
      });
    }
    function AbortError(message) {
      Error.call(this, message);
      this.type = "aborted";
      this.message = message;
      Error.captureStackTrace(this, this.constructor);
    }
    AbortError.prototype = Object.create(Error.prototype);
    AbortError.prototype.constructor = AbortError;
    AbortError.prototype.name = "AbortError";
    var URL$1 = Url.URL || whatwgUrl.URL;
    var PassThrough$1 = Stream.PassThrough;
    var isDomainOrSubdomain = function isDomainOrSubdomain2(destination, original) {
      const orig = new URL$1(original).hostname;
      const dest = new URL$1(destination).hostname;
      return orig === dest || orig[orig.length - dest.length - 1] === "." && orig.endsWith(dest);
    };
    function fetch2(url, opts) {
      if (!fetch2.Promise) {
        throw new Error("native promise missing, set fetch.Promise to your favorite alternative");
      }
      Body.Promise = fetch2.Promise;
      return new fetch2.Promise(function(resolve, reject) {
        const request2 = new Request(url, opts);
        const options = getNodeRequestOptions(request2);
        const send = (options.protocol === "https:" ? https : http).request;
        const signal = request2.signal;
        let response = null;
        const abort = function abort2() {
          let error2 = new AbortError("The user aborted a request.");
          reject(error2);
          if (request2.body && request2.body instanceof Stream.Readable) {
            request2.body.destroy(error2);
          }
          if (!response || !response.body)
            return;
          response.body.emit("error", error2);
        };
        if (signal && signal.aborted) {
          abort();
          return;
        }
        const abortAndFinalize = function abortAndFinalize2() {
          abort();
          finalize();
        };
        const req = send(options);
        let reqTimeout;
        if (signal) {
          signal.addEventListener("abort", abortAndFinalize);
        }
        function finalize() {
          req.abort();
          if (signal)
            signal.removeEventListener("abort", abortAndFinalize);
          clearTimeout(reqTimeout);
        }
        if (request2.timeout) {
          req.once("socket", function(socket) {
            reqTimeout = setTimeout(function() {
              reject(new FetchError(`network timeout at: ${request2.url}`, "request-timeout"));
              finalize();
            }, request2.timeout);
          });
        }
        req.on("error", function(err) {
          reject(new FetchError(`request to ${request2.url} failed, reason: ${err.message}`, "system", err));
          finalize();
        });
        req.on("response", function(res) {
          clearTimeout(reqTimeout);
          const headers = createHeadersLenient(res.headers);
          if (fetch2.isRedirect(res.statusCode)) {
            const location = headers.get("Location");
            let locationURL = null;
            try {
              locationURL = location === null ? null : new URL$1(location, request2.url).toString();
            } catch (err) {
              if (request2.redirect !== "manual") {
                reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
                finalize();
                return;
              }
            }
            switch (request2.redirect) {
              case "error":
                reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request2.url}`, "no-redirect"));
                finalize();
                return;
              case "manual":
                if (locationURL !== null) {
                  try {
                    headers.set("Location", locationURL);
                  } catch (err) {
                    reject(err);
                  }
                }
                break;
              case "follow":
                if (locationURL === null) {
                  break;
                }
                if (request2.counter >= request2.follow) {
                  reject(new FetchError(`maximum redirect reached at: ${request2.url}`, "max-redirect"));
                  finalize();
                  return;
                }
                const requestOpts = {
                  headers: new Headers(request2.headers),
                  follow: request2.follow,
                  counter: request2.counter + 1,
                  agent: request2.agent,
                  compress: request2.compress,
                  method: request2.method,
                  body: request2.body,
                  signal: request2.signal,
                  timeout: request2.timeout,
                  size: request2.size
                };
                if (!isDomainOrSubdomain(request2.url, locationURL)) {
                  for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                    requestOpts.headers.delete(name);
                  }
                }
                if (res.statusCode !== 303 && request2.body && getTotalBytes(request2) === null) {
                  reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
                  finalize();
                  return;
                }
                if (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request2.method === "POST") {
                  requestOpts.method = "GET";
                  requestOpts.body = void 0;
                  requestOpts.headers.delete("content-length");
                }
                resolve(fetch2(new Request(locationURL, requestOpts)));
                finalize();
                return;
            }
          }
          res.once("end", function() {
            if (signal)
              signal.removeEventListener("abort", abortAndFinalize);
          });
          let body = res.pipe(new PassThrough$1());
          const response_options = {
            url: request2.url,
            status: res.statusCode,
            statusText: res.statusMessage,
            headers,
            size: request2.size,
            timeout: request2.timeout,
            counter: request2.counter
          };
          const codings = headers.get("Content-Encoding");
          if (!request2.compress || request2.method === "HEAD" || codings === null || res.statusCode === 204 || res.statusCode === 304) {
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          const zlibOptions = {
            flush: zlib.Z_SYNC_FLUSH,
            finishFlush: zlib.Z_SYNC_FLUSH
          };
          if (codings == "gzip" || codings == "x-gzip") {
            body = body.pipe(zlib.createGunzip(zlibOptions));
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          if (codings == "deflate" || codings == "x-deflate") {
            const raw2 = res.pipe(new PassThrough$1());
            raw2.once("data", function(chunk) {
              if ((chunk[0] & 15) === 8) {
                body = body.pipe(zlib.createInflate());
              } else {
                body = body.pipe(zlib.createInflateRaw());
              }
              response = new Response(body, response_options);
              resolve(response);
            });
            return;
          }
          if (codings == "br" && typeof zlib.createBrotliDecompress === "function") {
            body = body.pipe(zlib.createBrotliDecompress());
            response = new Response(body, response_options);
            resolve(response);
            return;
          }
          response = new Response(body, response_options);
          resolve(response);
        });
        writeToStream(req, request2);
      });
    }
    fetch2.isRedirect = function(code) {
      return code === 301 || code === 302 || code === 303 || code === 307 || code === 308;
    };
    fetch2.Promise = global.Promise;
    module2.exports = exports2 = fetch2;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.default = exports2;
    exports2.Headers = Headers;
    exports2.Request = Request;
    exports2.Response = Response;
    exports2.FetchError = FetchError;
  }
});

// node_modules/.pnpm/isomorphic-fetch@3.0.0/node_modules/isomorphic-fetch/fetch-npm-node.js
var require_fetch_npm_node = __commonJS2({
  "node_modules/.pnpm/isomorphic-fetch@3.0.0/node_modules/isomorphic-fetch/fetch-npm-node.js"(exports2, module2) {
    "use strict";
    var realFetch = require_lib3();
    module2.exports = function(url, options) {
      if (/^\/\//.test(url)) {
        url = "https:" + url;
      }
      return realFetch.call(this, url, options);
    };
    if (!global.fetch) {
      global.fetch = module2.exports;
      global.Response = realFetch.Response;
      global.Headers = realFetch.Headers;
      global.Request = realFetch.Request;
    }
  }
});

// node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/platforms/node_with_fetch.js
var require_node_with_fetch = __commonJS2({
  "node_modules/.pnpm/@upstash+redis@1.10.1/node_modules/@upstash/redis/script/platforms/node_with_fetch.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule)
        return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k in mod2)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k))
            __createBinding(result, mod2, k);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Redis = void 0;
    var core = __importStar(require_redis());
    var http_js_1 = require_http();
    require_fetch_npm_node();
    var Redis2 = class extends core.Redis {
      constructor(configOrRequester) {
        if ("request" in configOrRequester) {
          super(configOrRequester);
          return;
        }
        if (configOrRequester.url.startsWith(" ") || configOrRequester.url.endsWith(" ") || /\r|\n/.test(configOrRequester.url)) {
          console.warn("The redis url contains whitespace or newline, which can cause errors!");
        }
        if (configOrRequester.token.startsWith(" ") || configOrRequester.token.endsWith(" ") || /\r|\n/.test(configOrRequester.token)) {
          console.warn("The redis token contains whitespace or newline, which can cause errors!");
        }
        const client = new http_js_1.HttpClient({
          baseUrl: configOrRequester.url,
          retry: configOrRequester.retry,
          headers: { authorization: `Bearer ${configOrRequester.token}` }
        });
        super(client, {
          automaticDeserialization: configOrRequester.automaticDeserialization
        });
      }
      static fromEnv(config2) {
        if (typeof process?.env === "undefined") {
          throw new Error('Unable to get environment variables, `process.env` is undefined. If you are deploying to cloudflare, please import from "@upstash/redis/cloudflare" instead');
        }
        const url = process?.env["UPSTASH_REDIS_REST_URL"];
        if (!url) {
          throw new Error("Unable to find environment variable: `UPSTASH_REDIS_REST_URL`");
        }
        const token = process?.env["UPSTASH_REDIS_REST_TOKEN"];
        if (!token) {
          throw new Error("Unable to find environment variable: `UPSTASH_REDIS_REST_TOKEN`");
        }
        return new Redis2({ ...config2, url, token });
      }
    };
    exports2.Redis = Redis2;
  }
});

// node_modules/.pnpm/@umijs+preset-umi@4.0.8_f4r72td3b3qpzuqmwffaujekii/node_modules/@umijs/preset-umi/dist/features/apiRoute/utils.js
var require_utils3 = __commonJS2({
  "node_modules/.pnpm/@umijs+preset-umi@4.0.8_f4r72td3b3qpzuqmwffaujekii/node_modules/@umijs/preset-umi/dist/features/apiRoute/utils.js"(exports2, module2) {
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod2) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod2);
    var utils_exports = {};
    __export3(utils_exports, {
      esbuildIgnorePathPrefixPlugin: () => esbuildIgnorePathPrefixPlugin,
      matchApiRoute: () => matchApiRoute2
    });
    module2.exports = __toCommonJS3(utils_exports);
    function esbuildIgnorePathPrefixPlugin() {
      return {
        name: "ignore-path-prefix",
        setup(build) {
          build.onResolve({ filter: /^@fs/ }, (args) => ({
            path: args.path.replace(/^@fs/, "")
          }));
        }
      };
    }
    function matchApiRoute2(apiRoutes2, path) {
      if (path.startsWith("/"))
        path = path.substring(1);
      if (path.startsWith("api/"))
        path = path.substring(4);
      const pathSegments = path.split("/").filter((p) => p !== "");
      if (pathSegments.length === 0 || pathSegments.length === 1 && pathSegments[0] === "api") {
        const route2 = apiRoutes2.find((r) => r.path === "/");
        if (route2)
          return { route: route2, params: {} };
        else
          return void 0;
      }
      const params = {};
      const route = apiRoutes2.find((route2) => {
        const routePathSegments = route2.path.split("/").filter((p) => p !== "");
        if (routePathSegments.length !== pathSegments.length)
          return false;
        for (let i = 0; i < routePathSegments.length; i++) {
          const routePathSegment = routePathSegments[i];
          if (routePathSegment.match(/^\[.*]$/)) {
            params[routePathSegment.substring(1, routePathSegment.length - 1)] = pathSegments[i];
            if (i == routePathSegments.length - 1)
              return true;
            continue;
          }
          if (routePathSegment !== pathSegments[i])
            return false;
          if (i == routePathSegments.length - 1)
            return true;
        }
      });
      if (route)
        return { route, params };
    }
  }
});

// node_modules/.pnpm/@umijs+preset-umi@4.0.8_f4r72td3b3qpzuqmwffaujekii/node_modules/@umijs/preset-umi/dist/features/apiRoute/request.js
var require_request3 = __commonJS2({
  "node_modules/.pnpm/@umijs+preset-umi@4.0.8_f4r72td3b3qpzuqmwffaujekii/node_modules/@umijs/preset-umi/dist/features/apiRoute/request.js"(exports2, module2) {
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod2) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod2);
    var request_exports = {};
    __export3(request_exports, {
      default: () => request_default,
      parseMultipart: () => parseMultipart,
      parseUrlEncoded: () => parseUrlEncoded
    });
    module2.exports = __toCommonJS3(request_exports);
    var import_utils = require_utils3();
    var UmiApiRequest3 = class {
      constructor(req, apiRoutes2) {
        this._params = {};
        this._body = null;
        this._req = req;
        const m = (0, import_utils.matchApiRoute)(apiRoutes2, this.pathName || "");
        if (m)
          this._params = m.params;
      }
      get params() {
        return this._params;
      }
      get body() {
        return this._body;
      }
      get headers() {
        return this._req.headers;
      }
      get method() {
        return this._req.method;
      }
      get query() {
        var _a3, _b2;
        return ((_b2 = (_a3 = this._req.url) == null ? void 0 : _a3.split("?")[1]) == null ? void 0 : _b2.split("&").reduce((acc, cur) => {
          const [key, value] = cur.split("=");
          const k = acc[key];
          if (k) {
            if (k instanceof Array) {
              k.push(value);
            } else {
              acc[key] = [k, value];
            }
          } else {
            acc[key] = value;
          }
          return acc;
        }, {})) || {};
      }
      get cookies() {
        var _a3;
        return (_a3 = this._req.headers.cookie) == null ? void 0 : _a3.split(";").reduce((acc, cur) => {
          const [key, value] = cur.split("=");
          acc[key.trim()] = value;
          return acc;
        }, {});
      }
      get url() {
        return this._req.url;
      }
      get pathName() {
        var _a3;
        return (_a3 = this._req.url) == null ? void 0 : _a3.split("?")[0];
      }
      readBody() {
        if (this._req.headers["content-length"] === "0") {
          return Promise.resolve();
        }
        return new Promise((resolve, reject) => {
          let body = [];
          this._req.on("data", (chunk) => {
            body.push(chunk);
          });
          this._req.on("end", () => {
            var _a3, _b2;
            const bodyBuffer = Buffer.concat(body);
            switch ((_a3 = this._req.headers["content-type"]) == null ? void 0 : _a3.split(";")[0]) {
              case "application/json":
                try {
                  this._body = JSON.parse(bodyBuffer.toString());
                } catch (e) {
                  this._body = body;
                }
                break;
              case "multipart/form-data":
                const boundary = (_b2 = this.headers["content-type"]) == null ? void 0 : _b2.split("boundary=")[1];
                if (!boundary) {
                  this._body = body;
                  break;
                }
                this._body = parseMultipart(bodyBuffer, boundary);
                break;
              case "application/x-www-form-urlencoded":
                this._body = parseUrlEncoded(bodyBuffer.toString());
                break;
              default:
                this._body = body;
                break;
            }
            resolve();
          });
          this._req.on("error", reject);
        });
      }
    };
    function parseMultipart(body, boundary) {
      const hexBoundary = Buffer.from(`--${boundary}`, "utf-8").toString("hex");
      return body.toString("hex").split(hexBoundary).reduce((acc, cur) => {
        var _a3, _b2;
        const [hexMeta, hexValue] = cur.split(Buffer.from("\r\n\r\n").toString("hex"));
        const meta = Buffer.from(hexMeta, "hex").toString("utf-8");
        const name = (_a3 = meta.split('name="')[1]) == null ? void 0 : _a3.split('"')[0];
        if (!name)
          return acc;
        const fileName = (_b2 = meta.split('filename="')[1]) == null ? void 0 : _b2.split('"')[0];
        if (fileName) {
          const fileBufferBeforeTrim = Buffer.from(hexValue, "hex");
          const fileBuffer = fileBufferBeforeTrim.slice(0, fileBufferBeforeTrim.byteLength - 2);
          const contentType = meta.split("Content-Type: ")[1];
          acc[name] = {
            fileName,
            data: fileBuffer,
            contentType
          };
          return acc;
        }
        const valueBufferBeforeTrim = Buffer.from(hexValue, "hex");
        const valueBuffer = valueBufferBeforeTrim.slice(0, valueBufferBeforeTrim.byteLength - 2);
        acc[name] = valueBuffer.toString("utf-8");
        return acc;
      }, {});
    }
    function parseUrlEncoded(body) {
      return body.split("&").reduce((acc, cur) => {
        const [key, value] = cur.split("=");
        acc[key] = decodeURI(value);
        return acc;
      }, {});
    }
    var request_default = UmiApiRequest3;
  }
});

// node_modules/.pnpm/@umijs+preset-umi@4.0.8_f4r72td3b3qpzuqmwffaujekii/node_modules/@umijs/preset-umi/dist/features/apiRoute/response.js
var require_response2 = __commonJS2({
  "node_modules/.pnpm/@umijs+preset-umi@4.0.8_f4r72td3b3qpzuqmwffaujekii/node_modules/@umijs/preset-umi/dist/features/apiRoute/response.js"(exports2, module2) {
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS3 = (mod2) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod2);
    var response_exports = {};
    __export3(response_exports, {
      default: () => response_default
    });
    module2.exports = __toCommonJS3(response_exports);
    var UmiApiResponse3 = class {
      constructor(res) {
        this._res = res;
      }
      status(statusCode) {
        this._res.statusCode = statusCode;
        return this;
      }
      header(key, value) {
        this._res.setHeader(key, value);
        return this;
      }
      setCookie(key, value) {
        this._res.setHeader("Set-Cookie", `${key}=${value}; path=/`);
        return this;
      }
      end(data) {
        this._res.end(data);
        return this;
      }
      text(data) {
        this._res.setHeader("Content-Type", "text/plain; charset=utf-8");
        this._res.end(data);
        return this;
      }
      html(data) {
        this._res.setHeader("Content-Type", "text/html; charset=utf-8");
        this._res.end(data);
        return this;
      }
      json(data) {
        this._res.setHeader("Content-Type", "application/json");
        this._res.end(JSON.stringify(data));
        return this;
      }
    };
    var response_default = UmiApiResponse3;
  }
});

// node_modules/.pnpm/@umijs+preset-umi@4.0.8_f4r72td3b3qpzuqmwffaujekii/node_modules/@umijs/preset-umi/dist/features/apiRoute/index.js
var require_apiRoute = __commonJS2({
  "node_modules/.pnpm/@umijs+preset-umi@4.0.8_f4r72td3b3qpzuqmwffaujekii/node_modules/@umijs/preset-umi/dist/features/apiRoute/index.js"(exports2, module2) {
    var __create3 = Object.create;
    var __defProp3 = Object.defineProperty;
    var __getOwnPropDesc3 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames3 = Object.getOwnPropertyNames;
    var __getProtoOf3 = Object.getPrototypeOf;
    var __hasOwnProp3 = Object.prototype.hasOwnProperty;
    var __export3 = (target, all) => {
      for (var name in all)
        __defProp3(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps3 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames3(from))
          if (!__hasOwnProp3.call(to, key) && key !== except)
            __defProp3(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc3(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM3 = (mod2, isNodeMode, target) => (target = mod2 != null ? __create3(__getProtoOf3(mod2)) : {}, __copyProps3(isNodeMode || !mod2 || !mod2.__esModule ? __defProp3(target, "default", { value: mod2, enumerable: true }) : target, mod2));
    var __toCommonJS3 = (mod2) => __copyProps3(__defProp3({}, "__esModule", { value: true }), mod2);
    var apiRoute_exports = {};
    __export3(apiRoute_exports, {
      UmiApiRequest: () => import_request.default,
      UmiApiResponse: () => import_response.default,
      matchApiRoute: () => import_utils.matchApiRoute
    });
    module2.exports = __toCommonJS3(apiRoute_exports);
    var import_request = __toESM3(require_request3());
    var import_response = __toESM3(require_response2());
    var import_utils = require_utils3();
  }
});

// src/.umi/api/posts/[postId].ts
var postId_exports = {};
__export2(postId_exports, {
  default: () => postId_default2
});
module.exports = __toCommonJS2(postId_exports);

// src/.umi/api/_middlewares.ts
var middlewares_default = async (req, res, next) => {
  next();
};

// src/api/posts/[postId].ts
var import_client = __toESM2(require_client3());
var { Redis } = require_node_with_fetch();
async function postId_default(req, res) {
  let prisma;
  switch (req.method) {
    case "GET":
      const redis = Redis.fromEnv();
      let post = await redis.get("post-" + req.params.postId);
      if (post) {
        res.status(200).json(post);
        return;
      }
      if (!post) {
        prisma = new import_client.PrismaClient();
        post = await prisma.post.findUnique({
          where: { id: +req.params.postId },
          include: { author: true }
        });
        if (post) {
          res.status(200).json(post);
        } else {
          res.status(404).json({ error: "Post not found." });
        }
        console.log("[prisma \u5B58\u5230redis \u4E2D\u7684\u6570\u636E\u662F]", post);
        await redis.set("post-" + req.params.postId, JSON.stringify(post));
        await prisma.$disconnect();
      }
      break;
    default:
      res.status(405).json({ error: "Method not allowed" });
  }
}

// src/.umi/api/posts/[postId].ts
var import_apiRoute = __toESM2(require_apiRoute());
var apiRoutes = [{ "path": "posts/[postId]", "id": "posts/[postId]", "file": "posts/[postId].ts", "absPath": "/posts/[postId]", "__content": `import { UmiApiRequest, UmiApiResponse } from "umi";
import { PrismaClient } from '@prisma/client';
const { Redis } = require("@upstash/redis/with-fetch");

export default async function (req: UmiApiRequest, res: UmiApiResponse) {
  let prisma: PrismaClient;
  switch (req.method) {
    case 'GET': 
      const redis = Redis.fromEnv();

      let post = await redis.get('post-' + req.params.postId);
      if (post) {
        res.status(200).json(post);
        return;
      }
      if (!post) {
        prisma = new PrismaClient();
        post = await prisma.post.findUnique({
          where: { id: +req.params.postId },
          include: { author: true }
        });
        if (post) {
          res.status(200).json(post);
        } else {
          res.status(404).json({ error: 'Post not found.' });
        }
        console.log('[prisma \u5B58\u5230redis \u4E2D\u7684\u6570\u636E\u662F]',post)
        await redis.set('post-' + req.params.postId, JSON.stringify(post));
        // await redis.set('node',5)
        await prisma.$disconnect();
      }
      break;
    default:
      res.status(405).json({ error: 'Method not allowed' })
  }
}
` }, { "path": "posts", "id": "posts/index", "file": "posts/index.ts", "absPath": "/posts", "__content": `import { UmiApiRequest, UmiApiResponse } from "umi";
import { PrismaClient } from '@prisma/client'
import { verifyToken } from "@/utils/jwt";

export default async function (req: UmiApiRequest, res: UmiApiResponse) {
  let prisma: PrismaClient;
  switch (req.method) {
    case 'GET':
      prisma = new PrismaClient();
      const allPosts = await prisma.post.findMany({ include: { author: true } });
      res.status(200).json(allPosts);
      await prisma.$disconnect()
      break;

    case 'POST':
      if (!req.cookies?.token) {
        return res.status(401).json({
          message: 'Unauthorized'
        })
      }
      const authorId = (await verifyToken(req.cookies.token)).id;
      prisma = new PrismaClient();
      const newPost = await prisma.post.create({
        data: {
          title: req.body.title,
          content: req.body.content,
          createdAt: new Date(),
          authorId,
          tags: req.body.tags.join(','),
          imageUrl: req.body.imageUrl
        }
      })
      res.status(200).json(newPost);
      await prisma.$disconnect()
      break;
    default:
      res.status(405).json({ error: 'Method not allowed' })
  }
}
` }, { "path": "register", "id": "register", "file": "register.ts", "absPath": "/register", "__content": `import type { UmiApiRequest, UmiApiResponse } from "umi";
import { PrismaClient } from '@prisma/client'
import bcrypt from 'bcryptjs'
import { signToken } from "@/utils/jwt";
 
export default async function (req: UmiApiRequest, res: UmiApiResponse) {
  switch (req.method) {
 
    // \u5982\u679C\u5BF9\u8FD9\u4E2A\u8DEF\u5F84\u53D1\u8D77 POST \u8BF7\u6C42\uFF0C\u4EE3\u8868\u4ED6\u60F3\u8981\u6CE8\u518C\u4E00\u4E2A\u8D26\u53F7
    case 'POST':
      try {
 
        // \u5EFA\u7ACB\u4E00\u4E2A Prisma \u5BA2\u6237\u7AEF\uFF0C\u4ED6\u53EF\u4EE5\u5E2E\u52A9\u6211\u4EEC\u8FDE\u7EBF\u5230\u6570\u636E\u5E93
        const prisma = new PrismaClient();
        console.log('[req.body]',req.body)
        // \u5728\u6570\u636E\u5E93\u7684 User \u8868\u4E2D\u5EFA\u7ACB\u4E00\u4E2A\u65B0\u7684\u6570\u636E
        const user = await prisma.user.create({
          data: {
            email: req.body.email,
            // \u5BC6\u7801\u662F\u7ECF\u8FC7 bcrypt \u52A0\u5BC6\u7684
            passwordHash: bcrypt.hashSync(req.body.password, 8),
            // name: req.body.name,
            // avatarUrl: req.body.avatarUrl
          }
        });
        console.log('[register result]',user)
        // \u628A\u5EFA\u7ACB\u6210\u529F\u7684\u7528\u6237\u6570\u636E\uFF08\u4E0D\u5305\u542B\u5BC6\u7801\uFF09\u548C JWT \u56DE\u4F20\u7ED9\u524D\u7AEF
        res.status(200)
          .setCookie('token', await signToken(user.id))
          .json({ ...user, passwordHash: undefined })
          console.log('[success 200]')
        // \u5904\u7406\u5B8C\u8BF7\u6C42\u4EE5\u540E\u8BB0\u5F97\u65AD\u5F00\u6570\u636E\u5E93\u94FE\u63A5 
        await prisma.$disconnect();
 
      } catch (e: any) {
 
        // \u5982\u679C\u53D1\u751F\u672A\u9884\u671F\u7684\u9519\u8BEF\uFF0C\u5C06\u5BF9\u5E94\u7684\u9519\u8BEF\u8BF4\u660E\u7684 Prisma \u6587\u6863\u53D1\u7ED9\u7528\u6237
        res.status(500).json({
          result: false,
          message: typeof e.code === 'string' ? 'https://www.prisma.io/docs/reference/api-reference/error-reference#' + e.code.toLowerCase() : e
        })
      }
      break;
    default:
      // \u5982\u679C\u4E0D\u662F POST \u8BF7\u6C42\uFF0C\u4EE3\u8868\u4ED6\u6B63\u5728\u7528\u9519\u8BEF\u7684\u65B9\u5F0F\u8BBF\u95EE\u8FD9\u4E2A API
      res.status(405).json({ error: 'Method not allowed' })
  }
}` }, { "path": "login", "id": "login", "file": "login.ts", "absPath": "/login", "__content": `import { UmiApiRequest, UmiApiResponse } from "umi";
import { PrismaClient } from '@prisma/client'
import bcrypt from "bcryptjs";
import { signToken } from "@/utils/jwt";

export default async function (req: UmiApiRequest, res: UmiApiResponse) {
  switch (req.method) {
    case 'POST':
      try {
        const prisma = new PrismaClient();
        const user = await prisma.user.findUnique({
          where: { email: req.body.email }
        });

        if (!user || !bcrypt.compareSync(req.body.password, user.passwordHash)) {
          return res.status(401).json({
            message: 'Invalid email or password'
          });
        }
        res.status(200)
          .setCookie('token', await signToken(user.id))
          .json({ ...user, passwordHash: undefined });
        await prisma.$disconnect()
      } catch (error: any) {
        res.status(500).json(error);
      }
      break;
    default:
      res.status(405).json({ error: 'Method not allowed' })
  }
}
` }];
var postId_default2 = async (req, res) => {
  const umiReq = new import_apiRoute.UmiApiRequest(req, apiRoutes);
  await umiReq.readBody();
  const umiRes = new import_apiRoute.UmiApiResponse(res);
  await new Promise((resolve) => middlewares_default(umiReq, umiRes, resolve));
  await postId_default(umiReq, umiRes);
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
/*!
 * @description Recursive object extending
 * @author Viacheslav Lotsmanov <lotsmanov89@gmail.com>
 * @license MIT
 *
 * The MIT License (MIT)
 *
 * Copyright (c) 2013-2018 Viacheslav Lotsmanov
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */
